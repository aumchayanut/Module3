
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084b0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008648  08008648  00018648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008668  08008668  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008670  08008670  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008674  08008674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000090  08008704  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08008704  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113fe  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002005  00000000  00000000  000314ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  000334c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00034470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f50  00000000  00000000  00035390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125c0  00000000  00000000  0004c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000918a5  00000000  00000000  0005e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0145  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004918  00000000  00000000  000f0198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008630 	.word	0x08008630

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08008630 	.word	0x08008630

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	; 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	bf28      	it	cs
 8000c9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca0:	d2ed      	bcs.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_uldivmod>:
 8000dfc:	b953      	cbnz	r3, 8000e14 <__aeabi_uldivmod+0x18>
 8000dfe:	b94a      	cbnz	r2, 8000e14 <__aeabi_uldivmod+0x18>
 8000e00:	2900      	cmp	r1, #0
 8000e02:	bf08      	it	eq
 8000e04:	2800      	cmpeq	r0, #0
 8000e06:	bf1c      	itt	ne
 8000e08:	f04f 31ff 	movne.w	r1, #4294967295
 8000e0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000e10:	f000 b974 	b.w	80010fc <__aeabi_idiv0>
 8000e14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e1c:	f000 f806 	bl	8000e2c <__udivmoddi4>
 8000e20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e28:	b004      	add	sp, #16
 8000e2a:	4770      	bx	lr

08000e2c <__udivmoddi4>:
 8000e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e30:	9d08      	ldr	r5, [sp, #32]
 8000e32:	4604      	mov	r4, r0
 8000e34:	468e      	mov	lr, r1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d14d      	bne.n	8000ed6 <__udivmoddi4+0xaa>
 8000e3a:	428a      	cmp	r2, r1
 8000e3c:	4694      	mov	ip, r2
 8000e3e:	d969      	bls.n	8000f14 <__udivmoddi4+0xe8>
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	b152      	cbz	r2, 8000e5c <__udivmoddi4+0x30>
 8000e46:	fa01 f302 	lsl.w	r3, r1, r2
 8000e4a:	f1c2 0120 	rsb	r1, r2, #32
 8000e4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000e52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e56:	ea41 0e03 	orr.w	lr, r1, r3
 8000e5a:	4094      	lsls	r4, r2
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	0c21      	lsrs	r1, r4, #16
 8000e62:	fbbe f6f8 	udiv	r6, lr, r8
 8000e66:	fa1f f78c 	uxth.w	r7, ip
 8000e6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e72:	fb06 f107 	mul.w	r1, r6, r7
 8000e76:	4299      	cmp	r1, r3
 8000e78:	d90a      	bls.n	8000e90 <__udivmoddi4+0x64>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e82:	f080 811f 	bcs.w	80010c4 <__udivmoddi4+0x298>
 8000e86:	4299      	cmp	r1, r3
 8000e88:	f240 811c 	bls.w	80010c4 <__udivmoddi4+0x298>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e98:	fb08 3310 	mls	r3, r8, r0, r3
 8000e9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea0:	fb00 f707 	mul.w	r7, r0, r7
 8000ea4:	42a7      	cmp	r7, r4
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x92>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb0:	f080 810a 	bcs.w	80010c8 <__udivmoddi4+0x29c>
 8000eb4:	42a7      	cmp	r7, r4
 8000eb6:	f240 8107 	bls.w	80010c8 <__udivmoddi4+0x29c>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	1be4      	subs	r4, r4, r7
 8000ec4:	2600      	movs	r6, #0
 8000ec6:	b11d      	cbz	r5, 8000ed0 <__udivmoddi4+0xa4>
 8000ec8:	40d4      	lsrs	r4, r2
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d909      	bls.n	8000eee <__udivmoddi4+0xc2>
 8000eda:	2d00      	cmp	r5, #0
 8000edc:	f000 80ef 	beq.w	80010be <__udivmoddi4+0x292>
 8000ee0:	2600      	movs	r6, #0
 8000ee2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	fab3 f683 	clz	r6, r3
 8000ef2:	2e00      	cmp	r6, #0
 8000ef4:	d14a      	bne.n	8000f8c <__udivmoddi4+0x160>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d302      	bcc.n	8000f00 <__udivmoddi4+0xd4>
 8000efa:	4282      	cmp	r2, r0
 8000efc:	f200 80f9 	bhi.w	80010f2 <__udivmoddi4+0x2c6>
 8000f00:	1a84      	subs	r4, r0, r2
 8000f02:	eb61 0303 	sbc.w	r3, r1, r3
 8000f06:	2001      	movs	r0, #1
 8000f08:	469e      	mov	lr, r3
 8000f0a:	2d00      	cmp	r5, #0
 8000f0c:	d0e0      	beq.n	8000ed0 <__udivmoddi4+0xa4>
 8000f0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f12:	e7dd      	b.n	8000ed0 <__udivmoddi4+0xa4>
 8000f14:	b902      	cbnz	r2, 8000f18 <__udivmoddi4+0xec>
 8000f16:	deff      	udf	#255	; 0xff
 8000f18:	fab2 f282 	clz	r2, r2
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	f040 8092 	bne.w	8001046 <__udivmoddi4+0x21a>
 8000f22:	eba1 010c 	sub.w	r1, r1, ip
 8000f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f2a:	fa1f fe8c 	uxth.w	lr, ip
 8000f2e:	2601      	movs	r6, #1
 8000f30:	0c20      	lsrs	r0, r4, #16
 8000f32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f36:	fb07 1113 	mls	r1, r7, r3, r1
 8000f3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f3e:	fb0e f003 	mul.w	r0, lr, r3
 8000f42:	4288      	cmp	r0, r1
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x12c>
 8000f46:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f4e:	d202      	bcs.n	8000f56 <__udivmoddi4+0x12a>
 8000f50:	4288      	cmp	r0, r1
 8000f52:	f200 80cb 	bhi.w	80010ec <__udivmoddi4+0x2c0>
 8000f56:	4643      	mov	r3, r8
 8000f58:	1a09      	subs	r1, r1, r0
 8000f5a:	b2a4      	uxth	r4, r4
 8000f5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f60:	fb07 1110 	mls	r1, r7, r0, r1
 8000f64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f68:	fb0e fe00 	mul.w	lr, lr, r0
 8000f6c:	45a6      	cmp	lr, r4
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x156>
 8000f70:	eb1c 0404 	adds.w	r4, ip, r4
 8000f74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f78:	d202      	bcs.n	8000f80 <__udivmoddi4+0x154>
 8000f7a:	45a6      	cmp	lr, r4
 8000f7c:	f200 80bb 	bhi.w	80010f6 <__udivmoddi4+0x2ca>
 8000f80:	4608      	mov	r0, r1
 8000f82:	eba4 040e 	sub.w	r4, r4, lr
 8000f86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f8a:	e79c      	b.n	8000ec6 <__udivmoddi4+0x9a>
 8000f8c:	f1c6 0720 	rsb	r7, r6, #32
 8000f90:	40b3      	lsls	r3, r6
 8000f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000fa2:	431c      	orrs	r4, r3
 8000fa4:	40f9      	lsrs	r1, r7
 8000fa6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000faa:	fa00 f306 	lsl.w	r3, r0, r6
 8000fae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000fb2:	0c20      	lsrs	r0, r4, #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000fbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000fc4:	4288      	cmp	r0, r1
 8000fc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000fca:	d90b      	bls.n	8000fe4 <__udivmoddi4+0x1b8>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fd4:	f080 8088 	bcs.w	80010e8 <__udivmoddi4+0x2bc>
 8000fd8:	4288      	cmp	r0, r1
 8000fda:	f240 8085 	bls.w	80010e8 <__udivmoddi4+0x2bc>
 8000fde:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe2:	4461      	add	r1, ip
 8000fe4:	1a09      	subs	r1, r1, r0
 8000fe6:	b2a4      	uxth	r4, r4
 8000fe8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fec:	fb09 1110 	mls	r1, r9, r0, r1
 8000ff0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ff4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ff8:	458e      	cmp	lr, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x1e2>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f100 34ff 	add.w	r4, r0, #4294967295
 8001004:	d26c      	bcs.n	80010e0 <__udivmoddi4+0x2b4>
 8001006:	458e      	cmp	lr, r1
 8001008:	d96a      	bls.n	80010e0 <__udivmoddi4+0x2b4>
 800100a:	3802      	subs	r0, #2
 800100c:	4461      	add	r1, ip
 800100e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001012:	fba0 9402 	umull	r9, r4, r0, r2
 8001016:	eba1 010e 	sub.w	r1, r1, lr
 800101a:	42a1      	cmp	r1, r4
 800101c:	46c8      	mov	r8, r9
 800101e:	46a6      	mov	lr, r4
 8001020:	d356      	bcc.n	80010d0 <__udivmoddi4+0x2a4>
 8001022:	d053      	beq.n	80010cc <__udivmoddi4+0x2a0>
 8001024:	b15d      	cbz	r5, 800103e <__udivmoddi4+0x212>
 8001026:	ebb3 0208 	subs.w	r2, r3, r8
 800102a:	eb61 010e 	sbc.w	r1, r1, lr
 800102e:	fa01 f707 	lsl.w	r7, r1, r7
 8001032:	fa22 f306 	lsr.w	r3, r2, r6
 8001036:	40f1      	lsrs	r1, r6
 8001038:	431f      	orrs	r7, r3
 800103a:	e9c5 7100 	strd	r7, r1, [r5]
 800103e:	2600      	movs	r6, #0
 8001040:	4631      	mov	r1, r6
 8001042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001046:	f1c2 0320 	rsb	r3, r2, #32
 800104a:	40d8      	lsrs	r0, r3
 800104c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001050:	fa21 f303 	lsr.w	r3, r1, r3
 8001054:	4091      	lsls	r1, r2
 8001056:	4301      	orrs	r1, r0
 8001058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800105c:	fa1f fe8c 	uxth.w	lr, ip
 8001060:	fbb3 f0f7 	udiv	r0, r3, r7
 8001064:	fb07 3610 	mls	r6, r7, r0, r3
 8001068:	0c0b      	lsrs	r3, r1, #16
 800106a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800106e:	fb00 f60e 	mul.w	r6, r0, lr
 8001072:	429e      	cmp	r6, r3
 8001074:	fa04 f402 	lsl.w	r4, r4, r2
 8001078:	d908      	bls.n	800108c <__udivmoddi4+0x260>
 800107a:	eb1c 0303 	adds.w	r3, ip, r3
 800107e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001082:	d22f      	bcs.n	80010e4 <__udivmoddi4+0x2b8>
 8001084:	429e      	cmp	r6, r3
 8001086:	d92d      	bls.n	80010e4 <__udivmoddi4+0x2b8>
 8001088:	3802      	subs	r0, #2
 800108a:	4463      	add	r3, ip
 800108c:	1b9b      	subs	r3, r3, r6
 800108e:	b289      	uxth	r1, r1
 8001090:	fbb3 f6f7 	udiv	r6, r3, r7
 8001094:	fb07 3316 	mls	r3, r7, r6, r3
 8001098:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800109c:	fb06 f30e 	mul.w	r3, r6, lr
 80010a0:	428b      	cmp	r3, r1
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0x28a>
 80010a4:	eb1c 0101 	adds.w	r1, ip, r1
 80010a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80010ac:	d216      	bcs.n	80010dc <__udivmoddi4+0x2b0>
 80010ae:	428b      	cmp	r3, r1
 80010b0:	d914      	bls.n	80010dc <__udivmoddi4+0x2b0>
 80010b2:	3e02      	subs	r6, #2
 80010b4:	4461      	add	r1, ip
 80010b6:	1ac9      	subs	r1, r1, r3
 80010b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010bc:	e738      	b.n	8000f30 <__udivmoddi4+0x104>
 80010be:	462e      	mov	r6, r5
 80010c0:	4628      	mov	r0, r5
 80010c2:	e705      	b.n	8000ed0 <__udivmoddi4+0xa4>
 80010c4:	4606      	mov	r6, r0
 80010c6:	e6e3      	b.n	8000e90 <__udivmoddi4+0x64>
 80010c8:	4618      	mov	r0, r3
 80010ca:	e6f8      	b.n	8000ebe <__udivmoddi4+0x92>
 80010cc:	454b      	cmp	r3, r9
 80010ce:	d2a9      	bcs.n	8001024 <__udivmoddi4+0x1f8>
 80010d0:	ebb9 0802 	subs.w	r8, r9, r2
 80010d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010d8:	3801      	subs	r0, #1
 80010da:	e7a3      	b.n	8001024 <__udivmoddi4+0x1f8>
 80010dc:	4646      	mov	r6, r8
 80010de:	e7ea      	b.n	80010b6 <__udivmoddi4+0x28a>
 80010e0:	4620      	mov	r0, r4
 80010e2:	e794      	b.n	800100e <__udivmoddi4+0x1e2>
 80010e4:	4640      	mov	r0, r8
 80010e6:	e7d1      	b.n	800108c <__udivmoddi4+0x260>
 80010e8:	46d0      	mov	r8, sl
 80010ea:	e77b      	b.n	8000fe4 <__udivmoddi4+0x1b8>
 80010ec:	3b02      	subs	r3, #2
 80010ee:	4461      	add	r1, ip
 80010f0:	e732      	b.n	8000f58 <__udivmoddi4+0x12c>
 80010f2:	4630      	mov	r0, r6
 80010f4:	e709      	b.n	8000f0a <__udivmoddi4+0xde>
 80010f6:	4464      	add	r4, ip
 80010f8:	3802      	subs	r0, #2
 80010fa:	e742      	b.n	8000f82 <__udivmoddi4+0x156>

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001104:	b085      	sub	sp, #20
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001108:	f002 fe14 	bl	8003d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 fc9e 	bl	8001a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f000 fed2 	bl	8001eb8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001114:	f000 fd30 	bl	8001b78 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001118:	f000 fdda 	bl	8001cd0 <MX_TIM2_Init>
  MX_DMA_Init();
 800111c:	f000 fea4 	bl	8001e68 <MX_DMA_Init>
  MX_I2C1_Init();
 8001120:	f000 fcfc 	bl	8001b1c <MX_I2C1_Init>
  MX_TIM3_Init();
 8001124:	f000 fe20 	bl	8001d68 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001128:	f000 fe72 	bl	8001e10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

UART2.huart = &huart2;
 800112c:	4b9e      	ldr	r3, [pc, #632]	; (80013a8 <main+0x2a8>)
 800112e:	4a9f      	ldr	r2, [pc, #636]	; (80013ac <main+0x2ac>)
 8001130:	601a      	str	r2, [r3, #0]
UART2.RxLen = 255;
 8001132:	4b9d      	ldr	r3, [pc, #628]	; (80013a8 <main+0x2a8>)
 8001134:	22ff      	movs	r2, #255	; 0xff
 8001136:	80da      	strh	r2, [r3, #6]
UART2.TxLen = 255;
 8001138:	4b9b      	ldr	r3, [pc, #620]	; (80013a8 <main+0x2a8>)
 800113a:	22ff      	movs	r2, #255	; 0xff
 800113c:	809a      	strh	r2, [r3, #4]
UARTInit(&UART2);
 800113e:	489a      	ldr	r0, [pc, #616]	; (80013a8 <main+0x2a8>)
 8001140:	f000 ff66 	bl	8002010 <UARTInit>
UARTResetStart(&UART2);
 8001144:	4898      	ldr	r0, [pc, #608]	; (80013a8 <main+0x2a8>)
 8001146:	f000 ff8b 	bl	8002060 <UARTResetStart>


	PIDinit() ;
 800114a:	f002 f959 	bl	8003400 <PIDinit>

  // start PWM
  HAL_TIM_Base_Start(&htim1);
 800114e:	4898      	ldr	r0, [pc, #608]	; (80013b0 <main+0x2b0>)
 8001150:	f004 fe84 	bl	8005e5c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001154:	2100      	movs	r1, #0
 8001156:	4896      	ldr	r0, [pc, #600]	; (80013b0 <main+0x2b0>)
 8001158:	f004 ff96 	bl	8006088 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800115c:	2104      	movs	r1, #4
 800115e:	4894      	ldr	r0, [pc, #592]	; (80013b0 <main+0x2b0>)
 8001160:	f004 ff92 	bl	8006088 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001164:	2108      	movs	r1, #8
 8001166:	4892      	ldr	r0, [pc, #584]	; (80013b0 <main+0x2b0>)
 8001168:	f004 ff8e 	bl	8006088 <HAL_TIM_PWM_Start>

  // start micros
  HAL_TIM_Base_Start_IT(&htim2);
 800116c:	4891      	ldr	r0, [pc, #580]	; (80013b4 <main+0x2b4>)
 800116e:	f004 fecf 	bl	8005f10 <HAL_TIM_Base_Start_IT>

  // start Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001172:	213c      	movs	r1, #60	; 0x3c
 8001174:	4890      	ldr	r0, [pc, #576]	; (80013b8 <main+0x2b8>)
 8001176:	f005 f8dd 	bl	8006334 <HAL_TIM_Encoder_Start>
//	  Station[8] = 270;
//	  Station[9] = 0;

	  //*************When reach station********************
	  //Open End-eff
	  if (FinishedStation)
 800117a:	4b90      	ldr	r3, [pc, #576]	; (80013bc <main+0x2bc>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d018      	beq.n	80011b4 <main+0xb4>
	  {
		  if (micros() - effTimestamp > 5000000)
 8001182:	f002 fb1f 	bl	80037c4 <micros>
 8001186:	4b8e      	ldr	r3, [pc, #568]	; (80013c0 <main+0x2c0>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	1a84      	subs	r4, r0, r2
 800118e:	eb61 0503 	sbc.w	r5, r1, r3
 8001192:	4b8c      	ldr	r3, [pc, #560]	; (80013c4 <main+0x2c4>)
 8001194:	429c      	cmp	r4, r3
 8001196:	f175 0300 	sbcs.w	r3, r5, #0
 800119a:	d30b      	bcc.n	80011b4 <main+0xb4>
		  {
			  NextStation++;
 800119c:	4b8a      	ldr	r3, [pc, #552]	; (80013c8 <main+0x2c8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <main+0x2c8>)
 80011a6:	701a      	strb	r2, [r3, #0]
			  FinishedStation = 0;
 80011a8:	4b84      	ldr	r3, [pc, #528]	; (80013bc <main+0x2bc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
			  StartMoving = 1;
 80011ae:	4b87      	ldr	r3, [pc, #540]	; (80013cc <main+0x2cc>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  //Get next station
	  FinalPos = Station[GoToStation[NextStation]];
 80011b4:	4b84      	ldr	r3, [pc, #528]	; (80013c8 <main+0x2c8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b85      	ldr	r3, [pc, #532]	; (80013d0 <main+0x2d0>)
 80011bc:	5c9b      	ldrb	r3, [r3, r2]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b84      	ldr	r3, [pc, #528]	; (80013d4 <main+0x2d4>)
 80011c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ce:	4b82      	ldr	r3, [pc, #520]	; (80013d8 <main+0x2d8>)
 80011d0:	edc3 7a00 	vstr	s15, [r3]
	  //*****************************************************************
	  if (NextStation >= HowMuchStation && StartMoving)
 80011d4:	4b7c      	ldr	r3, [pc, #496]	; (80013c8 <main+0x2c8>)
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	4b80      	ldr	r3, [pc, #512]	; (80013dc <main+0x2dc>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d309      	bcc.n	80011f4 <main+0xf4>
 80011e0:	4b7a      	ldr	r3, [pc, #488]	; (80013cc <main+0x2cc>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <main+0xf4>
	  {
//		  NextStation = 0;
		  FinishedTask = 1;
 80011e8:	4b7d      	ldr	r3, [pc, #500]	; (80013e0 <main+0x2e0>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
		  StartMoving = 0;
 80011ee:	4b77      	ldr	r3, [pc, #476]	; (80013cc <main+0x2cc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
	  }
//***********General********************************
	  ButtonBuffer[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80011f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f8:	487a      	ldr	r0, [pc, #488]	; (80013e4 <main+0x2e4>)
 80011fa:	f003 fcc9 	bl	8004b90 <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4b79      	ldr	r3, [pc, #484]	; (80013e8 <main+0x2e8>)
 8001204:	701a      	strb	r2, [r3, #0]
	  if (ButtonBuffer[1] == 1 && ButtonBuffer[0]== 0)
 8001206:	4b78      	ldr	r3, [pc, #480]	; (80013e8 <main+0x2e8>)
 8001208:	785b      	ldrb	r3, [r3, #1]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d105      	bne.n	800121a <main+0x11a>
 800120e:	4b76      	ldr	r3, [pc, #472]	; (80013e8 <main+0x2e8>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <main+0x11a>
	  {
		  EndEffWrite();
 8001216:	f000 fec9 	bl	8001fac <EndEffWrite>
	  }
	  ButtonBuffer[1] = ButtonBuffer[0];
 800121a:	4b73      	ldr	r3, [pc, #460]	; (80013e8 <main+0x2e8>)
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	4b72      	ldr	r3, [pc, #456]	; (80013e8 <main+0x2e8>)
 8001220:	705a      	strb	r2, [r3, #1]
	  Degree = htim3.Instance->CNT * 360.0 / 2048.0 ; //Degree unit
 8001222:	4b65      	ldr	r3, [pc, #404]	; (80013b8 <main+0x2b8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f917 	bl	800045c <__aeabi_ui2d>
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4b6e      	ldr	r3, [pc, #440]	; (80013ec <main+0x2ec>)
 8001234:	f7ff f98c 	bl	8000550 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b6a      	ldr	r3, [pc, #424]	; (80013f0 <main+0x2f0>)
 8001246:	f7ff faad 	bl	80007a4 <__aeabi_ddiv>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc75 	bl	8000b40 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	4a66      	ldr	r2, [pc, #408]	; (80013f4 <main+0x2f4>)
 800125a:	6013      	str	r3, [r2, #0]
	  PWMgeneration() ; //Gen PWM
 800125c:	f002 fa34 	bl	80036c8 <PWMgeneration>
//***************************************************
////**********Get Real Vmax****************************

	  VelocityRPM = Velocity() ; //rpm unit
 8001260:	f002 f9ce 	bl	8003600 <Velocity>
 8001264:	eef0 7a40 	vmov.f32	s15, s0
 8001268:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <main+0x2f8>)
 800126a:	edc3 7a00 	vstr	s15, [r3]
	  if (VelocityRPM < 0)
 800126e:	4b62      	ldr	r3, [pc, #392]	; (80013f8 <main+0x2f8>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127c:	d508      	bpl.n	8001290 <main+0x190>
//		  V = (-1) * VelocityRPM;
//		  if (V > VmaxReal)
//		  {
//			  VmaxReal = VelocityRPM;
//		  }
		  VmaxReal = -VelocityRPM;
 800127e:	4b5e      	ldr	r3, [pc, #376]	; (80013f8 <main+0x2f8>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	eef1 7a67 	vneg.f32	s15, s15
 8001288:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <main+0x2fc>)
 800128a:	edc3 7a00 	vstr	s15, [r3]
 800128e:	e003      	b.n	8001298 <main+0x198>
//		  V = VelocityRPM;
//		  if (V > VmaxReal)
//		  {
//			  VmaxReal = VelocityRPM;
//		  }
		  VmaxReal = VelocityRPM;
 8001290:	4b59      	ldr	r3, [pc, #356]	; (80013f8 <main+0x2f8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a59      	ldr	r2, [pc, #356]	; (80013fc <main+0x2fc>)
 8001296:	6013      	str	r3, [r2, #0]
	  }
////*****************************************************
//**********Set Home******************************
	  if (StartSetHome)
 8001298:	4b59      	ldr	r3, [pc, #356]	; (8001400 <main+0x300>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d025      	beq.n	80012ec <main+0x1ec>
	  {
		  SetHome() ;
 80012a0:	f001 fc10 	bl	8002ac4 <SetHome>
		  //**************PID******************************
		  if (micros() - TimestampPID > 1000)
 80012a4:	f002 fa8e 	bl	80037c4 <micros>
 80012a8:	4b56      	ldr	r3, [pc, #344]	; (8001404 <main+0x304>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	ebb0 0802 	subs.w	r8, r0, r2
 80012b2:	eb61 0903 	sbc.w	r9, r1, r3
 80012b6:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80012ba:	4598      	cmp	r8, r3
 80012bc:	f179 0300 	sbcs.w	r3, r9, #0
 80012c0:	d314      	bcc.n	80012ec <main+0x1ec>
		  {
			  P = p;
 80012c2:	4b51      	ldr	r3, [pc, #324]	; (8001408 <main+0x308>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a51      	ldr	r2, [pc, #324]	; (800140c <main+0x30c>)
 80012c8:	6013      	str	r3, [r2, #0]
			  I = i;
 80012ca:	4b51      	ldr	r3, [pc, #324]	; (8001410 <main+0x310>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a51      	ldr	r2, [pc, #324]	; (8001414 <main+0x314>)
 80012d0:	6013      	str	r3, [r2, #0]
			  D = d;
 80012d2:	4b51      	ldr	r3, [pc, #324]	; (8001418 <main+0x318>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a51      	ldr	r2, [pc, #324]	; (800141c <main+0x31c>)
 80012d8:	6013      	str	r3, [r2, #0]
			  PID() ;
 80012da:	f002 f8d9 	bl	8003490 <PID>
			  TimestampPID = micros() ;
 80012de:	f002 fa71 	bl	80037c4 <micros>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4947      	ldr	r1, [pc, #284]	; (8001404 <main+0x304>)
 80012e8:	e9c1 2300 	strd	r2, r3, [r1]
		  //************************************************
	  }
//***********************************************

//**************UART******************************
	  int16_t inputChar = UARTReadChar(&UART2);
 80012ec:	482e      	ldr	r0, [pc, #184]	; (80013a8 <main+0x2a8>)
 80012ee:	f000 fedb 	bl	80020a8 <UARTReadChar>
 80012f2:	4603      	mov	r3, r0
 80012f4:	81fb      	strh	r3, [r7, #14]
	  if (inputChar != -1)
 80012f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fe:	d005      	beq.n	800130c <main+0x20c>
	  {
		  Protocal(inputChar, &UART2);
 8001300:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001304:	4928      	ldr	r1, [pc, #160]	; (80013a8 <main+0x2a8>)
 8001306:	4618      	mov	r0, r3
 8001308:	f000 ff92 	bl	8002230 <Protocal>
	  }
	  if (FinishedTask)
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <main+0x2e0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <main+0x21e>
	  {
		  WriteACK2();
 8001314:	f001 fbc4 	bl	8002aa0 <WriteACK2>
		  FinishedTask = 0;
 8001318:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <main+0x2e0>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
//		  {
//			  MainMemory[n] = inputChar ;
//			  n++ ;
//		  }
//	  }
	  if (Mode == 12)
 800131e:	4b40      	ldr	r3, [pc, #256]	; (8001420 <main+0x320>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d102      	bne.n	800132c <main+0x22c>
	  {
		  enable_eff = 1;
 8001326:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <main+0x324>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
	  }
	  if (Mode == 13)
 800132c:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <main+0x320>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b0d      	cmp	r3, #13
 8001332:	d102      	bne.n	800133a <main+0x23a>
	  {
		  enable_eff = 0;
 8001334:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <main+0x324>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
//	  }


//****************************************************
//*******init Traj***********************************
	  if (StartMoving == 0 && StartSetHome == 0)
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <main+0x2cc>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d115      	bne.n	800136e <main+0x26e>
 8001342:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <main+0x300>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d111      	bne.n	800136e <main+0x26e>
	  {
		  T = 0;
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <main+0x328>)
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
		  TV = 0;
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <main+0x32c>)
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
		  TA = 0;
 800135a:	4b35      	ldr	r3, [pc, #212]	; (8001430 <main+0x330>)
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
		  ST = 0;
 8001362:	4b34      	ldr	r3, [pc, #208]	; (8001434 <main+0x334>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
		  Direction = 2;
 8001368:	4b33      	ldr	r3, [pc, #204]	; (8001438 <main+0x338>)
 800136a:	2202      	movs	r2, #2
 800136c:	701a      	strb	r2, [r3, #0]

	  }
//**************************************************
//*******Start Generate Trajectory*******************
	  if (StartMoving == 1)
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <main+0x2cc>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	f040 833e 	bne.w	80019f4 <main+0x8f4>
	  {
		  static State Statee = InitPID;
		  switch(Statee)
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <main+0x33c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3b08      	subs	r3, #8
 800137e:	2b03      	cmp	r3, #3
 8001380:	f200 833d 	bhi.w	80019fe <main+0x8fe>
 8001384:	a201      	add	r2, pc, #4	; (adr r2, 800138c <main+0x28c>)
 8001386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138a:	bf00      	nop
 800138c:	0800139d 	.word	0x0800139d
 8001390:	08001441 	.word	0x08001441
 8001394:	08001907 	.word	0x08001907
 8001398:	080015b5 	.word	0x080015b5
		  {
		  case InitPID:
			  PIDinit();
 800139c:	f002 f830 	bl	8003400 <PIDinit>
			  Statee = Traj;
 80013a0:	4b26      	ldr	r3, [pc, #152]	; (800143c <main+0x33c>)
 80013a2:	2209      	movs	r2, #9
 80013a4:	701a      	strb	r2, [r3, #0]
			  break;
 80013a6:	e32a      	b.n	80019fe <main+0x8fe>
 80013a8:	200002dc 	.word	0x200002dc
 80013ac:	200001d8 	.word	0x200001d8
 80013b0:	20000100 	.word	0x20000100
 80013b4:	20000148 	.word	0x20000148
 80013b8:	20000190 	.word	0x20000190
 80013bc:	200003c4 	.word	0x200003c4
 80013c0:	200003c8 	.word	0x200003c8
 80013c4:	004c4b41 	.word	0x004c4b41
 80013c8:	200003c6 	.word	0x200003c6
 80013cc:	20000350 	.word	0x20000350
 80013d0:	200003d0 	.word	0x200003d0
 80013d4:	200002fc 	.word	0x200002fc
 80013d8:	20000010 	.word	0x20000010
 80013dc:	200003c7 	.word	0x200003c7
 80013e0:	200003c5 	.word	0x200003c5
 80013e4:	40020800 	.word	0x40020800
 80013e8:	200003fc 	.word	0x200003fc
 80013ec:	40768000 	.word	0x40768000
 80013f0:	40a00000 	.word	0x40a00000
 80013f4:	200003f4 	.word	0x200003f4
 80013f8:	200003f0 	.word	0x200003f0
 80013fc:	20000398 	.word	0x20000398
 8001400:	200003a9 	.word	0x200003a9
 8001404:	20000318 	.word	0x20000318
 8001408:	20000004 	.word	0x20000004
 800140c:	20000340 	.word	0x20000340
 8001410:	20000008 	.word	0x20000008
 8001414:	20000344 	.word	0x20000344
 8001418:	2000000c 	.word	0x2000000c
 800141c:	20000348 	.word	0x20000348
 8001420:	200002f6 	.word	0x200002f6
 8001424:	20000312 	.word	0x20000312
 8001428:	20000374 	.word	0x20000374
 800142c:	20000370 	.word	0x20000370
 8001430:	2000036c 	.word	0x2000036c
 8001434:	20000351 	.word	0x20000351
 8001438:	200003f8 	.word	0x200003f8
 800143c:	20000018 	.word	0x20000018
		  case Traj:
			  //**************PID******************************
			  if (micros() - TimestampPID > 1000)
 8001440:	f002 f9c0 	bl	80037c4 <micros>
 8001444:	4b50      	ldr	r3, [pc, #320]	; (8001588 <main+0x488>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	ebb0 0a02 	subs.w	sl, r0, r2
 800144e:	eb61 0b03 	sbc.w	fp, r1, r3
 8001452:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8001456:	459a      	cmp	sl, r3
 8001458:	f17b 0300 	sbcs.w	r3, fp, #0
 800145c:	d314      	bcc.n	8001488 <main+0x388>
			  {
				  P = p;
 800145e:	4b4b      	ldr	r3, [pc, #300]	; (800158c <main+0x48c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a4b      	ldr	r2, [pc, #300]	; (8001590 <main+0x490>)
 8001464:	6013      	str	r3, [r2, #0]
				  I = i;
 8001466:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <main+0x494>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a4b      	ldr	r2, [pc, #300]	; (8001598 <main+0x498>)
 800146c:	6013      	str	r3, [r2, #0]
				  D = d;
 800146e:	4b4b      	ldr	r3, [pc, #300]	; (800159c <main+0x49c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a4b      	ldr	r2, [pc, #300]	; (80015a0 <main+0x4a0>)
 8001474:	6013      	str	r3, [r2, #0]
				  PID() ;
 8001476:	f002 f80b 	bl	8003490 <PID>
				  TimestampPID = micros() ;
 800147a:	f002 f9a3 	bl	80037c4 <micros>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4941      	ldr	r1, [pc, #260]	; (8001588 <main+0x488>)
 8001484:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			  //************************************************
			  Trajec();
 8001488:	f001 fbb2 	bl	8002bf0 <Trajec>
			  if (FinishedTraj)
 800148c:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <main+0x4a4>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 82b1 	beq.w	80019f8 <main+0x8f8>
			  {
				  if (FinalPos - Degree > 0.1 || FinalPos - Degree < -0.1)
 8001496:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <main+0x4a8>)
 8001498:	ed93 7a00 	vldr	s14, [r3]
 800149c:	4b43      	ldr	r3, [pc, #268]	; (80015ac <main+0x4ac>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a6:	ee17 0a90 	vmov	r0, s15
 80014aa:	f7fe fff9 	bl	80004a0 <__aeabi_f2d>
 80014ae:	a32e      	add	r3, pc, #184	; (adr r3, 8001568 <main+0x468>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7ff fadc 	bl	8000a70 <__aeabi_dcmpgt>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d113      	bne.n	80014e6 <main+0x3e6>
 80014be:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <main+0x4a8>)
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	4b39      	ldr	r3, [pc, #228]	; (80015ac <main+0x4ac>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ce:	ee17 0a90 	vmov	r0, s15
 80014d2:	f7fe ffe5 	bl	80004a0 <__aeabi_f2d>
 80014d6:	a326      	add	r3, pc, #152	; (adr r3, 8001570 <main+0x470>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff faaa 	bl	8000a34 <__aeabi_dcmplt>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d037      	beq.n	8001556 <main+0x456>
				  {
					  if (FinalPos - Degree >= 359.9 || FinalPos - Degree <= -359.9)
 80014e6:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <main+0x4a8>)
 80014e8:	ed93 7a00 	vldr	s14, [r3]
 80014ec:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <main+0x4ac>)
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f6:	ee17 0a90 	vmov	r0, s15
 80014fa:	f7fe ffd1 	bl	80004a0 <__aeabi_f2d>
 80014fe:	a31e      	add	r3, pc, #120	; (adr r3, 8001578 <main+0x478>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff faaa 	bl	8000a5c <__aeabi_dcmpge>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d113      	bne.n	8001536 <main+0x436>
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <main+0x4a8>)
 8001510:	ed93 7a00 	vldr	s14, [r3]
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <main+0x4ac>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151e:	ee17 0a90 	vmov	r0, s15
 8001522:	f7fe ffbd 	bl	80004a0 <__aeabi_f2d>
 8001526:	a316      	add	r3, pc, #88	; (adr r3, 8001580 <main+0x480>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff fa8c 	bl	8000a48 <__aeabi_dcmple>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <main+0x444>
					  {
						  Statee = Trong;
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <main+0x4b0>)
 8001538:	220a      	movs	r2, #10
 800153a:	701a      	strb	r2, [r3, #0]
						  FinishedTraj = 0;
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <main+0x4a4>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
					  if (FinalPos - Degree >= 359.9 || FinalPos - Degree <= -359.9)
 8001542:	e00f      	b.n	8001564 <main+0x464>
					  }
					  else
					  {
						  Statee = YangMaiTrong;
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <main+0x4b0>)
 8001546:	220b      	movs	r2, #11
 8001548:	701a      	strb	r2, [r3, #0]
						  FinishedTraj = 0;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <main+0x4a4>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
						  PIDinit();
 8001550:	f001 ff56 	bl	8003400 <PIDinit>
					  if (FinalPos - Degree >= 359.9 || FinalPos - Degree <= -359.9)
 8001554:	e006      	b.n	8001564 <main+0x464>
					  }

				  }
				  else
				  {
					  Statee = Trong;
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <main+0x4b0>)
 8001558:	220a      	movs	r2, #10
 800155a:	701a      	strb	r2, [r3, #0]
					  FinishedTraj = 0;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <main+0x4a4>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  break;
 8001562:	e249      	b.n	80019f8 <main+0x8f8>
 8001564:	e248      	b.n	80019f8 <main+0x8f8>
 8001566:	bf00      	nop
 8001568:	9999999a 	.word	0x9999999a
 800156c:	3fb99999 	.word	0x3fb99999
 8001570:	9999999a 	.word	0x9999999a
 8001574:	bfb99999 	.word	0xbfb99999
 8001578:	66666666 	.word	0x66666666
 800157c:	40767e66 	.word	0x40767e66
 8001580:	66666666 	.word	0x66666666
 8001584:	c0767e66 	.word	0xc0767e66
 8001588:	20000318 	.word	0x20000318
 800158c:	20000004 	.word	0x20000004
 8001590:	20000340 	.word	0x20000340
 8001594:	20000008 	.word	0x20000008
 8001598:	20000344 	.word	0x20000344
 800159c:	2000000c 	.word	0x2000000c
 80015a0:	20000348 	.word	0x20000348
 80015a4:	2000039c 	.word	0x2000039c
 80015a8:	20000010 	.word	0x20000010
 80015ac:	200003f4 	.word	0x200003f4
 80015b0:	20000018 	.word	0x20000018
		  case YangMaiTrong:
			  if (FinalPos <= Degree && FinalPos - Degree <= -0.1 && FinalPos - Degree > -359.9)
 80015b4:	4bc4      	ldr	r3, [pc, #784]	; (80018c8 <main+0x7c8>)
 80015b6:	ed93 7a00 	vldr	s14, [r3]
 80015ba:	4bc4      	ldr	r3, [pc, #784]	; (80018cc <main+0x7cc>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	d82e      	bhi.n	8001628 <main+0x528>
 80015ca:	4bbf      	ldr	r3, [pc, #764]	; (80018c8 <main+0x7c8>)
 80015cc:	ed93 7a00 	vldr	s14, [r3]
 80015d0:	4bbe      	ldr	r3, [pc, #760]	; (80018cc <main+0x7cc>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015da:	ee17 0a90 	vmov	r0, s15
 80015de:	f7fe ff5f 	bl	80004a0 <__aeabi_f2d>
 80015e2:	a3ad      	add	r3, pc, #692	; (adr r3, 8001898 <main+0x798>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7ff fa2e 	bl	8000a48 <__aeabi_dcmple>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01a      	beq.n	8001628 <main+0x528>
 80015f2:	4bb5      	ldr	r3, [pc, #724]	; (80018c8 <main+0x7c8>)
 80015f4:	ed93 7a00 	vldr	s14, [r3]
 80015f8:	4bb4      	ldr	r3, [pc, #720]	; (80018cc <main+0x7cc>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001602:	ee17 0a90 	vmov	r0, s15
 8001606:	f7fe ff4b 	bl	80004a0 <__aeabi_f2d>
 800160a:	a3a5      	add	r3, pc, #660	; (adr r3, 80018a0 <main+0x7a0>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7ff fa2e 	bl	8000a70 <__aeabi_dcmpgt>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <main+0x528>
			  {
				  request = -0.5;
 800161a:	4bad      	ldr	r3, [pc, #692]	; (80018d0 <main+0x7d0>)
 800161c:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001620:	601a      	str	r2, [r3, #0]
				  Direction = 1;
 8001622:	4bac      	ldr	r3, [pc, #688]	; (80018d4 <main+0x7d4>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
			  }
			  if (FinalPos >= Degree && FinalPos - Degree >= 0.1 && FinalPos - Degree < 359.9)
 8001628:	4ba7      	ldr	r3, [pc, #668]	; (80018c8 <main+0x7c8>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	4ba7      	ldr	r3, [pc, #668]	; (80018cc <main+0x7cc>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	db2e      	blt.n	800169c <main+0x59c>
 800163e:	4ba2      	ldr	r3, [pc, #648]	; (80018c8 <main+0x7c8>)
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	4ba1      	ldr	r3, [pc, #644]	; (80018cc <main+0x7cc>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164e:	ee17 0a90 	vmov	r0, s15
 8001652:	f7fe ff25 	bl	80004a0 <__aeabi_f2d>
 8001656:	a394      	add	r3, pc, #592	; (adr r3, 80018a8 <main+0x7a8>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7ff f9fe 	bl	8000a5c <__aeabi_dcmpge>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d01a      	beq.n	800169c <main+0x59c>
 8001666:	4b98      	ldr	r3, [pc, #608]	; (80018c8 <main+0x7c8>)
 8001668:	ed93 7a00 	vldr	s14, [r3]
 800166c:	4b97      	ldr	r3, [pc, #604]	; (80018cc <main+0x7cc>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001676:	ee17 0a90 	vmov	r0, s15
 800167a:	f7fe ff11 	bl	80004a0 <__aeabi_f2d>
 800167e:	a38c      	add	r3, pc, #560	; (adr r3, 80018b0 <main+0x7b0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7ff f9d6 	bl	8000a34 <__aeabi_dcmplt>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <main+0x59c>
			  {
				  request = 0.5;
 800168e:	4b90      	ldr	r3, [pc, #576]	; (80018d0 <main+0x7d0>)
 8001690:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001694:	601a      	str	r2, [r3, #0]
				  Direction = 0;
 8001696:	4b8f      	ldr	r3, [pc, #572]	; (80018d4 <main+0x7d4>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
			  }
			  if (FinalPos <= Degree && FinalPos - Degree > -359.8 && FinalPos - Degree <= -300)
 800169c:	4b8a      	ldr	r3, [pc, #552]	; (80018c8 <main+0x7c8>)
 800169e:	ed93 7a00 	vldr	s14, [r3]
 80016a2:	4b8a      	ldr	r3, [pc, #552]	; (80018cc <main+0x7cc>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	d829      	bhi.n	8001706 <main+0x606>
 80016b2:	4b85      	ldr	r3, [pc, #532]	; (80018c8 <main+0x7c8>)
 80016b4:	ed93 7a00 	vldr	s14, [r3]
 80016b8:	4b84      	ldr	r3, [pc, #528]	; (80018cc <main+0x7cc>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c2:	ee17 0a90 	vmov	r0, s15
 80016c6:	f7fe feeb 	bl	80004a0 <__aeabi_f2d>
 80016ca:	a37b      	add	r3, pc, #492	; (adr r3, 80018b8 <main+0x7b8>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7ff f9ce 	bl	8000a70 <__aeabi_dcmpgt>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d015      	beq.n	8001706 <main+0x606>
 80016da:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <main+0x7c8>)
 80016dc:	ed93 7a00 	vldr	s14, [r3]
 80016e0:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <main+0x7cc>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ea:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80018d8 <main+0x7d8>
 80016ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	d806      	bhi.n	8001706 <main+0x606>
			  {
				  request = 0.5;
 80016f8:	4b75      	ldr	r3, [pc, #468]	; (80018d0 <main+0x7d0>)
 80016fa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80016fe:	601a      	str	r2, [r3, #0]
				  Direction = 0;
 8001700:	4b74      	ldr	r3, [pc, #464]	; (80018d4 <main+0x7d4>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
			  }
			  if (FinalPos >= Degree && FinalPos - Degree >= 300 && FinalPos - Degree < 359.8)
 8001706:	4b70      	ldr	r3, [pc, #448]	; (80018c8 <main+0x7c8>)
 8001708:	ed93 7a00 	vldr	s14, [r3]
 800170c:	4b6f      	ldr	r3, [pc, #444]	; (80018cc <main+0x7cc>)
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	db29      	blt.n	8001770 <main+0x670>
 800171c:	4b6a      	ldr	r3, [pc, #424]	; (80018c8 <main+0x7c8>)
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	4b6a      	ldr	r3, [pc, #424]	; (80018cc <main+0x7cc>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80018dc <main+0x7dc>
 8001730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	db1a      	blt.n	8001770 <main+0x670>
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <main+0x7c8>)
 800173c:	ed93 7a00 	vldr	s14, [r3]
 8001740:	4b62      	ldr	r3, [pc, #392]	; (80018cc <main+0x7cc>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174a:	ee17 0a90 	vmov	r0, s15
 800174e:	f7fe fea7 	bl	80004a0 <__aeabi_f2d>
 8001752:	a35b      	add	r3, pc, #364	; (adr r3, 80018c0 <main+0x7c0>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7ff f96c 	bl	8000a34 <__aeabi_dcmplt>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <main+0x670>
			  {
				  request = -0.5;
 8001762:	4b5b      	ldr	r3, [pc, #364]	; (80018d0 <main+0x7d0>)
 8001764:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001768:	601a      	str	r2, [r3, #0]
				  Direction = 1;
 800176a:	4b5a      	ldr	r3, [pc, #360]	; (80018d4 <main+0x7d4>)
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
			  }

			  if (FinalPos - Degree <= 0.1 && FinalPos - Degree >= -0.1)
 8001770:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <main+0x7c8>)
 8001772:	ed93 7a00 	vldr	s14, [r3]
 8001776:	4b55      	ldr	r3, [pc, #340]	; (80018cc <main+0x7cc>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001780:	ee17 0a90 	vmov	r0, s15
 8001784:	f7fe fe8c 	bl	80004a0 <__aeabi_f2d>
 8001788:	a347      	add	r3, pc, #284	; (adr r3, 80018a8 <main+0x7a8>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7ff f95b 	bl	8000a48 <__aeabi_dcmple>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01d      	beq.n	80017d4 <main+0x6d4>
 8001798:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <main+0x7c8>)
 800179a:	ed93 7a00 	vldr	s14, [r3]
 800179e:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <main+0x7cc>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a8:	ee17 0a90 	vmov	r0, s15
 80017ac:	f7fe fe78 	bl	80004a0 <__aeabi_f2d>
 80017b0:	a339      	add	r3, pc, #228	; (adr r3, 8001898 <main+0x798>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7ff f951 	bl	8000a5c <__aeabi_dcmpge>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d009      	beq.n	80017d4 <main+0x6d4>
			  {
				  request = 0;
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <main+0x7d0>)
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
				  Direction = 2;
 80017c8:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <main+0x7d4>)
 80017ca:	2202      	movs	r2, #2
 80017cc:	701a      	strb	r2, [r3, #0]
				  Statee = Trong;
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <main+0x7e0>)
 80017d0:	220a      	movs	r2, #10
 80017d2:	701a      	strb	r2, [r3, #0]
			  }
			  if (FinalPos - Degree >= 359.9 || FinalPos - Degree <= -359.9)
 80017d4:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <main+0x7c8>)
 80017d6:	ed93 7a00 	vldr	s14, [r3]
 80017da:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <main+0x7cc>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e4:	ee17 0a90 	vmov	r0, s15
 80017e8:	f7fe fe5a 	bl	80004a0 <__aeabi_f2d>
 80017ec:	a330      	add	r3, pc, #192	; (adr r3, 80018b0 <main+0x7b0>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7ff f933 	bl	8000a5c <__aeabi_dcmpge>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d113      	bne.n	8001824 <main+0x724>
 80017fc:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <main+0x7c8>)
 80017fe:	ed93 7a00 	vldr	s14, [r3]
 8001802:	4b32      	ldr	r3, [pc, #200]	; (80018cc <main+0x7cc>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180c:	ee17 0a90 	vmov	r0, s15
 8001810:	f7fe fe46 	bl	80004a0 <__aeabi_f2d>
 8001814:	a322      	add	r3, pc, #136	; (adr r3, 80018a0 <main+0x7a0>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7ff f915 	bl	8000a48 <__aeabi_dcmple>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00c      	beq.n	800183e <main+0x73e>
			  {
				  request = 0;
 8001824:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <main+0x7d0>)
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
				  Direction = 2;
 800182c:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <main+0x7d4>)
 800182e:	2202      	movs	r2, #2
 8001830:	701a      	strb	r2, [r3, #0]
				  Statee = Trong;
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <main+0x7e0>)
 8001834:	220a      	movs	r2, #10
 8001836:	701a      	strb	r2, [r3, #0]
				  PWMPercent = 0;
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <main+0x7e4>)
 800183a:	2200      	movs	r2, #0
 800183c:	801a      	strh	r2, [r3, #0]
			  }
			  if (micros() - TimestampPID > 1000)
 800183e:	f001 ffc1 	bl	80037c4 <micros>
 8001842:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <main+0x7e8>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	1a86      	subs	r6, r0, r2
 800184a:	603e      	str	r6, [r7, #0]
 800184c:	eb61 0303 	sbc.w	r3, r1, r3
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8001856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185a:	4602      	mov	r2, r0
 800185c:	429a      	cmp	r2, r3
 800185e:	460b      	mov	r3, r1
 8001860:	f173 0300 	sbcs.w	r3, r3, #0
 8001864:	f0c0 80ca 	bcc.w	80019fc <main+0x8fc>
			  {
				  P = p;
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <main+0x7ec>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <main+0x7f0>)
 800186e:	6013      	str	r3, [r2, #0]
				  I = i;
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <main+0x7f4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <main+0x7f8>)
 8001876:	6013      	str	r3, [r2, #0]
				  D = d;
 8001878:	4b20      	ldr	r3, [pc, #128]	; (80018fc <main+0x7fc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <main+0x800>)
 800187e:	6013      	str	r3, [r2, #0]
				  PID() ;
 8001880:	f001 fe06 	bl	8003490 <PID>
				  TimestampPID = micros() ;
 8001884:	f001 ff9e 	bl	80037c4 <micros>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <main+0x7e8>)
 800188e:	e9c1 2300 	strd	r2, r3, [r1]
 8001892:	e037      	b.n	8001904 <main+0x804>
 8001894:	f3af 8000 	nop.w
 8001898:	9999999a 	.word	0x9999999a
 800189c:	bfb99999 	.word	0xbfb99999
 80018a0:	66666666 	.word	0x66666666
 80018a4:	c0767e66 	.word	0xc0767e66
 80018a8:	9999999a 	.word	0x9999999a
 80018ac:	3fb99999 	.word	0x3fb99999
 80018b0:	66666666 	.word	0x66666666
 80018b4:	40767e66 	.word	0x40767e66
 80018b8:	cccccccd 	.word	0xcccccccd
 80018bc:	c0767ccc 	.word	0xc0767ccc
 80018c0:	cccccccd 	.word	0xcccccccd
 80018c4:	40767ccc 	.word	0x40767ccc
 80018c8:	20000010 	.word	0x20000010
 80018cc:	200003f4 	.word	0x200003f4
 80018d0:	200003dc 	.word	0x200003dc
 80018d4:	200003f8 	.word	0x200003f8
 80018d8:	c3960000 	.word	0xc3960000
 80018dc:	43960000 	.word	0x43960000
 80018e0:	20000018 	.word	0x20000018
 80018e4:	200003e0 	.word	0x200003e0
 80018e8:	20000318 	.word	0x20000318
 80018ec:	20000004 	.word	0x20000004
 80018f0:	20000340 	.word	0x20000340
 80018f4:	20000008 	.word	0x20000008
 80018f8:	20000344 	.word	0x20000344
 80018fc:	2000000c 	.word	0x2000000c
 8001900:	20000348 	.word	0x20000348
			  }
			  break;
 8001904:	e07a      	b.n	80019fc <main+0x8fc>
		  case Trong:
			  if (FinalPos - Degree <= 0.2 && FinalPos - Degree >= -0.2)
 8001906:	4b48      	ldr	r3, [pc, #288]	; (8001a28 <main+0x928>)
 8001908:	ed93 7a00 	vldr	s14, [r3]
 800190c:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <main+0x92c>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001916:	ee17 0a90 	vmov	r0, s15
 800191a:	f7fe fdc1 	bl	80004a0 <__aeabi_f2d>
 800191e:	a33a      	add	r3, pc, #232	; (adr r3, 8001a08 <main+0x908>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7ff f890 	bl	8000a48 <__aeabi_dcmple>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d02d      	beq.n	800198a <main+0x88a>
 800192e:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <main+0x928>)
 8001930:	ed93 7a00 	vldr	s14, [r3]
 8001934:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <main+0x92c>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193e:	ee17 0a90 	vmov	r0, s15
 8001942:	f7fe fdad 	bl	80004a0 <__aeabi_f2d>
 8001946:	a332      	add	r3, pc, #200	; (adr r3, 8001a10 <main+0x910>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7ff f886 	bl	8000a5c <__aeabi_dcmpge>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d019      	beq.n	800198a <main+0x88a>
			  {
				  request = 0;
 8001956:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <main+0x930>)
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
					PWMPercent = 0;
 800195e:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <main+0x934>)
 8001960:	2200      	movs	r2, #0
 8001962:	801a      	strh	r2, [r3, #0]
					FinishedStation = 1;
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <main+0x938>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
					StartMoving = 0;
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <main+0x93c>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
					Statee = InitPID;
 8001970:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <main+0x940>)
 8001972:	2208      	movs	r2, #8
 8001974:	701a      	strb	r2, [r3, #0]
					effTimestamp = micros();
 8001976:	f001 ff25 	bl	80037c4 <micros>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4931      	ldr	r1, [pc, #196]	; (8001a44 <main+0x944>)
 8001980:	e9c1 2300 	strd	r2, r3, [r1]
					EndEffWrite();
 8001984:	f000 fb12 	bl	8001fac <EndEffWrite>
 8001988:	e033      	b.n	80019f2 <main+0x8f2>
			  }
			  else if (FinalPos - Degree >= 359.8 || FinalPos - Degree <= -359.8)
 800198a:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <main+0x928>)
 800198c:	ed93 7a00 	vldr	s14, [r3]
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <main+0x92c>)
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199a:	ee17 0a90 	vmov	r0, s15
 800199e:	f7fe fd7f 	bl	80004a0 <__aeabi_f2d>
 80019a2:	a31d      	add	r3, pc, #116	; (adr r3, 8001a18 <main+0x918>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7ff f858 	bl	8000a5c <__aeabi_dcmpge>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d113      	bne.n	80019da <main+0x8da>
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <main+0x928>)
 80019b4:	ed93 7a00 	vldr	s14, [r3]
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <main+0x92c>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	ee17 0a90 	vmov	r0, s15
 80019c6:	f7fe fd6b 	bl	80004a0 <__aeabi_f2d>
 80019ca:	a315      	add	r3, pc, #84	; (adr r3, 8001a20 <main+0x920>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7ff f83a 	bl	8000a48 <__aeabi_dcmple>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <main+0x8e6>
			  {
				  Statee = YangMaiTrong;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <main+0x940>)
 80019dc:	220b      	movs	r2, #11
 80019de:	701a      	strb	r2, [r3, #0]
				  PIDinit();
 80019e0:	f001 fd0e 	bl	8003400 <PIDinit>
 80019e4:	e005      	b.n	80019f2 <main+0x8f2>
			  }
			  else
			  {
				  PIDinit();
 80019e6:	f001 fd0b 	bl	8003400 <PIDinit>
				  Statee = YangMaiTrong;
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <main+0x940>)
 80019ec:	220b      	movs	r2, #11
 80019ee:	701a      	strb	r2, [r3, #0]
			  }

			  break;
 80019f0:	e005      	b.n	80019fe <main+0x8fe>
 80019f2:	e004      	b.n	80019fe <main+0x8fe>
		  }

	  }
 80019f4:	bf00      	nop
 80019f6:	e002      	b.n	80019fe <main+0x8fe>
			  break;
 80019f8:	bf00      	nop
 80019fa:	e000      	b.n	80019fe <main+0x8fe>
			  break;
 80019fc:	bf00      	nop

//***************************************************
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UARTTxDumpBuffer(&UART2);
 80019fe:	4812      	ldr	r0, [pc, #72]	; (8001a48 <main+0x948>)
 8001a00:	f000 fb7c 	bl	80020fc <UARTTxDumpBuffer>
  {
 8001a04:	f7ff bbb9 	b.w	800117a <main+0x7a>
 8001a08:	9999999a 	.word	0x9999999a
 8001a0c:	3fc99999 	.word	0x3fc99999
 8001a10:	9999999a 	.word	0x9999999a
 8001a14:	bfc99999 	.word	0xbfc99999
 8001a18:	cccccccd 	.word	0xcccccccd
 8001a1c:	40767ccc 	.word	0x40767ccc
 8001a20:	cccccccd 	.word	0xcccccccd
 8001a24:	c0767ccc 	.word	0xc0767ccc
 8001a28:	20000010 	.word	0x20000010
 8001a2c:	200003f4 	.word	0x200003f4
 8001a30:	200003dc 	.word	0x200003dc
 8001a34:	200003e0 	.word	0x200003e0
 8001a38:	200003c4 	.word	0x200003c4
 8001a3c:	20000350 	.word	0x20000350
 8001a40:	20000018 	.word	0x20000018
 8001a44:	200003c8 	.word	0x200003c8
 8001a48:	200002dc 	.word	0x200002dc

08001a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b094      	sub	sp, #80	; 0x50
 8001a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a52:	f107 0320 	add.w	r3, r7, #32
 8001a56:	2230      	movs	r2, #48	; 0x30
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f006 fc3a 	bl	80082d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <SystemClock_Config+0xc8>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <SystemClock_Config+0xc8>)
 8001a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <SystemClock_Config+0xc8>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <SystemClock_Config+0xcc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <SystemClock_Config+0xcc>)
 8001a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <SystemClock_Config+0xcc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aac:	2301      	movs	r3, #1
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001abc:	2308      	movs	r3, #8
 8001abe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ac0:	2364      	movs	r3, #100	; 0x64
 8001ac2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001acc:	f107 0320 	add.w	r3, r7, #32
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 fcdb 	bl	800548c <HAL_RCC_OscConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001adc:	f001 fe8c 	bl	80037f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	2103      	movs	r1, #3
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 ff3d 	bl	800597c <HAL_RCC_ClockConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b08:	f001 fe76 	bl	80037f8 <Error_Handler>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3750      	adds	r7, #80	; 0x50
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40007000 	.word	0x40007000

08001b1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <MX_I2C1_Init+0x50>)
 8001b22:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <MX_I2C1_Init+0x54>)
 8001b24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <MX_I2C1_Init+0x50>)
 8001b28:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <MX_I2C1_Init+0x58>)
 8001b2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_I2C1_Init+0x50>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <MX_I2C1_Init+0x50>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MX_I2C1_Init+0x50>)
 8001b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <MX_I2C1_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <MX_I2C1_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b4c:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <MX_I2C1_Init+0x50>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <MX_I2C1_Init+0x50>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b58:	4804      	ldr	r0, [pc, #16]	; (8001b6c <MX_I2C1_Init+0x50>)
 8001b5a:	f003 f84b 	bl	8004bf4 <HAL_I2C_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b64:	f001 fe48 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200000ac 	.word	0x200000ac
 8001b70:	40005400 	.word	0x40005400
 8001b74:	000186a0 	.word	0x000186a0

08001b78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b096      	sub	sp, #88	; 0x58
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]
 8001ba6:	615a      	str	r2, [r3, #20]
 8001ba8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2220      	movs	r2, #32
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f006 fb8f 	bl	80082d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bb6:	4b44      	ldr	r3, [pc, #272]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001bb8:	4a44      	ldr	r2, [pc, #272]	; (8001ccc <MX_TIM1_Init+0x154>)
 8001bba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bbc:	4b42      	ldr	r3, [pc, #264]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001bca:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001bce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd0:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001bde:	2280      	movs	r2, #128	; 0x80
 8001be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001be2:	4839      	ldr	r0, [pc, #228]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001be4:	f004 f8ea 	bl	8005dbc <HAL_TIM_Base_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001bee:	f001 fe03 	bl	80037f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bf8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4832      	ldr	r0, [pc, #200]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001c00:	f004 fce8 	bl	80065d4 <HAL_TIM_ConfigClockSource>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c0a:	f001 fdf5 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c0e:	482e      	ldr	r0, [pc, #184]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001c10:	f004 f9e0 	bl	8005fd4 <HAL_TIM_PWM_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c1a:	f001 fded 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4826      	ldr	r0, [pc, #152]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001c2e:	f005 f865 	bl	8006cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c38:	f001 fdde 	bl	80037f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3c:	2360      	movs	r3, #96	; 0x60
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4819      	ldr	r0, [pc, #100]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001c62:	f004 fbf5 	bl	8006450 <HAL_TIM_PWM_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001c6c:	f001 fdc4 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c74:	2204      	movs	r2, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001c7a:	f004 fbe9 	bl	8006450 <HAL_TIM_PWM_ConfigChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001c84:	f001 fdb8 	bl	80037f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001cac:	f005 f894 	bl	8006dd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001cb6:	f001 fd9f 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cba:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <MX_TIM1_Init+0x150>)
 8001cbc:	f001 fe90 	bl	80039e0 <HAL_TIM_MspPostInit>

}
 8001cc0:	bf00      	nop
 8001cc2:	3758      	adds	r7, #88	; 0x58
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000100 	.word	0x20000100
 8001ccc:	40010000 	.word	0x40010000

08001cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001cf6:	2263      	movs	r2, #99	; 0x63
 8001cf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d02:	f04f 32ff 	mov.w	r2, #4294967295
 8001d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d16:	f004 f851 	bl	8005dbc <HAL_TIM_Base_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d20:	f001 fd6a 	bl	80037f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480c      	ldr	r0, [pc, #48]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d32:	f004 fc4f 	bl	80065d4 <HAL_TIM_ConfigClockSource>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d3c:	f001 fd5c 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d4e:	f004 ffd5 	bl	8006cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d58:	f001 fd4e 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000148 	.word	0x20000148

08001d68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f006 faac 	bl	80082d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <MX_TIM3_Init+0xa0>)
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <MX_TIM3_Init+0xa4>)
 8001d88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <MX_TIM3_Init+0xa0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <MX_TIM3_Init+0xa0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <MX_TIM3_Init+0xa0>)
 8001d98:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_TIM3_Init+0xa0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <MX_TIM3_Init+0xa0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001daa:	2303      	movs	r3, #3
 8001dac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001db2:	2301      	movs	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480c      	ldr	r0, [pc, #48]	; (8001e08 <MX_TIM3_Init+0xa0>)
 8001dd6:	f004 fa07 	bl	80061e8 <HAL_TIM_Encoder_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001de0:	f001 fd0a 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_TIM3_Init+0xa0>)
 8001df2:	f004 ff83 	bl	8006cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001dfc:	f001 fcfc 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3730      	adds	r7, #48	; 0x30
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000190 	.word	0x20000190
 8001e0c:	40000400 	.word	0x40000400

08001e10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <MX_USART2_UART_Init+0x50>)
 8001e16:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <MX_USART2_UART_Init+0x54>)
 8001e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_USART2_UART_Init+0x50>)
 8001e1c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <MX_USART2_UART_Init+0x50>)
 8001e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e28:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <MX_USART2_UART_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_USART2_UART_Init+0x50>)
 8001e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_USART2_UART_Init+0x50>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <MX_USART2_UART_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_USART2_UART_Init+0x50>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_USART2_UART_Init+0x50>)
 8001e4c:	f005 f816 	bl	8006e7c <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001e56:	f001 fccf 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200001d8 	.word	0x200001d8
 8001e64:	40004400 	.word	0x40004400

08001e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <MX_DMA_Init+0x4c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <MX_DMA_Init+0x4c>)
 8001e78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <MX_DMA_Init+0x4c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2010      	movs	r0, #16
 8001e90:	f002 f8c1 	bl	8004016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e94:	2010      	movs	r0, #16
 8001e96:	f002 f8da 	bl	800404e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2011      	movs	r0, #17
 8001ea0:	f002 f8b9 	bl	8004016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ea4:	2011      	movs	r0, #17
 8001ea6:	f002 f8d2 	bl	800404e <HAL_NVIC_EnableIRQ>

}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a32      	ldr	r2, [pc, #200]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <MX_GPIO_Init+0xe8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2120      	movs	r1, #32
 8001f42:	4818      	ldr	r0, [pc, #96]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001f44:	f002 fe3c 	bl	8004bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4812      	ldr	r0, [pc, #72]	; (8001fa8 <MX_GPIO_Init+0xf0>)
 8001f60:	f002 fc92 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : Home_Pin */
  GPIO_InitStruct.Pin = Home_Pin;
 8001f64:	2301      	movs	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Home_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <MX_GPIO_Init+0xf0>)
 8001f78:	f002 fc86 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f80:	2301      	movs	r3, #1
 8001f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001f94:	f002 fc78 	bl	8004888 <HAL_GPIO_Init>

}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020800 	.word	0x40020800

08001fac <EndEffWrite>:

/* USER CODE BEGIN 4 */
void EndEffWrite()
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY && enable_eff)
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <EndEffWrite+0x58>)
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d11d      	bne.n	8001ffa <EndEffWrite+0x4e>
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <EndEffWrite+0x5c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d019      	beq.n	8001ffa <EndEffWrite+0x4e>
//	if (hi2c1.State == HAL_I2C_STATE_READY)
	{
		test ++;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <EndEffWrite+0x60>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <EndEffWrite+0x60>)
 8001fd0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 8001fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fd6:	f001 ff1f 	bl	8003e18 <HAL_Delay>
		uint8_t temp = 0x45;
 8001fda:	2345      	movs	r3, #69	; 0x45
 8001fdc:	71bb      	strb	r3, [r7, #6]
		uint8_t add = 0x23;
 8001fde:	2323      	movs	r3, #35	; 0x23
 8001fe0:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Master_Transmit(&hi2c1, add << 1, &temp, 1, 1000); //Write eff
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	b299      	uxth	r1, r3
 8001fea:	1dba      	adds	r2, r7, #6
 8001fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4803      	ldr	r0, [pc, #12]	; (8002004 <EndEffWrite+0x58>)
 8001ff6:	f002 ff41 	bl	8004e7c <HAL_I2C_Master_Transmit>
	}

}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200000ac 	.word	0x200000ac
 8002008:	20000312 	.word	0x20000312
 800200c:	200003fe 	.word	0x200003fe

08002010 <UARTInit>:

void UARTInit(UARTStucrture *uart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002018:	4b10      	ldr	r3, [pc, #64]	; (800205c <UARTInit+0x4c>)
 800201a:	88db      	ldrh	r3, [r3, #6]
 800201c:	4619      	mov	r1, r3
 800201e:	2001      	movs	r0, #1
 8002020:	f006 f918 	bl	8008254 <calloc>
 8002024:	4603      	mov	r3, r0
 8002026:	461a      	mov	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <UARTInit+0x4c>)
 800202e:	889b      	ldrh	r3, [r3, #4]
 8002030:	4619      	mov	r1, r3
 8002032:	2001      	movs	r0, #1
 8002034:	f006 f90e 	bl	8008254 <calloc>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	81da      	strh	r2, [r3, #14]

}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200002dc 	.word	0x200002dc

08002060 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6919      	ldr	r1, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	88db      	ldrh	r3, [r3, #6]
 8002074:	461a      	mov	r2, r3
 8002076:	f004 ffcd 	bl	8007014 <HAL_UART_Receive_DMA>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	88db      	ldrh	r3, [r3, #6]
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	1ad3      	subs	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	uint16_t Result = -1; // -1 Mean no new data
 80020b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b4:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	8a9b      	ldrh	r3, [r3, #20]
 80020ba:	461c      	mov	r4, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ffe0 	bl	8002082 <UARTGetRxHead>
 80020c2:	4603      	mov	r3, r0
 80020c4:	429c      	cmp	r4, r3
 80020c6:	d013      	beq.n	80020f0 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	8a92      	ldrh	r2, [r2, #20]
 80020d0:	4413      	add	r3, r2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8a9b      	ldrh	r3, [r3, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	88d2      	ldrh	r2, [r2, #6]
 80020e0:	fb93 f1f2 	sdiv	r1, r3, r2
 80020e4:	fb01 f202 	mul.w	r2, r1, r2
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80020f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd90      	pop	{r4, r7, pc}

080020fc <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b20      	cmp	r3, #32
 8002110:	d13d      	bne.n	800218e <UARTTxDumpBuffer+0x92>
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <UARTTxDumpBuffer+0x9c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d139      	bne.n	800218e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800211a:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <UARTTxDumpBuffer+0x9c>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	89da      	ldrh	r2, [r3, #14]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	899b      	ldrh	r3, [r3, #12]
 8002128:	429a      	cmp	r2, r3
 800212a:	d02d      	beq.n	8002188 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	89da      	ldrh	r2, [r3, #14]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002134:	429a      	cmp	r2, r3
 8002136:	d906      	bls.n	8002146 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	89da      	ldrh	r2, [r3, #14]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	b29b      	uxth	r3, r3
 8002144:	e005      	b.n	8002152 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	889a      	ldrh	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	b29b      	uxth	r3, r3
 8002152:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	8992      	ldrh	r2, [r2, #12]
 8002160:	4413      	add	r3, r2
 8002162:	89fa      	ldrh	r2, [r7, #14]
 8002164:	4619      	mov	r1, r3
 8002166:	f004 fed7 	bl	8006f18 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	899b      	ldrh	r3, [r3, #12]
 800216e:	461a      	mov	r2, r3
 8002170:	89fb      	ldrh	r3, [r7, #14]
 8002172:	4413      	add	r3, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	8892      	ldrh	r2, [r2, #4]
 8002178:	fb93 f1f2 	sdiv	r1, r3, r2
 800217c:	fb01 f202 	mul.w	r2, r1, r2
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <UARTTxDumpBuffer+0x9c>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
	}

}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000406 	.word	0x20000406

0800219c <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	4613      	mov	r3, r2
 80021a8:	80fb      	strh	r3, [r7, #6]

	//check data len is more than buffer?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	889b      	ldrh	r3, [r3, #4]
 80021ae:	88fa      	ldrh	r2, [r7, #6]
 80021b0:	4293      	cmp	r3, r2
 80021b2:	bf28      	it	cs
 80021b4:	4613      	movcs	r3, r2
 80021b6:	82fb      	strh	r3, [r7, #22]

	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80021b8:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	889b      	ldrh	r3, [r3, #4]
 80021be:	4619      	mov	r1, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	89db      	ldrh	r3, [r3, #14]
 80021c4:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80021c6:	4293      	cmp	r3, r2
 80021c8:	bfa8      	it	ge
 80021ca:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 80021cc:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	89d2      	ldrh	r2, [r2, #14]
 80021d6:	4413      	add	r3, r2
 80021d8:	8aba      	ldrh	r2, [r7, #20]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	4618      	mov	r0, r3
 80021de:	f006 f86b 	bl	80082b8 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	89db      	ldrh	r3, [r3, #14]
 80021e6:	461a      	mov	r2, r3
 80021e8:	8afb      	ldrh	r3, [r7, #22]
 80021ea:	4413      	add	r3, r2
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	8892      	ldrh	r2, [r2, #4]
 80021f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80021f4:	fb01 f202 	mul.w	r2, r1, r2
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8002200:	8afa      	ldrh	r2, [r7, #22]
 8002202:	8abb      	ldrh	r3, [r7, #20]
 8002204:	429a      	cmp	r2, r3
 8002206:	d00a      	beq.n	800221e <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6898      	ldr	r0, [r3, #8]
 800220c:	8abb      	ldrh	r3, [r7, #20]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8002212:	8afa      	ldrh	r2, [r7, #22]
 8002214:	8abb      	ldrh	r3, [r7, #20]
 8002216:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002218:	461a      	mov	r2, r3
 800221a:	f006 f84d 	bl	80082b8 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7ff ff6c 	bl	80020fc <UARTTxDumpBuffer>
}
 8002224:	bf00      	nop
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	0000      	movs	r0, r0
	...

08002230 <Protocal>:

void Protocal(int16_t dataIn,UARTStucrture *uart)
{
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	81fb      	strh	r3, [r7, #14]
	static uint16_t CollectedData2 = 0;
	static uint16_t stationSUM;
	static uint8_t CurrentAngle1 = 0;
	static uint8_t CurrentAngle2 = 0;

	DataInTest = dataIn&0xf0;
 800223c:	89fb      	ldrh	r3, [r7, #14]
 800223e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002242:	b29a      	uxth	r2, r3
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <Protocal+0x44>)
 8002246:	801a      	strh	r2, [r3, #0]


//	//State Machine
	switch (State)
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <Protocal+0x48>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b06      	cmp	r3, #6
 800224e:	f200 83af 	bhi.w	80029b0 <Protocal+0x780>
 8002252:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <Protocal+0x28>)
 8002254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002258:	0800227d 	.word	0x0800227d
 800225c:	08002561 	.word	0x08002561
 8002260:	08002797 	.word	0x08002797
 8002264:	080027ab 	.word	0x080027ab
 8002268:	08002991 	.word	0x08002991
 800226c:	080029a7 	.word	0x080029a7
 8002270:	08002835 	.word	0x08002835
 8002274:	20000402 	.word	0x20000402
 8002278:	20000407 	.word	0x20000407
	{
	case Idle:
		stateeee = 1;
 800227c:	4ba1      	ldr	r3, [pc, #644]	; (8002504 <Protocal+0x2d4>)
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
		UARTsuccess = 0;
 8002282:	4ba1      	ldr	r3, [pc, #644]	; (8002508 <Protocal+0x2d8>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
		UARTerror = 0;
 8002288:	4ba0      	ldr	r3, [pc, #640]	; (800250c <Protocal+0x2dc>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
		if (DataInTest == 0b10010000)
 800228e:	4ba0      	ldr	r3, [pc, #640]	; (8002510 <Protocal+0x2e0>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	2b90      	cmp	r3, #144	; 0x90
 8002294:	f040 8160 	bne.w	8002558 <Protocal+0x328>
		{
			ModeIN = dataIn&0xf;
 8002298:	89fb      	ldrh	r3, [r7, #14]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b9c      	ldr	r3, [pc, #624]	; (8002514 <Protocal+0x2e4>)
 80022a4:	701a      	strb	r2, [r3, #0]
			if (ModeIN == 0b0001)
 80022a6:	4b9b      	ldr	r3, [pc, #620]	; (8002514 <Protocal+0x2e4>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d112      	bne.n	80022d4 <Protocal+0xa4>
			{
				Mode = 1;
 80022ae:	4b9a      	ldr	r3, [pc, #616]	; (8002518 <Protocal+0x2e8>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1;
 80022b4:	4b99      	ldr	r3, [pc, #612]	; (800251c <Protocal+0x2ec>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b96      	ldr	r3, [pc, #600]	; (8002520 <Protocal+0x2f0>)
 80022c6:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 80022c8:	4b96      	ldr	r3, [pc, #600]	; (8002524 <Protocal+0x2f4>)
 80022ca:	2202      	movs	r2, #2
 80022cc:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 80022ce:	4b96      	ldr	r3, [pc, #600]	; (8002528 <Protocal+0x2f8>)
 80022d0:	2202      	movs	r2, #2
 80022d2:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0010)
 80022d4:	4b8f      	ldr	r3, [pc, #572]	; (8002514 <Protocal+0x2e4>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d112      	bne.n	8002302 <Protocal+0xd2>
			{
				Mode = 2;
 80022dc:	4b8e      	ldr	r3, [pc, #568]	; (8002518 <Protocal+0x2e8>)
 80022de:	2202      	movs	r2, #2
 80022e0:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 80022e2:	4b91      	ldr	r3, [pc, #580]	; (8002528 <Protocal+0x2f8>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 80022e8:	4b8e      	ldr	r3, [pc, #568]	; (8002524 <Protocal+0x2f4>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b10;
 80022ee:	4b8b      	ldr	r3, [pc, #556]	; (800251c <Protocal+0x2ec>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b88      	ldr	r3, [pc, #544]	; (8002520 <Protocal+0x2f0>)
 8002300:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0011)
 8002302:	4b84      	ldr	r3, [pc, #528]	; (8002514 <Protocal+0x2e4>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d112      	bne.n	8002330 <Protocal+0x100>
			{
				Mode = 3;
 800230a:	4b83      	ldr	r3, [pc, #524]	; (8002518 <Protocal+0x2e8>)
 800230c:	2203      	movs	r2, #3
 800230e:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002310:	4b85      	ldr	r3, [pc, #532]	; (8002528 <Protocal+0x2f8>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8002316:	4b83      	ldr	r3, [pc, #524]	; (8002524 <Protocal+0x2f4>)
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b11;
 800231c:	4b7f      	ldr	r3, [pc, #508]	; (800251c <Protocal+0x2ec>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	b25b      	sxtb	r3, r3
 8002324:	f043 0303 	orr.w	r3, r3, #3
 8002328:	b25b      	sxtb	r3, r3
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b7c      	ldr	r3, [pc, #496]	; (8002520 <Protocal+0x2f0>)
 800232e:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0100)
 8002330:	4b78      	ldr	r3, [pc, #480]	; (8002514 <Protocal+0x2e4>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d112      	bne.n	800235e <Protocal+0x12e>
			{
				Mode = 4;
 8002338:	4b77      	ldr	r3, [pc, #476]	; (8002518 <Protocal+0x2e8>)
 800233a:	2204      	movs	r2, #4
 800233c:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 800233e:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <Protocal+0x2f8>)
 8002340:	2202      	movs	r2, #2
 8002342:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 8002344:	4b77      	ldr	r3, [pc, #476]	; (8002524 <Protocal+0x2f4>)
 8002346:	2202      	movs	r2, #2
 8002348:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b100;
 800234a:	4b74      	ldr	r3, [pc, #464]	; (800251c <Protocal+0x2ec>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	b25b      	sxtb	r3, r3
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	b25b      	sxtb	r3, r3
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4b71      	ldr	r3, [pc, #452]	; (8002520 <Protocal+0x2f0>)
 800235c:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0101)
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <Protocal+0x2e4>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b05      	cmp	r3, #5
 8002364:	d112      	bne.n	800238c <Protocal+0x15c>
			{
				Mode = 5;
 8002366:	4b6c      	ldr	r3, [pc, #432]	; (8002518 <Protocal+0x2e8>)
 8002368:	2205      	movs	r2, #5
 800236a:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 800236c:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <Protocal+0x2f8>)
 800236e:	2202      	movs	r2, #2
 8002370:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 8002372:	4b6c      	ldr	r3, [pc, #432]	; (8002524 <Protocal+0x2f4>)
 8002374:	2202      	movs	r2, #2
 8002376:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b101;
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <Protocal+0x2ec>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	b25b      	sxtb	r3, r3
 8002380:	f043 0305 	orr.w	r3, r3, #5
 8002384:	b25b      	sxtb	r3, r3
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b65      	ldr	r3, [pc, #404]	; (8002520 <Protocal+0x2f0>)
 800238a:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0110)
 800238c:	4b61      	ldr	r3, [pc, #388]	; (8002514 <Protocal+0x2e4>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d112      	bne.n	80023ba <Protocal+0x18a>
			{
				Mode = 6;
 8002394:	4b60      	ldr	r3, [pc, #384]	; (8002518 <Protocal+0x2e8>)
 8002396:	2206      	movs	r2, #6
 8002398:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <Protocal+0x2f8>)
 800239c:	2202      	movs	r2, #2
 800239e:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 80023a0:	4b60      	ldr	r3, [pc, #384]	; (8002524 <Protocal+0x2f4>)
 80023a2:	2202      	movs	r2, #2
 80023a4:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b110;
 80023a6:	4b5d      	ldr	r3, [pc, #372]	; (800251c <Protocal+0x2ec>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	f043 0306 	orr.w	r3, r3, #6
 80023b2:	b25b      	sxtb	r3, r3
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b5a      	ldr	r3, [pc, #360]	; (8002520 <Protocal+0x2f0>)
 80023b8:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0111)
 80023ba:	4b56      	ldr	r3, [pc, #344]	; (8002514 <Protocal+0x2e4>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b07      	cmp	r3, #7
 80023c0:	d112      	bne.n	80023e8 <Protocal+0x1b8>
			{
				Mode = 7;
 80023c2:	4b55      	ldr	r3, [pc, #340]	; (8002518 <Protocal+0x2e8>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	701a      	strb	r2, [r3, #0]
				State = Frame3_n;
 80023c8:	4b57      	ldr	r3, [pc, #348]	; (8002528 <Protocal+0x2f8>)
 80023ca:	2204      	movs	r2, #4
 80023cc:	701a      	strb	r2, [r3, #0]
				Frame = 3;
 80023ce:	4b55      	ldr	r3, [pc, #340]	; (8002524 <Protocal+0x2f4>)
 80023d0:	2203      	movs	r2, #3
 80023d2:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b111;
 80023d4:	4b51      	ldr	r3, [pc, #324]	; (800251c <Protocal+0x2ec>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	b25b      	sxtb	r3, r3
 80023dc:	f043 0307 	orr.w	r3, r3, #7
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b4e      	ldr	r3, [pc, #312]	; (8002520 <Protocal+0x2f0>)
 80023e6:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1000)
 80023e8:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <Protocal+0x2e4>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d112      	bne.n	8002416 <Protocal+0x1e6>
			{
				Mode = 8;
 80023f0:	4b49      	ldr	r3, [pc, #292]	; (8002518 <Protocal+0x2e8>)
 80023f2:	2208      	movs	r2, #8
 80023f4:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 80023f6:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <Protocal+0x2f8>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 80023fc:	4b49      	ldr	r3, [pc, #292]	; (8002524 <Protocal+0x2f4>)
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1000;
 8002402:	4b46      	ldr	r3, [pc, #280]	; (800251c <Protocal+0x2ec>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	b25b      	sxtb	r3, r3
 800240a:	f043 0308 	orr.w	r3, r3, #8
 800240e:	b25b      	sxtb	r3, r3
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <Protocal+0x2f0>)
 8002414:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1001)
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <Protocal+0x2e4>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b09      	cmp	r3, #9
 800241c:	d112      	bne.n	8002444 <Protocal+0x214>
			{
				Mode = 9;
 800241e:	4b3e      	ldr	r3, [pc, #248]	; (8002518 <Protocal+0x2e8>)
 8002420:	2209      	movs	r2, #9
 8002422:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002424:	4b40      	ldr	r3, [pc, #256]	; (8002528 <Protocal+0x2f8>)
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <Protocal+0x2f4>)
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1001;
 8002430:	4b3a      	ldr	r3, [pc, #232]	; (800251c <Protocal+0x2ec>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	b25b      	sxtb	r3, r3
 8002438:	f043 0309 	orr.w	r3, r3, #9
 800243c:	b25b      	sxtb	r3, r3
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b37      	ldr	r3, [pc, #220]	; (8002520 <Protocal+0x2f0>)
 8002442:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1010)
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <Protocal+0x2e4>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b0a      	cmp	r3, #10
 800244a:	d112      	bne.n	8002472 <Protocal+0x242>
			{
				Mode = 10;
 800244c:	4b32      	ldr	r3, [pc, #200]	; (8002518 <Protocal+0x2e8>)
 800244e:	220a      	movs	r2, #10
 8002450:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002452:	4b35      	ldr	r3, [pc, #212]	; (8002528 <Protocal+0x2f8>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8002458:	4b32      	ldr	r3, [pc, #200]	; (8002524 <Protocal+0x2f4>)
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1010;
 800245e:	4b2f      	ldr	r3, [pc, #188]	; (800251c <Protocal+0x2ec>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	b25b      	sxtb	r3, r3
 8002466:	f043 030a 	orr.w	r3, r3, #10
 800246a:	b25b      	sxtb	r3, r3
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <Protocal+0x2f0>)
 8002470:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1011)
 8002472:	4b28      	ldr	r3, [pc, #160]	; (8002514 <Protocal+0x2e4>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b0b      	cmp	r3, #11
 8002478:	d112      	bne.n	80024a0 <Protocal+0x270>
			{
				Mode = 11;
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <Protocal+0x2e8>)
 800247c:	220b      	movs	r2, #11
 800247e:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002480:	4b29      	ldr	r3, [pc, #164]	; (8002528 <Protocal+0x2f8>)
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8002486:	4b27      	ldr	r3, [pc, #156]	; (8002524 <Protocal+0x2f4>)
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1011;
 800248c:	4b23      	ldr	r3, [pc, #140]	; (800251c <Protocal+0x2ec>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	b25b      	sxtb	r3, r3
 8002494:	f043 030b 	orr.w	r3, r3, #11
 8002498:	b25b      	sxtb	r3, r3
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b20      	ldr	r3, [pc, #128]	; (8002520 <Protocal+0x2f0>)
 800249e:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1100)
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <Protocal+0x2e4>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b0c      	cmp	r3, #12
 80024a6:	d112      	bne.n	80024ce <Protocal+0x29e>
			{
				Mode = 12;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <Protocal+0x2e8>)
 80024aa:	220c      	movs	r2, #12
 80024ac:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <Protocal+0x2f8>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <Protocal+0x2f4>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1100;
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <Protocal+0x2ec>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	f043 030c 	orr.w	r3, r3, #12
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <Protocal+0x2f0>)
 80024cc:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1101)
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <Protocal+0x2e4>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b0d      	cmp	r3, #13
 80024d4:	d112      	bne.n	80024fc <Protocal+0x2cc>
			{
				Mode = 13;
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <Protocal+0x2e8>)
 80024d8:	220d      	movs	r2, #13
 80024da:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <Protocal+0x2f8>)
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <Protocal+0x2f4>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1101;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <Protocal+0x2ec>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	b25b      	sxtb	r3, r3
 80024f0:	f043 030d 	orr.w	r3, r3, #13
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <Protocal+0x2f0>)
 80024fa:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1110)
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <Protocal+0x2e4>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b0e      	cmp	r3, #14
 8002502:	e013      	b.n	800252c <Protocal+0x2fc>
 8002504:	20000405 	.word	0x20000405
 8002508:	20000310 	.word	0x20000310
 800250c:	20000311 	.word	0x20000311
 8002510:	20000402 	.word	0x20000402
 8002514:	20000408 	.word	0x20000408
 8002518:	200002f6 	.word	0x200002f6
 800251c:	20000019 	.word	0x20000019
 8002520:	20000409 	.word	0x20000409
 8002524:	200002f7 	.word	0x200002f7
 8002528:	20000407 	.word	0x20000407
 800252c:	f040 823f 	bne.w	80029ae <Protocal+0x77e>
			{
				Mode = 14;
 8002530:	4ba5      	ldr	r3, [pc, #660]	; (80027c8 <Protocal+0x598>)
 8002532:	220e      	movs	r2, #14
 8002534:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002536:	4ba5      	ldr	r3, [pc, #660]	; (80027cc <Protocal+0x59c>)
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 800253c:	4ba4      	ldr	r3, [pc, #656]	; (80027d0 <Protocal+0x5a0>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1110;
 8002542:	4ba4      	ldr	r3, [pc, #656]	; (80027d4 <Protocal+0x5a4>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	b25b      	sxtb	r3, r3
 800254a:	f043 030e 	orr.w	r3, r3, #14
 800254e:	b25b      	sxtb	r3, r3
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4ba1      	ldr	r3, [pc, #644]	; (80027d8 <Protocal+0x5a8>)
 8002554:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			State = Idle;
		}
		break;
 8002556:	e22a      	b.n	80029ae <Protocal+0x77e>
			State = Idle;
 8002558:	4b9c      	ldr	r3, [pc, #624]	; (80027cc <Protocal+0x59c>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
		break;
 800255e:	e226      	b.n	80029ae <Protocal+0x77e>
	case Frame1:
		stateeee = 2;
 8002560:	4b9e      	ldr	r3, [pc, #632]	; (80027dc <Protocal+0x5ac>)
 8002562:	2202      	movs	r2, #2
 8002564:	701a      	strb	r2, [r3, #0]
		frame1 = dataIn;
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b9d      	ldr	r3, [pc, #628]	; (80027e0 <Protocal+0x5b0>)
 800256c:	701a      	strb	r2, [r3, #0]
		checksumtest = CheckSumFunction(CheckSum, Frame, CollectedData);
 800256e:	4b9a      	ldr	r3, [pc, #616]	; (80027d8 <Protocal+0x5a8>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	4a97      	ldr	r2, [pc, #604]	; (80027d0 <Protocal+0x5a0>)
 8002574:	7811      	ldrb	r1, [r2, #0]
 8002576:	4a9b      	ldr	r2, [pc, #620]	; (80027e4 <Protocal+0x5b4>)
 8002578:	8812      	ldrh	r2, [r2, #0]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fa4d 	bl	8002a1c <CheckSumFunction>
 8002582:	4603      	mov	r3, r0
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b98      	ldr	r3, [pc, #608]	; (80027e8 <Protocal+0x5b8>)
 8002588:	701a      	strb	r2, [r3, #0]
			if (frame1 == checksumtest)
 800258a:	4b95      	ldr	r3, [pc, #596]	; (80027e0 <Protocal+0x5b0>)
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	4b96      	ldr	r3, [pc, #600]	; (80027e8 <Protocal+0x5b8>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	f040 80f2 	bne.w	800277c <Protocal+0x54c>
			{
				UARTsuccess += 1;
 8002598:	4b94      	ldr	r3, [pc, #592]	; (80027ec <Protocal+0x5bc>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b92      	ldr	r3, [pc, #584]	; (80027ec <Protocal+0x5bc>)
 80025a2:	701a      	strb	r2, [r3, #0]
				if (Mode == 2 || Mode == 3 || Mode == 12 || Mode == 13)
 80025a4:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <Protocal+0x598>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d00b      	beq.n	80025c4 <Protocal+0x394>
 80025ac:	4b86      	ldr	r3, [pc, #536]	; (80027c8 <Protocal+0x598>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d007      	beq.n	80025c4 <Protocal+0x394>
 80025b4:	4b84      	ldr	r3, [pc, #528]	; (80027c8 <Protocal+0x598>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d003      	beq.n	80025c4 <Protocal+0x394>
 80025bc:	4b82      	ldr	r3, [pc, #520]	; (80027c8 <Protocal+0x598>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b0d      	cmp	r3, #13
 80025c2:	d101      	bne.n	80025c8 <Protocal+0x398>
				{
					WriteACK1();
 80025c4:	f000 fa5a 	bl	8002a7c <WriteACK1>
				}
				if (Mode == 8) // Go to Station N
 80025c8:	4b7f      	ldr	r3, [pc, #508]	; (80027c8 <Protocal+0x598>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d10a      	bne.n	80025e6 <Protocal+0x3b6>
				{
					WriteACK1();
 80025d0:	f000 fa54 	bl	8002a7c <WriteACK1>
					StartMoving = 1;
 80025d4:	4b86      	ldr	r3, [pc, #536]	; (80027f0 <Protocal+0x5c0>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
					NextStation = 0;
 80025da:	4b86      	ldr	r3, [pc, #536]	; (80027f4 <Protocal+0x5c4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
					FinishedTask = 0;
 80025e0:	4b85      	ldr	r3, [pc, #532]	; (80027f8 <Protocal+0x5c8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
				}
				if (Mode == 9)
 80025e6:	4b78      	ldr	r3, [pc, #480]	; (80027c8 <Protocal+0x598>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d11f      	bne.n	800262e <Protocal+0x3fe>
				{
					//send current station**************************************************************************
					WriteACK1();
 80025ee:	f000 fa45 	bl	8002a7c <WriteACK1>
					uint8_t temp[] = {153,0,GoToStation[NextStation],CheckSumFunction(153, 2, GoToStation[NextStation])};
 80025f2:	2399      	movs	r3, #153	; 0x99
 80025f4:	763b      	strb	r3, [r7, #24]
 80025f6:	2300      	movs	r3, #0
 80025f8:	767b      	strb	r3, [r7, #25]
 80025fa:	4b7e      	ldr	r3, [pc, #504]	; (80027f4 <Protocal+0x5c4>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	4b7e      	ldr	r3, [pc, #504]	; (80027fc <Protocal+0x5cc>)
 8002602:	5c9b      	ldrb	r3, [r3, r2]
 8002604:	76bb      	strb	r3, [r7, #26]
 8002606:	4b7b      	ldr	r3, [pc, #492]	; (80027f4 <Protocal+0x5c4>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <Protocal+0x5cc>)
 800260e:	5c9b      	ldrb	r3, [r3, r2]
 8002610:	461a      	mov	r2, r3
 8002612:	2102      	movs	r1, #2
 8002614:	2099      	movs	r0, #153	; 0x99
 8002616:	f000 fa01 	bl	8002a1c <CheckSumFunction>
 800261a:	4603      	mov	r3, r0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	76fb      	strb	r3, [r7, #27]
					UARTTxWrite(&UART2, temp, 4) ;
 8002620:	f107 0318 	add.w	r3, r7, #24
 8002624:	2204      	movs	r2, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4875      	ldr	r0, [pc, #468]	; (8002800 <Protocal+0x5d0>)
 800262a:	f7ff fdb7 	bl	800219c <UARTTxWrite>
				}
				if (Mode == 10) //Decimal 4 degree
 800262e:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <Protocal+0x598>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d153      	bne.n	80026de <Protocal+0x4ae>
				{
					WriteACK1();
 8002636:	f000 fa21 	bl	8002a7c <WriteACK1>
					int radThousand = (int)(Degree*10000*3.14159265/180);
 800263a:	4b72      	ldr	r3, [pc, #456]	; (8002804 <Protocal+0x5d4>)
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002808 <Protocal+0x5d8>
 8002644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002648:	ee17 0a90 	vmov	r0, s15
 800264c:	f7fd ff28 	bl	80004a0 <__aeabi_f2d>
 8002650:	a35b      	add	r3, pc, #364	; (adr r3, 80027c0 <Protocal+0x590>)
 8002652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002656:	f7fd ff7b 	bl	8000550 <__aeabi_dmul>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	4b69      	ldr	r3, [pc, #420]	; (800280c <Protocal+0x5dc>)
 8002668:	f7fe f89c 	bl	80007a4 <__aeabi_ddiv>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f7fe fa1c 	bl	8000ab0 <__aeabi_d2iz>
 8002678:	4603      	mov	r3, r0
 800267a:	61fb      	str	r3, [r7, #28]
					CurrentAngle1 = (int8_t)(radThousand/256) ;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	2b00      	cmp	r3, #0
 8002680:	da00      	bge.n	8002684 <Protocal+0x454>
 8002682:	33ff      	adds	r3, #255	; 0xff
 8002684:	121b      	asrs	r3, r3, #8
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b61      	ldr	r3, [pc, #388]	; (8002810 <Protocal+0x5e0>)
 800268a:	701a      	strb	r2, [r3, #0]
					CurrentAngle2 = (int8_t)(radThousand%256) ;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	425a      	negs	r2, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	bf58      	it	pl
 8002696:	4253      	negpl	r3, r2
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <Protocal+0x5e4>)
 800269c:	701a      	strb	r2, [r3, #0]
					uint8_t temp[] = {154,CurrentAngle1, CurrentAngle2,CheckSumFunction(154, 2, CurrentAngle1+CurrentAngle2)};
 800269e:	239a      	movs	r3, #154	; 0x9a
 80026a0:	753b      	strb	r3, [r7, #20]
 80026a2:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <Protocal+0x5e0>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	757b      	strb	r3, [r7, #21]
 80026a8:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <Protocal+0x5e4>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	75bb      	strb	r3, [r7, #22]
 80026ae:	4b58      	ldr	r3, [pc, #352]	; (8002810 <Protocal+0x5e0>)
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	4b58      	ldr	r3, [pc, #352]	; (8002814 <Protocal+0x5e4>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	2102      	movs	r1, #2
 80026be:	209a      	movs	r0, #154	; 0x9a
 80026c0:	f000 f9ac 	bl	8002a1c <CheckSumFunction>
 80026c4:	4603      	mov	r3, r0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	75fb      	strb	r3, [r7, #23]
					UARTTxWrite(&UART2, temp, 4);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	2204      	movs	r2, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	484b      	ldr	r0, [pc, #300]	; (8002800 <Protocal+0x5d0>)
 80026d4:	f7ff fd62 	bl	800219c <UARTTxWrite>
					n = 0;
 80026d8:	4b4f      	ldr	r3, [pc, #316]	; (8002818 <Protocal+0x5e8>)
 80026da:	2200      	movs	r2, #0
 80026dc:	801a      	strh	r2, [r3, #0]
				}
				if (Mode == 11) //error; send now speed and top speed
 80026de:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <Protocal+0x598>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b0b      	cmp	r3, #11
 80026e4:	d13c      	bne.n	8002760 <Protocal+0x530>
				{
					WriteACK1();
 80026e6:	f000 f9c9 	bl	8002a7c <WriteACK1>
					uint8_t temp[] = {155,0,(int8_t)(VmaxReal * 255 / 10),CheckSumFunction(155, 2, (int8_t)(VmaxReal * 255 / 10))};
 80026ea:	239b      	movs	r3, #155	; 0x9b
 80026ec:	743b      	strb	r3, [r7, #16]
 80026ee:	2300      	movs	r3, #0
 80026f0:	747b      	strb	r3, [r7, #17]
 80026f2:	4b4a      	ldr	r3, [pc, #296]	; (800281c <Protocal+0x5ec>)
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002820 <Protocal+0x5f0>
 80026fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002700:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800270c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002710:	793b      	ldrb	r3, [r7, #4]
 8002712:	b25b      	sxtb	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	74bb      	strb	r3, [r7, #18]
 8002718:	4b40      	ldr	r3, [pc, #256]	; (800281c <Protocal+0x5ec>)
 800271a:	edd3 7a00 	vldr	s15, [r3]
 800271e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002820 <Protocal+0x5f0>
 8002722:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002726:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800272a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800272e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002732:	edc7 7a01 	vstr	s15, [r7, #4]
 8002736:	793b      	ldrb	r3, [r7, #4]
 8002738:	b25b      	sxtb	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	2102      	movs	r1, #2
 8002740:	209b      	movs	r0, #155	; 0x9b
 8002742:	f000 f96b 	bl	8002a1c <CheckSumFunction>
 8002746:	4603      	mov	r3, r0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	74fb      	strb	r3, [r7, #19]
					UARTTxWrite(&UART2, temp, 4) ;
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	2204      	movs	r2, #4
 8002752:	4619      	mov	r1, r3
 8002754:	482a      	ldr	r0, [pc, #168]	; (8002800 <Protocal+0x5d0>)
 8002756:	f7ff fd21 	bl	800219c <UARTTxWrite>
					//send Vmax
					n = 0;
 800275a:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <Protocal+0x5e8>)
 800275c:	2200      	movs	r2, #0
 800275e:	801a      	strh	r2, [r3, #0]
					//read Ack in while loop

				}
				if (Mode == 14)
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <Protocal+0x598>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b0e      	cmp	r3, #14
 8002766:	d105      	bne.n	8002774 <Protocal+0x544>
				{
					StartSetHome = 1;
 8002768:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <Protocal+0x5f4>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
					SetHomeFlag = 0;
 800276e:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <Protocal+0x5f8>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
				}
				State = Idle;
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <Protocal+0x59c>)
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
			{
				Mode = 0;
				UARTerror += 1;
				State = Idle;
			}
		break;
 800277a:	e119      	b.n	80029b0 <Protocal+0x780>
				Mode = 0;
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <Protocal+0x598>)
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
				UARTerror += 1;
 8002782:	4b2a      	ldr	r3, [pc, #168]	; (800282c <Protocal+0x5fc>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <Protocal+0x5fc>)
 800278c:	701a      	strb	r2, [r3, #0]
				State = Idle;
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <Protocal+0x59c>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
		break;
 8002794:	e10c      	b.n	80029b0 <Protocal+0x780>

	case Frame2_1:
		stateeee = 21;
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <Protocal+0x5ac>)
 8002798:	2215      	movs	r2, #21
 800279a:	701a      	strb	r2, [r3, #0]
		CollectedData = dataIn;
 800279c:	89fa      	ldrh	r2, [r7, #14]
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <Protocal+0x5b4>)
 80027a0:	801a      	strh	r2, [r3, #0]
		State = Frame2_2;
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <Protocal+0x59c>)
 80027a4:	2203      	movs	r2, #3
 80027a6:	701a      	strb	r2, [r3, #0]
		break;
 80027a8:	e102      	b.n	80029b0 <Protocal+0x780>
	case Frame2_2:
		stateeee = 22;
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <Protocal+0x5ac>)
 80027ac:	2216      	movs	r2, #22
 80027ae:	701a      	strb	r2, [r3, #0]
		CollectedData2 = dataIn;
 80027b0:	89fa      	ldrh	r2, [r7, #14]
 80027b2:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <Protocal+0x600>)
 80027b4:	801a      	strh	r2, [r3, #0]
		State = CheckSum2;
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <Protocal+0x59c>)
 80027b8:	2206      	movs	r2, #6
 80027ba:	701a      	strb	r2, [r3, #0]
		break;
 80027bc:	e0f8      	b.n	80029b0 <Protocal+0x780>
 80027be:	bf00      	nop
 80027c0:	53c8d4f1 	.word	0x53c8d4f1
 80027c4:	400921fb 	.word	0x400921fb
 80027c8:	200002f6 	.word	0x200002f6
 80027cc:	20000407 	.word	0x20000407
 80027d0:	200002f7 	.word	0x200002f7
 80027d4:	20000019 	.word	0x20000019
 80027d8:	20000409 	.word	0x20000409
 80027dc:	20000405 	.word	0x20000405
 80027e0:	200003ff 	.word	0x200003ff
 80027e4:	2000040a 	.word	0x2000040a
 80027e8:	20000404 	.word	0x20000404
 80027ec:	20000310 	.word	0x20000310
 80027f0:	20000350 	.word	0x20000350
 80027f4:	200003c6 	.word	0x200003c6
 80027f8:	200003c5 	.word	0x200003c5
 80027fc:	200003d0 	.word	0x200003d0
 8002800:	200002dc 	.word	0x200002dc
 8002804:	200003f4 	.word	0x200003f4
 8002808:	461c4000 	.word	0x461c4000
 800280c:	40668000 	.word	0x40668000
 8002810:	2000040c 	.word	0x2000040c
 8002814:	2000040d 	.word	0x2000040d
 8002818:	200002f4 	.word	0x200002f4
 800281c:	20000398 	.word	0x20000398
 8002820:	437f0000 	.word	0x437f0000
 8002824:	200003a9 	.word	0x200003a9
 8002828:	200003a8 	.word	0x200003a8
 800282c:	20000311 	.word	0x20000311
 8002830:	2000040e 	.word	0x2000040e
	case CheckSum2:
		stateeee = 23;
 8002834:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <Protocal+0x7a0>)
 8002836:	2217      	movs	r2, #23
 8002838:	701a      	strb	r2, [r3, #0]
		frame2 = dataIn;
 800283a:	89fb      	ldrh	r3, [r7, #14]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <Protocal+0x7a4>)
 8002840:	701a      	strb	r2, [r3, #0]
		checksumtest = CheckSumFunction(CheckSum, Frame, CollectedData + CollectedData2);
 8002842:	4b65      	ldr	r3, [pc, #404]	; (80029d8 <Protocal+0x7a8>)
 8002844:	7818      	ldrb	r0, [r3, #0]
 8002846:	4b65      	ldr	r3, [pc, #404]	; (80029dc <Protocal+0x7ac>)
 8002848:	7819      	ldrb	r1, [r3, #0]
 800284a:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <Protocal+0x7b0>)
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b64      	ldr	r3, [pc, #400]	; (80029e4 <Protocal+0x7b4>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4413      	add	r3, r2
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	f000 f8de 	bl	8002a1c <CheckSumFunction>
 8002860:	4603      	mov	r3, r0
 8002862:	b2da      	uxtb	r2, r3
 8002864:	4b60      	ldr	r3, [pc, #384]	; (80029e8 <Protocal+0x7b8>)
 8002866:	701a      	strb	r2, [r3, #0]
		if (frame2 == checksumtest)
 8002868:	4b5a      	ldr	r3, [pc, #360]	; (80029d4 <Protocal+0x7a4>)
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <Protocal+0x7b8>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	f040 8083 	bne.w	800297c <Protocal+0x74c>
		{
			UARTsuccess += 1;
 8002876:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <Protocal+0x7bc>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	3301      	adds	r3, #1
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4b5b      	ldr	r3, [pc, #364]	; (80029ec <Protocal+0x7bc>)
 8002880:	701a      	strb	r2, [r3, #0]
			if (Mode == 4)
 8002882:	4b5b      	ldr	r3, [pc, #364]	; (80029f0 <Protocal+0x7c0>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d11d      	bne.n	80028c6 <Protocal+0x696>
			{
				VmaxRPM = (double)CollectedData2/255*10 ;
 800288a:	4b56      	ldr	r3, [pc, #344]	; (80029e4 <Protocal+0x7b4>)
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fde4 	bl	800045c <__aeabi_ui2d>
 8002894:	a348      	add	r3, pc, #288	; (adr r3, 80029b8 <Protocal+0x788>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd ff83 	bl	80007a4 <__aeabi_ddiv>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	4b52      	ldr	r3, [pc, #328]	; (80029f4 <Protocal+0x7c4>)
 80028ac:	f7fd fe50 	bl	8000550 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f7fe f942 	bl	8000b40 <__aeabi_d2f>
 80028bc:	4603      	mov	r3, r0
 80028be:	4a4e      	ldr	r2, [pc, #312]	; (80029f8 <Protocal+0x7c8>)
 80028c0:	6013      	str	r3, [r2, #0]
				WriteACK1();
 80028c2:	f000 f8db 	bl	8002a7c <WriteACK1>
			}
			if (Mode == 5)
 80028c6:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <Protocal+0x7c0>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d145      	bne.n	800295a <Protocal+0x72a>
			{
				Station[0] = (((double)CollectedData * 256) + ((double)CollectedData2))/10000/3.14159265*180;
 80028ce:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <Protocal+0x7b0>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fdc2 	bl	800045c <__aeabi_ui2d>
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	4b47      	ldr	r3, [pc, #284]	; (80029fc <Protocal+0x7cc>)
 80028de:	f7fd fe37 	bl	8000550 <__aeabi_dmul>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4614      	mov	r4, r2
 80028e8:	461d      	mov	r5, r3
 80028ea:	4b3e      	ldr	r3, [pc, #248]	; (80029e4 <Protocal+0x7b4>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fdb4 	bl	800045c <__aeabi_ui2d>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	f7fd fc72 	bl	80001e4 <__adddf3>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	a32d      	add	r3, pc, #180	; (adr r3, 80029c0 <Protocal+0x790>)
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	f7fd ff49 	bl	80007a4 <__aeabi_ddiv>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	a32b      	add	r3, pc, #172	; (adr r3, 80029c8 <Protocal+0x798>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fd ff40 	bl	80007a4 <__aeabi_ddiv>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <Protocal+0x7d0>)
 8002932:	f7fd fe0d 	bl	8000550 <__aeabi_dmul>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	f7fe f8df 	bl	8000b00 <__aeabi_d2uiz>
 8002942:	4603      	mov	r3, r0
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <Protocal+0x7d4>)
 8002948:	801a      	strh	r2, [r3, #0]
				GoToStation[0] = 0;
 800294a:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <Protocal+0x7d8>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
				HowMuchStation = 1;
 8002950:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <Protocal+0x7dc>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
				WriteACK1();
 8002956:	f000 f891 	bl	8002a7c <WriteACK1>
			}
			if (Mode == 6)
 800295a:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <Protocal+0x7c0>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d108      	bne.n	8002974 <Protocal+0x744>
			{
				GoToStation[0] = dataIn;
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <Protocal+0x7d8>)
 8002968:	701a      	strb	r2, [r3, #0]
				HowMuchStation = 1;
 800296a:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <Protocal+0x7dc>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
				WriteACK1();
 8002970:	f000 f884 	bl	8002a7c <WriteACK1>
			if (Mode == 7)
			{
				//recieved n station
			}

			State = Idle;
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <Protocal+0x7e0>)
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
		{
			UARTerror += 1;
			State = Idle;
		}

		break;
 800297a:	e019      	b.n	80029b0 <Protocal+0x780>
			UARTerror += 1;
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <Protocal+0x7e4>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	3301      	adds	r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <Protocal+0x7e4>)
 8002986:	701a      	strb	r2, [r3, #0]
			State = Idle;
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <Protocal+0x7e0>)
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
		break;
 800298e:	e00f      	b.n	80029b0 <Protocal+0x780>
	case Frame3_n:
		stateeee = 31;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <Protocal+0x7a0>)
 8002992:	221f      	movs	r2, #31
 8002994:	701a      	strb	r2, [r3, #0]
		n_Station = dataIn;
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <Protocal+0x7e8>)
 800299c:	701a      	strb	r2, [r3, #0]
		State = Frame3_station;
 800299e:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <Protocal+0x7e0>)
 80029a0:	2205      	movs	r2, #5
 80029a2:	701a      	strb	r2, [r3, #0]
		break;
 80029a4:	e004      	b.n	80029b0 <Protocal+0x780>
	case Frame3_station:
		stateeee = 32;
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <Protocal+0x7a0>)
 80029a8:	2220      	movs	r2, #32
 80029aa:	701a      	strb	r2, [r3, #0]
		break;
 80029ac:	e000      	b.n	80029b0 <Protocal+0x780>
		break;
 80029ae:	bf00      	nop
	}
}
 80029b0:	bf00      	nop
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bdb0      	pop	{r4, r5, r7, pc}
 80029b8:	00000000 	.word	0x00000000
 80029bc:	406fe000 	.word	0x406fe000
 80029c0:	00000000 	.word	0x00000000
 80029c4:	40c38800 	.word	0x40c38800
 80029c8:	53c8d4f1 	.word	0x53c8d4f1
 80029cc:	400921fb 	.word	0x400921fb
 80029d0:	20000405 	.word	0x20000405
 80029d4:	20000400 	.word	0x20000400
 80029d8:	20000409 	.word	0x20000409
 80029dc:	200002f7 	.word	0x200002f7
 80029e0:	2000040a 	.word	0x2000040a
 80029e4:	2000040e 	.word	0x2000040e
 80029e8:	20000404 	.word	0x20000404
 80029ec:	20000310 	.word	0x20000310
 80029f0:	200002f6 	.word	0x200002f6
 80029f4:	40240000 	.word	0x40240000
 80029f8:	20000014 	.word	0x20000014
 80029fc:	40700000 	.word	0x40700000
 8002a00:	40668000 	.word	0x40668000
 8002a04:	200002fc 	.word	0x200002fc
 8002a08:	200003d0 	.word	0x200003d0
 8002a0c:	200003c7 	.word	0x200003c7
 8002a10:	20000407 	.word	0x20000407
 8002a14:	20000311 	.word	0x20000311
 8002a18:	200002f8 	.word	0x200002f8

08002a1c <CheckSumFunction>:

int16_t CheckSumFunction(uint8_t CheckSum, uint8_t Frame, uint8_t Data)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
 8002a26:	460b      	mov	r3, r1
 8002a28:	71bb      	strb	r3, [r7, #6]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	717b      	strb	r3, [r7, #5]
	uint16_t result = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	81fb      	strh	r3, [r7, #14]
	if (Frame == 1)
 8002a32:	79bb      	ldrb	r3, [r7, #6]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d103      	bne.n	8002a40 <CheckSumFunction+0x24>
	{
		result = ~(CheckSum);
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	81fb      	strh	r3, [r7, #14]
	}
	if (Frame == 2)
 8002a40:	79bb      	ldrb	r3, [r7, #6]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d107      	bne.n	8002a56 <CheckSumFunction+0x3a>
	{
		result = ~((CheckSum)+Data);
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	797b      	ldrb	r3, [r7, #5]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	81fb      	strh	r3, [r7, #14]
	}
	if (Frame == 3)
 8002a56:	79bb      	ldrb	r3, [r7, #6]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d107      	bne.n	8002a6c <CheckSumFunction+0x50>
	{
		result = ~((CheckSum)+Data);
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	797b      	ldrb	r3, [r7, #5]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	81fb      	strh	r3, [r7, #14]
	}
	return result;
 8002a6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <WriteACK1>:

void WriteACK1()
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
	//*********write ACK1*****************
	uint8_t temp[] = {0x58, 0b01110101};
 8002a82:	f247 5358 	movw	r3, #30040	; 0x7558
 8002a86:	80bb      	strh	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 2);
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4803      	ldr	r0, [pc, #12]	; (8002a9c <WriteACK1+0x20>)
 8002a90:	f7ff fb84 	bl	800219c <UARTTxWrite>
	//************************************
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	200002dc 	.word	0x200002dc

08002aa0 <WriteACK2>:
void WriteACK2()
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
	//*********write ACK2*****************
	uint8_t temp[] = {70, 0x6e};
 8002aa6:	f646 6346 	movw	r3, #28230	; 0x6e46
 8002aaa:	80bb      	strh	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 2);
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	2202      	movs	r2, #2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <WriteACK2+0x20>)
 8002ab4:	f7ff fb72 	bl	800219c <UARTTxWrite>
	//************************************
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	200002dc 	.word	0x200002dc

08002ac4 <SetHome>:
void SetHome()
{
 8002ac4:	b5b0      	push	{r4, r5, r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	HomeSignal[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) ; //Read set home
 8002ac8:	2101      	movs	r1, #1
 8002aca:	483d      	ldr	r0, [pc, #244]	; (8002bc0 <SetHome+0xfc>)
 8002acc:	f002 f860 	bl	8004b90 <HAL_GPIO_ReadPin>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <SetHome+0x100>)
 8002ad6:	701a      	strb	r2, [r3, #0]
	sum = HomeSignal[0] + HomeSignal[1]+ HomeSignal[2]+ HomeSignal[3]+ HomeSignal[4]+ HomeSignal[5]+ HomeSignal[6]+ HomeSignal[7];
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <SetHome+0x100>)
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <SetHome+0x100>)
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <SetHome+0x100>)
 8002ae6:	789b      	ldrb	r3, [r3, #2]
 8002ae8:	4413      	add	r3, r2
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b35      	ldr	r3, [pc, #212]	; (8002bc4 <SetHome+0x100>)
 8002aee:	78db      	ldrb	r3, [r3, #3]
 8002af0:	4413      	add	r3, r2
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b33      	ldr	r3, [pc, #204]	; (8002bc4 <SetHome+0x100>)
 8002af6:	791b      	ldrb	r3, [r3, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <SetHome+0x100>)
 8002afe:	795b      	ldrb	r3, [r3, #5]
 8002b00:	4413      	add	r3, r2
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <SetHome+0x100>)
 8002b06:	799b      	ldrb	r3, [r3, #6]
 8002b08:	4413      	add	r3, r2
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	4b2d      	ldr	r3, [pc, #180]	; (8002bc4 <SetHome+0x100>)
 8002b0e:	79db      	ldrb	r3, [r3, #7]
 8002b10:	4413      	add	r3, r2
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <SetHome+0x104>)
 8002b16:	701a      	strb	r2, [r3, #0]

	if (SetHomeFlag == 0)
 8002b18:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <SetHome+0x108>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d113      	bne.n	8002b48 <SetHome+0x84>
	{
		request = 5;
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <SetHome+0x10c>)
 8002b22:	4a2c      	ldr	r2, [pc, #176]	; (8002bd4 <SetHome+0x110>)
 8002b24:	601a      	str	r2, [r3, #0]
		Direction = 0;
 8002b26:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <SetHome+0x114>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
		if (sum > 0)
 8002b2c:	4b26      	ldr	r3, [pc, #152]	; (8002bc8 <SetHome+0x104>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <SetHome+0x84>
		{
			SetHomeFlag = 1;
 8002b34:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <SetHome+0x108>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
			SetHomeTimeStamp = micros();
 8002b3a:	f000 fe43 	bl	80037c4 <micros>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4926      	ldr	r1, [pc, #152]	; (8002bdc <SetHome+0x118>)
 8002b44:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}
	if (SetHomeFlag == 1)
 8002b48:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <SetHome+0x108>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d116      	bne.n	8002b7e <SetHome+0xba>
	{
		request = 0;
 8002b50:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <SetHome+0x10c>)
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
		Direction = 2;
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <SetHome+0x114>)
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	701a      	strb	r2, [r3, #0]
		if (micros()-SetHomeTimeStamp > 1000000)
 8002b5e:	f000 fe31 	bl	80037c4 <micros>
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <SetHome+0x118>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	1a84      	subs	r4, r0, r2
 8002b6a:	eb61 0503 	sbc.w	r5, r1, r3
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <SetHome+0x11c>)
 8002b70:	429c      	cmp	r4, r3
 8002b72:	f175 0300 	sbcs.w	r3, r5, #0
 8002b76:	d302      	bcc.n	8002b7e <SetHome+0xba>
		{
			SetHomeFlag = 2;
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <SetHome+0x108>)
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	701a      	strb	r2, [r3, #0]
		}
	}
	if (SetHomeFlag == 2)
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <SetHome+0x108>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d11a      	bne.n	8002bbc <SetHome+0xf8>
	{
		request = -0.5;
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <SetHome+0x10c>)
 8002b88:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8002b8c:	601a      	str	r2, [r3, #0]
		Direction = 1;
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <SetHome+0x114>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
		if (sum > 0)
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <SetHome+0x104>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00f      	beq.n	8002bbc <SetHome+0xf8>
		{
			request = 0;
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <SetHome+0x10c>)
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
			htim3.Instance->CNT = 0;
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <SetHome+0x120>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
			SetHomeFlag = 0;
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <SetHome+0x108>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
			StartSetHome = 0;
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <SetHome+0x124>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
			WriteACK1();
 8002bb8:	f7ff ff60 	bl	8002a7c <WriteACK1>
		}
	}
}
 8002bbc:	bf00      	nop
 8002bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	200003a0 	.word	0x200003a0
 8002bc8:	200003aa 	.word	0x200003aa
 8002bcc:	200003a8 	.word	0x200003a8
 8002bd0:	200003dc 	.word	0x200003dc
 8002bd4:	40a00000 	.word	0x40a00000
 8002bd8:	200003f8 	.word	0x200003f8
 8002bdc:	200003b0 	.word	0x200003b0
 8002be0:	000f4241 	.word	0x000f4241
 8002be4:	20000190 	.word	0x20000190
 8002be8:	200003a9 	.word	0x200003a9
 8002bec:	00000000 	.word	0x00000000

08002bf0 <Trajec>:


void Trajec()
{
 8002bf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bf4:	b088      	sub	sp, #32
 8002bf6:	af00      	add	r7, sp, #0
	float Vmax;
	Vmax = VmaxRPM * 0.10472 ; //rad per sec
 8002bf8:	4bbb      	ldr	r3, [pc, #748]	; (8002ee8 <Trajec+0x2f8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fc4f 	bl	80004a0 <__aeabi_f2d>
 8002c02:	a3ad      	add	r3, pc, #692	; (adr r3, 8002eb8 <Trajec+0x2c8>)
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f7fd fca2 	bl	8000550 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fd ff94 	bl	8000b40 <__aeabi_d2f>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	61fb      	str	r3, [r7, #28]
	float Amax = 0.5 ;  //rad per sec square
 8002c1c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002c20:	61bb      	str	r3, [r7, #24]
	if (ST == 0)
 8002c22:	4bb2      	ldr	r3, [pc, #712]	; (8002eec <Trajec+0x2fc>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d129      	bne.n	8002c7e <Trajec+0x8e>
	{
		StartTime = micros() ;
 8002c2a:	f000 fdcb 	bl	80037c4 <micros>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	f7fe f89b 	bl	8000d70 <__aeabi_ul2f>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4aac      	ldr	r2, [pc, #688]	; (8002ef0 <Trajec+0x300>)
 8002c3e:	6013      	str	r3, [r2, #0]
		ST = 1 ;
 8002c40:	4baa      	ldr	r3, [pc, #680]	; (8002eec <Trajec+0x2fc>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
		StartPos = Degree * 3.14159 / 180.0 ; //rad
 8002c46:	4bab      	ldr	r3, [pc, #684]	; (8002ef4 <Trajec+0x304>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fc28 	bl	80004a0 <__aeabi_f2d>
 8002c50:	a39b      	add	r3, pc, #620	; (adr r3, 8002ec0 <Trajec+0x2d0>)
 8002c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c56:	f7fd fc7b 	bl	8000550 <__aeabi_dmul>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4ba4      	ldr	r3, [pc, #656]	; (8002ef8 <Trajec+0x308>)
 8002c68:	f7fd fd9c 	bl	80007a4 <__aeabi_ddiv>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7fd ff64 	bl	8000b40 <__aeabi_d2f>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4aa0      	ldr	r2, [pc, #640]	; (8002efc <Trajec+0x30c>)
 8002c7c:	6013      	str	r3, [r2, #0]
	}
	tau = (micros() - StartTime) / 1000000 ; //sec
 8002c7e:	f000 fda1 	bl	80037c4 <micros>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f7fe f871 	bl	8000d70 <__aeabi_ul2f>
 8002c8e:	ee07 0a10 	vmov	s14, r0
 8002c92:	4b97      	ldr	r3, [pc, #604]	; (8002ef0 <Trajec+0x300>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c9c:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002f00 <Trajec+0x310>
 8002ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca4:	4b97      	ldr	r3, [pc, #604]	; (8002f04 <Trajec+0x314>)
 8002ca6:	edc3 7a00 	vstr	s15, [r3]

	Qi = StartPos ;
 8002caa:	4b94      	ldr	r3, [pc, #592]	; (8002efc <Trajec+0x30c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a96      	ldr	r2, [pc, #600]	; (8002f08 <Trajec+0x318>)
 8002cb0:	6013      	str	r3, [r2, #0]
	Qf = FinalPos * 3.14159 / 180.0 ;
 8002cb2:	4b96      	ldr	r3, [pc, #600]	; (8002f0c <Trajec+0x31c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fbf2 	bl	80004a0 <__aeabi_f2d>
 8002cbc:	a380      	add	r3, pc, #512	; (adr r3, 8002ec0 <Trajec+0x2d0>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	f7fd fc45 	bl	8000550 <__aeabi_dmul>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	4b89      	ldr	r3, [pc, #548]	; (8002ef8 <Trajec+0x308>)
 8002cd4:	f7fd fd66 	bl	80007a4 <__aeabi_ddiv>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7fd ff2e 	bl	8000b40 <__aeabi_d2f>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4a8a      	ldr	r2, [pc, #552]	; (8002f10 <Trajec+0x320>)
 8002ce8:	6013      	str	r3, [r2, #0]

	if (Qf - Qi > 3.14159265)
 8002cea:	4b89      	ldr	r3, [pc, #548]	; (8002f10 <Trajec+0x320>)
 8002cec:	ed93 7a00 	vldr	s14, [r3]
 8002cf0:	4b85      	ldr	r3, [pc, #532]	; (8002f08 <Trajec+0x318>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfa:	ee17 0a90 	vmov	r0, s15
 8002cfe:	f7fd fbcf 	bl	80004a0 <__aeabi_f2d>
 8002d02:	a371      	add	r3, pc, #452	; (adr r3, 8002ec8 <Trajec+0x2d8>)
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	f7fd feb2 	bl	8000a70 <__aeabi_dcmpgt>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d012      	beq.n	8002d38 <Trajec+0x148>
	{
		Qi += 2*3.14159265;
 8002d12:	4b7d      	ldr	r3, [pc, #500]	; (8002f08 <Trajec+0x318>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fbc2 	bl	80004a0 <__aeabi_f2d>
 8002d1c:	a36c      	add	r3, pc, #432	; (adr r3, 8002ed0 <Trajec+0x2e0>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	f7fd fa5f 	bl	80001e4 <__adddf3>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7fd ff07 	bl	8000b40 <__aeabi_d2f>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4a74      	ldr	r2, [pc, #464]	; (8002f08 <Trajec+0x318>)
 8002d36:	6013      	str	r3, [r2, #0]
	}
	if (Qf - Qi < -3.14159265)
 8002d38:	4b75      	ldr	r3, [pc, #468]	; (8002f10 <Trajec+0x320>)
 8002d3a:	ed93 7a00 	vldr	s14, [r3]
 8002d3e:	4b72      	ldr	r3, [pc, #456]	; (8002f08 <Trajec+0x318>)
 8002d40:	edd3 7a00 	vldr	s15, [r3]
 8002d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d48:	ee17 0a90 	vmov	r0, s15
 8002d4c:	f7fd fba8 	bl	80004a0 <__aeabi_f2d>
 8002d50:	a361      	add	r3, pc, #388	; (adr r3, 8002ed8 <Trajec+0x2e8>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f7fd fe6d 	bl	8000a34 <__aeabi_dcmplt>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d012      	beq.n	8002d86 <Trajec+0x196>
	{
		Qf += 2*3.14159265;
 8002d60:	4b6b      	ldr	r3, [pc, #428]	; (8002f10 <Trajec+0x320>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fb9b 	bl	80004a0 <__aeabi_f2d>
 8002d6a:	a359      	add	r3, pc, #356	; (adr r3, 8002ed0 <Trajec+0x2e0>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fa38 	bl	80001e4 <__adddf3>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7fd fee0 	bl	8000b40 <__aeabi_d2f>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4a63      	ldr	r2, [pc, #396]	; (8002f10 <Trajec+0x320>)
 8002d84:	6013      	str	r3, [r2, #0]
	}
	TA1= (40.0 * sqrt(3.0))*(Qf - Qi);
 8002d86:	4b62      	ldr	r3, [pc, #392]	; (8002f10 <Trajec+0x320>)
 8002d88:	ed93 7a00 	vldr	s14, [r3]
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	; (8002f08 <Trajec+0x318>)
 8002d8e:	edd3 7a00 	vldr	s15, [r3]
 8002d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d96:	ee17 0a90 	vmov	r0, s15
 8002d9a:	f7fd fb81 	bl	80004a0 <__aeabi_f2d>
 8002d9e:	a350      	add	r3, pc, #320	; (adr r3, 8002ee0 <Trajec+0x2f0>)
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f7fd fbd4 	bl	8000550 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fd fec6 	bl	8000b40 <__aeabi_d2f>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4a57      	ldr	r2, [pc, #348]	; (8002f14 <Trajec+0x324>)
 8002db8:	6013      	str	r3, [r2, #0]
	TA2 = TA1/(3.0*Amax) ;
 8002dba:	4b56      	ldr	r3, [pc, #344]	; (8002f14 <Trajec+0x324>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fb6e 	bl	80004a0 <__aeabi_f2d>
 8002dc4:	4680      	mov	r8, r0
 8002dc6:	4689      	mov	r9, r1
 8002dc8:	69b8      	ldr	r0, [r7, #24]
 8002dca:	f7fd fb69 	bl	80004a0 <__aeabi_f2d>
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <Trajec+0x328>)
 8002dd4:	f7fd fbbc 	bl	8000550 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4640      	mov	r0, r8
 8002dde:	4649      	mov	r1, r9
 8002de0:	f7fd fce0 	bl	80007a4 <__aeabi_ddiv>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	f7fd fea8 	bl	8000b40 <__aeabi_d2f>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4a4a      	ldr	r2, [pc, #296]	; (8002f1c <Trajec+0x32c>)
 8002df4:	6013      	str	r3, [r2, #0]
	if (TA2 >= 0)
 8002df6:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <Trajec+0x32c>)
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e04:	db04      	blt.n	8002e10 <Trajec+0x220>
	{
		TA3 = TA2;
 8002e06:	4b45      	ldr	r3, [pc, #276]	; (8002f1c <Trajec+0x32c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a45      	ldr	r2, [pc, #276]	; (8002f20 <Trajec+0x330>)
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00c      	b.n	8002e2a <Trajec+0x23a>
	}
	else
	{
		TA3 = TA2 - (2*TA2);
 8002e10:	4b42      	ldr	r3, [pc, #264]	; (8002f1c <Trajec+0x32c>)
 8002e12:	ed93 7a00 	vldr	s14, [r3]
 8002e16:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <Trajec+0x32c>)
 8002e18:	edd3 7a00 	vldr	s15, [r3]
 8002e1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e24:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <Trajec+0x330>)
 8002e26:	edc3 7a00 	vstr	s15, [r3]
	}
	TA = sqrt(TA3) / 2.0 ;
 8002e2a:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <Trajec+0x330>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fb36 	bl	80004a0 <__aeabi_f2d>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	ec43 2b10 	vmov	d0, r2, r3
 8002e3c:	f005 fb1a 	bl	8008474 <sqrt>
 8002e40:	ec51 0b10 	vmov	r0, r1, d0
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e4c:	f7fd fcaa 	bl	80007a4 <__aeabi_ddiv>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4610      	mov	r0, r2
 8002e56:	4619      	mov	r1, r3
 8002e58:	f7fd fe72 	bl	8000b40 <__aeabi_d2f>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4a31      	ldr	r2, [pc, #196]	; (8002f24 <Trajec+0x334>)
 8002e60:	6013      	str	r3, [r2, #0]

	TV1 = (15*Qf - 15*Qi)/(8*Vmax);
 8002e62:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <Trajec+0x320>)
 8002e64:	edd3 7a00 	vldr	s15, [r3]
 8002e68:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002e6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <Trajec+0x318>)
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8002e7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e7e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002e82:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e86:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002e8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e92:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <Trajec+0x338>)
 8002e94:	edc3 7a00 	vstr	s15, [r3]
	if (TV1 >= 0)
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <Trajec+0x338>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea6:	db43      	blt.n	8002f30 <Trajec+0x340>
	{
		TV = TV1;
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <Trajec+0x338>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <Trajec+0x33c>)
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	e04b      	b.n	8002f4a <Trajec+0x35a>
 8002eb2:	bf00      	nop
 8002eb4:	f3af 8000 	nop.w
 8002eb8:	0f3cb3e5 	.word	0x0f3cb3e5
 8002ebc:	3fbaceee 	.word	0x3fbaceee
 8002ec0:	f01b866e 	.word	0xf01b866e
 8002ec4:	400921f9 	.word	0x400921f9
 8002ec8:	53c8d4f1 	.word	0x53c8d4f1
 8002ecc:	400921fb 	.word	0x400921fb
 8002ed0:	53c8d4f1 	.word	0x53c8d4f1
 8002ed4:	401921fb 	.word	0x401921fb
 8002ed8:	53c8d4f1 	.word	0x53c8d4f1
 8002edc:	c00921fb 	.word	0xc00921fb
 8002ee0:	d1372fea 	.word	0xd1372fea
 8002ee4:	4051520c 	.word	0x4051520c
 8002ee8:	20000014 	.word	0x20000014
 8002eec:	20000351 	.word	0x20000351
 8002ef0:	2000034c 	.word	0x2000034c
 8002ef4:	200003f4 	.word	0x200003f4
 8002ef8:	40668000 	.word	0x40668000
 8002efc:	20000360 	.word	0x20000360
 8002f00:	49742400 	.word	0x49742400
 8002f04:	20000378 	.word	0x20000378
 8002f08:	20000364 	.word	0x20000364
 8002f0c:	20000010 	.word	0x20000010
 8002f10:	20000368 	.word	0x20000368
 8002f14:	2000037c 	.word	0x2000037c
 8002f18:	40080000 	.word	0x40080000
 8002f1c:	20000380 	.word	0x20000380
 8002f20:	20000384 	.word	0x20000384
 8002f24:	2000036c 	.word	0x2000036c
 8002f28:	20000388 	.word	0x20000388
 8002f2c:	20000370 	.word	0x20000370
	}
	else
	{
		TV = TV1 - (2*TV1);
 8002f30:	4bd6      	ldr	r3, [pc, #856]	; (800328c <Trajec+0x69c>)
 8002f32:	ed93 7a00 	vldr	s14, [r3]
 8002f36:	4bd5      	ldr	r3, [pc, #852]	; (800328c <Trajec+0x69c>)
 8002f38:	edd3 7a00 	vldr	s15, [r3]
 8002f3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f44:	4bd2      	ldr	r3, [pc, #840]	; (8003290 <Trajec+0x6a0>)
 8002f46:	edc3 7a00 	vstr	s15, [r3]
	}

	if (TV > TA)
 8002f4a:	4bd1      	ldr	r3, [pc, #836]	; (8003290 <Trajec+0x6a0>)
 8002f4c:	ed93 7a00 	vldr	s14, [r3]
 8002f50:	4bd0      	ldr	r3, [pc, #832]	; (8003294 <Trajec+0x6a4>)
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5e:	dd03      	ble.n	8002f68 <Trajec+0x378>
	{
		T = TV ;
 8002f60:	4bcb      	ldr	r3, [pc, #812]	; (8003290 <Trajec+0x6a0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4acc      	ldr	r2, [pc, #816]	; (8003298 <Trajec+0x6a8>)
 8002f66:	6013      	str	r3, [r2, #0]
	}
	if (TV <= TA)
 8002f68:	4bc9      	ldr	r3, [pc, #804]	; (8003290 <Trajec+0x6a0>)
 8002f6a:	ed93 7a00 	vldr	s14, [r3]
 8002f6e:	4bc9      	ldr	r3, [pc, #804]	; (8003294 <Trajec+0x6a4>)
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	d803      	bhi.n	8002f86 <Trajec+0x396>
	{
		T = TA ;
 8002f7e:	4bc5      	ldr	r3, [pc, #788]	; (8003294 <Trajec+0x6a4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4ac5      	ldr	r2, [pc, #788]	; (8003298 <Trajec+0x6a8>)
 8002f84:	6013      	str	r3, [r2, #0]
	}
	float a0 = Qi ;
 8002f86:	4bc5      	ldr	r3, [pc, #788]	; (800329c <Trajec+0x6ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	617b      	str	r3, [r7, #20]
	float a1 = 0 ;
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
	float a2 = 0 ;
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
	float a3 = (1 / (2 * (T*T*T))) * (20 * (Qf-Qi)) ;
 8002f98:	4bbf      	ldr	r3, [pc, #764]	; (8003298 <Trajec+0x6a8>)
 8002f9a:	ed93 7a00 	vldr	s14, [r3]
 8002f9e:	4bbe      	ldr	r3, [pc, #760]	; (8003298 <Trajec+0x6a8>)
 8002fa0:	edd3 7a00 	vldr	s15, [r3]
 8002fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fa8:	4bbb      	ldr	r3, [pc, #748]	; (8003298 <Trajec+0x6a8>)
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fbe:	4bb8      	ldr	r3, [pc, #736]	; (80032a0 <Trajec+0x6b0>)
 8002fc0:	edd3 6a00 	vldr	s13, [r3]
 8002fc4:	4bb5      	ldr	r3, [pc, #724]	; (800329c <Trajec+0x6ac>)
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002fce:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002fd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fda:	edc7 7a02 	vstr	s15, [r7, #8]
	float a4 = (1 / (2 * (T*T*T*T))) * (30 * (Qi-Qf)) ;
 8002fde:	4bae      	ldr	r3, [pc, #696]	; (8003298 <Trajec+0x6a8>)
 8002fe0:	ed93 7a00 	vldr	s14, [r3]
 8002fe4:	4bac      	ldr	r3, [pc, #688]	; (8003298 <Trajec+0x6a8>)
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fee:	4baa      	ldr	r3, [pc, #680]	; (8003298 <Trajec+0x6a8>)
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ff8:	4ba7      	ldr	r3, [pc, #668]	; (8003298 <Trajec+0x6a8>)
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800300a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300e:	4ba3      	ldr	r3, [pc, #652]	; (800329c <Trajec+0x6ac>)
 8003010:	edd3 6a00 	vldr	s13, [r3]
 8003014:	4ba2      	ldr	r3, [pc, #648]	; (80032a0 <Trajec+0x6b0>)
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800301e:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8003022:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302a:	edc7 7a01 	vstr	s15, [r7, #4]
	float a5 = (1 / (2 * (T*T*T*T*T))) * (12 * (Qf-Qi)) ;
 800302e:	4b9a      	ldr	r3, [pc, #616]	; (8003298 <Trajec+0x6a8>)
 8003030:	ed93 7a00 	vldr	s14, [r3]
 8003034:	4b98      	ldr	r3, [pc, #608]	; (8003298 <Trajec+0x6a8>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800303e:	4b96      	ldr	r3, [pc, #600]	; (8003298 <Trajec+0x6a8>)
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003048:	4b93      	ldr	r3, [pc, #588]	; (8003298 <Trajec+0x6a8>)
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003052:	4b91      	ldr	r3, [pc, #580]	; (8003298 <Trajec+0x6a8>)
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003068:	4b8d      	ldr	r3, [pc, #564]	; (80032a0 <Trajec+0x6b0>)
 800306a:	edd3 6a00 	vldr	s13, [r3]
 800306e:	4b8b      	ldr	r3, [pc, #556]	; (800329c <Trajec+0x6ac>)
 8003070:	edd3 7a00 	vldr	s15, [r3]
 8003074:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003078:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800307c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003084:	edc7 7a00 	vstr	s15, [r7]

	if (micros() - StartTime < T*1000000)
 8003088:	f000 fb9c 	bl	80037c4 <micros>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	f7fd fe6c 	bl	8000d70 <__aeabi_ul2f>
 8003098:	ee07 0a10 	vmov	s14, r0
 800309c:	4b81      	ldr	r3, [pc, #516]	; (80032a4 <Trajec+0x6b4>)
 800309e:	edd3 7a00 	vldr	s15, [r3]
 80030a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030a6:	4b7c      	ldr	r3, [pc, #496]	; (8003298 <Trajec+0x6a8>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80032a8 <Trajec+0x6b8>
 80030b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	f140 8156 	bpl.w	800336c <Trajec+0x77c>
	{
		if (micros() - Trajtimestamp > 1500)
 80030c0:	f000 fb80 	bl	80037c4 <micros>
 80030c4:	4b79      	ldr	r3, [pc, #484]	; (80032ac <Trajec+0x6bc>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	1a84      	subs	r4, r0, r2
 80030cc:	eb61 0503 	sbc.w	r5, r1, r3
 80030d0:	f240 53dd 	movw	r3, #1501	; 0x5dd
 80030d4:	429c      	cmp	r4, r3
 80030d6:	f175 0300 	sbcs.w	r3, r5, #0
 80030da:	f0c0 8147 	bcc.w	800336c <Trajec+0x77c>
		{
			position = a0 + a1*tau + a2*tau*tau + a3*tau*tau*tau + a4*tau*tau*tau*tau + a5*tau*tau*tau*tau*tau; //rad
 80030de:	4b74      	ldr	r3, [pc, #464]	; (80032b0 <Trajec+0x6c0>)
 80030e0:	ed93 7a00 	vldr	s14, [r3]
 80030e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80030e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f4:	4b6e      	ldr	r3, [pc, #440]	; (80032b0 <Trajec+0x6c0>)
 80030f6:	edd3 6a00 	vldr	s13, [r3]
 80030fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80030fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003102:	4b6b      	ldr	r3, [pc, #428]	; (80032b0 <Trajec+0x6c0>)
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800310c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003110:	4b67      	ldr	r3, [pc, #412]	; (80032b0 <Trajec+0x6c0>)
 8003112:	edd3 6a00 	vldr	s13, [r3]
 8003116:	edd7 7a02 	vldr	s15, [r7, #8]
 800311a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800311e:	4b64      	ldr	r3, [pc, #400]	; (80032b0 <Trajec+0x6c0>)
 8003120:	edd3 7a00 	vldr	s15, [r3]
 8003124:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003128:	4b61      	ldr	r3, [pc, #388]	; (80032b0 <Trajec+0x6c0>)
 800312a:	edd3 7a00 	vldr	s15, [r3]
 800312e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003136:	4b5e      	ldr	r3, [pc, #376]	; (80032b0 <Trajec+0x6c0>)
 8003138:	edd3 6a00 	vldr	s13, [r3]
 800313c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003140:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003144:	4b5a      	ldr	r3, [pc, #360]	; (80032b0 <Trajec+0x6c0>)
 8003146:	edd3 7a00 	vldr	s15, [r3]
 800314a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800314e:	4b58      	ldr	r3, [pc, #352]	; (80032b0 <Trajec+0x6c0>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003158:	4b55      	ldr	r3, [pc, #340]	; (80032b0 <Trajec+0x6c0>)
 800315a:	edd3 7a00 	vldr	s15, [r3]
 800315e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003166:	4b52      	ldr	r3, [pc, #328]	; (80032b0 <Trajec+0x6c0>)
 8003168:	edd3 6a00 	vldr	s13, [r3]
 800316c:	edd7 7a00 	vldr	s15, [r7]
 8003170:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003174:	4b4e      	ldr	r3, [pc, #312]	; (80032b0 <Trajec+0x6c0>)
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800317e:	4b4c      	ldr	r3, [pc, #304]	; (80032b0 <Trajec+0x6c0>)
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003188:	4b49      	ldr	r3, [pc, #292]	; (80032b0 <Trajec+0x6c0>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003192:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <Trajec+0x6c0>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800319c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a0:	4b44      	ldr	r3, [pc, #272]	; (80032b4 <Trajec+0x6c4>)
 80031a2:	edc3 7a00 	vstr	s15, [r3]
			velocity = a1 + 2*a2*tau + 3*a3*tau*tau + 4*a4*tau*tau*tau + 5*a5*tau*tau*tau*tau; //rad/s
 80031a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80031aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80031ae:	4b40      	ldr	r3, [pc, #256]	; (80032b0 <Trajec+0x6c0>)
 80031b0:	edd3 7a00 	vldr	s15, [r3]
 80031b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80031bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80031c4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80031c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80031cc:	4b38      	ldr	r3, [pc, #224]	; (80032b0 <Trajec+0x6c0>)
 80031ce:	edd3 7a00 	vldr	s15, [r3]
 80031d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031d6:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <Trajec+0x6c0>)
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80031e8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80031ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80031f0:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <Trajec+0x6c0>)
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031fa:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <Trajec+0x6c0>)
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003204:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <Trajec+0x6c0>)
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800320e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003212:	edd7 7a00 	vldr	s15, [r7]
 8003216:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800321a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <Trajec+0x6c0>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003228:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <Trajec+0x6c0>)
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003232:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <Trajec+0x6c0>)
 8003234:	edd3 7a00 	vldr	s15, [r3]
 8003238:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800323c:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <Trajec+0x6c0>)
 800323e:	edd3 7a00 	vldr	s15, [r3]
 8003242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <Trajec+0x6c8>)
 800324c:	edc3 7a00 	vstr	s15, [r3]
			acceleration = 2*a2 + 6*a3*tau + 12*a4*tau*tau + 20*a5*tau*tau*tau; //rad per secsquare
 8003250:	edd7 7a03 	vldr	s15, [r7, #12]
 8003254:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003258:	edd7 7a02 	vldr	s15, [r7, #8]
 800325c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8003260:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <Trajec+0x6c0>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800326e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003272:	edd7 7a01 	vldr	s15, [r7, #4]
 8003276:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800327a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800327e:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <Trajec+0x6c0>)
 8003280:	edd3 7a00 	vldr	s15, [r3]
 8003284:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003288:	e018      	b.n	80032bc <Trajec+0x6cc>
 800328a:	bf00      	nop
 800328c:	20000388 	.word	0x20000388
 8003290:	20000370 	.word	0x20000370
 8003294:	2000036c 	.word	0x2000036c
 8003298:	20000374 	.word	0x20000374
 800329c:	20000364 	.word	0x20000364
 80032a0:	20000368 	.word	0x20000368
 80032a4:	2000034c 	.word	0x2000034c
 80032a8:	49742400 	.word	0x49742400
 80032ac:	20000390 	.word	0x20000390
 80032b0:	20000378 	.word	0x20000378
 80032b4:	20000358 	.word	0x20000358
 80032b8:	20000354 	.word	0x20000354
 80032bc:	4b44      	ldr	r3, [pc, #272]	; (80033d0 <Trajec+0x7e0>)
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ca:	edd7 7a00 	vldr	s15, [r7]
 80032ce:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80032d2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80032d6:	4b3e      	ldr	r3, [pc, #248]	; (80033d0 <Trajec+0x7e0>)
 80032d8:	edd3 7a00 	vldr	s15, [r3]
 80032dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032e0:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <Trajec+0x7e0>)
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <Trajec+0x7e0>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <Trajec+0x7e4>)
 80032fa:	edc3 7a00 	vstr	s15, [r3]

			position = position * 180 / 3.1415 ; //degree
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <Trajec+0x7e8>)
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80033dc <Trajec+0x7ec>
 8003308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800330c:	ee17 0a90 	vmov	r0, s15
 8003310:	f7fd f8c6 	bl	80004a0 <__aeabi_f2d>
 8003314:	a32a      	add	r3, pc, #168	; (adr r3, 80033c0 <Trajec+0x7d0>)
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f7fd fa43 	bl	80007a4 <__aeabi_ddiv>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	f7fd fc0b 	bl	8000b40 <__aeabi_d2f>
 800332a:	4603      	mov	r3, r0
 800332c:	4a2a      	ldr	r2, [pc, #168]	; (80033d8 <Trajec+0x7e8>)
 800332e:	6013      	str	r3, [r2, #0]
			velocity = velocity * 9.549297; //rpm
 8003330:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <Trajec+0x7f0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f8b3 	bl	80004a0 <__aeabi_f2d>
 800333a:	a323      	add	r3, pc, #140	; (adr r3, 80033c8 <Trajec+0x7d8>)
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f7fd f906 	bl	8000550 <__aeabi_dmul>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	f7fd fbf8 	bl	8000b40 <__aeabi_d2f>
 8003350:	4603      	mov	r3, r0
 8003352:	4a23      	ldr	r2, [pc, #140]	; (80033e0 <Trajec+0x7f0>)
 8003354:	6013      	str	r3, [r2, #0]
			Trajtimestamp = micros() ;
 8003356:	f000 fa35 	bl	80037c4 <micros>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4921      	ldr	r1, [pc, #132]	; (80033e4 <Trajec+0x7f4>)
 8003360:	e9c1 2300 	strd	r2, r3, [r1]
			request = velocity ;
 8003364:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <Trajec+0x7f0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1f      	ldr	r2, [pc, #124]	; (80033e8 <Trajec+0x7f8>)
 800336a:	6013      	str	r3, [r2, #0]
		}
	}
	if (micros() - StartTime > (T*1000000)+500000)
 800336c:	f000 fa2a 	bl	80037c4 <micros>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4610      	mov	r0, r2
 8003376:	4619      	mov	r1, r3
 8003378:	f7fd fcfa 	bl	8000d70 <__aeabi_ul2f>
 800337c:	ee07 0a10 	vmov	s14, r0
 8003380:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <Trajec+0x7fc>)
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	ee37 7a67 	vsub.f32	s14, s14, s15
 800338a:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <Trajec+0x800>)
 800338c:	edd3 7a00 	vldr	s15, [r3]
 8003390:	eddf 6a18 	vldr	s13, [pc, #96]	; 80033f4 <Trajec+0x804>
 8003394:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003398:	eddf 6a17 	vldr	s13, [pc, #92]	; 80033f8 <Trajec+0x808>
 800339c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a8:	dc00      	bgt.n	80033ac <Trajec+0x7bc>
	{
		FinishedTraj = 1;
	}

}
 80033aa:	e002      	b.n	80033b2 <Trajec+0x7c2>
		FinishedTraj = 1;
 80033ac:	4b13      	ldr	r3, [pc, #76]	; (80033fc <Trajec+0x80c>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033bc:	f3af 8000 	nop.w
 80033c0:	c083126f 	.word	0xc083126f
 80033c4:	400921ca 	.word	0x400921ca
 80033c8:	74d594f2 	.word	0x74d594f2
 80033cc:	4023193d 	.word	0x4023193d
 80033d0:	20000378 	.word	0x20000378
 80033d4:	2000035c 	.word	0x2000035c
 80033d8:	20000358 	.word	0x20000358
 80033dc:	43340000 	.word	0x43340000
 80033e0:	20000354 	.word	0x20000354
 80033e4:	20000390 	.word	0x20000390
 80033e8:	200003dc 	.word	0x200003dc
 80033ec:	2000034c 	.word	0x2000034c
 80033f0:	20000374 	.word	0x20000374
 80033f4:	49742400 	.word	0x49742400
 80033f8:	48f42400 	.word	0x48f42400
 80033fc:	2000039c 	.word	0x2000039c

08003400 <PIDinit>:

void PIDinit()
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
	preErr1 = 0 ;
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <PIDinit+0x64>)
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
	preErr2 = 0 ;
 800340c:	4b16      	ldr	r3, [pc, #88]	; (8003468 <PIDinit+0x68>)
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
	PreviousPWM = 0 ;
 8003414:	4b15      	ldr	r3, [pc, #84]	; (800346c <PIDinit+0x6c>)
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
	PWMPercent = 0 ;
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <PIDinit+0x70>)
 800341e:	2200      	movs	r2, #0
 8003420:	801a      	strh	r2, [r3, #0]
	Propotional = 0 ;
 8003422:	4b14      	ldr	r3, [pc, #80]	; (8003474 <PIDinit+0x74>)
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
	Integrator = 0 ;
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <PIDinit+0x78>)
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
	Differentiator = 0 ;
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <PIDinit+0x7c>)
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
	P = 0 ;
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <PIDinit+0x80>)
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
	I = 0 ;
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <PIDinit+0x84>)
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
	D = 0 ;
 800344a:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <PIDinit+0x88>)
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
	Tau = 0 ;
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <PIDinit+0x8c>)
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	20000324 	.word	0x20000324
 8003468:	20000328 	.word	0x20000328
 800346c:	20000320 	.word	0x20000320
 8003470:	200003e0 	.word	0x200003e0
 8003474:	2000032c 	.word	0x2000032c
 8003478:	20000330 	.word	0x20000330
 800347c:	20000334 	.word	0x20000334
 8003480:	20000340 	.word	0x20000340
 8003484:	20000344 	.word	0x20000344
 8003488:	20000348 	.word	0x20000348
 800348c:	20000338 	.word	0x20000338

08003490 <PID>:

void PID()
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
	float req,Vel ;
	if (request < 0)
 8003496:	4b4e      	ldr	r3, [pc, #312]	; (80035d0 <PID+0x140>)
 8003498:	edd3 7a00 	vldr	s15, [r3]
 800349c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a4:	d510      	bpl.n	80034c8 <PID+0x38>
	{
		req = - request ;
 80034a6:	4b4a      	ldr	r3, [pc, #296]	; (80035d0 <PID+0x140>)
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	eef1 7a67 	vneg.f32	s15, s15
 80034b0:	edc7 7a03 	vstr	s15, [r7, #12]
		Vel = - VelocityRPM ;
 80034b4:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <PID+0x144>)
 80034b6:	edd3 7a00 	vldr	s15, [r3]
 80034ba:	eef1 7a67 	vneg.f32	s15, s15
 80034be:	edc7 7a02 	vstr	s15, [r7, #8]
		Direction = 1 ;
 80034c2:	4b45      	ldr	r3, [pc, #276]	; (80035d8 <PID+0x148>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
	}
	if (request > 0)
 80034c8:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <PID+0x140>)
 80034ca:	edd3 7a00 	vldr	s15, [r3]
 80034ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d6:	dd08      	ble.n	80034ea <PID+0x5a>
	{
		req = request ;
 80034d8:	4b3d      	ldr	r3, [pc, #244]	; (80035d0 <PID+0x140>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
		Vel = VelocityRPM ;
 80034de:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <PID+0x144>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60bb      	str	r3, [r7, #8]
		Direction = 0 ;
 80034e4:	4b3c      	ldr	r3, [pc, #240]	; (80035d8 <PID+0x148>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
	}
	float error = req - Vel;
 80034ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80034ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80034f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f6:	edc7 7a01 	vstr	s15, [r7, #4]
	DeltaU = ((P+I+D)*error) - ((P+(2*D))*preErr1) + (D*preErr2) ;
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <PID+0x14c>)
 80034fc:	ed93 7a00 	vldr	s14, [r3]
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <PID+0x150>)
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800350a:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <PID+0x154>)
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003514:	edd7 7a01 	vldr	s15, [r7, #4]
 8003518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800351c:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <PID+0x154>)
 800351e:	edd3 7a00 	vldr	s15, [r3]
 8003522:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003526:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <PID+0x14c>)
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003530:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <PID+0x158>)
 8003532:	edd3 7a00 	vldr	s15, [r3]
 8003536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800353e:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <PID+0x154>)
 8003540:	edd3 6a00 	vldr	s13, [r3]
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <PID+0x15c>)
 8003546:	edd3 7a00 	vldr	s15, [r3]
 800354a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800354e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003552:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <PID+0x160>)
 8003554:	edc3 7a00 	vstr	s15, [r3]
	PWMPercent = PreviousPWM + DeltaU + InitialPWM ;
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <PID+0x164>)
 800355a:	ed93 7a00 	vldr	s14, [r3]
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <PID+0x160>)
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003568:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <PID+0x168>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800357c:	ee17 3a90 	vmov	r3, s15
 8003580:	b29a      	uxth	r2, r3
 8003582:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <PID+0x16c>)
 8003584:	801a      	strh	r2, [r3, #0]
	if (PWMPercent > 50000)
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <PID+0x16c>)
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800358e:	4293      	cmp	r3, r2
 8003590:	d903      	bls.n	800359a <PID+0x10a>
	{
		PWMPercent = 50000;
 8003592:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <PID+0x16c>)
 8003594:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003598:	801a      	strh	r2, [r3, #0]
	}
	if (PWMPercent < 0)
	{
		PWMPercent = 0 ;
	}
	PreviousPWM = PWMPercent - InitialPWM ;
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <PID+0x16c>)
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <PID+0x168>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ae:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <PID+0x164>)
 80035b0:	edc3 7a00 	vstr	s15, [r3]
	preErr2 = preErr1 ;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <PID+0x158>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <PID+0x15c>)
 80035ba:	6013      	str	r3, [r2, #0]
	preErr1 = error ;
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <PID+0x158>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6013      	str	r3, [r2, #0]

}
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	200003dc 	.word	0x200003dc
 80035d4:	200003f0 	.word	0x200003f0
 80035d8:	200003f8 	.word	0x200003f8
 80035dc:	20000340 	.word	0x20000340
 80035e0:	20000344 	.word	0x20000344
 80035e4:	20000348 	.word	0x20000348
 80035e8:	20000324 	.word	0x20000324
 80035ec:	20000328 	.word	0x20000328
 80035f0:	2000033c 	.word	0x2000033c
 80035f4:	20000320 	.word	0x20000320
 80035f8:	20000000 	.word	0x20000000
 80035fc:	200003e0 	.word	0x200003e0

08003600 <Velocity>:
	PPreerror = error;
}


float Velocity()
{
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	ed2d 8b02 	vpush	{d8}
 8003606:	af00      	add	r7, sp, #0
	  if (micros() - TimestampEncoder >= 100)
 8003608:	f000 f8dc 	bl	80037c4 <micros>
 800360c:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <Velocity+0xb0>)
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	1a84      	subs	r4, r0, r2
 8003614:	eb61 0503 	sbc.w	r5, r1, r3
 8003618:	2c64      	cmp	r4, #100	; 0x64
 800361a:	f175 0300 	sbcs.w	r3, r5, #0
 800361e:	d325      	bcc.n	800366c <Velocity+0x6c>
	  {
		  TimestampEncoder = micros();
 8003620:	f000 f8d0 	bl	80037c4 <micros>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4921      	ldr	r1, [pc, #132]	; (80036b0 <Velocity+0xb0>)
 800362a:	e9c1 2300 	strd	r2, r3, [r1]
		  EncoderVel = (EncoderVel * 999 + EncoderVelocity_Update()) / 1000.0;
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <Velocity+0xb4>)
 8003630:	edd3 7a00 	vldr	s15, [r3]
 8003634:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80036b8 <Velocity+0xb8>
 8003638:	ee27 8a87 	vmul.f32	s16, s15, s14
 800363c:	f000 f86e 	bl	800371c <EncoderVelocity_Update>
 8003640:	eef0 7a40 	vmov.f32	s15, s0
 8003644:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003648:	ee17 0a90 	vmov	r0, s15
 800364c:	f7fc ff28 	bl	80004a0 <__aeabi_f2d>
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <Velocity+0xbc>)
 8003656:	f7fd f8a5 	bl	80007a4 <__aeabi_ddiv>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	f7fd fa6d 	bl	8000b40 <__aeabi_d2f>
 8003666:	4603      	mov	r3, r0
 8003668:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <Velocity+0xb4>)
 800366a:	6013      	str	r3, [r2, #0]
	  }
	  return EncoderVel * 60.0 / 2048.0; //pulse per sec to rpm
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <Velocity+0xb4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fc ff15 	bl	80004a0 <__aeabi_f2d>
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <Velocity+0xc0>)
 800367c:	f7fc ff68 	bl	8000550 <__aeabi_dmul>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <Velocity+0xc4>)
 800368e:	f7fd f889 	bl	80007a4 <__aeabi_ddiv>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	f7fd fa51 	bl	8000b40 <__aeabi_d2f>
 800369e:	4603      	mov	r3, r0
 80036a0:	ee07 3a90 	vmov	s15, r3
}
 80036a4:	eeb0 0a67 	vmov.f32	s0, s15
 80036a8:	46bd      	mov	sp, r7
 80036aa:	ecbd 8b02 	vpop	{d8}
 80036ae:	bdb0      	pop	{r4, r5, r7, pc}
 80036b0:	200003b8 	.word	0x200003b8
 80036b4:	200003c0 	.word	0x200003c0
 80036b8:	4479c000 	.word	0x4479c000
 80036bc:	408f4000 	.word	0x408f4000
 80036c0:	404e0000 	.word	0x404e0000
 80036c4:	40a00000 	.word	0x40a00000

080036c8 <PWMgeneration>:
void PWMgeneration()
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
	  if (Direction == 0)
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <PWMgeneration+0x48>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d104      	bne.n	80036de <PWMgeneration+0x16>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50000);
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <PWMgeneration+0x4c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80036dc:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 1)
 80036de:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <PWMgeneration+0x48>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d103      	bne.n	80036ee <PWMgeneration+0x26>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <PWMgeneration+0x4c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 2)
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <PWMgeneration+0x48>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d104      	bne.n	8003700 <PWMgeneration+0x38>
	  {
		  PIDinit() ;
 80036f6:	f7ff fe83 	bl	8003400 <PIDinit>
		  PWMPercent = 0 ;
 80036fa:	4b07      	ldr	r3, [pc, #28]	; (8003718 <PWMgeneration+0x50>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	801a      	strh	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMPercent);
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <PWMgeneration+0x50>)
 8003702:	881a      	ldrh	r2, [r3, #0]
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <PWMgeneration+0x4c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200003f8 	.word	0x200003f8
 8003714:	20000100 	.word	0x20000100
 8003718:	200003e0 	.word	0x200003e0

0800371c <EncoderVelocity_Update>:
#define  HTIM_ENCODER htim3
#define  MAX_SUBPOSITION_OVERFLOW 1024
#define  MAX_ENCODER_PERIOD 2048

float EncoderVelocity_Update()
{
 800371c:	b5b0      	push	{r4, r5, r7, lr}
 800371e:	ed2d 8b02 	vpush	{d8}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8003726:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <EncoderVelocity_Update+0x98>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 800372e:	f000 f849 	bl	80037c4 <micros>
 8003732:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <EncoderVelocity_Update+0x9c>)
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003740:	1a84      	subs	r4, r0, r2
 8003742:	eb61 0503 	sbc.w	r5, r1, r3
 8003746:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 800374a:	4b1c      	ldr	r3, [pc, #112]	; (80037bc <EncoderVelocity_Update+0xa0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	db04      	blt.n	8003766 <EncoderVelocity_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e007      	b.n	8003776 <EncoderVelocity_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800376c:	dc03      	bgt.n	8003776 <EncoderVelocity_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003774:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8003776:	4a11      	ldr	r2, [pc, #68]	; (80037bc <EncoderVelocity_Update+0xa0>)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 800377c:	490e      	ldr	r1, [pc, #56]	; (80037b8 <EncoderVelocity_Update+0x9c>)
 800377e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003782:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <EncoderVelocity_Update+0xa4>)
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800379a:	f7fd fae9 	bl	8000d70 <__aeabi_ul2f>
 800379e:	ee07 0a10 	vmov	s14, r0
 80037a2:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 80037a6:	eeb0 0a67 	vmov.f32	s0, s15
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	ecbd 8b02 	vpop	{d8}
 80037b2:	bdb0      	pop	{r4, r5, r7, pc}
 80037b4:	20000190 	.word	0x20000190
 80037b8:	20000410 	.word	0x20000410
 80037bc:	20000418 	.word	0x20000418
 80037c0:	000f4240 	.word	0x000f4240

080037c4 <micros>:
	{
		_micros += 4294967295;
	}
}
uint64_t micros()
{
 80037c4:	b4b0      	push	{r4, r5, r7}
 80037c6:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <micros+0x2c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2200      	movs	r2, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	4611      	mov	r1, r2
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <micros+0x30>)
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	1884      	adds	r4, r0, r2
 80037dc:	eb41 0503 	adc.w	r5, r1, r3
 80037e0:	4622      	mov	r2, r4
 80037e2:	462b      	mov	r3, r5
}
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bcb0      	pop	{r4, r5, r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000148 	.word	0x20000148
 80037f4:	200003e8 	.word	0x200003e8

080037f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037fc:	b672      	cpsid	i
}
 80037fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003800:	e7fe      	b.n	8003800 <Error_Handler+0x8>
	...

08003804 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <HAL_MspInit+0x4c>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	4a0f      	ldr	r2, [pc, #60]	; (8003850 <HAL_MspInit+0x4c>)
 8003814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003818:	6453      	str	r3, [r2, #68]	; 0x44
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <HAL_MspInit+0x4c>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003822:	607b      	str	r3, [r7, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_MspInit+0x4c>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	4a08      	ldr	r2, [pc, #32]	; (8003850 <HAL_MspInit+0x4c>)
 8003830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003834:	6413      	str	r3, [r2, #64]	; 0x40
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_MspInit+0x4c>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003842:	2007      	movs	r0, #7
 8003844:	f000 fbdc 	bl	8004000 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40023800 	.word	0x40023800

08003854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08a      	sub	sp, #40	; 0x28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800385c:	f107 0314 	add.w	r3, r7, #20
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <HAL_I2C_MspInit+0x84>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d12b      	bne.n	80038ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	4b18      	ldr	r3, [pc, #96]	; (80038dc <HAL_I2C_MspInit+0x88>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	4a17      	ldr	r2, [pc, #92]	; (80038dc <HAL_I2C_MspInit+0x88>)
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_I2C_MspInit+0x88>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003892:	23c0      	movs	r3, #192	; 0xc0
 8003894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003896:	2312      	movs	r3, #18
 8003898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800389a:	2301      	movs	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389e:	2303      	movs	r3, #3
 80038a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038a2:	2304      	movs	r3, #4
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a6:	f107 0314 	add.w	r3, r7, #20
 80038aa:	4619      	mov	r1, r3
 80038ac:	480c      	ldr	r0, [pc, #48]	; (80038e0 <HAL_I2C_MspInit+0x8c>)
 80038ae:	f000 ffeb 	bl	8004888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_I2C_MspInit+0x88>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4a08      	ldr	r2, [pc, #32]	; (80038dc <HAL_I2C_MspInit+0x88>)
 80038bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038c0:	6413      	str	r3, [r2, #64]	; 0x40
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_I2C_MspInit+0x88>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80038ce:	bf00      	nop
 80038d0:	3728      	adds	r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40005400 	.word	0x40005400
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40020400 	.word	0x40020400

080038e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a15      	ldr	r2, [pc, #84]	; (8003948 <HAL_TIM_Base_MspInit+0x64>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d10e      	bne.n	8003914 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	4b14      	ldr	r3, [pc, #80]	; (800394c <HAL_TIM_Base_MspInit+0x68>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	4a13      	ldr	r2, [pc, #76]	; (800394c <HAL_TIM_Base_MspInit+0x68>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6453      	str	r3, [r2, #68]	; 0x44
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_TIM_Base_MspInit+0x68>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003912:	e012      	b.n	800393a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d10d      	bne.n	800393a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <HAL_TIM_Base_MspInit+0x68>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <HAL_TIM_Base_MspInit+0x68>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_TIM_Base_MspInit+0x68>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40010000 	.word	0x40010000
 800394c:	40023800 	.word	0x40023800

08003950 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <HAL_TIM_Encoder_MspInit+0x84>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d12b      	bne.n	80039ca <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <HAL_TIM_Encoder_MspInit+0x88>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a10      	ldr	r2, [pc, #64]	; (80039d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_TIM_Encoder_MspInit+0x88>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039aa:	23c0      	movs	r3, #192	; 0xc0
 80039ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ae:	2302      	movs	r3, #2
 80039b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b6:	2300      	movs	r3, #0
 80039b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039ba:	2302      	movs	r3, #2
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039be:	f107 0314 	add.w	r3, r7, #20
 80039c2:	4619      	mov	r1, r3
 80039c4:	4805      	ldr	r0, [pc, #20]	; (80039dc <HAL_TIM_Encoder_MspInit+0x8c>)
 80039c6:	f000 ff5f 	bl	8004888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039ca:	bf00      	nop
 80039cc:	3728      	adds	r7, #40	; 0x28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40020000 	.word	0x40020000

080039e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <HAL_TIM_MspPostInit+0x68>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d11e      	bne.n	8003a40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <HAL_TIM_MspPostInit+0x6c>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <HAL_TIM_MspPostInit+0x6c>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6313      	str	r3, [r2, #48]	; 0x30
 8003a12:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <HAL_TIM_MspPostInit+0x6c>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a30:	2301      	movs	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a34:	f107 030c 	add.w	r3, r7, #12
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4805      	ldr	r0, [pc, #20]	; (8003a50 <HAL_TIM_MspPostInit+0x70>)
 8003a3c:	f000 ff24 	bl	8004888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a40:	bf00      	nop
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40020000 	.word	0x40020000

08003a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a4c      	ldr	r2, [pc, #304]	; (8003ba4 <HAL_UART_MspInit+0x150>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	f040 8091 	bne.w	8003b9a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	4b4a      	ldr	r3, [pc, #296]	; (8003ba8 <HAL_UART_MspInit+0x154>)
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	4a49      	ldr	r2, [pc, #292]	; (8003ba8 <HAL_UART_MspInit+0x154>)
 8003a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a86:	6413      	str	r3, [r2, #64]	; 0x40
 8003a88:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_UART_MspInit+0x154>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	4b43      	ldr	r3, [pc, #268]	; (8003ba8 <HAL_UART_MspInit+0x154>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	4a42      	ldr	r2, [pc, #264]	; (8003ba8 <HAL_UART_MspInit+0x154>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa4:	4b40      	ldr	r3, [pc, #256]	; (8003ba8 <HAL_UART_MspInit+0x154>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003abc:	2303      	movs	r3, #3
 8003abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ac0:	2307      	movs	r3, #7
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4838      	ldr	r0, [pc, #224]	; (8003bac <HAL_UART_MspInit+0x158>)
 8003acc:	f000 fedc 	bl	8004888 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003ad0:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003ad2:	4a38      	ldr	r2, [pc, #224]	; (8003bb4 <HAL_UART_MspInit+0x160>)
 8003ad4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003ad8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003adc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ade:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae4:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003aea:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003af0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003af2:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003af8:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003afe:	4b2c      	ldr	r3, [pc, #176]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b04:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b06:	4b2a      	ldr	r3, [pc, #168]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b0c:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b12:	4827      	ldr	r0, [pc, #156]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003b14:	f000 fab6 	bl	8004084 <HAL_DMA_Init>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003b1e:	f7ff fe6b 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38
 8003b28:	4a21      	ldr	r2, [pc, #132]	; (8003bb0 <HAL_UART_MspInit+0x15c>)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b30:	4a22      	ldr	r2, [pc, #136]	; (8003bbc <HAL_UART_MspInit+0x168>)
 8003b32:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003b34:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b3c:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b3e:	2240      	movs	r2, #64	; 0x40
 8003b40:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b42:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b48:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b4e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b50:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b56:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003b5c:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b68:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b6e:	4812      	ldr	r0, [pc, #72]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b70:	f000 fa88 	bl	8004084 <HAL_DMA_Init>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003b7a:	f7ff fe3d 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b82:	635a      	str	r2, [r3, #52]	; 0x34
 8003b84:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <HAL_UART_MspInit+0x164>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	2026      	movs	r0, #38	; 0x26
 8003b90:	f000 fa41 	bl	8004016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b94:	2026      	movs	r0, #38	; 0x26
 8003b96:	f000 fa5a 	bl	800404e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b9a:	bf00      	nop
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40004400 	.word	0x40004400
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40020000 	.word	0x40020000
 8003bb0:	2000021c 	.word	0x2000021c
 8003bb4:	40026088 	.word	0x40026088
 8003bb8:	2000027c 	.word	0x2000027c
 8003bbc:	400260a0 	.word	0x400260a0

08003bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bc4:	e7fe      	b.n	8003bc4 <NMI_Handler+0x4>

08003bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bca:	e7fe      	b.n	8003bca <HardFault_Handler+0x4>

08003bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd0:	e7fe      	b.n	8003bd0 <MemManage_Handler+0x4>

08003bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bd6:	e7fe      	b.n	8003bd6 <BusFault_Handler+0x4>

08003bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bdc:	e7fe      	b.n	8003bdc <UsageFault_Handler+0x4>

08003bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c0c:	f000 f8e4 	bl	8003dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003c18:	4802      	ldr	r0, [pc, #8]	; (8003c24 <DMA1_Stream5_IRQHandler+0x10>)
 8003c1a:	f000 fbcb 	bl	80043b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	2000021c 	.word	0x2000021c

08003c28 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003c2c:	4802      	ldr	r0, [pc, #8]	; (8003c38 <DMA1_Stream6_IRQHandler+0x10>)
 8003c2e:	f000 fbc1 	bl	80043b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	2000027c 	.word	0x2000027c

08003c3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c40:	4802      	ldr	r0, [pc, #8]	; (8003c4c <USART2_IRQHandler+0x10>)
 8003c42:	f003 fa17 	bl	8007074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200001d8 	.word	0x200001d8

08003c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <_sbrk+0x5c>)
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <_sbrk+0x60>)
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <_sbrk+0x64>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <_sbrk+0x64>)
 8003c6e:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <_sbrk+0x68>)
 8003c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <_sbrk+0x64>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d207      	bcs.n	8003c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c80:	f004 faf0 	bl	8008264 <__errno>
 8003c84:	4603      	mov	r3, r0
 8003c86:	220c      	movs	r2, #12
 8003c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	e009      	b.n	8003ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <_sbrk+0x64>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <_sbrk+0x64>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <_sbrk+0x64>)
 8003ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20020000 	.word	0x20020000
 8003cb0:	00000400 	.word	0x00000400
 8003cb4:	2000041c 	.word	0x2000041c
 8003cb8:	20000438 	.word	0x20000438

08003cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <SystemInit+0x20>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	4a05      	ldr	r2, [pc, #20]	; (8003cdc <SystemInit+0x20>)
 8003cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ce4:	480d      	ldr	r0, [pc, #52]	; (8003d1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ce6:	490e      	ldr	r1, [pc, #56]	; (8003d20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cec:	e002      	b.n	8003cf4 <LoopCopyDataInit>

08003cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cf2:	3304      	adds	r3, #4

08003cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cf8:	d3f9      	bcc.n	8003cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cfc:	4c0b      	ldr	r4, [pc, #44]	; (8003d2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d00:	e001      	b.n	8003d06 <LoopFillZerobss>

08003d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d04:	3204      	adds	r2, #4

08003d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d08:	d3fb      	bcc.n	8003d02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d0a:	f7ff ffd7 	bl	8003cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d0e:	f004 faaf 	bl	8008270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d12:	f7fd f9f5 	bl	8001100 <main>
  bx  lr    
 8003d16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d20:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003d24:	08008678 	.word	0x08008678
  ldr r2, =_sbss
 8003d28:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003d2c:	20000434 	.word	0x20000434

08003d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d30:	e7fe      	b.n	8003d30 <ADC_IRQHandler>
	...

08003d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d38:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <HAL_Init+0x40>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a0d      	ldr	r2, [pc, #52]	; (8003d74 <HAL_Init+0x40>)
 8003d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_Init+0x40>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <HAL_Init+0x40>)
 8003d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <HAL_Init+0x40>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a07      	ldr	r2, [pc, #28]	; (8003d74 <HAL_Init+0x40>)
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d5c:	2003      	movs	r0, #3
 8003d5e:	f000 f94f 	bl	8004000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d62:	2000      	movs	r0, #0
 8003d64:	f000 f808 	bl	8003d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d68:	f7ff fd4c 	bl	8003804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023c00 	.word	0x40023c00

08003d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d80:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <HAL_InitTick+0x54>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_InitTick+0x58>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f967 	bl	800406a <HAL_SYSTICK_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e00e      	b.n	8003dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b0f      	cmp	r3, #15
 8003daa:	d80a      	bhi.n	8003dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dac:	2200      	movs	r2, #0
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295
 8003db4:	f000 f92f 	bl	8004016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003db8:	4a06      	ldr	r2, [pc, #24]	; (8003dd4 <HAL_InitTick+0x5c>)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e000      	b.n	8003dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	2000001c 	.word	0x2000001c
 8003dd0:	20000024 	.word	0x20000024
 8003dd4:	20000020 	.word	0x20000020

08003dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_IncTick+0x20>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_IncTick+0x24>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4413      	add	r3, r2
 8003de8:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <HAL_IncTick+0x24>)
 8003dea:	6013      	str	r3, [r2, #0]
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	20000024 	.word	0x20000024
 8003dfc:	20000420 	.word	0x20000420

08003e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return uwTick;
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <HAL_GetTick+0x14>)
 8003e06:	681b      	ldr	r3, [r3, #0]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000420 	.word	0x20000420

08003e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e20:	f7ff ffee 	bl	8003e00 <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d005      	beq.n	8003e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <HAL_Delay+0x44>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e3e:	bf00      	nop
 8003e40:	f7ff ffde 	bl	8003e00 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d8f7      	bhi.n	8003e40 <HAL_Delay+0x28>
  {
  }
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000024 	.word	0x20000024

08003e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e92:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	60d3      	str	r3, [r2, #12]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	0a1b      	lsrs	r3, r3, #8
 8003eb2:	f003 0307 	and.w	r3, r3, #7
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	db0b      	blt.n	8003eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	f003 021f 	and.w	r2, r3, #31
 8003edc:	4907      	ldr	r1, [pc, #28]	; (8003efc <__NVIC_EnableIRQ+0x38>)
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	e000e100 	.word	0xe000e100

08003f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	6039      	str	r1, [r7, #0]
 8003f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	db0a      	blt.n	8003f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	490c      	ldr	r1, [pc, #48]	; (8003f4c <__NVIC_SetPriority+0x4c>)
 8003f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1e:	0112      	lsls	r2, r2, #4
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	440b      	add	r3, r1
 8003f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f28:	e00a      	b.n	8003f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	4908      	ldr	r1, [pc, #32]	; (8003f50 <__NVIC_SetPriority+0x50>)
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	3b04      	subs	r3, #4
 8003f38:	0112      	lsls	r2, r2, #4
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	761a      	strb	r2, [r3, #24]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000e100 	.word	0xe000e100
 8003f50:	e000ed00 	.word	0xe000ed00

08003f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b089      	sub	sp, #36	; 0x24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f1c3 0307 	rsb	r3, r3, #7
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	bf28      	it	cs
 8003f72:	2304      	movcs	r3, #4
 8003f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	d902      	bls.n	8003f84 <NVIC_EncodePriority+0x30>
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	3b03      	subs	r3, #3
 8003f82:	e000      	b.n	8003f86 <NVIC_EncodePriority+0x32>
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f88:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43da      	mvns	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	401a      	ands	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa6:	43d9      	mvns	r1, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fac:	4313      	orrs	r3, r2
         );
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3724      	adds	r7, #36	; 0x24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fcc:	d301      	bcc.n	8003fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e00f      	b.n	8003ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <SysTick_Config+0x40>)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fda:	210f      	movs	r1, #15
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	f7ff ff8e 	bl	8003f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <SysTick_Config+0x40>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fea:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <SysTick_Config+0x40>)
 8003fec:	2207      	movs	r2, #7
 8003fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	e000e010 	.word	0xe000e010

08004000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ff29 	bl	8003e60 <__NVIC_SetPriorityGrouping>
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004016:	b580      	push	{r7, lr}
 8004018:	b086      	sub	sp, #24
 800401a:	af00      	add	r7, sp, #0
 800401c:	4603      	mov	r3, r0
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004028:	f7ff ff3e 	bl	8003ea8 <__NVIC_GetPriorityGrouping>
 800402c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	6978      	ldr	r0, [r7, #20]
 8004034:	f7ff ff8e 	bl	8003f54 <NVIC_EncodePriority>
 8004038:	4602      	mov	r2, r0
 800403a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff ff5d 	bl	8003f00 <__NVIC_SetPriority>
}
 8004046:	bf00      	nop
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	4603      	mov	r3, r0
 8004056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff31 	bl	8003ec4 <__NVIC_EnableIRQ>
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ffa2 	bl	8003fbc <SysTick_Config>
 8004078:	4603      	mov	r3, r0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004090:	f7ff feb6 	bl	8003e00 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e099      	b.n	80041d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040c0:	e00f      	b.n	80040e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040c2:	f7ff fe9d 	bl	8003e00 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b05      	cmp	r3, #5
 80040ce:	d908      	bls.n	80040e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2203      	movs	r2, #3
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e078      	b.n	80041d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e8      	bne.n	80040c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4b38      	ldr	r3, [pc, #224]	; (80041dc <HAL_DMA_Init+0x158>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800410e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800411a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	2b04      	cmp	r3, #4
 800413a:	d107      	bne.n	800414c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	4313      	orrs	r3, r2
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0307 	bic.w	r3, r3, #7
 8004162:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	2b04      	cmp	r3, #4
 8004174:	d117      	bne.n	80041a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00e      	beq.n	80041a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fb01 	bl	8004790 <DMA_CheckFifoParam>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2240      	movs	r2, #64	; 0x40
 8004198:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041a2:	2301      	movs	r3, #1
 80041a4:	e016      	b.n	80041d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fab8 	bl	8004724 <DMA_CalcBaseAndBitshift>
 80041b4:	4603      	mov	r3, r0
 80041b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	223f      	movs	r2, #63	; 0x3f
 80041be:	409a      	lsls	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	f010803f 	.word	0xf010803f

080041e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_DMA_Start_IT+0x26>
 8004202:	2302      	movs	r3, #2
 8004204:	e040      	b.n	8004288 <HAL_DMA_Start_IT+0xa8>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	d12f      	bne.n	800427a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2202      	movs	r2, #2
 800421e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fa4a 	bl	80046c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004238:	223f      	movs	r2, #63	; 0x3f
 800423a:	409a      	lsls	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0216 	orr.w	r2, r2, #22
 800424e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0208 	orr.w	r2, r2, #8
 8004266:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e005      	b.n	8004286 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004282:	2302      	movs	r3, #2
 8004284:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004286:	7dfb      	ldrb	r3, [r7, #23]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800429e:	f7ff fdaf 	bl	8003e00 <HAL_GetTick>
 80042a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d008      	beq.n	80042c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e052      	b.n	8004368 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0216 	bic.w	r2, r2, #22
 80042d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d103      	bne.n	80042f2 <HAL_DMA_Abort+0x62>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0208 	bic.w	r2, r2, #8
 8004300:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004312:	e013      	b.n	800433c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004314:	f7ff fd74 	bl	8003e00 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b05      	cmp	r3, #5
 8004320:	d90c      	bls.n	800433c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2203      	movs	r2, #3
 800432c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e015      	b.n	8004368 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e4      	bne.n	8004314 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	223f      	movs	r2, #63	; 0x3f
 8004350:	409a      	lsls	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d004      	beq.n	800438e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2280      	movs	r2, #128	; 0x80
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e00c      	b.n	80043a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2205      	movs	r2, #5
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043c0:	4b8e      	ldr	r3, [pc, #568]	; (80045fc <HAL_DMA_IRQHandler+0x248>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a8e      	ldr	r2, [pc, #568]	; (8004600 <HAL_DMA_IRQHandler+0x24c>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0a9b      	lsrs	r3, r3, #10
 80043cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	2208      	movs	r2, #8
 80043e0:	409a      	lsls	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d01a      	beq.n	8004420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0204 	bic.w	r2, r2, #4
 8004406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	2208      	movs	r2, #8
 800440e:	409a      	lsls	r2, r3
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f043 0201 	orr.w	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	2201      	movs	r2, #1
 8004426:	409a      	lsls	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d012      	beq.n	8004456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004442:	2201      	movs	r2, #1
 8004444:	409a      	lsls	r2, r3
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f043 0202 	orr.w	r2, r3, #2
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445a:	2204      	movs	r2, #4
 800445c:	409a      	lsls	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d012      	beq.n	800448c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004478:	2204      	movs	r2, #4
 800447a:	409a      	lsls	r2, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	f043 0204 	orr.w	r2, r3, #4
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	2210      	movs	r2, #16
 8004492:	409a      	lsls	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d043      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d03c      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ae:	2210      	movs	r2, #16
 80044b0:	409a      	lsls	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d018      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d108      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d024      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4798      	blx	r3
 80044e2:	e01f      	b.n	8004524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4798      	blx	r3
 80044f4:	e016      	b.n	8004524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d107      	bne.n	8004514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0208 	bic.w	r2, r2, #8
 8004512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004528:	2220      	movs	r2, #32
 800452a:	409a      	lsls	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 808f 	beq.w	8004654 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8087 	beq.w	8004654 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454a:	2220      	movs	r2, #32
 800454c:	409a      	lsls	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b05      	cmp	r3, #5
 800455c:	d136      	bne.n	80045cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0216 	bic.w	r2, r2, #22
 800456c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800457c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <HAL_DMA_IRQHandler+0x1da>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0208 	bic.w	r2, r2, #8
 800459c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	223f      	movs	r2, #63	; 0x3f
 80045a4:	409a      	lsls	r2, r3
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d07e      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
        }
        return;
 80045ca:	e079      	b.n	80046c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01d      	beq.n	8004616 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10d      	bne.n	8004604 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d031      	beq.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
 80045f8:	e02c      	b.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
 80045fa:	bf00      	nop
 80045fc:	2000001c 	.word	0x2000001c
 8004600:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d023      	beq.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
 8004614:	e01e      	b.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10f      	bne.n	8004644 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0210 	bic.w	r2, r2, #16
 8004632:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	2b00      	cmp	r3, #0
 800465a:	d032      	beq.n	80046c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d022      	beq.n	80046ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2205      	movs	r2, #5
 800466c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3301      	adds	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	429a      	cmp	r2, r3
 800468a:	d307      	bcc.n	800469c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f2      	bne.n	8004680 <HAL_DMA_IRQHandler+0x2cc>
 800469a:	e000      	b.n	800469e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800469c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
 80046be:	e000      	b.n	80046c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80046c0:	bf00      	nop
    }
  }
}
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d108      	bne.n	8004708 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004706:	e007      	b.n	8004718 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	3b10      	subs	r3, #16
 8004734:	4a14      	ldr	r2, [pc, #80]	; (8004788 <DMA_CalcBaseAndBitshift+0x64>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800473e:	4a13      	ldr	r2, [pc, #76]	; (800478c <DMA_CalcBaseAndBitshift+0x68>)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d909      	bls.n	8004766 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800475a:	f023 0303 	bic.w	r3, r3, #3
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	659a      	str	r2, [r3, #88]	; 0x58
 8004764:	e007      	b.n	8004776 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	aaaaaaab 	.word	0xaaaaaaab
 800478c:	08008660 	.word	0x08008660

08004790 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11f      	bne.n	80047ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d856      	bhi.n	800485e <DMA_CheckFifoParam+0xce>
 80047b0:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <DMA_CheckFifoParam+0x28>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	080047db 	.word	0x080047db
 80047c0:	080047c9 	.word	0x080047c9
 80047c4:	0800485f 	.word	0x0800485f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d046      	beq.n	8004862 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d8:	e043      	b.n	8004862 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047e2:	d140      	bne.n	8004866 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e8:	e03d      	b.n	8004866 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f2:	d121      	bne.n	8004838 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d837      	bhi.n	800486a <DMA_CheckFifoParam+0xda>
 80047fa:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <DMA_CheckFifoParam+0x70>)
 80047fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004800:	08004811 	.word	0x08004811
 8004804:	08004817 	.word	0x08004817
 8004808:	08004811 	.word	0x08004811
 800480c:	08004829 	.word	0x08004829
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      break;
 8004814:	e030      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d025      	beq.n	800486e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004826:	e022      	b.n	800486e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004830:	d11f      	bne.n	8004872 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004836:	e01c      	b.n	8004872 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d903      	bls.n	8004846 <DMA_CheckFifoParam+0xb6>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b03      	cmp	r3, #3
 8004842:	d003      	beq.n	800484c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004844:	e018      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
      break;
 800484a:	e015      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00e      	beq.n	8004876 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      break;
 800485c:	e00b      	b.n	8004876 <DMA_CheckFifoParam+0xe6>
      break;
 800485e:	bf00      	nop
 8004860:	e00a      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;
 8004862:	bf00      	nop
 8004864:	e008      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;
 8004866:	bf00      	nop
 8004868:	e006      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;
 800486a:	bf00      	nop
 800486c:	e004      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;
 800486e:	bf00      	nop
 8004870:	e002      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;   
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;
 8004876:	bf00      	nop
    }
  } 
  
  return status; 
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop

08004888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004888:	b480      	push	{r7}
 800488a:	b089      	sub	sp, #36	; 0x24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	e159      	b.n	8004b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048a4:	2201      	movs	r2, #1
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	429a      	cmp	r2, r3
 80048be:	f040 8148 	bne.w	8004b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d005      	beq.n	80048da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d130      	bne.n	800493c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	2203      	movs	r2, #3
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004910:	2201      	movs	r2, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 0201 	and.w	r2, r3, #1
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	2b03      	cmp	r3, #3
 8004946:	d017      	beq.n	8004978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	2203      	movs	r2, #3
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d123      	bne.n	80049cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	08da      	lsrs	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3208      	adds	r2, #8
 800498c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	220f      	movs	r2, #15
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	08da      	lsrs	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3208      	adds	r2, #8
 80049c6:	69b9      	ldr	r1, [r7, #24]
 80049c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	2203      	movs	r2, #3
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	43db      	mvns	r3, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4013      	ands	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0203 	and.w	r2, r3, #3
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80a2 	beq.w	8004b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	4b57      	ldr	r3, [pc, #348]	; (8004b70 <HAL_GPIO_Init+0x2e8>)
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	4a56      	ldr	r2, [pc, #344]	; (8004b70 <HAL_GPIO_Init+0x2e8>)
 8004a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a1e:	4b54      	ldr	r3, [pc, #336]	; (8004b70 <HAL_GPIO_Init+0x2e8>)
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a2a:	4a52      	ldr	r2, [pc, #328]	; (8004b74 <HAL_GPIO_Init+0x2ec>)
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	089b      	lsrs	r3, r3, #2
 8004a30:	3302      	adds	r3, #2
 8004a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	220f      	movs	r2, #15
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a49      	ldr	r2, [pc, #292]	; (8004b78 <HAL_GPIO_Init+0x2f0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d019      	beq.n	8004a8a <HAL_GPIO_Init+0x202>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a48      	ldr	r2, [pc, #288]	; (8004b7c <HAL_GPIO_Init+0x2f4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_GPIO_Init+0x1fe>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a47      	ldr	r2, [pc, #284]	; (8004b80 <HAL_GPIO_Init+0x2f8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00d      	beq.n	8004a82 <HAL_GPIO_Init+0x1fa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a46      	ldr	r2, [pc, #280]	; (8004b84 <HAL_GPIO_Init+0x2fc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <HAL_GPIO_Init+0x1f6>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a45      	ldr	r2, [pc, #276]	; (8004b88 <HAL_GPIO_Init+0x300>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d101      	bne.n	8004a7a <HAL_GPIO_Init+0x1f2>
 8004a76:	2304      	movs	r3, #4
 8004a78:	e008      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a7a:	2307      	movs	r3, #7
 8004a7c:	e006      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e004      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e002      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	f002 0203 	and.w	r2, r2, #3
 8004a92:	0092      	lsls	r2, r2, #2
 8004a94:	4093      	lsls	r3, r2
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a9c:	4935      	ldr	r1, [pc, #212]	; (8004b74 <HAL_GPIO_Init+0x2ec>)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	3302      	adds	r3, #2
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004aaa:	4b38      	ldr	r3, [pc, #224]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ace:	4a2f      	ldr	r2, [pc, #188]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ad4:	4b2d      	ldr	r3, [pc, #180]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004af8:	4a24      	ldr	r2, [pc, #144]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004afe:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b22:	4a1a      	ldr	r2, [pc, #104]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b28:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	43db      	mvns	r3, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4013      	ands	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b4c:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3301      	adds	r3, #1
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2b0f      	cmp	r3, #15
 8004b5c:	f67f aea2 	bls.w	80048a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	3724      	adds	r7, #36	; 0x24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40013800 	.word	0x40013800
 8004b78:	40020000 	.word	0x40020000
 8004b7c:	40020400 	.word	0x40020400
 8004b80:	40020800 	.word	0x40020800
 8004b84:	40020c00 	.word	0x40020c00
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40013c00 	.word	0x40013c00

08004b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	887b      	ldrh	r3, [r7, #2]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
 8004bac:	e001      	b.n	8004bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	807b      	strh	r3, [r7, #2]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bd0:	787b      	ldrb	r3, [r7, #1]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bd6:	887a      	ldrh	r2, [r7, #2]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bdc:	e003      	b.n	8004be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bde:	887b      	ldrh	r3, [r7, #2]
 8004be0:	041a      	lsls	r2, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	619a      	str	r2, [r3, #24]
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e12b      	b.n	8004e5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fe fe1a 	bl	8003854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2224      	movs	r2, #36	; 0x24
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c58:	f001 f888 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 8004c5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4a81      	ldr	r2, [pc, #516]	; (8004e68 <HAL_I2C_Init+0x274>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d807      	bhi.n	8004c78 <HAL_I2C_Init+0x84>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4a80      	ldr	r2, [pc, #512]	; (8004e6c <HAL_I2C_Init+0x278>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	bf94      	ite	ls
 8004c70:	2301      	movls	r3, #1
 8004c72:	2300      	movhi	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	e006      	b.n	8004c86 <HAL_I2C_Init+0x92>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4a7d      	ldr	r2, [pc, #500]	; (8004e70 <HAL_I2C_Init+0x27c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	bf94      	ite	ls
 8004c80:	2301      	movls	r3, #1
 8004c82:	2300      	movhi	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0e7      	b.n	8004e5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a78      	ldr	r2, [pc, #480]	; (8004e74 <HAL_I2C_Init+0x280>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	0c9b      	lsrs	r3, r3, #18
 8004c98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4a6a      	ldr	r2, [pc, #424]	; (8004e68 <HAL_I2C_Init+0x274>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d802      	bhi.n	8004cc8 <HAL_I2C_Init+0xd4>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	e009      	b.n	8004cdc <HAL_I2C_Init+0xe8>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	4a69      	ldr	r2, [pc, #420]	; (8004e78 <HAL_I2C_Init+0x284>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	099b      	lsrs	r3, r3, #6
 8004cda:	3301      	adds	r3, #1
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	495c      	ldr	r1, [pc, #368]	; (8004e68 <HAL_I2C_Init+0x274>)
 8004cf8:	428b      	cmp	r3, r1
 8004cfa:	d819      	bhi.n	8004d30 <HAL_I2C_Init+0x13c>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	1e59      	subs	r1, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d0a:	1c59      	adds	r1, r3, #1
 8004d0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d10:	400b      	ands	r3, r1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_I2C_Init+0x138>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1e59      	subs	r1, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d24:	3301      	adds	r3, #1
 8004d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2a:	e051      	b.n	8004dd0 <HAL_I2C_Init+0x1dc>
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	e04f      	b.n	8004dd0 <HAL_I2C_Init+0x1dc>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d111      	bne.n	8004d5c <HAL_I2C_Init+0x168>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1e58      	subs	r0, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	440b      	add	r3, r1
 8004d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e012      	b.n	8004d82 <HAL_I2C_Init+0x18e>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	1e58      	subs	r0, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6859      	ldr	r1, [r3, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	0099      	lsls	r1, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d72:	3301      	adds	r3, #1
 8004d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_I2C_Init+0x196>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e022      	b.n	8004dd0 <HAL_I2C_Init+0x1dc>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10e      	bne.n	8004db0 <HAL_I2C_Init+0x1bc>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1e58      	subs	r0, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6859      	ldr	r1, [r3, #4]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	440b      	add	r3, r1
 8004da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004da4:	3301      	adds	r3, #1
 8004da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dae:	e00f      	b.n	8004dd0 <HAL_I2C_Init+0x1dc>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	1e58      	subs	r0, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6859      	ldr	r1, [r3, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	0099      	lsls	r1, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	6809      	ldr	r1, [r1, #0]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69da      	ldr	r2, [r3, #28]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6911      	ldr	r1, [r2, #16]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68d2      	ldr	r2, [r2, #12]
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695a      	ldr	r2, [r3, #20]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	000186a0 	.word	0x000186a0
 8004e6c:	001e847f 	.word	0x001e847f
 8004e70:	003d08ff 	.word	0x003d08ff
 8004e74:	431bde83 	.word	0x431bde83
 8004e78:	10624dd3 	.word	0x10624dd3

08004e7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	461a      	mov	r2, r3
 8004e88:	460b      	mov	r3, r1
 8004e8a:	817b      	strh	r3, [r7, #10]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e90:	f7fe ffb6 	bl	8003e00 <HAL_GetTick>
 8004e94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	f040 80e0 	bne.w	8005064 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	2319      	movs	r3, #25
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4970      	ldr	r1, [pc, #448]	; (8005070 <HAL_I2C_Master_Transmit+0x1f4>)
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f964 	bl	800517c <I2C_WaitOnFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e0d3      	b.n	8005066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_I2C_Master_Transmit+0x50>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e0cc      	b.n	8005066 <HAL_I2C_Master_Transmit+0x1ea>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d007      	beq.n	8004ef2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0201 	orr.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2221      	movs	r2, #33	; 0x21
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	893a      	ldrh	r2, [r7, #8]
 8004f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a50      	ldr	r2, [pc, #320]	; (8005074 <HAL_I2C_Master_Transmit+0x1f8>)
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f34:	8979      	ldrh	r1, [r7, #10]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	6a3a      	ldr	r2, [r7, #32]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f89c 	bl	8005078 <I2C_MasterRequestWrite>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e08d      	b.n	8005066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f60:	e066      	b.n	8005030 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	6a39      	ldr	r1, [r7, #32]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f9de 	bl	8005328 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00d      	beq.n	8004f8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d107      	bne.n	8004f8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e06b      	b.n	8005066 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	781a      	ldrb	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d11b      	bne.n	8005004 <HAL_I2C_Master_Transmit+0x188>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d017      	beq.n	8005004 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	6a39      	ldr	r1, [r7, #32]
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f9ce 	bl	80053aa <I2C_WaitOnBTFFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00d      	beq.n	8005030 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	2b04      	cmp	r3, #4
 800501a:	d107      	bne.n	800502c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e01a      	b.n	8005066 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	d194      	bne.n	8004f62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	e000      	b.n	8005066 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005064:	2302      	movs	r3, #2
  }
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	00100002 	.word	0x00100002
 8005074:	ffff0000 	.word	0xffff0000

08005078 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	460b      	mov	r3, r1
 8005086:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d006      	beq.n	80050a2 <I2C_MasterRequestWrite+0x2a>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d003      	beq.n	80050a2 <I2C_MasterRequestWrite+0x2a>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050a0:	d108      	bne.n	80050b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e00b      	b.n	80050cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	2b12      	cmp	r3, #18
 80050ba:	d107      	bne.n	80050cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f84f 	bl	800517c <I2C_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00d      	beq.n	8005100 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f2:	d103      	bne.n	80050fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e035      	b.n	800516c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005108:	d108      	bne.n	800511c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800510a:	897b      	ldrh	r3, [r7, #10]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005118:	611a      	str	r2, [r3, #16]
 800511a:	e01b      	b.n	8005154 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800511c:	897b      	ldrh	r3, [r7, #10]
 800511e:	11db      	asrs	r3, r3, #7
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f003 0306 	and.w	r3, r3, #6
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f063 030f 	orn	r3, r3, #15
 800512c:	b2da      	uxtb	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	490e      	ldr	r1, [pc, #56]	; (8005174 <I2C_MasterRequestWrite+0xfc>)
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f875 	bl	800522a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e010      	b.n	800516c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800514a:	897b      	ldrh	r3, [r7, #10]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4907      	ldr	r1, [pc, #28]	; (8005178 <I2C_MasterRequestWrite+0x100>)
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f865 	bl	800522a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	00010008 	.word	0x00010008
 8005178:	00010002 	.word	0x00010002

0800517c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800518c:	e025      	b.n	80051da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d021      	beq.n	80051da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005196:	f7fe fe33 	bl	8003e00 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d302      	bcc.n	80051ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d116      	bne.n	80051da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e023      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	0c1b      	lsrs	r3, r3, #16
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d10d      	bne.n	8005200 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	43da      	mvns	r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4013      	ands	r3, r2
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bf0c      	ite	eq
 80051f6:	2301      	moveq	r3, #1
 80051f8:	2300      	movne	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	e00c      	b.n	800521a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	43da      	mvns	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	429a      	cmp	r2, r3
 800521e:	d0b6      	beq.n	800518e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005238:	e051      	b.n	80052de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005248:	d123      	bne.n	8005292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005258:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005262:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f043 0204 	orr.w	r2, r3, #4
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e046      	b.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d021      	beq.n	80052de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529a:	f7fe fdb1 	bl	8003e00 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d302      	bcc.n	80052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d116      	bne.n	80052de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f043 0220 	orr.w	r2, r3, #32
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e020      	b.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10c      	bne.n	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	43da      	mvns	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bf14      	ite	ne
 80052fa:	2301      	movne	r3, #1
 80052fc:	2300      	moveq	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	e00b      	b.n	800531a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	43da      	mvns	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4013      	ands	r3, r2
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d18d      	bne.n	800523a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005334:	e02d      	b.n	8005392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f878 	bl	800542c <I2C_IsAcknowledgeFailed>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e02d      	b.n	80053a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d021      	beq.n	8005392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fe fd57 	bl	8003e00 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d116      	bne.n	8005392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f043 0220 	orr.w	r2, r3, #32
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e007      	b.n	80053a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539c:	2b80      	cmp	r3, #128	; 0x80
 800539e:	d1ca      	bne.n	8005336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053b6:	e02d      	b.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f837 	bl	800542c <I2C_IsAcknowledgeFailed>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e02d      	b.n	8005424 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d021      	beq.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d0:	f7fe fd16 	bl	8003e00 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d302      	bcc.n	80053e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d116      	bne.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	f043 0220 	orr.w	r2, r3, #32
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e007      	b.n	8005424 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b04      	cmp	r3, #4
 8005420:	d1ca      	bne.n	80053b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800543e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005442:	d11b      	bne.n	800547c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800544c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	f043 0204 	orr.w	r2, r3, #4
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e267      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d075      	beq.n	8005596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054aa:	4b88      	ldr	r3, [pc, #544]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d00c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b6:	4b85      	ldr	r3, [pc, #532]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d112      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054c2:	4b82      	ldr	r3, [pc, #520]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ce:	d10b      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	4b7e      	ldr	r3, [pc, #504]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d05b      	beq.n	8005594 <HAL_RCC_OscConfig+0x108>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d157      	bne.n	8005594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e242      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_OscConfig+0x74>
 80054f2:	4b76      	ldr	r3, [pc, #472]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a75      	ldr	r2, [pc, #468]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e01d      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x98>
 800550a:	4b70      	ldr	r3, [pc, #448]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6f      	ldr	r2, [pc, #444]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b6d      	ldr	r3, [pc, #436]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6c      	ldr	r2, [pc, #432]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005524:	4b69      	ldr	r3, [pc, #420]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a68      	ldr	r2, [pc, #416]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800552a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b66      	ldr	r3, [pc, #408]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a65      	ldr	r2, [pc, #404]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800553a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d013      	beq.n	800556c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005544:	f7fe fc5c 	bl	8003e00 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800554c:	f7fe fc58 	bl	8003e00 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	; 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e207      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	4b5b      	ldr	r3, [pc, #364]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0xc0>
 800556a:	e014      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fe fc48 	bl	8003e00 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005574:	f7fe fc44 	bl	8003e00 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	; 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e1f3      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005586:	4b51      	ldr	r3, [pc, #324]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0xe8>
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055a2:	4b4a      	ldr	r3, [pc, #296]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ae:	4b47      	ldr	r3, [pc, #284]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d11c      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ba:	4b44      	ldr	r3, [pc, #272]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d116      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c6:	4b41      	ldr	r3, [pc, #260]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e1c7      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055de:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4937      	ldr	r1, [pc, #220]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f2:	e03a      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055fc:	4b34      	ldr	r3, [pc, #208]	; (80056d0 <HAL_RCC_OscConfig+0x244>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fe fbfd 	bl	8003e00 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560a:	f7fe fbf9 	bl	8003e00 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e1a8      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561c:	4b2b      	ldr	r3, [pc, #172]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005628:	4b28      	ldr	r3, [pc, #160]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4925      	ldr	r1, [pc, #148]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	e015      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_RCC_OscConfig+0x244>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fe fbdc 	bl	8003e00 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564c:	f7fe fbd8 	bl	8003e00 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e187      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d036      	beq.n	80056e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <HAL_RCC_OscConfig+0x248>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fe fbbc 	bl	8003e00 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568c:	f7fe fbb8 	bl	8003e00 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e167      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80056a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x200>
 80056aa:	e01b      	b.n	80056e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_RCC_OscConfig+0x248>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b2:	f7fe fba5 	bl	8003e00 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b8:	e00e      	b.n	80056d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ba:	f7fe fba1 	bl	8003e00 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d907      	bls.n	80056d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e150      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	42470000 	.word	0x42470000
 80056d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d8:	4b88      	ldr	r3, [pc, #544]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80056da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ea      	bne.n	80056ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8097 	beq.w	8005820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f6:	4b81      	ldr	r3, [pc, #516]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	4b7d      	ldr	r3, [pc, #500]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	4a7c      	ldr	r2, [pc, #496]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6413      	str	r3, [r2, #64]	; 0x40
 8005712:	4b7a      	ldr	r3, [pc, #488]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	4b77      	ldr	r3, [pc, #476]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d118      	bne.n	8005760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572e:	4b74      	ldr	r3, [pc, #464]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a73      	ldr	r2, [pc, #460]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573a:	f7fe fb61 	bl	8003e00 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005742:	f7fe fb5d 	bl	8003e00 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e10c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005754:	4b6a      	ldr	r3, [pc, #424]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <HAL_RCC_OscConfig+0x2ea>
 8005768:	4b64      	ldr	r3, [pc, #400]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	4a63      	ldr	r2, [pc, #396]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6713      	str	r3, [r2, #112]	; 0x70
 8005774:	e01c      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b05      	cmp	r3, #5
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0x30c>
 800577e:	4b5f      	ldr	r3, [pc, #380]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a5e      	ldr	r2, [pc, #376]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005784:	f043 0304 	orr.w	r3, r3, #4
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
 800578a:	4b5c      	ldr	r3, [pc, #368]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	4a5b      	ldr	r2, [pc, #364]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	6713      	str	r3, [r2, #112]	; 0x70
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005798:	4b58      	ldr	r3, [pc, #352]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	4a57      	ldr	r2, [pc, #348]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	6713      	str	r3, [r2, #112]	; 0x70
 80057a4:	4b55      	ldr	r3, [pc, #340]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	4a54      	ldr	r2, [pc, #336]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057aa:	f023 0304 	bic.w	r3, r3, #4
 80057ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d015      	beq.n	80057e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b8:	f7fe fb22 	bl	8003e00 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	e00a      	b.n	80057d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fe fb1e 	bl	8003e00 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0cb      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d6:	4b49      	ldr	r3, [pc, #292]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ee      	beq.n	80057c0 <HAL_RCC_OscConfig+0x334>
 80057e2:	e014      	b.n	800580e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e4:	f7fe fb0c 	bl	8003e00 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ec:	f7fe fb08 	bl	8003e00 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0b5      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005802:	4b3e      	ldr	r3, [pc, #248]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ee      	bne.n	80057ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d105      	bne.n	8005820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005814:	4b39      	ldr	r3, [pc, #228]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	4a38      	ldr	r2, [pc, #224]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800581a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800581e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80a1 	beq.w	800596c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800582a:	4b34      	ldr	r3, [pc, #208]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b08      	cmp	r3, #8
 8005834:	d05c      	beq.n	80058f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d141      	bne.n	80058c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b31      	ldr	r3, [pc, #196]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fe fadc 	bl	8003e00 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584c:	f7fe fad8 	bl	8003e00 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e087      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	4b27      	ldr	r3, [pc, #156]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	3b01      	subs	r3, #1
 8005884:	041b      	lsls	r3, r3, #16
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	061b      	lsls	r3, r3, #24
 800588e:	491b      	ldr	r1, [pc, #108]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005894:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589a:	f7fe fab1 	bl	8003e00 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a2:	f7fe faad 	bl	8003e00 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e05c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b4:	4b11      	ldr	r3, [pc, #68]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x416>
 80058c0:	e054      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fe fa9a 	bl	8003e00 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fe fa96 	bl	8003e00 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e045      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x444>
 80058ee:	e03d      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e038      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80058fc:	40023800 	.word	0x40023800
 8005900:	40007000 	.word	0x40007000
 8005904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005908:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <HAL_RCC_OscConfig+0x4ec>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d028      	beq.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d121      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d11a      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005938:	4013      	ands	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800593e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005940:	4293      	cmp	r3, r2
 8005942:	d111      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	3b01      	subs	r3, #1
 8005952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800

0800597c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0cc      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005990:	4b68      	ldr	r3, [pc, #416]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d90c      	bls.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b65      	ldr	r3, [pc, #404]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b63      	ldr	r3, [pc, #396]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0b8      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d020      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059d0:	4b59      	ldr	r3, [pc, #356]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a58      	ldr	r2, [pc, #352]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059e8:	4b53      	ldr	r3, [pc, #332]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4a52      	ldr	r2, [pc, #328]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f4:	4b50      	ldr	r3, [pc, #320]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	494d      	ldr	r1, [pc, #308]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d044      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1a:	4b47      	ldr	r3, [pc, #284]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d119      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e07f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d003      	beq.n	8005a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d107      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3a:	4b3f      	ldr	r3, [pc, #252]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e06f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4a:	4b3b      	ldr	r3, [pc, #236]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e067      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a5a:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f023 0203 	bic.w	r2, r3, #3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4934      	ldr	r1, [pc, #208]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a6c:	f7fe f9c8 	bl	8003e00 <HAL_GetTick>
 8005a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a72:	e00a      	b.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a74:	f7fe f9c4 	bl	8003e00 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e04f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 020c 	and.w	r2, r3, #12
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d1eb      	bne.n	8005a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b25      	ldr	r3, [pc, #148]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d20c      	bcs.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab2:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e032      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ad0:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4916      	ldr	r1, [pc, #88]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	490e      	ldr	r1, [pc, #56]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b02:	f000 f821 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8005b06:	4602      	mov	r2, r0
 8005b08:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	490a      	ldr	r1, [pc, #40]	; (8005b3c <HAL_RCC_ClockConfig+0x1c0>)
 8005b14:	5ccb      	ldrb	r3, [r1, r3]
 8005b16:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1a:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <HAL_RCC_ClockConfig+0x1c8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe f928 	bl	8003d78 <HAL_InitTick>

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40023c00 	.word	0x40023c00
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	08008648 	.word	0x08008648
 8005b40:	2000001c 	.word	0x2000001c
 8005b44:	20000020 	.word	0x20000020

08005b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b4c:	b094      	sub	sp, #80	; 0x50
 8005b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	647b      	str	r3, [r7, #68]	; 0x44
 8005b54:	2300      	movs	r3, #0
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b58:	2300      	movs	r3, #0
 8005b5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b60:	4b79      	ldr	r3, [pc, #484]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d00d      	beq.n	8005b88 <HAL_RCC_GetSysClockFreq+0x40>
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	f200 80e1 	bhi.w	8005d34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0x34>
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d003      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b7a:	e0db      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b7c:	4b73      	ldr	r3, [pc, #460]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b80:	e0db      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b82:	4b73      	ldr	r3, [pc, #460]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b86:	e0d8      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b88:	4b6f      	ldr	r3, [pc, #444]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b92:	4b6d      	ldr	r3, [pc, #436]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d063      	beq.n	8005c66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b9e:	4b6a      	ldr	r3, [pc, #424]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	099b      	lsrs	r3, r3, #6
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ba8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bba:	4622      	mov	r2, r4
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	f04f 0000 	mov.w	r0, #0
 8005bc2:	f04f 0100 	mov.w	r1, #0
 8005bc6:	0159      	lsls	r1, r3, #5
 8005bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bcc:	0150      	lsls	r0, r2, #5
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	1a51      	subs	r1, r2, r1
 8005bd6:	6139      	str	r1, [r7, #16]
 8005bd8:	4629      	mov	r1, r5
 8005bda:	eb63 0301 	sbc.w	r3, r3, r1
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bec:	4659      	mov	r1, fp
 8005bee:	018b      	lsls	r3, r1, #6
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bf6:	4651      	mov	r1, sl
 8005bf8:	018a      	lsls	r2, r1, #6
 8005bfa:	4651      	mov	r1, sl
 8005bfc:	ebb2 0801 	subs.w	r8, r2, r1
 8005c00:	4659      	mov	r1, fp
 8005c02:	eb63 0901 	sbc.w	r9, r3, r1
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c1a:	4690      	mov	r8, r2
 8005c1c:	4699      	mov	r9, r3
 8005c1e:	4623      	mov	r3, r4
 8005c20:	eb18 0303 	adds.w	r3, r8, r3
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	462b      	mov	r3, r5
 8005c28:	eb49 0303 	adc.w	r3, r9, r3
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	f04f 0300 	mov.w	r3, #0
 8005c36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	024b      	lsls	r3, r1, #9
 8005c3e:	4621      	mov	r1, r4
 8005c40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c44:	4621      	mov	r1, r4
 8005c46:	024a      	lsls	r2, r1, #9
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c4e:	2200      	movs	r2, #0
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c58:	f7fb f8d0 	bl	8000dfc <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4613      	mov	r3, r2
 8005c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c64:	e058      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c66:	4b38      	ldr	r3, [pc, #224]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	099b      	lsrs	r3, r3, #6
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	4611      	mov	r1, r2
 8005c72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c76:	623b      	str	r3, [r7, #32]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	f04f 0000 	mov.w	r0, #0
 8005c88:	f04f 0100 	mov.w	r1, #0
 8005c8c:	0159      	lsls	r1, r3, #5
 8005c8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c92:	0150      	lsls	r0, r2, #5
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4641      	mov	r1, r8
 8005c9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cb8:	ebb2 040a 	subs.w	r4, r2, sl
 8005cbc:	eb63 050b 	sbc.w	r5, r3, fp
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	00eb      	lsls	r3, r5, #3
 8005cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cce:	00e2      	lsls	r2, r4, #3
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	4643      	mov	r3, r8
 8005cd6:	18e3      	adds	r3, r4, r3
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	464b      	mov	r3, r9
 8005cdc:	eb45 0303 	adc.w	r3, r5, r3
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cee:	4629      	mov	r1, r5
 8005cf0:	028b      	lsls	r3, r1, #10
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	028a      	lsls	r2, r1, #10
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d02:	2200      	movs	r2, #0
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	61fa      	str	r2, [r7, #28]
 8005d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d0c:	f7fb f876 	bl	8000dfc <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4613      	mov	r3, r2
 8005d16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d18:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	3301      	adds	r3, #1
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3750      	adds	r7, #80	; 0x50
 8005d40:	46bd      	mov	sp, r7
 8005d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d46:	bf00      	nop
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	00f42400 	.word	0x00f42400
 8005d50:	007a1200 	.word	0x007a1200

08005d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d58:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	2000001c 	.word	0x2000001c

08005d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d70:	f7ff fff0 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d74:	4602      	mov	r2, r0
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	0a9b      	lsrs	r3, r3, #10
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	4903      	ldr	r1, [pc, #12]	; (8005d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d82:	5ccb      	ldrb	r3, [r1, r3]
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	08008658 	.word	0x08008658

08005d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d98:	f7ff ffdc 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	0b5b      	lsrs	r3, r3, #13
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	4903      	ldr	r1, [pc, #12]	; (8005db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40023800 	.word	0x40023800
 8005db8:	08008658 	.word	0x08008658

08005dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e041      	b.n	8005e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fd fd7e 	bl	80038e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f000 fcb2 	bl	8006764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d001      	beq.n	8005e74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e03c      	b.n	8005eee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1e      	ldr	r2, [pc, #120]	; (8005efc <HAL_TIM_Base_Start+0xa0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d018      	beq.n	8005eb8 <HAL_TIM_Base_Start+0x5c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8e:	d013      	beq.n	8005eb8 <HAL_TIM_Base_Start+0x5c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1a      	ldr	r2, [pc, #104]	; (8005f00 <HAL_TIM_Base_Start+0xa4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00e      	beq.n	8005eb8 <HAL_TIM_Base_Start+0x5c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <HAL_TIM_Base_Start+0xa8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d009      	beq.n	8005eb8 <HAL_TIM_Base_Start+0x5c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a17      	ldr	r2, [pc, #92]	; (8005f08 <HAL_TIM_Base_Start+0xac>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <HAL_TIM_Base_Start+0x5c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a16      	ldr	r2, [pc, #88]	; (8005f0c <HAL_TIM_Base_Start+0xb0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d111      	bne.n	8005edc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b06      	cmp	r3, #6
 8005ec8:	d010      	beq.n	8005eec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0201 	orr.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eda:	e007      	b.n	8005eec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40000400 	.word	0x40000400
 8005f04:	40000800 	.word	0x40000800
 8005f08:	40000c00 	.word	0x40000c00
 8005f0c:	40014000 	.word	0x40014000

08005f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d001      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e044      	b.n	8005fb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1e      	ldr	r2, [pc, #120]	; (8005fc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d018      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x6c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f52:	d013      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x6c>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1a      	ldr	r2, [pc, #104]	; (8005fc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00e      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x6c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d009      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x6c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <HAL_TIM_Base_Start_IT+0xbc>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x6c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a16      	ldr	r2, [pc, #88]	; (8005fd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d111      	bne.n	8005fa0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d010      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9e:	e007      	b.n	8005fb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40010000 	.word	0x40010000
 8005fc4:	40000400 	.word	0x40000400
 8005fc8:	40000800 	.word	0x40000800
 8005fcc:	40000c00 	.word	0x40000c00
 8005fd0:	40014000 	.word	0x40014000

08005fd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e041      	b.n	800606a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f839 	bl	8006072 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f000 fba6 	bl	8006764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <HAL_TIM_PWM_Start+0x24>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	bf14      	ite	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	2300      	moveq	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	e022      	b.n	80060f2 <HAL_TIM_PWM_Start+0x6a>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d109      	bne.n	80060c6 <HAL_TIM_PWM_Start+0x3e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	bf14      	ite	ne
 80060be:	2301      	movne	r3, #1
 80060c0:	2300      	moveq	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	e015      	b.n	80060f2 <HAL_TIM_PWM_Start+0x6a>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d109      	bne.n	80060e0 <HAL_TIM_PWM_Start+0x58>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	bf14      	ite	ne
 80060d8:	2301      	movne	r3, #1
 80060da:	2300      	moveq	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	e008      	b.n	80060f2 <HAL_TIM_PWM_Start+0x6a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	bf14      	ite	ne
 80060ec:	2301      	movne	r3, #1
 80060ee:	2300      	moveq	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e068      	b.n	80061cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <HAL_TIM_PWM_Start+0x82>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006108:	e013      	b.n	8006132 <HAL_TIM_PWM_Start+0xaa>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b04      	cmp	r3, #4
 800610e:	d104      	bne.n	800611a <HAL_TIM_PWM_Start+0x92>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006118:	e00b      	b.n	8006132 <HAL_TIM_PWM_Start+0xaa>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b08      	cmp	r3, #8
 800611e:	d104      	bne.n	800612a <HAL_TIM_PWM_Start+0xa2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006128:	e003      	b.n	8006132 <HAL_TIM_PWM_Start+0xaa>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2202      	movs	r2, #2
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2201      	movs	r2, #1
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fdb8 	bl	8006cb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a23      	ldr	r2, [pc, #140]	; (80061d4 <HAL_TIM_PWM_Start+0x14c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d107      	bne.n	800615a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006158:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <HAL_TIM_PWM_Start+0x14c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d018      	beq.n	8006196 <HAL_TIM_PWM_Start+0x10e>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616c:	d013      	beq.n	8006196 <HAL_TIM_PWM_Start+0x10e>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a19      	ldr	r2, [pc, #100]	; (80061d8 <HAL_TIM_PWM_Start+0x150>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00e      	beq.n	8006196 <HAL_TIM_PWM_Start+0x10e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a17      	ldr	r2, [pc, #92]	; (80061dc <HAL_TIM_PWM_Start+0x154>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d009      	beq.n	8006196 <HAL_TIM_PWM_Start+0x10e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <HAL_TIM_PWM_Start+0x158>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d004      	beq.n	8006196 <HAL_TIM_PWM_Start+0x10e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a14      	ldr	r2, [pc, #80]	; (80061e4 <HAL_TIM_PWM_Start+0x15c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d111      	bne.n	80061ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b06      	cmp	r3, #6
 80061a6:	d010      	beq.n	80061ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b8:	e007      	b.n	80061ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0201 	orr.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	40010000 	.word	0x40010000
 80061d8:	40000400 	.word	0x40000400
 80061dc:	40000800 	.word	0x40000800
 80061e0:	40000c00 	.word	0x40000c00
 80061e4:	40014000 	.word	0x40014000

080061e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e097      	b.n	800632c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7fd fb9d 	bl	8003950 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2202      	movs	r2, #2
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800622c:	f023 0307 	bic.w	r3, r3, #7
 8006230:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3304      	adds	r3, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f000 fa91 	bl	8006764 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626a:	f023 0303 	bic.w	r3, r3, #3
 800626e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	4313      	orrs	r3, r2
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006288:	f023 030c 	bic.w	r3, r3, #12
 800628c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	021b      	lsls	r3, r3, #8
 80062a4:	4313      	orrs	r3, r2
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	011a      	lsls	r2, r3, #4
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	031b      	lsls	r3, r3, #12
 80062b8:	4313      	orrs	r3, r2
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80062c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80062ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	4313      	orrs	r3, r2
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006344:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800634c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006354:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800635c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d110      	bne.n	8006386 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d102      	bne.n	8006370 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800636a:	7b7b      	ldrb	r3, [r7, #13]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d001      	beq.n	8006374 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e069      	b.n	8006448 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006384:	e031      	b.n	80063ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b04      	cmp	r3, #4
 800638a:	d110      	bne.n	80063ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800638c:	7bbb      	ldrb	r3, [r7, #14]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d102      	bne.n	8006398 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006392:	7b3b      	ldrb	r3, [r7, #12]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d001      	beq.n	800639c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e055      	b.n	8006448 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063ac:	e01d      	b.n	80063ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d108      	bne.n	80063c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d105      	bne.n	80063c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063ba:	7b7b      	ldrb	r3, [r7, #13]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d102      	bne.n	80063c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063c0:	7b3b      	ldrb	r3, [r7, #12]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d001      	beq.n	80063ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e03e      	b.n	8006448 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2202      	movs	r2, #2
 80063e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_TIM_Encoder_Start+0xc4>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d008      	beq.n	8006408 <HAL_TIM_Encoder_Start+0xd4>
 80063f6:	e00f      	b.n	8006418 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2201      	movs	r2, #1
 80063fe:	2100      	movs	r1, #0
 8006400:	4618      	mov	r0, r3
 8006402:	f000 fc55 	bl	8006cb0 <TIM_CCxChannelCmd>
      break;
 8006406:	e016      	b.n	8006436 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2201      	movs	r2, #1
 800640e:	2104      	movs	r1, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f000 fc4d 	bl	8006cb0 <TIM_CCxChannelCmd>
      break;
 8006416:	e00e      	b.n	8006436 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2201      	movs	r2, #1
 800641e:	2100      	movs	r1, #0
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fc45 	bl	8006cb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2201      	movs	r2, #1
 800642c:	2104      	movs	r1, #4
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fc3e 	bl	8006cb0 <TIM_CCxChannelCmd>
      break;
 8006434:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0201 	orr.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800646a:	2302      	movs	r3, #2
 800646c:	e0ae      	b.n	80065cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b0c      	cmp	r3, #12
 800647a:	f200 809f 	bhi.w	80065bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800647e:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	080064b9 	.word	0x080064b9
 8006488:	080065bd 	.word	0x080065bd
 800648c:	080065bd 	.word	0x080065bd
 8006490:	080065bd 	.word	0x080065bd
 8006494:	080064f9 	.word	0x080064f9
 8006498:	080065bd 	.word	0x080065bd
 800649c:	080065bd 	.word	0x080065bd
 80064a0:	080065bd 	.word	0x080065bd
 80064a4:	0800653b 	.word	0x0800653b
 80064a8:	080065bd 	.word	0x080065bd
 80064ac:	080065bd 	.word	0x080065bd
 80064b0:	080065bd 	.word	0x080065bd
 80064b4:	0800657b 	.word	0x0800657b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f9d0 	bl	8006864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0208 	orr.w	r2, r2, #8
 80064d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0204 	bic.w	r2, r2, #4
 80064e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6999      	ldr	r1, [r3, #24]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	619a      	str	r2, [r3, #24]
      break;
 80064f6:	e064      	b.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fa16 	bl	8006930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6999      	ldr	r1, [r3, #24]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	021a      	lsls	r2, r3, #8
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	619a      	str	r2, [r3, #24]
      break;
 8006538:	e043      	b.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fa61 	bl	8006a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0208 	orr.w	r2, r2, #8
 8006554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0204 	bic.w	r2, r2, #4
 8006564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69d9      	ldr	r1, [r3, #28]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	61da      	str	r2, [r3, #28]
      break;
 8006578:	e023      	b.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	4618      	mov	r0, r3
 8006582:	f000 faab 	bl	8006adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69da      	ldr	r2, [r3, #28]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69d9      	ldr	r1, [r3, #28]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	021a      	lsls	r2, r3, #8
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	61da      	str	r2, [r3, #28]
      break;
 80065ba:	e002      	b.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	75fb      	strb	r3, [r7, #23]
      break;
 80065c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_TIM_ConfigClockSource+0x1c>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e0b4      	b.n	800675a <HAL_TIM_ConfigClockSource+0x186>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800660e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006616:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006628:	d03e      	beq.n	80066a8 <HAL_TIM_ConfigClockSource+0xd4>
 800662a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662e:	f200 8087 	bhi.w	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006636:	f000 8086 	beq.w	8006746 <HAL_TIM_ConfigClockSource+0x172>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	d87f      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006640:	2b70      	cmp	r3, #112	; 0x70
 8006642:	d01a      	beq.n	800667a <HAL_TIM_ConfigClockSource+0xa6>
 8006644:	2b70      	cmp	r3, #112	; 0x70
 8006646:	d87b      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b60      	cmp	r3, #96	; 0x60
 800664a:	d050      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x11a>
 800664c:	2b60      	cmp	r3, #96	; 0x60
 800664e:	d877      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b50      	cmp	r3, #80	; 0x50
 8006652:	d03c      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0xfa>
 8006654:	2b50      	cmp	r3, #80	; 0x50
 8006656:	d873      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b40      	cmp	r3, #64	; 0x40
 800665a:	d058      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x13a>
 800665c:	2b40      	cmp	r3, #64	; 0x40
 800665e:	d86f      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b30      	cmp	r3, #48	; 0x30
 8006662:	d064      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 8006664:	2b30      	cmp	r3, #48	; 0x30
 8006666:	d86b      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b20      	cmp	r3, #32
 800666a:	d060      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 800666c:	2b20      	cmp	r3, #32
 800666e:	d867      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b00      	cmp	r3, #0
 8006672:	d05c      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 8006674:	2b10      	cmp	r3, #16
 8006676:	d05a      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 8006678:	e062      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6899      	ldr	r1, [r3, #8]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f000 faf1 	bl	8006c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800669c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	609a      	str	r2, [r3, #8]
      break;
 80066a6:	e04f      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	6899      	ldr	r1, [r3, #8]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f000 fada 	bl	8006c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ca:	609a      	str	r2, [r3, #8]
      break;
 80066cc:	e03c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6859      	ldr	r1, [r3, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	461a      	mov	r2, r3
 80066dc:	f000 fa4e 	bl	8006b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2150      	movs	r1, #80	; 0x50
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 faa7 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 80066ec:	e02c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6859      	ldr	r1, [r3, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f000 fa6d 	bl	8006bda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2160      	movs	r1, #96	; 0x60
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fa97 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 800670c:	e01c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6859      	ldr	r1, [r3, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	461a      	mov	r2, r3
 800671c:	f000 fa2e 	bl	8006b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2140      	movs	r1, #64	; 0x40
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fa87 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 800672c:	e00c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f000 fa7e 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 800673e:	e003      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
      break;
 8006744:	e000      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a34      	ldr	r2, [pc, #208]	; (8006848 <TIM_Base_SetConfig+0xe4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00f      	beq.n	800679c <TIM_Base_SetConfig+0x38>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006782:	d00b      	beq.n	800679c <TIM_Base_SetConfig+0x38>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a31      	ldr	r2, [pc, #196]	; (800684c <TIM_Base_SetConfig+0xe8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d007      	beq.n	800679c <TIM_Base_SetConfig+0x38>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a30      	ldr	r2, [pc, #192]	; (8006850 <TIM_Base_SetConfig+0xec>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_Base_SetConfig+0x38>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a2f      	ldr	r2, [pc, #188]	; (8006854 <TIM_Base_SetConfig+0xf0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d108      	bne.n	80067ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a25      	ldr	r2, [pc, #148]	; (8006848 <TIM_Base_SetConfig+0xe4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d01b      	beq.n	80067ee <TIM_Base_SetConfig+0x8a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067bc:	d017      	beq.n	80067ee <TIM_Base_SetConfig+0x8a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a22      	ldr	r2, [pc, #136]	; (800684c <TIM_Base_SetConfig+0xe8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d013      	beq.n	80067ee <TIM_Base_SetConfig+0x8a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a21      	ldr	r2, [pc, #132]	; (8006850 <TIM_Base_SetConfig+0xec>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00f      	beq.n	80067ee <TIM_Base_SetConfig+0x8a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a20      	ldr	r2, [pc, #128]	; (8006854 <TIM_Base_SetConfig+0xf0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00b      	beq.n	80067ee <TIM_Base_SetConfig+0x8a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1f      	ldr	r2, [pc, #124]	; (8006858 <TIM_Base_SetConfig+0xf4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d007      	beq.n	80067ee <TIM_Base_SetConfig+0x8a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1e      	ldr	r2, [pc, #120]	; (800685c <TIM_Base_SetConfig+0xf8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <TIM_Base_SetConfig+0x8a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a1d      	ldr	r2, [pc, #116]	; (8006860 <TIM_Base_SetConfig+0xfc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d108      	bne.n	8006800 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a08      	ldr	r2, [pc, #32]	; (8006848 <TIM_Base_SetConfig+0xe4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d103      	bne.n	8006834 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	615a      	str	r2, [r3, #20]
}
 800683a:	bf00      	nop
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	40010000 	.word	0x40010000
 800684c:	40000400 	.word	0x40000400
 8006850:	40000800 	.word	0x40000800
 8006854:	40000c00 	.word	0x40000c00
 8006858:	40014000 	.word	0x40014000
 800685c:	40014400 	.word	0x40014400
 8006860:	40014800 	.word	0x40014800

08006864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	f023 0201 	bic.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0303 	bic.w	r3, r3, #3
 800689a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 0302 	bic.w	r3, r3, #2
 80068ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a1c      	ldr	r2, [pc, #112]	; (800692c <TIM_OC1_SetConfig+0xc8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10c      	bne.n	80068da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f023 0308 	bic.w	r3, r3, #8
 80068c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f023 0304 	bic.w	r3, r3, #4
 80068d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a13      	ldr	r2, [pc, #76]	; (800692c <TIM_OC1_SetConfig+0xc8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d111      	bne.n	8006906 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40010000 	.word	0x40010000

08006930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f023 0210 	bic.w	r2, r3, #16
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f023 0320 	bic.w	r3, r3, #32
 800697a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a1e      	ldr	r2, [pc, #120]	; (8006a04 <TIM_OC2_SetConfig+0xd4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d10d      	bne.n	80069ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a15      	ldr	r2, [pc, #84]	; (8006a04 <TIM_OC2_SetConfig+0xd4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d113      	bne.n	80069dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40010000 	.word	0x40010000

08006a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	021b      	lsls	r3, r3, #8
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <TIM_OC3_SetConfig+0xd0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d10d      	bne.n	8006a82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <TIM_OC3_SetConfig+0xd0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d113      	bne.n	8006ab2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	621a      	str	r2, [r3, #32]
}
 8006acc:	bf00      	nop
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	40010000 	.word	0x40010000

08006adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	031b      	lsls	r3, r3, #12
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a10      	ldr	r2, [pc, #64]	; (8006b78 <TIM_OC4_SetConfig+0x9c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d109      	bne.n	8006b50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	019b      	lsls	r3, r3, #6
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	621a      	str	r2, [r3, #32]
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40010000 	.word	0x40010000

08006b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f023 0201 	bic.w	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f023 030a 	bic.w	r3, r3, #10
 8006bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b087      	sub	sp, #28
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f023 0210 	bic.w	r2, r3, #16
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f043 0307 	orr.w	r3, r3, #7
 8006c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	609a      	str	r2, [r3, #8]
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
 8006c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	021a      	lsls	r2, r3, #8
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	609a      	str	r2, [r3, #8]
}
 8006ca4:	bf00      	nop
 8006ca6:	371c      	adds	r7, #28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f003 031f 	and.w	r3, r3, #31
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a1a      	ldr	r2, [r3, #32]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	401a      	ands	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a1a      	ldr	r2, [r3, #32]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
	...

08006cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e050      	b.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1c      	ldr	r2, [pc, #112]	; (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d018      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d60:	d013      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a18      	ldr	r2, [pc, #96]	; (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00e      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a16      	ldr	r2, [pc, #88]	; (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d009      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a15      	ldr	r2, [pc, #84]	; (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d004      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a13      	ldr	r2, [pc, #76]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d10c      	bne.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40000400 	.word	0x40000400
 8006dcc:	40000800 	.word	0x40000800
 8006dd0:	40000c00 	.word	0x40000c00
 8006dd4:	40014000 	.word	0x40014000

08006dd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e03d      	b.n	8006e70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e03f      	b.n	8006f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fc fdd6 	bl	8003a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2224      	movs	r2, #36	; 0x24
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 ff53 	bl	8007d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691a      	ldr	r2, [r3, #16]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	695a      	ldr	r2, [r3, #20]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08c      	sub	sp, #48	; 0x30
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4613      	mov	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d165      	bne.n	8006ffe <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <HAL_UART_Transmit_DMA+0x26>
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e05e      	b.n	8007000 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_UART_Transmit_DMA+0x38>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e057      	b.n	8007000 <HAL_UART_Transmit_DMA+0xe8>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	88fa      	ldrh	r2, [r7, #6]
 8006f62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	88fa      	ldrh	r2, [r7, #6]
 8006f68:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2221      	movs	r2, #33	; 0x21
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7c:	4a22      	ldr	r2, [pc, #136]	; (8007008 <HAL_UART_Transmit_DMA+0xf0>)
 8006f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f84:	4a21      	ldr	r2, [pc, #132]	; (800700c <HAL_UART_Transmit_DMA+0xf4>)
 8006f86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8c:	4a20      	ldr	r2, [pc, #128]	; (8007010 <HAL_UART_Transmit_DMA+0xf8>)
 8006f8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f94:	2200      	movs	r2, #0
 8006f96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006f98:	f107 0308 	add.w	r3, r7, #8
 8006f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	6819      	ldr	r1, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3304      	adds	r3, #4
 8006fac:	461a      	mov	r2, r3
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	f7fd f916 	bl	80041e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fbc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3314      	adds	r3, #20
 8006fcc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	e853 3f00 	ldrex	r3, [r3]
 8006fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3314      	adds	r3, #20
 8006fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fe6:	627a      	str	r2, [r7, #36]	; 0x24
 8006fe8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	6a39      	ldr	r1, [r7, #32]
 8006fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e5      	bne.n	8006fc6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	e000      	b.n	8007000 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006ffe:	2302      	movs	r3, #2
  }
}
 8007000:	4618      	mov	r0, r3
 8007002:	3730      	adds	r7, #48	; 0x30
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	0800760d 	.word	0x0800760d
 800700c:	080076a7 	.word	0x080076a7
 8007010:	0800781f 	.word	0x0800781f

08007014 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	4613      	mov	r3, r2
 8007020:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b20      	cmp	r3, #32
 800702c:	d11d      	bne.n	800706a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <HAL_UART_Receive_DMA+0x26>
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e016      	b.n	800706c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_UART_Receive_DMA+0x38>
 8007048:	2302      	movs	r3, #2
 800704a:	e00f      	b.n	800706c <HAL_UART_Receive_DMA+0x58>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	461a      	mov	r2, r3
 800705e:	68b9      	ldr	r1, [r7, #8]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 fc27 	bl	80078b4 <UART_Start_Receive_DMA>
 8007066:	4603      	mov	r3, r0
 8007068:	e000      	b.n	800706c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800706a:	2302      	movs	r3, #2
  }
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b0ba      	sub	sp, #232	; 0xe8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800709a:	2300      	movs	r3, #0
 800709c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10f      	bne.n	80070da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <HAL_UART_IRQHandler+0x66>
 80070c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fd8f 	bl	8007bf6 <UART_Receive_IT>
      return;
 80070d8:	e256      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80de 	beq.w	80072a0 <HAL_UART_IRQHandler+0x22c>
 80070e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80d1 	beq.w	80072a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00b      	beq.n	8007122 <HAL_UART_IRQHandler+0xae>
 800710a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f043 0201 	orr.w	r2, r3, #1
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00b      	beq.n	8007146 <HAL_UART_IRQHandler+0xd2>
 800712e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	f043 0202 	orr.w	r2, r3, #2
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00b      	beq.n	800716a <HAL_UART_IRQHandler+0xf6>
 8007152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f043 0204 	orr.w	r2, r3, #4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b00      	cmp	r3, #0
 8007174:	d011      	beq.n	800719a <HAL_UART_IRQHandler+0x126>
 8007176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d105      	bne.n	800718e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f043 0208 	orr.w	r2, r3, #8
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 81ed 	beq.w	800757e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d008      	beq.n	80071c2 <HAL_UART_IRQHandler+0x14e>
 80071b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fd1a 	bl	8007bf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071cc:	2b40      	cmp	r3, #64	; 0x40
 80071ce:	bf0c      	ite	eq
 80071d0:	2301      	moveq	r3, #1
 80071d2:	2300      	movne	r3, #0
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <HAL_UART_IRQHandler+0x17a>
 80071e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d04f      	beq.n	800728e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fc22 	bl	8007a38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	d141      	bne.n	8007286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3314      	adds	r3, #20
 8007208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800721c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3314      	adds	r3, #20
 800722a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800722e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800723a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1d9      	bne.n	8007202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	2b00      	cmp	r3, #0
 8007254:	d013      	beq.n	800727e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	4a7d      	ldr	r2, [pc, #500]	; (8007450 <HAL_UART_IRQHandler+0x3dc>)
 800725c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	4618      	mov	r0, r3
 8007264:	f7fd f884 	bl	8004370 <HAL_DMA_Abort_IT>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d016      	beq.n	800729c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	e00e      	b.n	800729c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f9ae 	bl	80075e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	e00a      	b.n	800729c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f9aa 	bl	80075e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728c:	e006      	b.n	800729c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9a6 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800729a:	e170      	b.n	800757e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729c:	bf00      	nop
    return;
 800729e:	e16e      	b.n	800757e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	f040 814a 	bne.w	800753e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 8143 	beq.w	800753e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 813c 	beq.w	800753e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072c6:	2300      	movs	r3, #0
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	60bb      	str	r3, [r7, #8]
 80072da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e6:	2b40      	cmp	r3, #64	; 0x40
 80072e8:	f040 80b4 	bne.w	8007454 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8140 	beq.w	8007582 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800730a:	429a      	cmp	r2, r3
 800730c:	f080 8139 	bcs.w	8007582 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007316:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007322:	f000 8088 	beq.w	8007436 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800733c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007352:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800735e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800736a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1d9      	bne.n	8007326 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3314      	adds	r3, #20
 8007378:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007384:	f023 0301 	bic.w	r3, r3, #1
 8007388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3314      	adds	r3, #20
 8007392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007396:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800739a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800739e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e1      	bne.n	8007372 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3314      	adds	r3, #20
 80073b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3314      	adds	r3, #20
 80073ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e3      	bne.n	80073ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007406:	f023 0310 	bic.w	r3, r3, #16
 800740a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007418:	65ba      	str	r2, [r7, #88]	; 0x58
 800741a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800741e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007420:	e841 2300 	strex	r3, r2, [r1]
 8007424:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e3      	bne.n	80073f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	4618      	mov	r0, r3
 8007432:	f7fc ff2d 	bl	8004290 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800743e:	b29b      	uxth	r3, r3
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	b29b      	uxth	r3, r3
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8d4 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800744c:	e099      	b.n	8007582 <HAL_UART_IRQHandler+0x50e>
 800744e:	bf00      	nop
 8007450:	08007aff 	.word	0x08007aff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800745c:	b29b      	uxth	r3, r3
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 808b 	beq.w	8007586 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8086 	beq.w	8007586 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	330c      	adds	r3, #12
 8007480:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007490:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	330c      	adds	r3, #12
 800749a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800749e:	647a      	str	r2, [r7, #68]	; 0x44
 80074a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e3      	bne.n	800747a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3314      	adds	r3, #20
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	623b      	str	r3, [r7, #32]
   return(result);
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	f023 0301 	bic.w	r3, r3, #1
 80074c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3314      	adds	r3, #20
 80074d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074d6:	633a      	str	r2, [r7, #48]	; 0x30
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e3      	bne.n	80074b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	330c      	adds	r3, #12
 80074fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	60fb      	str	r3, [r7, #12]
   return(result);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0310 	bic.w	r3, r3, #16
 800750e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	330c      	adds	r3, #12
 8007518:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800751c:	61fa      	str	r2, [r7, #28]
 800751e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	69b9      	ldr	r1, [r7, #24]
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	617b      	str	r3, [r7, #20]
   return(result);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e3      	bne.n	80074f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f85c 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800753c:	e023      	b.n	8007586 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800753e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007546:	2b00      	cmp	r3, #0
 8007548:	d009      	beq.n	800755e <HAL_UART_IRQHandler+0x4ea>
 800754a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fae5 	bl	8007b26 <UART_Transmit_IT>
    return;
 800755c:	e014      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00e      	beq.n	8007588 <HAL_UART_IRQHandler+0x514>
 800756a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d008      	beq.n	8007588 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fb25 	bl	8007bc6 <UART_EndTransmit_IT>
    return;
 800757c:	e004      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
    return;
 800757e:	bf00      	nop
 8007580:	e002      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
      return;
 8007582:	bf00      	nop
 8007584:	e000      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
      return;
 8007586:	bf00      	nop
  }
}
 8007588:	37e8      	adds	r7, #232	; 0xe8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop

08007590 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b090      	sub	sp, #64	; 0x40
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007618:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007624:	2b00      	cmp	r3, #0
 8007626:	d137      	bne.n	8007698 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762a:	2200      	movs	r2, #0
 800762c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800762e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3314      	adds	r3, #20
 8007634:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	623b      	str	r3, [r7, #32]
   return(result);
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007644:	63bb      	str	r3, [r7, #56]	; 0x38
 8007646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3314      	adds	r3, #20
 800764c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800764e:	633a      	str	r2, [r7, #48]	; 0x30
 8007650:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007652:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1e5      	bne.n	800762e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	330c      	adds	r3, #12
 8007668:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	60fb      	str	r3, [r7, #12]
   return(result);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
 800767a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	330c      	adds	r3, #12
 8007680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007682:	61fa      	str	r2, [r7, #28]
 8007684:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	69b9      	ldr	r1, [r7, #24]
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	617b      	str	r3, [r7, #20]
   return(result);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e5      	bne.n	8007662 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007696:	e002      	b.n	800769e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007698:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800769a:	f7ff ff79 	bl	8007590 <HAL_UART_TxCpltCallback>
}
 800769e:	bf00      	nop
 80076a0:	3740      	adds	r7, #64	; 0x40
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7ff ff75 	bl	80075a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ba:	bf00      	nop
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b09c      	sub	sp, #112	; 0x70
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d172      	bne.n	80077c4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80076de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e0:	2200      	movs	r2, #0
 80076e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80076fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007704:	65ba      	str	r2, [r7, #88]	; 0x58
 8007706:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007708:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800770a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800770c:	e841 2300 	strex	r3, r2, [r1]
 8007710:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e5      	bne.n	80076e4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3314      	adds	r3, #20
 800771e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772a:	f023 0301 	bic.w	r3, r3, #1
 800772e:	667b      	str	r3, [r7, #100]	; 0x64
 8007730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3314      	adds	r3, #20
 8007736:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007738:	647a      	str	r2, [r7, #68]	; 0x44
 800773a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800773e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e5      	bne.n	8007718 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800774c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3314      	adds	r3, #20
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	623b      	str	r3, [r7, #32]
   return(result);
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007762:	663b      	str	r3, [r7, #96]	; 0x60
 8007764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3314      	adds	r3, #20
 800776a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800776c:	633a      	str	r2, [r7, #48]	; 0x30
 800776e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e5      	bne.n	800774c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778c:	2b01      	cmp	r3, #1
 800778e:	d119      	bne.n	80077c4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	330c      	adds	r3, #12
 8007796:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	60fb      	str	r3, [r7, #12]
   return(result);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0310 	bic.w	r3, r3, #16
 80077a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	330c      	adds	r3, #12
 80077ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077b0:	61fa      	str	r2, [r7, #28]
 80077b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b4:	69b9      	ldr	r1, [r7, #24]
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	e841 2300 	strex	r3, r2, [r1]
 80077bc:	617b      	str	r3, [r7, #20]
   return(result);
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e5      	bne.n	8007790 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d106      	bne.n	80077da <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077d0:	4619      	mov	r1, r3
 80077d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077d4:	f7ff ff0e 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077d8:	e002      	b.n	80077e0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80077da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077dc:	f7ff feec 	bl	80075b8 <HAL_UART_RxCpltCallback>
}
 80077e0:	bf00      	nop
 80077e2:	3770      	adds	r7, #112	; 0x70
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d108      	bne.n	8007810 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	b29b      	uxth	r3, r3
 8007806:	4619      	mov	r1, r3
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f7ff fef3 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800780e:	e002      	b.n	8007816 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f7ff fedb 	bl	80075cc <HAL_UART_RxHalfCpltCallback>
}
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b80      	cmp	r3, #128	; 0x80
 800783c:	bf0c      	ite	eq
 800783e:	2301      	moveq	r3, #1
 8007840:	2300      	movne	r3, #0
 8007842:	b2db      	uxtb	r3, r3
 8007844:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b21      	cmp	r3, #33	; 0x21
 8007850:	d108      	bne.n	8007864 <UART_DMAError+0x46>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2200      	movs	r2, #0
 800785c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800785e:	68b8      	ldr	r0, [r7, #8]
 8007860:	f000 f8c2 	bl	80079e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b40      	cmp	r3, #64	; 0x40
 8007870:	bf0c      	ite	eq
 8007872:	2301      	moveq	r3, #1
 8007874:	2300      	movne	r3, #0
 8007876:	b2db      	uxtb	r3, r3
 8007878:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b22      	cmp	r3, #34	; 0x22
 8007884:	d108      	bne.n	8007898 <UART_DMAError+0x7a>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2200      	movs	r2, #0
 8007890:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007892:	68b8      	ldr	r0, [r7, #8]
 8007894:	f000 f8d0 	bl	8007a38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789c:	f043 0210 	orr.w	r2, r3, #16
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078a4:	68b8      	ldr	r0, [r7, #8]
 80078a6:	f7ff fe9b 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b098      	sub	sp, #96	; 0x60
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4613      	mov	r3, r2
 80078c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2222      	movs	r2, #34	; 0x22
 80078d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	4a3e      	ldr	r2, [pc, #248]	; (80079dc <UART_Start_Receive_DMA+0x128>)
 80078e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	4a3d      	ldr	r2, [pc, #244]	; (80079e0 <UART_Start_Receive_DMA+0x12c>)
 80078ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	4a3c      	ldr	r2, [pc, #240]	; (80079e4 <UART_Start_Receive_DMA+0x130>)
 80078f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	2200      	movs	r2, #0
 80078fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80078fc:	f107 0308 	add.w	r3, r7, #8
 8007900:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3304      	adds	r3, #4
 800790c:	4619      	mov	r1, r3
 800790e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	f7fc fc64 	bl	80041e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007918:	2300      	movs	r3, #0
 800791a:	613b      	str	r3, [r7, #16]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	613b      	str	r3, [r7, #16]
 800792c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	330c      	adds	r3, #12
 800793c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794c:	65bb      	str	r3, [r7, #88]	; 0x58
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	330c      	adds	r3, #12
 8007954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007956:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007958:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800795c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3314      	adds	r3, #20
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	f043 0301 	orr.w	r3, r3, #1
 8007980:	657b      	str	r3, [r7, #84]	; 0x54
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3314      	adds	r3, #20
 8007988:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800798a:	63ba      	str	r2, [r7, #56]	; 0x38
 800798c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e5      	bne.n	800796a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3314      	adds	r3, #20
 80079a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	617b      	str	r3, [r7, #20]
   return(result);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079b4:	653b      	str	r3, [r7, #80]	; 0x50
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3314      	adds	r3, #20
 80079bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079be:	627a      	str	r2, [r7, #36]	; 0x24
 80079c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c2:	6a39      	ldr	r1, [r7, #32]
 80079c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e5      	bne.n	800799e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3760      	adds	r7, #96	; 0x60
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	080076c3 	.word	0x080076c3
 80079e0:	080077e9 	.word	0x080077e9
 80079e4:	0800781f 	.word	0x0800781f

080079e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b089      	sub	sp, #36	; 0x24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	330c      	adds	r3, #12
 80079f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	61ba      	str	r2, [r7, #24]
 8007a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6979      	ldr	r1, [r7, #20]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e5      	bne.n	80079f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007a2c:	bf00      	nop
 8007a2e:	3724      	adds	r7, #36	; 0x24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b095      	sub	sp, #84	; 0x54
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	330c      	adds	r3, #12
 8007a5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a60:	643a      	str	r2, [r7, #64]	; 0x40
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e5      	bne.n	8007a40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3314      	adds	r3, #20
 8007a7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	f023 0301 	bic.w	r3, r3, #1
 8007a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3314      	adds	r3, #20
 8007a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e5      	bne.n	8007a74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d119      	bne.n	8007ae4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	330c      	adds	r3, #12
 8007ab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f023 0310 	bic.w	r3, r3, #16
 8007ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	330c      	adds	r3, #12
 8007ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ad0:	61ba      	str	r2, [r7, #24]
 8007ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6979      	ldr	r1, [r7, #20]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e5      	bne.n	8007ab0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007af2:	bf00      	nop
 8007af4:	3754      	adds	r7, #84	; 0x54
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f7ff fd61 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b1e:	bf00      	nop
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b085      	sub	sp, #20
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b21      	cmp	r3, #33	; 0x21
 8007b38:	d13e      	bne.n	8007bb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b42:	d114      	bne.n	8007b6e <UART_Transmit_IT+0x48>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d110      	bne.n	8007b6e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	1c9a      	adds	r2, r3, #2
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	621a      	str	r2, [r3, #32]
 8007b6c:	e008      	b.n	8007b80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	1c59      	adds	r1, r3, #1
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6211      	str	r1, [r2, #32]
 8007b78:	781a      	ldrb	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10f      	bne.n	8007bb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ba2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e000      	b.n	8007bba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bb8:	2302      	movs	r3, #2
  }
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff fcd2 	bl	8007590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b08c      	sub	sp, #48	; 0x30
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b22      	cmp	r3, #34	; 0x22
 8007c08:	f040 80ab 	bne.w	8007d62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c14:	d117      	bne.n	8007c46 <UART_Receive_IT+0x50>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d113      	bne.n	8007c46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3e:	1c9a      	adds	r2, r3, #2
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	629a      	str	r2, [r3, #40]	; 0x28
 8007c44:	e026      	b.n	8007c94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c58:	d007      	beq.n	8007c6a <UART_Receive_IT+0x74>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <UART_Receive_IT+0x82>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d106      	bne.n	8007c78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	e008      	b.n	8007c8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d15a      	bne.n	8007d5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0220 	bic.w	r2, r2, #32
 8007cb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	695a      	ldr	r2, [r3, #20]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0201 	bic.w	r2, r2, #1
 8007cd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d135      	bne.n	8007d54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	330c      	adds	r3, #12
 8007cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f023 0310 	bic.w	r3, r3, #16
 8007d04:	627b      	str	r3, [r7, #36]	; 0x24
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0e:	623a      	str	r2, [r7, #32]
 8007d10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	69f9      	ldr	r1, [r7, #28]
 8007d14:	6a3a      	ldr	r2, [r7, #32]
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e5      	bne.n	8007cee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b10      	cmp	r3, #16
 8007d2e:	d10a      	bne.n	8007d46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff fc51 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
 8007d52:	e002      	b.n	8007d5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fc2f 	bl	80075b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e002      	b.n	8007d64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e000      	b.n	8007d64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d62:	2302      	movs	r3, #2
  }
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3730      	adds	r7, #48	; 0x30
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d70:	b0c0      	sub	sp, #256	; 0x100
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d88:	68d9      	ldr	r1, [r3, #12]
 8007d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	ea40 0301 	orr.w	r3, r0, r1
 8007d94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007dc4:	f021 010c 	bic.w	r1, r1, #12
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dd2:	430b      	orrs	r3, r1
 8007dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de6:	6999      	ldr	r1, [r3, #24]
 8007de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	ea40 0301 	orr.w	r3, r0, r1
 8007df2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	4b8f      	ldr	r3, [pc, #572]	; (8008038 <UART_SetConfig+0x2cc>)
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d005      	beq.n	8007e0c <UART_SetConfig+0xa0>
 8007e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4b8d      	ldr	r3, [pc, #564]	; (800803c <UART_SetConfig+0x2d0>)
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d104      	bne.n	8007e16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e0c:	f7fd ffc2 	bl	8005d94 <HAL_RCC_GetPCLK2Freq>
 8007e10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e14:	e003      	b.n	8007e1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e16:	f7fd ffa9 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 8007e1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e28:	f040 810c 	bne.w	8008044 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e3e:	4622      	mov	r2, r4
 8007e40:	462b      	mov	r3, r5
 8007e42:	1891      	adds	r1, r2, r2
 8007e44:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e46:	415b      	adcs	r3, r3
 8007e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e4e:	4621      	mov	r1, r4
 8007e50:	eb12 0801 	adds.w	r8, r2, r1
 8007e54:	4629      	mov	r1, r5
 8007e56:	eb43 0901 	adc.w	r9, r3, r1
 8007e5a:	f04f 0200 	mov.w	r2, #0
 8007e5e:	f04f 0300 	mov.w	r3, #0
 8007e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e6e:	4690      	mov	r8, r2
 8007e70:	4699      	mov	r9, r3
 8007e72:	4623      	mov	r3, r4
 8007e74:	eb18 0303 	adds.w	r3, r8, r3
 8007e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e7c:	462b      	mov	r3, r5
 8007e7e:	eb49 0303 	adc.w	r3, r9, r3
 8007e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	18db      	adds	r3, r3, r3
 8007e9e:	653b      	str	r3, [r7, #80]	; 0x50
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	eb42 0303 	adc.w	r3, r2, r3
 8007ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ea8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007eac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007eb0:	f7f8 ffa4 	bl	8000dfc <__aeabi_uldivmod>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4b61      	ldr	r3, [pc, #388]	; (8008040 <UART_SetConfig+0x2d4>)
 8007eba:	fba3 2302 	umull	r2, r3, r3, r2
 8007ebe:	095b      	lsrs	r3, r3, #5
 8007ec0:	011c      	lsls	r4, r3, #4
 8007ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ecc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ed0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ed4:	4642      	mov	r2, r8
 8007ed6:	464b      	mov	r3, r9
 8007ed8:	1891      	adds	r1, r2, r2
 8007eda:	64b9      	str	r1, [r7, #72]	; 0x48
 8007edc:	415b      	adcs	r3, r3
 8007ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ee0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	eb12 0a01 	adds.w	sl, r2, r1
 8007eea:	4649      	mov	r1, r9
 8007eec:	eb43 0b01 	adc.w	fp, r3, r1
 8007ef0:	f04f 0200 	mov.w	r2, #0
 8007ef4:	f04f 0300 	mov.w	r3, #0
 8007ef8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007efc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f04:	4692      	mov	sl, r2
 8007f06:	469b      	mov	fp, r3
 8007f08:	4643      	mov	r3, r8
 8007f0a:	eb1a 0303 	adds.w	r3, sl, r3
 8007f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f12:	464b      	mov	r3, r9
 8007f14:	eb4b 0303 	adc.w	r3, fp, r3
 8007f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f30:	460b      	mov	r3, r1
 8007f32:	18db      	adds	r3, r3, r3
 8007f34:	643b      	str	r3, [r7, #64]	; 0x40
 8007f36:	4613      	mov	r3, r2
 8007f38:	eb42 0303 	adc.w	r3, r2, r3
 8007f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f46:	f7f8 ff59 	bl	8000dfc <__aeabi_uldivmod>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4611      	mov	r1, r2
 8007f50:	4b3b      	ldr	r3, [pc, #236]	; (8008040 <UART_SetConfig+0x2d4>)
 8007f52:	fba3 2301 	umull	r2, r3, r3, r1
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	2264      	movs	r2, #100	; 0x64
 8007f5a:	fb02 f303 	mul.w	r3, r2, r3
 8007f5e:	1acb      	subs	r3, r1, r3
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f66:	4b36      	ldr	r3, [pc, #216]	; (8008040 <UART_SetConfig+0x2d4>)
 8007f68:	fba3 2302 	umull	r2, r3, r3, r2
 8007f6c:	095b      	lsrs	r3, r3, #5
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f74:	441c      	add	r4, r3
 8007f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f88:	4642      	mov	r2, r8
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	1891      	adds	r1, r2, r2
 8007f8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f90:	415b      	adcs	r3, r3
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f98:	4641      	mov	r1, r8
 8007f9a:	1851      	adds	r1, r2, r1
 8007f9c:	6339      	str	r1, [r7, #48]	; 0x30
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	414b      	adcs	r3, r1
 8007fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007fb0:	4659      	mov	r1, fp
 8007fb2:	00cb      	lsls	r3, r1, #3
 8007fb4:	4651      	mov	r1, sl
 8007fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fba:	4651      	mov	r1, sl
 8007fbc:	00ca      	lsls	r2, r1, #3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	189b      	adds	r3, r3, r2
 8007fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fcc:	464b      	mov	r3, r9
 8007fce:	460a      	mov	r2, r1
 8007fd0:	eb42 0303 	adc.w	r3, r2, r3
 8007fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007fe4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007fe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007fec:	460b      	mov	r3, r1
 8007fee:	18db      	adds	r3, r3, r3
 8007ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	eb42 0303 	adc.w	r3, r2, r3
 8007ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ffa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ffe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008002:	f7f8 fefb 	bl	8000dfc <__aeabi_uldivmod>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4b0d      	ldr	r3, [pc, #52]	; (8008040 <UART_SetConfig+0x2d4>)
 800800c:	fba3 1302 	umull	r1, r3, r3, r2
 8008010:	095b      	lsrs	r3, r3, #5
 8008012:	2164      	movs	r1, #100	; 0x64
 8008014:	fb01 f303 	mul.w	r3, r1, r3
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	3332      	adds	r3, #50	; 0x32
 800801e:	4a08      	ldr	r2, [pc, #32]	; (8008040 <UART_SetConfig+0x2d4>)
 8008020:	fba2 2303 	umull	r2, r3, r2, r3
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	f003 0207 	and.w	r2, r3, #7
 800802a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4422      	add	r2, r4
 8008032:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008034:	e105      	b.n	8008242 <UART_SetConfig+0x4d6>
 8008036:	bf00      	nop
 8008038:	40011000 	.word	0x40011000
 800803c:	40011400 	.word	0x40011400
 8008040:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008048:	2200      	movs	r2, #0
 800804a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800804e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008052:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008056:	4642      	mov	r2, r8
 8008058:	464b      	mov	r3, r9
 800805a:	1891      	adds	r1, r2, r2
 800805c:	6239      	str	r1, [r7, #32]
 800805e:	415b      	adcs	r3, r3
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
 8008062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008066:	4641      	mov	r1, r8
 8008068:	1854      	adds	r4, r2, r1
 800806a:	4649      	mov	r1, r9
 800806c:	eb43 0501 	adc.w	r5, r3, r1
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	00eb      	lsls	r3, r5, #3
 800807a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800807e:	00e2      	lsls	r2, r4, #3
 8008080:	4614      	mov	r4, r2
 8008082:	461d      	mov	r5, r3
 8008084:	4643      	mov	r3, r8
 8008086:	18e3      	adds	r3, r4, r3
 8008088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800808c:	464b      	mov	r3, r9
 800808e:	eb45 0303 	adc.w	r3, r5, r3
 8008092:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	f04f 0300 	mov.w	r3, #0
 80080ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80080b2:	4629      	mov	r1, r5
 80080b4:	008b      	lsls	r3, r1, #2
 80080b6:	4621      	mov	r1, r4
 80080b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080bc:	4621      	mov	r1, r4
 80080be:	008a      	lsls	r2, r1, #2
 80080c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080c4:	f7f8 fe9a 	bl	8000dfc <__aeabi_uldivmod>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4b60      	ldr	r3, [pc, #384]	; (8008250 <UART_SetConfig+0x4e4>)
 80080ce:	fba3 2302 	umull	r2, r3, r3, r2
 80080d2:	095b      	lsrs	r3, r3, #5
 80080d4:	011c      	lsls	r4, r3, #4
 80080d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080da:	2200      	movs	r2, #0
 80080dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80080e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80080e8:	4642      	mov	r2, r8
 80080ea:	464b      	mov	r3, r9
 80080ec:	1891      	adds	r1, r2, r2
 80080ee:	61b9      	str	r1, [r7, #24]
 80080f0:	415b      	adcs	r3, r3
 80080f2:	61fb      	str	r3, [r7, #28]
 80080f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080f8:	4641      	mov	r1, r8
 80080fa:	1851      	adds	r1, r2, r1
 80080fc:	6139      	str	r1, [r7, #16]
 80080fe:	4649      	mov	r1, r9
 8008100:	414b      	adcs	r3, r1
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	f04f 0200 	mov.w	r2, #0
 8008108:	f04f 0300 	mov.w	r3, #0
 800810c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008110:	4659      	mov	r1, fp
 8008112:	00cb      	lsls	r3, r1, #3
 8008114:	4651      	mov	r1, sl
 8008116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800811a:	4651      	mov	r1, sl
 800811c:	00ca      	lsls	r2, r1, #3
 800811e:	4610      	mov	r0, r2
 8008120:	4619      	mov	r1, r3
 8008122:	4603      	mov	r3, r0
 8008124:	4642      	mov	r2, r8
 8008126:	189b      	adds	r3, r3, r2
 8008128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800812c:	464b      	mov	r3, r9
 800812e:	460a      	mov	r2, r1
 8008130:	eb42 0303 	adc.w	r3, r2, r3
 8008134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	67bb      	str	r3, [r7, #120]	; 0x78
 8008142:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008144:	f04f 0200 	mov.w	r2, #0
 8008148:	f04f 0300 	mov.w	r3, #0
 800814c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008150:	4649      	mov	r1, r9
 8008152:	008b      	lsls	r3, r1, #2
 8008154:	4641      	mov	r1, r8
 8008156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800815a:	4641      	mov	r1, r8
 800815c:	008a      	lsls	r2, r1, #2
 800815e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008162:	f7f8 fe4b 	bl	8000dfc <__aeabi_uldivmod>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4b39      	ldr	r3, [pc, #228]	; (8008250 <UART_SetConfig+0x4e4>)
 800816c:	fba3 1302 	umull	r1, r3, r3, r2
 8008170:	095b      	lsrs	r3, r3, #5
 8008172:	2164      	movs	r1, #100	; 0x64
 8008174:	fb01 f303 	mul.w	r3, r1, r3
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	3332      	adds	r3, #50	; 0x32
 800817e:	4a34      	ldr	r2, [pc, #208]	; (8008250 <UART_SetConfig+0x4e4>)
 8008180:	fba2 2303 	umull	r2, r3, r2, r3
 8008184:	095b      	lsrs	r3, r3, #5
 8008186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800818a:	441c      	add	r4, r3
 800818c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008190:	2200      	movs	r2, #0
 8008192:	673b      	str	r3, [r7, #112]	; 0x70
 8008194:	677a      	str	r2, [r7, #116]	; 0x74
 8008196:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800819a:	4642      	mov	r2, r8
 800819c:	464b      	mov	r3, r9
 800819e:	1891      	adds	r1, r2, r2
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	415b      	adcs	r3, r3
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081aa:	4641      	mov	r1, r8
 80081ac:	1851      	adds	r1, r2, r1
 80081ae:	6039      	str	r1, [r7, #0]
 80081b0:	4649      	mov	r1, r9
 80081b2:	414b      	adcs	r3, r1
 80081b4:	607b      	str	r3, [r7, #4]
 80081b6:	f04f 0200 	mov.w	r2, #0
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081c2:	4659      	mov	r1, fp
 80081c4:	00cb      	lsls	r3, r1, #3
 80081c6:	4651      	mov	r1, sl
 80081c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081cc:	4651      	mov	r1, sl
 80081ce:	00ca      	lsls	r2, r1, #3
 80081d0:	4610      	mov	r0, r2
 80081d2:	4619      	mov	r1, r3
 80081d4:	4603      	mov	r3, r0
 80081d6:	4642      	mov	r2, r8
 80081d8:	189b      	adds	r3, r3, r2
 80081da:	66bb      	str	r3, [r7, #104]	; 0x68
 80081dc:	464b      	mov	r3, r9
 80081de:	460a      	mov	r2, r1
 80081e0:	eb42 0303 	adc.w	r3, r2, r3
 80081e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	663b      	str	r3, [r7, #96]	; 0x60
 80081f0:	667a      	str	r2, [r7, #100]	; 0x64
 80081f2:	f04f 0200 	mov.w	r2, #0
 80081f6:	f04f 0300 	mov.w	r3, #0
 80081fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80081fe:	4649      	mov	r1, r9
 8008200:	008b      	lsls	r3, r1, #2
 8008202:	4641      	mov	r1, r8
 8008204:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008208:	4641      	mov	r1, r8
 800820a:	008a      	lsls	r2, r1, #2
 800820c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008210:	f7f8 fdf4 	bl	8000dfc <__aeabi_uldivmod>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4b0d      	ldr	r3, [pc, #52]	; (8008250 <UART_SetConfig+0x4e4>)
 800821a:	fba3 1302 	umull	r1, r3, r3, r2
 800821e:	095b      	lsrs	r3, r3, #5
 8008220:	2164      	movs	r1, #100	; 0x64
 8008222:	fb01 f303 	mul.w	r3, r1, r3
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	3332      	adds	r3, #50	; 0x32
 800822c:	4a08      	ldr	r2, [pc, #32]	; (8008250 <UART_SetConfig+0x4e4>)
 800822e:	fba2 2303 	umull	r2, r3, r2, r3
 8008232:	095b      	lsrs	r3, r3, #5
 8008234:	f003 020f 	and.w	r2, r3, #15
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4422      	add	r2, r4
 8008240:	609a      	str	r2, [r3, #8]
}
 8008242:	bf00      	nop
 8008244:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008248:	46bd      	mov	sp, r7
 800824a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800824e:	bf00      	nop
 8008250:	51eb851f 	.word	0x51eb851f

08008254 <calloc>:
 8008254:	4b02      	ldr	r3, [pc, #8]	; (8008260 <calloc+0xc>)
 8008256:	460a      	mov	r2, r1
 8008258:	4601      	mov	r1, r0
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	f000 b842 	b.w	80082e4 <_calloc_r>
 8008260:	20000028 	.word	0x20000028

08008264 <__errno>:
 8008264:	4b01      	ldr	r3, [pc, #4]	; (800826c <__errno+0x8>)
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	20000028 	.word	0x20000028

08008270 <__libc_init_array>:
 8008270:	b570      	push	{r4, r5, r6, lr}
 8008272:	4d0d      	ldr	r5, [pc, #52]	; (80082a8 <__libc_init_array+0x38>)
 8008274:	4c0d      	ldr	r4, [pc, #52]	; (80082ac <__libc_init_array+0x3c>)
 8008276:	1b64      	subs	r4, r4, r5
 8008278:	10a4      	asrs	r4, r4, #2
 800827a:	2600      	movs	r6, #0
 800827c:	42a6      	cmp	r6, r4
 800827e:	d109      	bne.n	8008294 <__libc_init_array+0x24>
 8008280:	4d0b      	ldr	r5, [pc, #44]	; (80082b0 <__libc_init_array+0x40>)
 8008282:	4c0c      	ldr	r4, [pc, #48]	; (80082b4 <__libc_init_array+0x44>)
 8008284:	f000 f9d4 	bl	8008630 <_init>
 8008288:	1b64      	subs	r4, r4, r5
 800828a:	10a4      	asrs	r4, r4, #2
 800828c:	2600      	movs	r6, #0
 800828e:	42a6      	cmp	r6, r4
 8008290:	d105      	bne.n	800829e <__libc_init_array+0x2e>
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	f855 3b04 	ldr.w	r3, [r5], #4
 8008298:	4798      	blx	r3
 800829a:	3601      	adds	r6, #1
 800829c:	e7ee      	b.n	800827c <__libc_init_array+0xc>
 800829e:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a2:	4798      	blx	r3
 80082a4:	3601      	adds	r6, #1
 80082a6:	e7f2      	b.n	800828e <__libc_init_array+0x1e>
 80082a8:	08008670 	.word	0x08008670
 80082ac:	08008670 	.word	0x08008670
 80082b0:	08008670 	.word	0x08008670
 80082b4:	08008674 	.word	0x08008674

080082b8 <memcpy>:
 80082b8:	440a      	add	r2, r1
 80082ba:	4291      	cmp	r1, r2
 80082bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80082c0:	d100      	bne.n	80082c4 <memcpy+0xc>
 80082c2:	4770      	bx	lr
 80082c4:	b510      	push	{r4, lr}
 80082c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ce:	4291      	cmp	r1, r2
 80082d0:	d1f9      	bne.n	80082c6 <memcpy+0xe>
 80082d2:	bd10      	pop	{r4, pc}

080082d4 <memset>:
 80082d4:	4402      	add	r2, r0
 80082d6:	4603      	mov	r3, r0
 80082d8:	4293      	cmp	r3, r2
 80082da:	d100      	bne.n	80082de <memset+0xa>
 80082dc:	4770      	bx	lr
 80082de:	f803 1b01 	strb.w	r1, [r3], #1
 80082e2:	e7f9      	b.n	80082d8 <memset+0x4>

080082e4 <_calloc_r>:
 80082e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082e6:	fba1 2402 	umull	r2, r4, r1, r2
 80082ea:	b94c      	cbnz	r4, 8008300 <_calloc_r+0x1c>
 80082ec:	4611      	mov	r1, r2
 80082ee:	9201      	str	r2, [sp, #4]
 80082f0:	f000 f82e 	bl	8008350 <_malloc_r>
 80082f4:	9a01      	ldr	r2, [sp, #4]
 80082f6:	4605      	mov	r5, r0
 80082f8:	b930      	cbnz	r0, 8008308 <_calloc_r+0x24>
 80082fa:	4628      	mov	r0, r5
 80082fc:	b003      	add	sp, #12
 80082fe:	bd30      	pop	{r4, r5, pc}
 8008300:	220c      	movs	r2, #12
 8008302:	6002      	str	r2, [r0, #0]
 8008304:	2500      	movs	r5, #0
 8008306:	e7f8      	b.n	80082fa <_calloc_r+0x16>
 8008308:	4621      	mov	r1, r4
 800830a:	f7ff ffe3 	bl	80082d4 <memset>
 800830e:	e7f4      	b.n	80082fa <_calloc_r+0x16>

08008310 <sbrk_aligned>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	4e0e      	ldr	r6, [pc, #56]	; (800834c <sbrk_aligned+0x3c>)
 8008314:	460c      	mov	r4, r1
 8008316:	6831      	ldr	r1, [r6, #0]
 8008318:	4605      	mov	r5, r0
 800831a:	b911      	cbnz	r1, 8008322 <sbrk_aligned+0x12>
 800831c:	f000 f88c 	bl	8008438 <_sbrk_r>
 8008320:	6030      	str	r0, [r6, #0]
 8008322:	4621      	mov	r1, r4
 8008324:	4628      	mov	r0, r5
 8008326:	f000 f887 	bl	8008438 <_sbrk_r>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	d00a      	beq.n	8008344 <sbrk_aligned+0x34>
 800832e:	1cc4      	adds	r4, r0, #3
 8008330:	f024 0403 	bic.w	r4, r4, #3
 8008334:	42a0      	cmp	r0, r4
 8008336:	d007      	beq.n	8008348 <sbrk_aligned+0x38>
 8008338:	1a21      	subs	r1, r4, r0
 800833a:	4628      	mov	r0, r5
 800833c:	f000 f87c 	bl	8008438 <_sbrk_r>
 8008340:	3001      	adds	r0, #1
 8008342:	d101      	bne.n	8008348 <sbrk_aligned+0x38>
 8008344:	f04f 34ff 	mov.w	r4, #4294967295
 8008348:	4620      	mov	r0, r4
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	20000428 	.word	0x20000428

08008350 <_malloc_r>:
 8008350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008354:	1ccd      	adds	r5, r1, #3
 8008356:	f025 0503 	bic.w	r5, r5, #3
 800835a:	3508      	adds	r5, #8
 800835c:	2d0c      	cmp	r5, #12
 800835e:	bf38      	it	cc
 8008360:	250c      	movcc	r5, #12
 8008362:	2d00      	cmp	r5, #0
 8008364:	4607      	mov	r7, r0
 8008366:	db01      	blt.n	800836c <_malloc_r+0x1c>
 8008368:	42a9      	cmp	r1, r5
 800836a:	d905      	bls.n	8008378 <_malloc_r+0x28>
 800836c:	230c      	movs	r3, #12
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	2600      	movs	r6, #0
 8008372:	4630      	mov	r0, r6
 8008374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008378:	4e2e      	ldr	r6, [pc, #184]	; (8008434 <_malloc_r+0xe4>)
 800837a:	f000 f86d 	bl	8008458 <__malloc_lock>
 800837e:	6833      	ldr	r3, [r6, #0]
 8008380:	461c      	mov	r4, r3
 8008382:	bb34      	cbnz	r4, 80083d2 <_malloc_r+0x82>
 8008384:	4629      	mov	r1, r5
 8008386:	4638      	mov	r0, r7
 8008388:	f7ff ffc2 	bl	8008310 <sbrk_aligned>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	4604      	mov	r4, r0
 8008390:	d14d      	bne.n	800842e <_malloc_r+0xde>
 8008392:	6834      	ldr	r4, [r6, #0]
 8008394:	4626      	mov	r6, r4
 8008396:	2e00      	cmp	r6, #0
 8008398:	d140      	bne.n	800841c <_malloc_r+0xcc>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	4631      	mov	r1, r6
 800839e:	4638      	mov	r0, r7
 80083a0:	eb04 0803 	add.w	r8, r4, r3
 80083a4:	f000 f848 	bl	8008438 <_sbrk_r>
 80083a8:	4580      	cmp	r8, r0
 80083aa:	d13a      	bne.n	8008422 <_malloc_r+0xd2>
 80083ac:	6821      	ldr	r1, [r4, #0]
 80083ae:	3503      	adds	r5, #3
 80083b0:	1a6d      	subs	r5, r5, r1
 80083b2:	f025 0503 	bic.w	r5, r5, #3
 80083b6:	3508      	adds	r5, #8
 80083b8:	2d0c      	cmp	r5, #12
 80083ba:	bf38      	it	cc
 80083bc:	250c      	movcc	r5, #12
 80083be:	4629      	mov	r1, r5
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff ffa5 	bl	8008310 <sbrk_aligned>
 80083c6:	3001      	adds	r0, #1
 80083c8:	d02b      	beq.n	8008422 <_malloc_r+0xd2>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	442b      	add	r3, r5
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	e00e      	b.n	80083f0 <_malloc_r+0xa0>
 80083d2:	6822      	ldr	r2, [r4, #0]
 80083d4:	1b52      	subs	r2, r2, r5
 80083d6:	d41e      	bmi.n	8008416 <_malloc_r+0xc6>
 80083d8:	2a0b      	cmp	r2, #11
 80083da:	d916      	bls.n	800840a <_malloc_r+0xba>
 80083dc:	1961      	adds	r1, r4, r5
 80083de:	42a3      	cmp	r3, r4
 80083e0:	6025      	str	r5, [r4, #0]
 80083e2:	bf18      	it	ne
 80083e4:	6059      	strne	r1, [r3, #4]
 80083e6:	6863      	ldr	r3, [r4, #4]
 80083e8:	bf08      	it	eq
 80083ea:	6031      	streq	r1, [r6, #0]
 80083ec:	5162      	str	r2, [r4, r5]
 80083ee:	604b      	str	r3, [r1, #4]
 80083f0:	4638      	mov	r0, r7
 80083f2:	f104 060b 	add.w	r6, r4, #11
 80083f6:	f000 f835 	bl	8008464 <__malloc_unlock>
 80083fa:	f026 0607 	bic.w	r6, r6, #7
 80083fe:	1d23      	adds	r3, r4, #4
 8008400:	1af2      	subs	r2, r6, r3
 8008402:	d0b6      	beq.n	8008372 <_malloc_r+0x22>
 8008404:	1b9b      	subs	r3, r3, r6
 8008406:	50a3      	str	r3, [r4, r2]
 8008408:	e7b3      	b.n	8008372 <_malloc_r+0x22>
 800840a:	6862      	ldr	r2, [r4, #4]
 800840c:	42a3      	cmp	r3, r4
 800840e:	bf0c      	ite	eq
 8008410:	6032      	streq	r2, [r6, #0]
 8008412:	605a      	strne	r2, [r3, #4]
 8008414:	e7ec      	b.n	80083f0 <_malloc_r+0xa0>
 8008416:	4623      	mov	r3, r4
 8008418:	6864      	ldr	r4, [r4, #4]
 800841a:	e7b2      	b.n	8008382 <_malloc_r+0x32>
 800841c:	4634      	mov	r4, r6
 800841e:	6876      	ldr	r6, [r6, #4]
 8008420:	e7b9      	b.n	8008396 <_malloc_r+0x46>
 8008422:	230c      	movs	r3, #12
 8008424:	603b      	str	r3, [r7, #0]
 8008426:	4638      	mov	r0, r7
 8008428:	f000 f81c 	bl	8008464 <__malloc_unlock>
 800842c:	e7a1      	b.n	8008372 <_malloc_r+0x22>
 800842e:	6025      	str	r5, [r4, #0]
 8008430:	e7de      	b.n	80083f0 <_malloc_r+0xa0>
 8008432:	bf00      	nop
 8008434:	20000424 	.word	0x20000424

08008438 <_sbrk_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d06      	ldr	r5, [pc, #24]	; (8008454 <_sbrk_r+0x1c>)
 800843c:	2300      	movs	r3, #0
 800843e:	4604      	mov	r4, r0
 8008440:	4608      	mov	r0, r1
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	f7fb fc04 	bl	8003c50 <_sbrk>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_sbrk_r+0x1a>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_sbrk_r+0x1a>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	2000042c 	.word	0x2000042c

08008458 <__malloc_lock>:
 8008458:	4801      	ldr	r0, [pc, #4]	; (8008460 <__malloc_lock+0x8>)
 800845a:	f000 b809 	b.w	8008470 <__retarget_lock_acquire_recursive>
 800845e:	bf00      	nop
 8008460:	20000430 	.word	0x20000430

08008464 <__malloc_unlock>:
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <__malloc_unlock+0x8>)
 8008466:	f000 b804 	b.w	8008472 <__retarget_lock_release_recursive>
 800846a:	bf00      	nop
 800846c:	20000430 	.word	0x20000430

08008470 <__retarget_lock_acquire_recursive>:
 8008470:	4770      	bx	lr

08008472 <__retarget_lock_release_recursive>:
 8008472:	4770      	bx	lr

08008474 <sqrt>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	ed2d 8b02 	vpush	{d8}
 800847a:	ec55 4b10 	vmov	r4, r5, d0
 800847e:	f000 f825 	bl	80084cc <__ieee754_sqrt>
 8008482:	4622      	mov	r2, r4
 8008484:	462b      	mov	r3, r5
 8008486:	4620      	mov	r0, r4
 8008488:	4629      	mov	r1, r5
 800848a:	eeb0 8a40 	vmov.f32	s16, s0
 800848e:	eef0 8a60 	vmov.f32	s17, s1
 8008492:	f7f8 faf7 	bl	8000a84 <__aeabi_dcmpun>
 8008496:	b990      	cbnz	r0, 80084be <sqrt+0x4a>
 8008498:	2200      	movs	r2, #0
 800849a:	2300      	movs	r3, #0
 800849c:	4620      	mov	r0, r4
 800849e:	4629      	mov	r1, r5
 80084a0:	f7f8 fac8 	bl	8000a34 <__aeabi_dcmplt>
 80084a4:	b158      	cbz	r0, 80084be <sqrt+0x4a>
 80084a6:	f7ff fedd 	bl	8008264 <__errno>
 80084aa:	2321      	movs	r3, #33	; 0x21
 80084ac:	6003      	str	r3, [r0, #0]
 80084ae:	2200      	movs	r2, #0
 80084b0:	2300      	movs	r3, #0
 80084b2:	4610      	mov	r0, r2
 80084b4:	4619      	mov	r1, r3
 80084b6:	f7f8 f975 	bl	80007a4 <__aeabi_ddiv>
 80084ba:	ec41 0b18 	vmov	d8, r0, r1
 80084be:	eeb0 0a48 	vmov.f32	s0, s16
 80084c2:	eef0 0a68 	vmov.f32	s1, s17
 80084c6:	ecbd 8b02 	vpop	{d8}
 80084ca:	bd38      	pop	{r3, r4, r5, pc}

080084cc <__ieee754_sqrt>:
 80084cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d0:	ec55 4b10 	vmov	r4, r5, d0
 80084d4:	4e55      	ldr	r6, [pc, #340]	; (800862c <__ieee754_sqrt+0x160>)
 80084d6:	43ae      	bics	r6, r5
 80084d8:	ee10 0a10 	vmov	r0, s0
 80084dc:	ee10 3a10 	vmov	r3, s0
 80084e0:	462a      	mov	r2, r5
 80084e2:	4629      	mov	r1, r5
 80084e4:	d110      	bne.n	8008508 <__ieee754_sqrt+0x3c>
 80084e6:	ee10 2a10 	vmov	r2, s0
 80084ea:	462b      	mov	r3, r5
 80084ec:	f7f8 f830 	bl	8000550 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4620      	mov	r0, r4
 80084f6:	4629      	mov	r1, r5
 80084f8:	f7f7 fe74 	bl	80001e4 <__adddf3>
 80084fc:	4604      	mov	r4, r0
 80084fe:	460d      	mov	r5, r1
 8008500:	ec45 4b10 	vmov	d0, r4, r5
 8008504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008508:	2d00      	cmp	r5, #0
 800850a:	dc10      	bgt.n	800852e <__ieee754_sqrt+0x62>
 800850c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008510:	4330      	orrs	r0, r6
 8008512:	d0f5      	beq.n	8008500 <__ieee754_sqrt+0x34>
 8008514:	b15d      	cbz	r5, 800852e <__ieee754_sqrt+0x62>
 8008516:	ee10 2a10 	vmov	r2, s0
 800851a:	462b      	mov	r3, r5
 800851c:	ee10 0a10 	vmov	r0, s0
 8008520:	f7f7 fe5e 	bl	80001e0 <__aeabi_dsub>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	f7f8 f93c 	bl	80007a4 <__aeabi_ddiv>
 800852c:	e7e6      	b.n	80084fc <__ieee754_sqrt+0x30>
 800852e:	1512      	asrs	r2, r2, #20
 8008530:	d074      	beq.n	800861c <__ieee754_sqrt+0x150>
 8008532:	07d4      	lsls	r4, r2, #31
 8008534:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008538:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	bf5e      	ittt	pl
 8008542:	0fda      	lsrpl	r2, r3, #31
 8008544:	005b      	lslpl	r3, r3, #1
 8008546:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800854a:	2400      	movs	r4, #0
 800854c:	0fda      	lsrs	r2, r3, #31
 800854e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008552:	107f      	asrs	r7, r7, #1
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	2516      	movs	r5, #22
 8008558:	4620      	mov	r0, r4
 800855a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800855e:	1886      	adds	r6, r0, r2
 8008560:	428e      	cmp	r6, r1
 8008562:	bfde      	ittt	le
 8008564:	1b89      	suble	r1, r1, r6
 8008566:	18b0      	addle	r0, r6, r2
 8008568:	18a4      	addle	r4, r4, r2
 800856a:	0049      	lsls	r1, r1, #1
 800856c:	3d01      	subs	r5, #1
 800856e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008572:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008576:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800857a:	d1f0      	bne.n	800855e <__ieee754_sqrt+0x92>
 800857c:	462a      	mov	r2, r5
 800857e:	f04f 0e20 	mov.w	lr, #32
 8008582:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008586:	4281      	cmp	r1, r0
 8008588:	eb06 0c05 	add.w	ip, r6, r5
 800858c:	dc02      	bgt.n	8008594 <__ieee754_sqrt+0xc8>
 800858e:	d113      	bne.n	80085b8 <__ieee754_sqrt+0xec>
 8008590:	459c      	cmp	ip, r3
 8008592:	d811      	bhi.n	80085b8 <__ieee754_sqrt+0xec>
 8008594:	f1bc 0f00 	cmp.w	ip, #0
 8008598:	eb0c 0506 	add.w	r5, ip, r6
 800859c:	da43      	bge.n	8008626 <__ieee754_sqrt+0x15a>
 800859e:	2d00      	cmp	r5, #0
 80085a0:	db41      	blt.n	8008626 <__ieee754_sqrt+0x15a>
 80085a2:	f100 0801 	add.w	r8, r0, #1
 80085a6:	1a09      	subs	r1, r1, r0
 80085a8:	459c      	cmp	ip, r3
 80085aa:	bf88      	it	hi
 80085ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80085b0:	eba3 030c 	sub.w	r3, r3, ip
 80085b4:	4432      	add	r2, r6
 80085b6:	4640      	mov	r0, r8
 80085b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80085bc:	f1be 0e01 	subs.w	lr, lr, #1
 80085c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80085c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80085cc:	d1db      	bne.n	8008586 <__ieee754_sqrt+0xba>
 80085ce:	430b      	orrs	r3, r1
 80085d0:	d006      	beq.n	80085e0 <__ieee754_sqrt+0x114>
 80085d2:	1c50      	adds	r0, r2, #1
 80085d4:	bf13      	iteet	ne
 80085d6:	3201      	addne	r2, #1
 80085d8:	3401      	addeq	r4, #1
 80085da:	4672      	moveq	r2, lr
 80085dc:	f022 0201 	bicne.w	r2, r2, #1
 80085e0:	1063      	asrs	r3, r4, #1
 80085e2:	0852      	lsrs	r2, r2, #1
 80085e4:	07e1      	lsls	r1, r4, #31
 80085e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80085ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80085ee:	bf48      	it	mi
 80085f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80085f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80085f8:	4614      	mov	r4, r2
 80085fa:	e781      	b.n	8008500 <__ieee754_sqrt+0x34>
 80085fc:	0ad9      	lsrs	r1, r3, #11
 80085fe:	3815      	subs	r0, #21
 8008600:	055b      	lsls	r3, r3, #21
 8008602:	2900      	cmp	r1, #0
 8008604:	d0fa      	beq.n	80085fc <__ieee754_sqrt+0x130>
 8008606:	02cd      	lsls	r5, r1, #11
 8008608:	d50a      	bpl.n	8008620 <__ieee754_sqrt+0x154>
 800860a:	f1c2 0420 	rsb	r4, r2, #32
 800860e:	fa23 f404 	lsr.w	r4, r3, r4
 8008612:	1e55      	subs	r5, r2, #1
 8008614:	4093      	lsls	r3, r2
 8008616:	4321      	orrs	r1, r4
 8008618:	1b42      	subs	r2, r0, r5
 800861a:	e78a      	b.n	8008532 <__ieee754_sqrt+0x66>
 800861c:	4610      	mov	r0, r2
 800861e:	e7f0      	b.n	8008602 <__ieee754_sqrt+0x136>
 8008620:	0049      	lsls	r1, r1, #1
 8008622:	3201      	adds	r2, #1
 8008624:	e7ef      	b.n	8008606 <__ieee754_sqrt+0x13a>
 8008626:	4680      	mov	r8, r0
 8008628:	e7bd      	b.n	80085a6 <__ieee754_sqrt+0xda>
 800862a:	bf00      	nop
 800862c:	7ff00000 	.word	0x7ff00000

08008630 <_init>:
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008632:	bf00      	nop
 8008634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008636:	bc08      	pop	{r3}
 8008638:	469e      	mov	lr, r3
 800863a:	4770      	bx	lr

0800863c <_fini>:
 800863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863e:	bf00      	nop
 8008640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008642:	bc08      	pop	{r3}
 8008644:	469e      	mov	lr, r3
 8008646:	4770      	bx	lr

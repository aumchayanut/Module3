
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a9c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007c34  08007c34  00017c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c54  08007c54  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007c54  08007c54  00017c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c5c  08007c5c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000088  08007ce8  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08007ce8  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f3c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eab  00000000  00000000  00030ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00032ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00033df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d97  00000000  00000000  00034cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117aa  00000000  00000000  0004aa57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb0f  00000000  00000000  0005c201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8d10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  000e8d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007c1c 	.word	0x08007c1c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	08007c1c 	.word	0x08007c1c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f001 fca8 	bl	80029bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f8f2 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f000 fb24 	bl	80016bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001074:	f000 fad0 	bl	8001618 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001078:	f000 f982 	bl	8001380 <MX_TIM1_Init>
  MX_TIM2_Init();
 800107c:	f000 fa2c 	bl	80014d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001080:	f000 fa76 	bl	8001570 <MX_TIM3_Init>
  MX_DMA_Init();
 8001084:	f000 faf2 	bl	800166c <MX_DMA_Init>
  MX_I2C1_Init();
 8001088:	f000 f94c 	bl	8001324 <MX_I2C1_Init>
//	UART2.TxLen = 255;
//	UARTInit(&UART2);
//	UARTResetStart(&UART2);


  PIDinit() ;
 800108c:	f001 f818 	bl	80020c0 <PIDinit>

  // start PWM
  HAL_TIM_Base_Start(&htim1);
 8001090:	4857      	ldr	r0, [pc, #348]	; (80011f0 <main+0x18c>)
 8001092:	f004 fe31 	bl	8005cf8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001096:	2100      	movs	r1, #0
 8001098:	4855      	ldr	r0, [pc, #340]	; (80011f0 <main+0x18c>)
 800109a:	f004 ff43 	bl	8005f24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800109e:	2104      	movs	r1, #4
 80010a0:	4853      	ldr	r0, [pc, #332]	; (80011f0 <main+0x18c>)
 80010a2:	f004 ff3f 	bl	8005f24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80010a6:	2108      	movs	r1, #8
 80010a8:	4851      	ldr	r0, [pc, #324]	; (80011f0 <main+0x18c>)
 80010aa:	f004 ff3b 	bl	8005f24 <HAL_TIM_PWM_Start>

  // start micros
  HAL_TIM_Base_Start_IT(&htim2);
 80010ae:	4851      	ldr	r0, [pc, #324]	; (80011f4 <main+0x190>)
 80010b0:	f004 fe7c 	bl	8005dac <HAL_TIM_Base_Start_IT>

  // start Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80010b4:	213c      	movs	r1, #60	; 0x3c
 80010b6:	4850      	ldr	r0, [pc, #320]	; (80011f8 <main+0x194>)
 80010b8:	f005 f88a 	bl	80061d0 <HAL_TIM_Encoder_Start>
  while (1)
  {

//***********General********************************************************************

	  VelocityRPM = Velocity() ; //rpm unit
 80010bc:	f001 f900 	bl	80022c0 <Velocity>
 80010c0:	eef0 7a40 	vmov.f32	s15, s0
 80010c4:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <main+0x198>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
	  Degree = htim3.Instance->CNT * 360.0 / 2048.0 ; //Degree unit
 80010ca:	4b4b      	ldr	r3, [pc, #300]	; (80011f8 <main+0x194>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f9c3 	bl	800045c <__aeabi_ui2d>
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	4b49      	ldr	r3, [pc, #292]	; (8001200 <main+0x19c>)
 80010dc:	f7ff fa38 	bl	8000550 <__aeabi_dmul>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	4b45      	ldr	r3, [pc, #276]	; (8001204 <main+0x1a0>)
 80010ee:	f7ff fb59 	bl	80007a4 <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fcd9 	bl	8000ab0 <__aeabi_d2f>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a41      	ldr	r2, [pc, #260]	; (8001208 <main+0x1a4>)
 8001102:	6013      	str	r3, [r2, #0]
	  PWMgeneration() ; //Gen PWM
 8001104:	f001 f936 	bl	8002374 <PWMgeneration>
	  ButtonBuffer[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) ; // Read Blue button
 8001108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110c:	483f      	ldr	r0, [pc, #252]	; (800120c <main+0x1a8>)
 800110e:	f002 fae7 	bl	80036e0 <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <main+0x1ac>)
 8001118:	701a      	strb	r2, [r3, #0]
//**************************************************************************************
//**********Blue Button Push*********************
	  if (!ButtonBuffer[0] && ButtonBuffer[1])
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <main+0x1ac>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <main+0xd2>
 8001122:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <main+0x1ac>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <main+0xd2>
	  {
//		  EndEffWrite() ;
//		  z = 1 ;
		  StartSetHome = 1 ; //Set home trigger
 800112a:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <main+0x1b0>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
		  SetHomeFlag = 0;
 8001130:	4b39      	ldr	r3, [pc, #228]	; (8001218 <main+0x1b4>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
//		  SetHomeFlag = 0 ;
	  }
	  ButtonBuffer[1] = ButtonBuffer[0] ;
 8001136:	4b36      	ldr	r3, [pc, #216]	; (8001210 <main+0x1ac>)
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	4b35      	ldr	r3, [pc, #212]	; (8001210 <main+0x1ac>)
 800113c:	705a      	strb	r2, [r3, #1]
//************************************************
//**********Set Home******************************
	  if (StartSetHome == 1)
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <main+0x1b0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d101      	bne.n	800114a <main+0xe6>
	  {
		  SetHome() ;
 8001146:	f000 fb33 	bl	80017b0 <SetHome>
	  }
//***********************************************
//**************PID******************************
	  if (micros() - TimestampPID > 1000)
 800114a:	f001 f991 	bl	8002470 <micros>
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <main+0x1b8>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	1a84      	subs	r4, r0, r2
 8001156:	eb61 0503 	sbc.w	r5, r1, r3
 800115a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	42ab      	cmp	r3, r5
 8001164:	bf08      	it	eq
 8001166:	42a2      	cmpeq	r2, r4
 8001168:	d21c      	bcs.n	80011a4 <main+0x140>
	  {
		  if (StartMoving || StartSetHome)
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <main+0x1bc>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d103      	bne.n	800117a <main+0x116>
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <main+0x1b0>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00d      	beq.n	8001196 <main+0x132>
		  {
			  P = p;
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <main+0x1c0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a2a      	ldr	r2, [pc, #168]	; (8001228 <main+0x1c4>)
 8001180:	6013      	str	r3, [r2, #0]
			  I = i;
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <main+0x1c8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a2a      	ldr	r2, [pc, #168]	; (8001230 <main+0x1cc>)
 8001188:	6013      	str	r3, [r2, #0]
			  D = d;
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <main+0x1d0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a2a      	ldr	r2, [pc, #168]	; (8001238 <main+0x1d4>)
 8001190:	6013      	str	r3, [r2, #0]
			  PID() ;
 8001192:	f000 ffdd 	bl	8002150 <PID>
		  }
		  TimestampPID = micros() ;
 8001196:	f001 f96b 	bl	8002470 <micros>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	491f      	ldr	r1, [pc, #124]	; (800121c <main+0x1b8>)
 80011a0:	e9c1 2300 	strd	r2, r3, [r1]
//************************************************



//********other**************
	  if (request == 0)
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <main+0x1d8>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d102      	bne.n	80011ba <main+0x156>
	  {
		  Direction = 2 ;
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <main+0x1dc>)
 80011b6:	2202      	movs	r2, #2
 80011b8:	701a      	strb	r2, [r3, #0]
//		  StartMoving = 1 ;
//	  }
//
//	  x = request ; //save previous request

	  if (StartMoving == 0)
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <main+0x1bc>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10e      	bne.n	80011e0 <main+0x17c>
	  {
		  T = 0;
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <main+0x1e0>)
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
		  TV = 0;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <main+0x1e4>)
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
		  TA = 0;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <main+0x1e8>)
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
		  ST = 0;
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <main+0x1ec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
	  }
	  if (StartMoving == 1)
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <main+0x1bc>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	f47f af69 	bne.w	80010bc <main+0x58>
	  {
		  FirstTraj();
 80011ea:	f000 fb61 	bl	80018b0 <FirstTraj>
	  VelocityRPM = Velocity() ; //rpm unit
 80011ee:	e765      	b.n	80010bc <main+0x58>
 80011f0:	200002c8 	.word	0x200002c8
 80011f4:	2000031c 	.word	0x2000031c
 80011f8:	200001e4 	.word	0x200001e4
 80011fc:	20000368 	.word	0x20000368
 8001200:	40768000 	.word	0x40768000
 8001204:	40a00000 	.word	0x40a00000
 8001208:	200000f0 	.word	0x200000f0
 800120c:	40020800 	.word	0x40020800
 8001210:	200000f8 	.word	0x200000f8
 8001214:	200000c5 	.word	0x200000c5
 8001218:	200000c4 	.word	0x200000c4
 800121c:	200000a8 	.word	0x200000a8
 8001220:	200000b8 	.word	0x200000b8
 8001224:	20000170 	.word	0x20000170
 8001228:	20000004 	.word	0x20000004
 800122c:	20000298 	.word	0x20000298
 8001230:	20000008 	.word	0x20000008
 8001234:	20000310 	.word	0x20000310
 8001238:	200000b4 	.word	0x200000b4
 800123c:	200000dc 	.word	0x200000dc
 8001240:	200000f4 	.word	0x200000f4
 8001244:	200001e0 	.word	0x200001e0
 8001248:	20000318 	.word	0x20000318
 800124c:	20000230 	.word	0x20000230
 8001250:	200000b9 	.word	0x200000b9

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	; 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2230      	movs	r2, #48	; 0x30
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f006 fbea 	bl	8007a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <SystemClock_Config+0xc8>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	4a26      	ldr	r2, [pc, #152]	; (800131c <SystemClock_Config+0xc8>)
 8001282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001286:	6413      	str	r3, [r2, #64]	; 0x40
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <SystemClock_Config+0xc8>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <SystemClock_Config+0xcc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a20      	ldr	r2, [pc, #128]	; (8001320 <SystemClock_Config+0xcc>)
 800129e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <SystemClock_Config+0xcc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b4:	2301      	movs	r3, #1
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b8:	2310      	movs	r3, #16
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012bc:	2302      	movs	r3, #2
 80012be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c0:	2300      	movs	r3, #0
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c4:	2308      	movs	r3, #8
 80012c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012c8:	2364      	movs	r3, #100	; 0x64
 80012ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d0:	2304      	movs	r3, #4
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 f849 	bl	8005370 <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e4:	f001 f8de 	bl	80024a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ec:	2302      	movs	r3, #2
 80012ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	2103      	movs	r1, #3
 8001304:	4618      	mov	r0, r3
 8001306:	f004 faab 	bl	8005860 <HAL_RCC_ClockConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001310:	f001 f8c8 	bl	80024a4 <Error_Handler>
  }
}
 8001314:	bf00      	nop
 8001316:	3750      	adds	r7, #80	; 0x50
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_I2C1_Init+0x54>)
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <MX_I2C1_Init+0x58>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 1000;
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_I2C1_Init+0x54>)
 8001330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001334:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_I2C1_Init+0x54>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_I2C1_Init+0x54>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <MX_I2C1_Init+0x54>)
 8001344:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001348:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_I2C1_Init+0x54>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_I2C1_Init+0x54>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_I2C1_Init+0x54>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_I2C1_Init+0x54>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_I2C1_Init+0x54>)
 8001364:	f002 f9ee 	bl	8003744 <HAL_I2C_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800136e:	f001 f899 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000178 	.word	0x20000178
 800137c:	40005400 	.word	0x40005400

08001380 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b096      	sub	sp, #88	; 0x58
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001386:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	615a      	str	r2, [r3, #20]
 80013b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2220      	movs	r2, #32
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f006 fb3f 	bl	8007a3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013be:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <MX_TIM1_Init+0x150>)
 80013c0:	4a44      	ldr	r2, [pc, #272]	; (80014d4 <MX_TIM1_Init+0x154>)
 80013c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013c4:	4b42      	ldr	r3, [pc, #264]	; (80014d0 <MX_TIM1_Init+0x150>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <MX_TIM1_Init+0x150>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80013d0:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <MX_TIM1_Init+0x150>)
 80013d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80013d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d8:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <MX_TIM1_Init+0x150>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013de:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <MX_TIM1_Init+0x150>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013e4:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <MX_TIM1_Init+0x150>)
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ea:	4839      	ldr	r0, [pc, #228]	; (80014d0 <MX_TIM1_Init+0x150>)
 80013ec:	f004 fc34 	bl	8005c58 <HAL_TIM_Base_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013f6:	f001 f855 	bl	80024a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001400:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001404:	4619      	mov	r1, r3
 8001406:	4832      	ldr	r0, [pc, #200]	; (80014d0 <MX_TIM1_Init+0x150>)
 8001408:	f005 f832 	bl	8006470 <HAL_TIM_ConfigClockSource>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001412:	f001 f847 	bl	80024a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001416:	482e      	ldr	r0, [pc, #184]	; (80014d0 <MX_TIM1_Init+0x150>)
 8001418:	f004 fd2a 	bl	8005e70 <HAL_TIM_PWM_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001422:	f001 f83f 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800142e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001432:	4619      	mov	r1, r3
 8001434:	4826      	ldr	r0, [pc, #152]	; (80014d0 <MX_TIM1_Init+0x150>)
 8001436:	f005 fbaf 	bl	8006b98 <HAL_TIMEx_MasterConfigSynchronization>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001440:	f001 f830 	bl	80024a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001444:	2360      	movs	r3, #96	; 0x60
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	2200      	movs	r2, #0
 8001466:	4619      	mov	r1, r3
 8001468:	4819      	ldr	r0, [pc, #100]	; (80014d0 <MX_TIM1_Init+0x150>)
 800146a:	f004 ff3f 	bl	80062ec <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001474:	f001 f816 	bl	80024a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	2204      	movs	r2, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4813      	ldr	r0, [pc, #76]	; (80014d0 <MX_TIM1_Init+0x150>)
 8001482:	f004 ff33 	bl	80062ec <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800148c:	f001 f80a 	bl	80024a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <MX_TIM1_Init+0x150>)
 80014b4:	f005 fbde 	bl	8006c74 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80014be:	f000 fff1 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <MX_TIM1_Init+0x150>)
 80014c4:	f001 f8f2 	bl	80026ac <HAL_TIM_MspPostInit>

}
 80014c8:	bf00      	nop
 80014ca:	3758      	adds	r7, #88	; 0x58
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200002c8 	.word	0x200002c8
 80014d4:	40010000 	.word	0x40010000

080014d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	463b      	mov	r3, r7
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_TIM2_Init+0x94>)
 80014f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_TIM2_Init+0x94>)
 80014fe:	2263      	movs	r2, #99	; 0x63
 8001500:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_TIM2_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_TIM2_Init+0x94>)
 800150a:	f04f 32ff 	mov.w	r2, #4294967295
 800150e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_TIM2_Init+0x94>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM2_Init+0x94>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800151c:	4813      	ldr	r0, [pc, #76]	; (800156c <MX_TIM2_Init+0x94>)
 800151e:	f004 fb9b 	bl	8005c58 <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001528:	f000 ffbc 	bl	80024a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	4619      	mov	r1, r3
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <MX_TIM2_Init+0x94>)
 800153a:	f004 ff99 	bl	8006470 <HAL_TIM_ConfigClockSource>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001544:	f000 ffae 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_TIM2_Init+0x94>)
 8001556:	f005 fb1f 	bl	8006b98 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001560:	f000 ffa0 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000031c 	.word	0x2000031c

08001570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2224      	movs	r2, #36	; 0x24
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f006 fa5c 	bl	8007a3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <MX_TIM3_Init+0xa0>)
 800158e:	4a21      	ldr	r2, [pc, #132]	; (8001614 <MX_TIM3_Init+0xa4>)
 8001590:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_TIM3_Init+0xa0>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_TIM3_Init+0xa0>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_TIM3_Init+0xa0>)
 80015a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_TIM3_Init+0xa0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_TIM3_Init+0xa0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015b2:	2303      	movs	r3, #3
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ba:	2301      	movs	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015ca:	2301      	movs	r3, #1
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <MX_TIM3_Init+0xa0>)
 80015de:	f004 fd51 	bl	8006084 <HAL_TIM_Encoder_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015e8:	f000 ff5c 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_TIM3_Init+0xa0>)
 80015fa:	f005 facd 	bl	8006b98 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001604:	f000 ff4e 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3730      	adds	r7, #48	; 0x30
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200001e4 	.word	0x200001e4
 8001614:	40000400 	.word	0x40000400

08001618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001624:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001640:	220c      	movs	r2, #12
 8001642:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001652:	f005 fb61 	bl	8006d18 <HAL_UART_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800165c:	f000 ff22 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000036c 	.word	0x2000036c
 8001668:	40004400 	.word	0x40004400

0800166c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_DMA_Init+0x4c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <MX_DMA_Init+0x4c>)
 800167c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <MX_DMA_Init+0x4c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2010      	movs	r0, #16
 8001694:	f001 fadf 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001698:	2010      	movs	r0, #16
 800169a:	f001 faf8 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2011      	movs	r0, #17
 80016a4:	f001 fad7 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016a8:	2011      	movs	r0, #17
 80016aa:	f001 faf0 	bl	8002c8e <HAL_NVIC_EnableIRQ>

}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <MX_GPIO_Init+0xe8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a32      	ldr	r2, [pc, #200]	; (80017a4 <MX_GPIO_Init+0xe8>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <MX_GPIO_Init+0xe8>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <MX_GPIO_Init+0xe8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a2b      	ldr	r2, [pc, #172]	; (80017a4 <MX_GPIO_Init+0xe8>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <MX_GPIO_Init+0xe8>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <MX_GPIO_Init+0xe8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a24      	ldr	r2, [pc, #144]	; (80017a4 <MX_GPIO_Init+0xe8>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_GPIO_Init+0xe8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_GPIO_Init+0xe8>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <MX_GPIO_Init+0xe8>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_GPIO_Init+0xe8>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2120      	movs	r1, #32
 8001746:	4818      	ldr	r0, [pc, #96]	; (80017a8 <MX_GPIO_Init+0xec>)
 8001748:	f001 ffe2 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001752:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4812      	ldr	r0, [pc, #72]	; (80017ac <MX_GPIO_Init+0xf0>)
 8001764:	f001 fe38 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Home_Pin */
  GPIO_InitStruct.Pin = Home_Pin;
 8001768:	2301      	movs	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Home_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	480c      	ldr	r0, [pc, #48]	; (80017ac <MX_GPIO_Init+0xf0>)
 800177c:	f001 fe2c 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001780:	2320      	movs	r3, #32
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_GPIO_Init+0xec>)
 8001798:	f001 fe1e 	bl	80033d8 <HAL_GPIO_Init>

}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	; 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020800 	.word	0x40020800

080017b0 <SetHome>:
void GoToGoal(float goal)
{

}
void SetHome()
{
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	HomeSignal[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) ; //Read set home
 80017b4:	2101      	movs	r1, #1
 80017b6:	4835      	ldr	r0, [pc, #212]	; (800188c <SetHome+0xdc>)
 80017b8:	f001 ff92 	bl	80036e0 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	4b33      	ldr	r3, [pc, #204]	; (8001890 <SetHome+0xe0>)
 80017c2:	701a      	strb	r2, [r3, #0]
	sum = HomeSignal[0] + HomeSignal[1]+ HomeSignal[2]+ HomeSignal[3]+ HomeSignal[4]+ HomeSignal[5]+ HomeSignal[6]+ HomeSignal[7];
 80017c4:	4b32      	ldr	r3, [pc, #200]	; (8001890 <SetHome+0xe0>)
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	4b31      	ldr	r3, [pc, #196]	; (8001890 <SetHome+0xe0>)
 80017ca:	785b      	ldrb	r3, [r3, #1]
 80017cc:	4413      	add	r3, r2
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <SetHome+0xe0>)
 80017d2:	789b      	ldrb	r3, [r3, #2]
 80017d4:	4413      	add	r3, r2
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <SetHome+0xe0>)
 80017da:	78db      	ldrb	r3, [r3, #3]
 80017dc:	4413      	add	r3, r2
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <SetHome+0xe0>)
 80017e2:	791b      	ldrb	r3, [r3, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b29      	ldr	r3, [pc, #164]	; (8001890 <SetHome+0xe0>)
 80017ea:	795b      	ldrb	r3, [r3, #5]
 80017ec:	4413      	add	r3, r2
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <SetHome+0xe0>)
 80017f2:	799b      	ldrb	r3, [r3, #6]
 80017f4:	4413      	add	r3, r2
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <SetHome+0xe0>)
 80017fa:	79db      	ldrb	r3, [r3, #7]
 80017fc:	4413      	add	r3, r2
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <SetHome+0xe4>)
 8001802:	701a      	strb	r2, [r3, #0]

	if (SetHomeFlag == 0)
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <SetHome+0xe8>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d110      	bne.n	800182e <SetHome+0x7e>
	{
		request = 5;
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <SetHome+0xec>)
 800180e:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <SetHome+0xf0>)
 8001810:	601a      	str	r2, [r3, #0]
		if (sum > 0)
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <SetHome+0xe4>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <SetHome+0x7e>
		{
			SetHomeFlag = 1;
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <SetHome+0xe8>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
			SetHomeTimeStamp = micros();
 8001820:	f000 fe26 	bl	8002470 <micros>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	491e      	ldr	r1, [pc, #120]	; (80018a4 <SetHome+0xf4>)
 800182a:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}
	if (SetHomeFlag == 1)
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <SetHome+0xe8>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d115      	bne.n	8001862 <SetHome+0xb2>
	{
		request = 0;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <SetHome+0xec>)
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
		if (micros()-SetHomeTimeStamp > 1000000)
 800183e:	f000 fe17 	bl	8002470 <micros>
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <SetHome+0xf4>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	1a84      	subs	r4, r0, r2
 800184a:	eb61 0503 	sbc.w	r5, r1, r3
 800184e:	4a16      	ldr	r2, [pc, #88]	; (80018a8 <SetHome+0xf8>)
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	42ab      	cmp	r3, r5
 8001856:	bf08      	it	eq
 8001858:	42a2      	cmpeq	r2, r4
 800185a:	d202      	bcs.n	8001862 <SetHome+0xb2>
		{
			SetHomeFlag = 2;
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <SetHome+0xe8>)
 800185e:	2202      	movs	r2, #2
 8001860:	701a      	strb	r2, [r3, #0]
		}
	}
	if (SetHomeFlag == 2)
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <SetHome+0xe8>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d10e      	bne.n	8001888 <SetHome+0xd8>
	{
		request = -0.5;
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <SetHome+0xec>)
 800186c:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001870:	601a      	str	r2, [r3, #0]
		if (sum > 0)
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <SetHome+0xe4>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <SetHome+0xd8>
		{
			request = 0;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <SetHome+0xec>)
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
			SetHomeFlag = 3;
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <SetHome+0xe8>)
 8001884:	2203      	movs	r2, #3
 8001886:	701a      	strb	r2, [r3, #0]
		}
	}



}
 8001888:	bf00      	nop
 800188a:	bdb0      	pop	{r4, r5, r7, pc}
 800188c:	40020800 	.word	0x40020800
 8001890:	200000bc 	.word	0x200000bc
 8001894:	200001cc 	.word	0x200001cc
 8001898:	200000c4 	.word	0x200000c4
 800189c:	200000dc 	.word	0x200000dc
 80018a0:	40a00000 	.word	0x40a00000
 80018a4:	200000c8 	.word	0x200000c8
 80018a8:	000f4240 	.word	0x000f4240
 80018ac:	00000000 	.word	0x00000000

080018b0 <FirstTraj>:


void FirstTraj()
{
 80018b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018b4:	b088      	sub	sp, #32
 80018b6:	af00      	add	r7, sp, #0
	float Vmax = 10 ; //rpm
 80018b8:	4bbb      	ldr	r3, [pc, #748]	; (8001ba8 <FirstTraj+0x2f8>)
 80018ba:	61fb      	str	r3, [r7, #28]
	Vmax = Vmax * 0.10472 ; //rad per sec
 80018bc:	69f8      	ldr	r0, [r7, #28]
 80018be:	f7fe fdef 	bl	80004a0 <__aeabi_f2d>
 80018c2:	a3ad      	add	r3, pc, #692	; (adr r3, 8001b78 <FirstTraj+0x2c8>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe fe42 	bl	8000550 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f8ec 	bl	8000ab0 <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	61fb      	str	r3, [r7, #28]
	float Amax = 0.5 ;  //rad per sec square
 80018dc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80018e0:	61bb      	str	r3, [r7, #24]
	if (ST == 0)
 80018e2:	4bb2      	ldr	r3, [pc, #712]	; (8001bac <FirstTraj+0x2fc>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d129      	bne.n	800193e <FirstTraj+0x8e>
	{
		StartTime = micros() ;
 80018ea:	f000 fdc1 	bl	8002470 <micros>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f9f3 	bl	8000ce0 <__aeabi_ul2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4aac      	ldr	r2, [pc, #688]	; (8001bb0 <FirstTraj+0x300>)
 80018fe:	6013      	str	r3, [r2, #0]
		ST = 1 ;
 8001900:	4baa      	ldr	r3, [pc, #680]	; (8001bac <FirstTraj+0x2fc>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
		StartPos = Degree * 3.14159 / 180.0 ; //rad
 8001906:	4bab      	ldr	r3, [pc, #684]	; (8001bb4 <FirstTraj+0x304>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fdc8 	bl	80004a0 <__aeabi_f2d>
 8001910:	a39b      	add	r3, pc, #620	; (adr r3, 8001b80 <FirstTraj+0x2d0>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fe1b 	bl	8000550 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	4ba4      	ldr	r3, [pc, #656]	; (8001bb8 <FirstTraj+0x308>)
 8001928:	f7fe ff3c 	bl	80007a4 <__aeabi_ddiv>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f8bc 	bl	8000ab0 <__aeabi_d2f>
 8001938:	4603      	mov	r3, r0
 800193a:	4aa0      	ldr	r2, [pc, #640]	; (8001bbc <FirstTraj+0x30c>)
 800193c:	6013      	str	r3, [r2, #0]
	}
	tau = (micros() - StartTime) / 1000000 ; //sec
 800193e:	f000 fd97 	bl	8002470 <micros>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f9c9 	bl	8000ce0 <__aeabi_ul2f>
 800194e:	ee07 0a10 	vmov	s14, r0
 8001952:	4b97      	ldr	r3, [pc, #604]	; (8001bb0 <FirstTraj+0x300>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ee37 7a67 	vsub.f32	s14, s14, s15
 800195c:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001bc0 <FirstTraj+0x310>
 8001960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001964:	4b97      	ldr	r3, [pc, #604]	; (8001bc4 <FirstTraj+0x314>)
 8001966:	edc3 7a00 	vstr	s15, [r3]

	Qi = StartPos ;
 800196a:	4b94      	ldr	r3, [pc, #592]	; (8001bbc <FirstTraj+0x30c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a96      	ldr	r2, [pc, #600]	; (8001bc8 <FirstTraj+0x318>)
 8001970:	6013      	str	r3, [r2, #0]
	Qf = FinalPos * 3.14159 / 180.0 ;
 8001972:	4b96      	ldr	r3, [pc, #600]	; (8001bcc <FirstTraj+0x31c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd92 	bl	80004a0 <__aeabi_f2d>
 800197c:	a380      	add	r3, pc, #512	; (adr r3, 8001b80 <FirstTraj+0x2d0>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe fde5 	bl	8000550 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b89      	ldr	r3, [pc, #548]	; (8001bb8 <FirstTraj+0x308>)
 8001994:	f7fe ff06 	bl	80007a4 <__aeabi_ddiv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff f886 	bl	8000ab0 <__aeabi_d2f>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a8a      	ldr	r2, [pc, #552]	; (8001bd0 <FirstTraj+0x320>)
 80019a8:	6013      	str	r3, [r2, #0]

	if (Qf - Qi > 3.14159265)
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <FirstTraj+0x320>)
 80019ac:	ed93 7a00 	vldr	s14, [r3]
 80019b0:	4b85      	ldr	r3, [pc, #532]	; (8001bc8 <FirstTraj+0x318>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ba:	ee17 0a90 	vmov	r0, s15
 80019be:	f7fe fd6f 	bl	80004a0 <__aeabi_f2d>
 80019c2:	a371      	add	r3, pc, #452	; (adr r3, 8001b88 <FirstTraj+0x2d8>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7ff f852 	bl	8000a70 <__aeabi_dcmpgt>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d012      	beq.n	80019f8 <FirstTraj+0x148>
	{
		Qi += 2*3.14159265;
 80019d2:	4b7d      	ldr	r3, [pc, #500]	; (8001bc8 <FirstTraj+0x318>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd62 	bl	80004a0 <__aeabi_f2d>
 80019dc:	a36c      	add	r3, pc, #432	; (adr r3, 8001b90 <FirstTraj+0x2e0>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe fbff 	bl	80001e4 <__adddf3>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f85f 	bl	8000ab0 <__aeabi_d2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4a74      	ldr	r2, [pc, #464]	; (8001bc8 <FirstTraj+0x318>)
 80019f6:	6013      	str	r3, [r2, #0]
	}
	if (Qf - Qi < -3.14159265)
 80019f8:	4b75      	ldr	r3, [pc, #468]	; (8001bd0 <FirstTraj+0x320>)
 80019fa:	ed93 7a00 	vldr	s14, [r3]
 80019fe:	4b72      	ldr	r3, [pc, #456]	; (8001bc8 <FirstTraj+0x318>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a08:	ee17 0a90 	vmov	r0, s15
 8001a0c:	f7fe fd48 	bl	80004a0 <__aeabi_f2d>
 8001a10:	a361      	add	r3, pc, #388	; (adr r3, 8001b98 <FirstTraj+0x2e8>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7ff f80d 	bl	8000a34 <__aeabi_dcmplt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d012      	beq.n	8001a46 <FirstTraj+0x196>
	{
		Qf += 2*3.14159265;
 8001a20:	4b6b      	ldr	r3, [pc, #428]	; (8001bd0 <FirstTraj+0x320>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fd3b 	bl	80004a0 <__aeabi_f2d>
 8001a2a:	a359      	add	r3, pc, #356	; (adr r3, 8001b90 <FirstTraj+0x2e0>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	f7fe fbd8 	bl	80001e4 <__adddf3>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f838 	bl	8000ab0 <__aeabi_d2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4a63      	ldr	r2, [pc, #396]	; (8001bd0 <FirstTraj+0x320>)
 8001a44:	6013      	str	r3, [r2, #0]
	}
	TA1= (40.0 * sqrt(3.0))*(Qf - Qi);
 8001a46:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <FirstTraj+0x320>)
 8001a48:	ed93 7a00 	vldr	s14, [r3]
 8001a4c:	4b5e      	ldr	r3, [pc, #376]	; (8001bc8 <FirstTraj+0x318>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a56:	ee17 0a90 	vmov	r0, s15
 8001a5a:	f7fe fd21 	bl	80004a0 <__aeabi_f2d>
 8001a5e:	a350      	add	r3, pc, #320	; (adr r3, 8001ba0 <FirstTraj+0x2f0>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7fe fd74 	bl	8000550 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7ff f81e 	bl	8000ab0 <__aeabi_d2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <FirstTraj+0x324>)
 8001a78:	6013      	str	r3, [r2, #0]
	TA2 = TA1/(3.0*Amax) ;
 8001a7a:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <FirstTraj+0x324>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd0e 	bl	80004a0 <__aeabi_f2d>
 8001a84:	4680      	mov	r8, r0
 8001a86:	4689      	mov	r9, r1
 8001a88:	69b8      	ldr	r0, [r7, #24]
 8001a8a:	f7fe fd09 	bl	80004a0 <__aeabi_f2d>
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b51      	ldr	r3, [pc, #324]	; (8001bd8 <FirstTraj+0x328>)
 8001a94:	f7fe fd5c 	bl	8000550 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4640      	mov	r0, r8
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	f7fe fe80 	bl	80007a4 <__aeabi_ddiv>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f800 	bl	8000ab0 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a4a      	ldr	r2, [pc, #296]	; (8001bdc <FirstTraj+0x32c>)
 8001ab4:	6013      	str	r3, [r2, #0]
	if (TA2 >= 0)
 8001ab6:	4b49      	ldr	r3, [pc, #292]	; (8001bdc <FirstTraj+0x32c>)
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	db04      	blt.n	8001ad0 <FirstTraj+0x220>
	{
		TA3 = TA2;
 8001ac6:	4b45      	ldr	r3, [pc, #276]	; (8001bdc <FirstTraj+0x32c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a45      	ldr	r2, [pc, #276]	; (8001be0 <FirstTraj+0x330>)
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e00c      	b.n	8001aea <FirstTraj+0x23a>
	}
	else
	{
		TA3 = TA2 - (2*TA2);
 8001ad0:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <FirstTraj+0x32c>)
 8001ad2:	ed93 7a00 	vldr	s14, [r3]
 8001ad6:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <FirstTraj+0x32c>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae4:	4b3e      	ldr	r3, [pc, #248]	; (8001be0 <FirstTraj+0x330>)
 8001ae6:	edc3 7a00 	vstr	s15, [r3]
	}
	TA = sqrt(TA3) / 2.0 ;
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <FirstTraj+0x330>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fcd6 	bl	80004a0 <__aeabi_f2d>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	ec43 2b10 	vmov	d0, r2, r3
 8001afc:	f005 ffa6 	bl	8007a4c <sqrt>
 8001b00:	ec51 0b10 	vmov	r0, r1, d0
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b0c:	f7fe fe4a 	bl	80007a4 <__aeabi_ddiv>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7fe ffca 	bl	8000ab0 <__aeabi_d2f>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a31      	ldr	r2, [pc, #196]	; (8001be4 <FirstTraj+0x334>)
 8001b20:	6013      	str	r3, [r2, #0]

	TV1 = (15*Qf - 15*Qi)/(8*Vmax);
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <FirstTraj+0x320>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001b2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <FirstTraj+0x318>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8001b3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b3e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b42:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b46:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001b4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <FirstTraj+0x338>)
 8001b54:	edc3 7a00 	vstr	s15, [r3]
	if (TV1 >= 0)
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <FirstTraj+0x338>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	db43      	blt.n	8001bf0 <FirstTraj+0x340>
	{
		TV = TV1;
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <FirstTraj+0x338>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <FirstTraj+0x33c>)
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e04b      	b.n	8001c0a <FirstTraj+0x35a>
 8001b72:	bf00      	nop
 8001b74:	f3af 8000 	nop.w
 8001b78:	0f3cb3e5 	.word	0x0f3cb3e5
 8001b7c:	3fbaceee 	.word	0x3fbaceee
 8001b80:	f01b866e 	.word	0xf01b866e
 8001b84:	400921f9 	.word	0x400921f9
 8001b88:	53c8d4f1 	.word	0x53c8d4f1
 8001b8c:	400921fb 	.word	0x400921fb
 8001b90:	53c8d4f1 	.word	0x53c8d4f1
 8001b94:	401921fb 	.word	0x401921fb
 8001b98:	53c8d4f1 	.word	0x53c8d4f1
 8001b9c:	c00921fb 	.word	0xc00921fb
 8001ba0:	d1372fea 	.word	0xd1372fea
 8001ba4:	4051520c 	.word	0x4051520c
 8001ba8:	41200000 	.word	0x41200000
 8001bac:	200000b9 	.word	0x200000b9
 8001bb0:	20000174 	.word	0x20000174
 8001bb4:	200000f0 	.word	0x200000f0
 8001bb8:	40668000 	.word	0x40668000
 8001bbc:	200001d4 	.word	0x200001d4
 8001bc0:	49742400 	.word	0x49742400
 8001bc4:	200002bc 	.word	0x200002bc
 8001bc8:	200002b8 	.word	0x200002b8
 8001bcc:	2000000c 	.word	0x2000000c
 8001bd0:	200002c4 	.word	0x200002c4
 8001bd4:	200001dc 	.word	0x200001dc
 8001bd8:	40080000 	.word	0x40080000
 8001bdc:	20000364 	.word	0x20000364
 8001be0:	200003b0 	.word	0x200003b0
 8001be4:	20000230 	.word	0x20000230
 8001be8:	200002c0 	.word	0x200002c0
 8001bec:	20000318 	.word	0x20000318
	}
	else
	{
		TV = TV1 - (2*TV1);
 8001bf0:	4bd7      	ldr	r3, [pc, #860]	; (8001f50 <FirstTraj+0x6a0>)
 8001bf2:	ed93 7a00 	vldr	s14, [r3]
 8001bf6:	4bd6      	ldr	r3, [pc, #856]	; (8001f50 <FirstTraj+0x6a0>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c04:	4bd3      	ldr	r3, [pc, #844]	; (8001f54 <FirstTraj+0x6a4>)
 8001c06:	edc3 7a00 	vstr	s15, [r3]
	}

	if (TV > TA)
 8001c0a:	4bd2      	ldr	r3, [pc, #840]	; (8001f54 <FirstTraj+0x6a4>)
 8001c0c:	ed93 7a00 	vldr	s14, [r3]
 8001c10:	4bd1      	ldr	r3, [pc, #836]	; (8001f58 <FirstTraj+0x6a8>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	dd03      	ble.n	8001c28 <FirstTraj+0x378>
	{
		T = TV ;
 8001c20:	4bcc      	ldr	r3, [pc, #816]	; (8001f54 <FirstTraj+0x6a4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4acd      	ldr	r2, [pc, #820]	; (8001f5c <FirstTraj+0x6ac>)
 8001c26:	6013      	str	r3, [r2, #0]
	}
	if (TV <= TA)
 8001c28:	4bca      	ldr	r3, [pc, #808]	; (8001f54 <FirstTraj+0x6a4>)
 8001c2a:	ed93 7a00 	vldr	s14, [r3]
 8001c2e:	4bca      	ldr	r3, [pc, #808]	; (8001f58 <FirstTraj+0x6a8>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	d803      	bhi.n	8001c46 <FirstTraj+0x396>
	{
		T = TA ;
 8001c3e:	4bc6      	ldr	r3, [pc, #792]	; (8001f58 <FirstTraj+0x6a8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4ac6      	ldr	r2, [pc, #792]	; (8001f5c <FirstTraj+0x6ac>)
 8001c44:	6013      	str	r3, [r2, #0]
	}
	float a0 = Qi ;
 8001c46:	4bc6      	ldr	r3, [pc, #792]	; (8001f60 <FirstTraj+0x6b0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	617b      	str	r3, [r7, #20]
	float a1 = 0 ;
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
	float a2 = 0 ;
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
	float a3 = (1 / (2 * (T*T*T))) * (20 * (Qf-Qi)) ;
 8001c58:	4bc0      	ldr	r3, [pc, #768]	; (8001f5c <FirstTraj+0x6ac>)
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	4bbf      	ldr	r3, [pc, #764]	; (8001f5c <FirstTraj+0x6ac>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	4bbc      	ldr	r3, [pc, #752]	; (8001f5c <FirstTraj+0x6ac>)
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c7e:	4bb9      	ldr	r3, [pc, #740]	; (8001f64 <FirstTraj+0x6b4>)
 8001c80:	edd3 6a00 	vldr	s13, [r3]
 8001c84:	4bb6      	ldr	r3, [pc, #728]	; (8001f60 <FirstTraj+0x6b0>)
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c8e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001c92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	edc7 7a02 	vstr	s15, [r7, #8]
	float a4 = (1 / (2 * (T*T*T*T))) * (30 * (Qi-Qf)) ;
 8001c9e:	4baf      	ldr	r3, [pc, #700]	; (8001f5c <FirstTraj+0x6ac>)
 8001ca0:	ed93 7a00 	vldr	s14, [r3]
 8001ca4:	4bad      	ldr	r3, [pc, #692]	; (8001f5c <FirstTraj+0x6ac>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cae:	4bab      	ldr	r3, [pc, #684]	; (8001f5c <FirstTraj+0x6ac>)
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb8:	4ba8      	ldr	r3, [pc, #672]	; (8001f5c <FirstTraj+0x6ac>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cce:	4ba4      	ldr	r3, [pc, #656]	; (8001f60 <FirstTraj+0x6b0>)
 8001cd0:	edd3 6a00 	vldr	s13, [r3]
 8001cd4:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <FirstTraj+0x6b4>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cde:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001ce2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	edc7 7a01 	vstr	s15, [r7, #4]
	float a5 = (1 / (2 * (T*T*T*T*T))) * (12 * (Qf-Qi)) ;
 8001cee:	4b9b      	ldr	r3, [pc, #620]	; (8001f5c <FirstTraj+0x6ac>)
 8001cf0:	ed93 7a00 	vldr	s14, [r3]
 8001cf4:	4b99      	ldr	r3, [pc, #612]	; (8001f5c <FirstTraj+0x6ac>)
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfe:	4b97      	ldr	r3, [pc, #604]	; (8001f5c <FirstTraj+0x6ac>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d08:	4b94      	ldr	r3, [pc, #592]	; (8001f5c <FirstTraj+0x6ac>)
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d12:	4b92      	ldr	r3, [pc, #584]	; (8001f5c <FirstTraj+0x6ac>)
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d28:	4b8e      	ldr	r3, [pc, #568]	; (8001f64 <FirstTraj+0x6b4>)
 8001d2a:	edd3 6a00 	vldr	s13, [r3]
 8001d2e:	4b8c      	ldr	r3, [pc, #560]	; (8001f60 <FirstTraj+0x6b0>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d38:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8001d3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d44:	edc7 7a00 	vstr	s15, [r7]

	if (micros() - StartTime < T*1000000)
 8001d48:	f000 fb92 	bl	8002470 <micros>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7fe ffc4 	bl	8000ce0 <__aeabi_ul2f>
 8001d58:	ee07 0a10 	vmov	s14, r0
 8001d5c:	4b82      	ldr	r3, [pc, #520]	; (8001f68 <FirstTraj+0x6b8>)
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d66:	4b7d      	ldr	r3, [pc, #500]	; (8001f5c <FirstTraj+0x6ac>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8001f6c <FirstTraj+0x6bc>
 8001d70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	f140 8158 	bpl.w	8002030 <FirstTraj+0x780>
	{
		if (micros() - Trajtimestamp > 1500)
 8001d80:	f000 fb76 	bl	8002470 <micros>
 8001d84:	4b7a      	ldr	r3, [pc, #488]	; (8001f70 <FirstTraj+0x6c0>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	1a84      	subs	r4, r0, r2
 8001d8c:	eb61 0503 	sbc.w	r5, r1, r3
 8001d90:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	42ab      	cmp	r3, r5
 8001d9a:	bf08      	it	eq
 8001d9c:	42a2      	cmpeq	r2, r4
 8001d9e:	f080 8147 	bcs.w	8002030 <FirstTraj+0x780>
		{
			position = a0 + a1*tau + a2*tau*tau + a3*tau*tau*tau + a4*tau*tau*tau*tau + a5*tau*tau*tau*tau*tau; //rad
 8001da2:	4b74      	ldr	r3, [pc, #464]	; (8001f74 <FirstTraj+0x6c4>)
 8001da4:	ed93 7a00 	vldr	s14, [r3]
 8001da8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001db4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db8:	4b6e      	ldr	r3, [pc, #440]	; (8001f74 <FirstTraj+0x6c4>)
 8001dba:	edd3 6a00 	vldr	s13, [r3]
 8001dbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dc6:	4b6b      	ldr	r3, [pc, #428]	; (8001f74 <FirstTraj+0x6c4>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dd4:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <FirstTraj+0x6c4>)
 8001dd6:	edd3 6a00 	vldr	s13, [r3]
 8001dda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001de2:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <FirstTraj+0x6c4>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dec:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <FirstTraj+0x6c4>)
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfa:	4b5e      	ldr	r3, [pc, #376]	; (8001f74 <FirstTraj+0x6c4>)
 8001dfc:	edd3 6a00 	vldr	s13, [r3]
 8001e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e08:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <FirstTraj+0x6c4>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e12:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <FirstTraj+0x6c4>)
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e1c:	4b55      	ldr	r3, [pc, #340]	; (8001f74 <FirstTraj+0x6c4>)
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2a:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <FirstTraj+0x6c4>)
 8001e2c:	edd3 6a00 	vldr	s13, [r3]
 8001e30:	edd7 7a00 	vldr	s15, [r7]
 8001e34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e38:	4b4e      	ldr	r3, [pc, #312]	; (8001f74 <FirstTraj+0x6c4>)
 8001e3a:	edd3 7a00 	vldr	s15, [r3]
 8001e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e42:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <FirstTraj+0x6c4>)
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e4c:	4b49      	ldr	r3, [pc, #292]	; (8001f74 <FirstTraj+0x6c4>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <FirstTraj+0x6c4>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e64:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <FirstTraj+0x6c8>)
 8001e66:	edc3 7a00 	vstr	s15, [r3]
			velocity = a1 + 2*a2*tau + 3*a3*tau*tau + 4*a4*tau*tau*tau + 5*a5*tau*tau*tau*tau; //rad/s
 8001e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e6e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e72:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <FirstTraj+0x6c4>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e88:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001e8c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e90:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <FirstTraj+0x6c4>)
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <FirstTraj+0x6c4>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eac:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001eb0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <FirstTraj+0x6c4>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <FirstTraj+0x6c4>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <FirstTraj+0x6c4>)
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed6:	edd7 7a00 	vldr	s15, [r7]
 8001eda:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001ede:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <FirstTraj+0x6c4>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <FirstTraj+0x6c4>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <FirstTraj+0x6c4>)
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <FirstTraj+0x6c4>)
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <FirstTraj+0x6cc>)
 8001f10:	edc3 7a00 	vstr	s15, [r3]
			acceleration = 2*a2 + 6*a3*tau + 12*a4*tau*tau + 20*a5*tau*tau*tau; //rad per secsquare
 8001f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f18:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f20:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f24:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <FirstTraj+0x6c4>)
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f3a:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8001f3e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <FirstTraj+0x6c4>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f4c:	e018      	b.n	8001f80 <FirstTraj+0x6d0>
 8001f4e:	bf00      	nop
 8001f50:	200002c0 	.word	0x200002c0
 8001f54:	20000318 	.word	0x20000318
 8001f58:	20000230 	.word	0x20000230
 8001f5c:	200001e0 	.word	0x200001e0
 8001f60:	200002b8 	.word	0x200002b8
 8001f64:	200002c4 	.word	0x200002c4
 8001f68:	20000174 	.word	0x20000174
 8001f6c:	49742400 	.word	0x49742400
 8001f70:	200002a0 	.word	0x200002a0
 8001f74:	200002bc 	.word	0x200002bc
 8001f78:	200001d0 	.word	0x200001d0
 8001f7c:	200002b0 	.word	0x200002b0
 8001f80:	4b43      	ldr	r3, [pc, #268]	; (8002090 <FirstTraj+0x7e0>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f8e:	edd7 7a00 	vldr	s15, [r7]
 8001f92:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001f96:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <FirstTraj+0x7e0>)
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fa4:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <FirstTraj+0x7e0>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fae:	4b38      	ldr	r3, [pc, #224]	; (8002090 <FirstTraj+0x7e0>)
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbc:	4b35      	ldr	r3, [pc, #212]	; (8002094 <FirstTraj+0x7e4>)
 8001fbe:	edc3 7a00 	vstr	s15, [r3]

			position = position * 180 / 3.1415 ; //degree
 8001fc2:	4b35      	ldr	r3, [pc, #212]	; (8002098 <FirstTraj+0x7e8>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800209c <FirstTraj+0x7ec>
 8001fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd0:	ee17 0a90 	vmov	r0, s15
 8001fd4:	f7fe fa64 	bl	80004a0 <__aeabi_f2d>
 8001fd8:	a329      	add	r3, pc, #164	; (adr r3, 8002080 <FirstTraj+0x7d0>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe fbe1 	bl	80007a4 <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7fe fd61 	bl	8000ab0 <__aeabi_d2f>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a29      	ldr	r2, [pc, #164]	; (8002098 <FirstTraj+0x7e8>)
 8001ff2:	6013      	str	r3, [r2, #0]
			velocity = velocity * 9.549297; //rpm
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <FirstTraj+0x7f0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fa51 	bl	80004a0 <__aeabi_f2d>
 8001ffe:	a322      	add	r3, pc, #136	; (adr r3, 8002088 <FirstTraj+0x7d8>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe faa4 	bl	8000550 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fd4e 	bl	8000ab0 <__aeabi_d2f>
 8002014:	4603      	mov	r3, r0
 8002016:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <FirstTraj+0x7f0>)
 8002018:	6013      	str	r3, [r2, #0]
			Trajtimestamp = micros() ;
 800201a:	f000 fa29 	bl	8002470 <micros>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4920      	ldr	r1, [pc, #128]	; (80020a4 <FirstTraj+0x7f4>)
 8002024:	e9c1 2300 	strd	r2, r3, [r1]
			request = velocity ;
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <FirstTraj+0x7f0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <FirstTraj+0x7f8>)
 800202e:	6013      	str	r3, [r2, #0]
		}
	}
	if (micros() - StartTime > (T*1000000)+500000)
 8002030:	f000 fa1e 	bl	8002470 <micros>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fe50 	bl	8000ce0 <__aeabi_ul2f>
 8002040:	ee07 0a10 	vmov	s14, r0
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <FirstTraj+0x7fc>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <FirstTraj+0x800>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	eddf 6a17 	vldr	s13, [pc, #92]	; 80020b4 <FirstTraj+0x804>
 8002058:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800205c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80020b8 <FirstTraj+0x808>
 8002060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	dc00      	bgt.n	8002070 <FirstTraj+0x7c0>
	{
		StartMoving = 0;
	}

}
 800206e:	e002      	b.n	8002076 <FirstTraj+0x7c6>
		StartMoving = 0;
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <FirstTraj+0x80c>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
}
 8002076:	bf00      	nop
 8002078:	3720      	adds	r7, #32
 800207a:	46bd      	mov	sp, r7
 800207c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002080:	c083126f 	.word	0xc083126f
 8002084:	400921ca 	.word	0x400921ca
 8002088:	74d594f2 	.word	0x74d594f2
 800208c:	4023193d 	.word	0x4023193d
 8002090:	200002bc 	.word	0x200002bc
 8002094:	200003b4 	.word	0x200003b4
 8002098:	200001d0 	.word	0x200001d0
 800209c:	43340000 	.word	0x43340000
 80020a0:	200002b0 	.word	0x200002b0
 80020a4:	200002a0 	.word	0x200002a0
 80020a8:	200000dc 	.word	0x200000dc
 80020ac:	20000174 	.word	0x20000174
 80020b0:	200001e0 	.word	0x200001e0
 80020b4:	49742400 	.word	0x49742400
 80020b8:	48f42400 	.word	0x48f42400
 80020bc:	200000b8 	.word	0x200000b8

080020c0 <PIDinit>:

void PIDinit()
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
	preErr1 = 0 ;
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <PIDinit+0x64>)
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
	preErr2 = 0 ;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <PIDinit+0x68>)
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
	PreviousPWM = 0 ;
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <PIDinit+0x6c>)
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
	PWMPercent = 0 ;
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <PIDinit+0x70>)
 80020de:	2200      	movs	r2, #0
 80020e0:	801a      	strh	r2, [r3, #0]
	Propotional = 0 ;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <PIDinit+0x74>)
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
	Integrator = 0 ;
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <PIDinit+0x78>)
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
	Differentiator = 0 ;
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <PIDinit+0x7c>)
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
	P = 0 ;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <PIDinit+0x80>)
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
	I = 0 ;
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <PIDinit+0x84>)
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
	D = 0 ;
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <PIDinit+0x88>)
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
	Tau = 0 ;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <PIDinit+0x8c>)
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	200002ac 	.word	0x200002ac
 8002128:	200001d8 	.word	0x200001d8
 800212c:	200000b0 	.word	0x200000b0
 8002130:	200000e0 	.word	0x200000e0
 8002134:	200003b8 	.word	0x200003b8
 8002138:	2000022c 	.word	0x2000022c
 800213c:	200002b4 	.word	0x200002b4
 8002140:	20000004 	.word	0x20000004
 8002144:	20000008 	.word	0x20000008
 8002148:	200000b4 	.word	0x200000b4
 800214c:	20000314 	.word	0x20000314

08002150 <PID>:

void PID()
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
	float req,Vel ;
	if (request < 0)
 8002156:	4b4e      	ldr	r3, [pc, #312]	; (8002290 <PID+0x140>)
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002164:	d510      	bpl.n	8002188 <PID+0x38>
	{
		req = - request ;
 8002166:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <PID+0x140>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	eef1 7a67 	vneg.f32	s15, s15
 8002170:	edc7 7a03 	vstr	s15, [r7, #12]
		Vel = - VelocityRPM ;
 8002174:	4b47      	ldr	r3, [pc, #284]	; (8002294 <PID+0x144>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	eef1 7a67 	vneg.f32	s15, s15
 800217e:	edc7 7a02 	vstr	s15, [r7, #8]
		Direction = 1 ;
 8002182:	4b45      	ldr	r3, [pc, #276]	; (8002298 <PID+0x148>)
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
	}
	if (request > 0)
 8002188:	4b41      	ldr	r3, [pc, #260]	; (8002290 <PID+0x140>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	dd08      	ble.n	80021aa <PID+0x5a>
	{
		req = request ;
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <PID+0x140>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
		Vel = VelocityRPM ;
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <PID+0x144>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60bb      	str	r3, [r7, #8]
		Direction = 0 ;
 80021a4:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <PID+0x148>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
	}
	float error = req - Vel;
 80021aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80021ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80021b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b6:	edc7 7a01 	vstr	s15, [r7, #4]
	DeltaU = ((P+I+D)*error) - ((P+(2*D))*preErr1) + (D*preErr2) ;
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <PID+0x14c>)
 80021bc:	ed93 7a00 	vldr	s14, [r3]
 80021c0:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <PID+0x150>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ca:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <PID+0x154>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80021d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021dc:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <PID+0x154>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <PID+0x14c>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80021f0:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <PID+0x158>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <PID+0x154>)
 8002200:	edd3 6a00 	vldr	s13, [r3]
 8002204:	4b29      	ldr	r3, [pc, #164]	; (80022ac <PID+0x15c>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002212:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <PID+0x160>)
 8002214:	edc3 7a00 	vstr	s15, [r3]
	PWMPercent = PreviousPWM + DeltaU + InitialPWM ;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <PID+0x164>)
 800221a:	ed93 7a00 	vldr	s14, [r3]
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <PID+0x160>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002228:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <PID+0x168>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800223c:	ee17 3a90 	vmov	r3, s15
 8002240:	b29a      	uxth	r2, r3
 8002242:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <PID+0x16c>)
 8002244:	801a      	strh	r2, [r3, #0]
	if (PWMPercent > 10000)
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <PID+0x16c>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	f242 7210 	movw	r2, #10000	; 0x2710
 800224e:	4293      	cmp	r3, r2
 8002250:	d903      	bls.n	800225a <PID+0x10a>
	{
		PWMPercent = 10000;
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <PID+0x16c>)
 8002254:	f242 7210 	movw	r2, #10000	; 0x2710
 8002258:	801a      	strh	r2, [r3, #0]
	}
	if (PWMPercent < 0)
	{
		PWMPercent = 0 ;
	}
	PreviousPWM = PWMPercent - InitialPWM ;
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <PID+0x16c>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <PID+0x168>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	ee07 3a90 	vmov	s15, r3
 800226a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <PID+0x164>)
 8002270:	edc3 7a00 	vstr	s15, [r3]
	preErr2 = preErr1 ;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <PID+0x158>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0c      	ldr	r2, [pc, #48]	; (80022ac <PID+0x15c>)
 800227a:	6013      	str	r3, [r2, #0]
	preErr1 = error ;
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <PID+0x158>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6013      	str	r3, [r2, #0]

}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	200000dc 	.word	0x200000dc
 8002294:	20000368 	.word	0x20000368
 8002298:	200000f4 	.word	0x200000f4
 800229c:	20000004 	.word	0x20000004
 80022a0:	20000008 	.word	0x20000008
 80022a4:	200000b4 	.word	0x200000b4
 80022a8:	200002ac 	.word	0x200002ac
 80022ac:	200001d8 	.word	0x200001d8
 80022b0:	20000234 	.word	0x20000234
 80022b4:	200000b0 	.word	0x200000b0
 80022b8:	20000000 	.word	0x20000000
 80022bc:	200000e0 	.word	0x200000e0

080022c0 <Velocity>:
//	preVel = Vel ;
//}


float Velocity()
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	ed2d 8b02 	vpush	{d8}
 80022c6:	af00      	add	r7, sp, #0
	  if (micros() - TimestampEncoder >= 100)
 80022c8:	f000 f8d2 	bl	8002470 <micros>
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <Velocity+0x9c>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	1a84      	subs	r4, r0, r2
 80022d4:	eb61 0503 	sbc.w	r5, r1, r3
 80022d8:	2d00      	cmp	r5, #0
 80022da:	bf08      	it	eq
 80022dc:	2c64      	cmpeq	r4, #100	; 0x64
 80022de:	d31a      	bcc.n	8002316 <Velocity+0x56>
	  {
		  TimestampEncoder = micros();
 80022e0:	f000 f8c6 	bl	8002470 <micros>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	491c      	ldr	r1, [pc, #112]	; (800235c <Velocity+0x9c>)
 80022ea:	e9c1 2300 	strd	r2, r3, [r1]
		  EncoderVel = (EncoderVel * 999 + EncoderVelocity_Update()) / 1000.0;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <Velocity+0xa0>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002364 <Velocity+0xa4>
 80022f8:	ee27 8a87 	vmul.f32	s16, s15, s14
 80022fc:	f000 f864 	bl	80023c8 <EncoderVelocity_Update>
 8002300:	eef0 7a40 	vmov.f32	s15, s0
 8002304:	ee38 7a27 	vadd.f32	s14, s16, s15
 8002308:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002368 <Velocity+0xa8>
 800230c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <Velocity+0xa0>)
 8002312:	edc3 7a00 	vstr	s15, [r3]
	  }
	  return EncoderVel * 60.0 / 2048.0; //pulse per sec to rpm
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <Velocity+0xa0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f8c0 	bl	80004a0 <__aeabi_f2d>
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <Velocity+0xac>)
 8002326:	f7fe f913 	bl	8000550 <__aeabi_dmul>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <Velocity+0xb0>)
 8002338:	f7fe fa34 	bl	80007a4 <__aeabi_ddiv>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fbb4 	bl	8000ab0 <__aeabi_d2f>
 8002348:	4603      	mov	r3, r0
 800234a:	ee07 3a90 	vmov	s15, r3
}
 800234e:	eeb0 0a67 	vmov.f32	s0, s15
 8002352:	46bd      	mov	sp, r7
 8002354:	ecbd 8b02 	vpop	{d8}
 8002358:	bdb0      	pop	{r4, r5, r7, pc}
 800235a:	bf00      	nop
 800235c:	200000d0 	.word	0x200000d0
 8002360:	200000d8 	.word	0x200000d8
 8002364:	4479c000 	.word	0x4479c000
 8002368:	447a0000 	.word	0x447a0000
 800236c:	404e0000 	.word	0x404e0000
 8002370:	40a00000 	.word	0x40a00000

08002374 <PWMgeneration>:
void PWMgeneration()
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	  if (Direction == 0)
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <PWMgeneration+0x48>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d104      	bne.n	800238a <PWMgeneration+0x16>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 10000);
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <PWMgeneration+0x4c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f242 7210 	movw	r2, #10000	; 0x2710
 8002388:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 1)
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <PWMgeneration+0x48>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d103      	bne.n	800239a <PWMgeneration+0x26>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <PWMgeneration+0x4c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2200      	movs	r2, #0
 8002398:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 2)
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <PWMgeneration+0x48>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d104      	bne.n	80023ac <PWMgeneration+0x38>
	  {
		  PIDinit() ;
 80023a2:	f7ff fe8d 	bl	80020c0 <PIDinit>
		  PWMPercent = 0 ;
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <PWMgeneration+0x50>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	801a      	strh	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMPercent);
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <PWMgeneration+0x50>)
 80023ae:	881a      	ldrh	r2, [r3, #0]
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <PWMgeneration+0x4c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200000f4 	.word	0x200000f4
 80023c0:	200002c8 	.word	0x200002c8
 80023c4:	200000e0 	.word	0x200000e0

080023c8 <EncoderVelocity_Update>:
#define  HTIM_ENCODER htim3
#define  MAX_SUBPOSITION_OVERFLOW 1024
#define  MAX_ENCODER_PERIOD 2048

float EncoderVelocity_Update()
{
 80023c8:	b5b0      	push	{r4, r5, r7, lr}
 80023ca:	ed2d 8b02 	vpush	{d8}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <EncoderVelocity_Update+0x98>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 80023da:	f000 f849 	bl	8002470 <micros>
 80023de:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <EncoderVelocity_Update+0x9c>)
 80023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ec:	1a84      	subs	r4, r0, r2
 80023ee:	eb61 0503 	sbc.w	r5, r1, r3
 80023f2:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <EncoderVelocity_Update+0xa0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	db04      	blt.n	8002412 <EncoderVelocity_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	e007      	b.n	8002422 <EncoderVelocity_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8002418:	dc03      	bgt.n	8002422 <EncoderVelocity_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002420:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8002422:	4a11      	ldr	r2, [pc, #68]	; (8002468 <EncoderVelocity_Update+0xa0>)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8002428:	490e      	ldr	r1, [pc, #56]	; (8002464 <EncoderVelocity_Update+0x9c>)
 800242a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800242e:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	4a0d      	ldr	r2, [pc, #52]	; (800246c <EncoderVelocity_Update+0xa4>)
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002446:	f7fe fc4b 	bl	8000ce0 <__aeabi_ul2f>
 800244a:	ee07 0a10 	vmov	s14, r0
 800244e:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 8002452:	eeb0 0a67 	vmov.f32	s0, s15
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	ecbd 8b02 	vpop	{d8}
 800245e:	bdb0      	pop	{r4, r5, r7, pc}
 8002460:	200001e4 	.word	0x200001e4
 8002464:	20000100 	.word	0x20000100
 8002468:	20000108 	.word	0x20000108
 800246c:	000f4240 	.word	0x000f4240

08002470 <micros>:
	{
		_micros += 4294967295;
	}
}
uint64_t micros()
{
 8002470:	b4b0      	push	{r4, r5, r7}
 8002472:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <micros+0x2c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	4618      	mov	r0, r3
 800247c:	f04f 0100 	mov.w	r1, #0
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <micros+0x30>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	1884      	adds	r4, r0, r2
 8002488:	eb41 0503 	adc.w	r5, r1, r3
 800248c:	4622      	mov	r2, r4
 800248e:	462b      	mov	r3, r5
}
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	bcb0      	pop	{r4, r5, r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	2000031c 	.word	0x2000031c
 80024a0:	200000e8 	.word	0x200000e8

080024a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a8:	b672      	cpsid	i
}
 80024aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024ac:	e7fe      	b.n	80024ac <Error_Handler+0x8>
	...

080024b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_MspInit+0x4c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <HAL_MspInit+0x4c>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_MspInit+0x4c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_MspInit+0x4c>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_MspInit+0x4c>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_MspInit+0x4c>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024ee:	2007      	movs	r0, #7
 80024f0:	f000 fba6 	bl	8002c40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a21      	ldr	r2, [pc, #132]	; (80025a4 <HAL_I2C_MspInit+0xa4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d13b      	bne.n	800259a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_I2C_MspInit+0xa8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <HAL_I2C_MspInit+0xa8>)
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_I2C_MspInit+0xa8>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800253e:	23c0      	movs	r3, #192	; 0xc0
 8002540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002542:	2312      	movs	r3, #18
 8002544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800254e:	2304      	movs	r3, #4
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	4814      	ldr	r0, [pc, #80]	; (80025ac <HAL_I2C_MspInit+0xac>)
 800255a:	f000 ff3d 	bl	80033d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_I2C_MspInit+0xa8>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <HAL_I2C_MspInit+0xa8>)
 8002568:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_I2C_MspInit+0xa8>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	201f      	movs	r0, #31
 8002580:	f000 fb69 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002584:	201f      	movs	r0, #31
 8002586:	f000 fb82 	bl	8002c8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2020      	movs	r0, #32
 8002590:	f000 fb61 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002594:	2020      	movs	r0, #32
 8002596:	f000 fb7a 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40005400 	.word	0x40005400
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020400 	.word	0x40020400

080025b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a15      	ldr	r2, [pc, #84]	; (8002614 <HAL_TIM_Base_MspInit+0x64>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10e      	bne.n	80025e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a13      	ldr	r2, [pc, #76]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025de:	e012      	b.n	8002606 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e8:	d10d      	bne.n	8002606 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40010000 	.word	0x40010000
 8002618:	40023800 	.word	0x40023800

0800261c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <HAL_TIM_Encoder_MspInit+0x84>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d12b      	bne.n	8002696 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a10      	ldr	r2, [pc, #64]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x88>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002676:	23c0      	movs	r3, #192	; 0xc0
 8002678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002686:	2302      	movs	r3, #2
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	4805      	ldr	r0, [pc, #20]	; (80026a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002692:	f000 fea1 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002696:	bf00      	nop
 8002698:	3728      	adds	r7, #40	; 0x28
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020000 	.word	0x40020000

080026ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a12      	ldr	r2, [pc, #72]	; (8002714 <HAL_TIM_MspPostInit+0x68>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d11e      	bne.n	800270c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_TIM_MspPostInit+0x6c>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <HAL_TIM_MspPostInit+0x6c>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <HAL_TIM_MspPostInit+0x6c>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026fc:	2301      	movs	r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	4619      	mov	r1, r3
 8002706:	4805      	ldr	r0, [pc, #20]	; (800271c <HAL_TIM_MspPostInit+0x70>)
 8002708:	f000 fe66 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800270c:	bf00      	nop
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40010000 	.word	0x40010000
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000

08002720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a4c      	ldr	r2, [pc, #304]	; (8002870 <HAL_UART_MspInit+0x150>)
 800273e:	4293      	cmp	r3, r2
 8002740:	f040 8091 	bne.w	8002866 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <HAL_UART_MspInit+0x154>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	4a49      	ldr	r2, [pc, #292]	; (8002874 <HAL_UART_MspInit+0x154>)
 800274e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002752:	6413      	str	r3, [r2, #64]	; 0x40
 8002754:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_UART_MspInit+0x154>)
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	4b43      	ldr	r3, [pc, #268]	; (8002874 <HAL_UART_MspInit+0x154>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	4a42      	ldr	r2, [pc, #264]	; (8002874 <HAL_UART_MspInit+0x154>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6313      	str	r3, [r2, #48]	; 0x30
 8002770:	4b40      	ldr	r3, [pc, #256]	; (8002874 <HAL_UART_MspInit+0x154>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800277c:	230c      	movs	r3, #12
 800277e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800278c:	2307      	movs	r3, #7
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	4838      	ldr	r0, [pc, #224]	; (8002878 <HAL_UART_MspInit+0x158>)
 8002798:	f000 fe1e 	bl	80033d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800279c:	4b37      	ldr	r3, [pc, #220]	; (800287c <HAL_UART_MspInit+0x15c>)
 800279e:	4a38      	ldr	r2, [pc, #224]	; (8002880 <HAL_UART_MspInit+0x160>)
 80027a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80027a2:	4b36      	ldr	r3, [pc, #216]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027aa:	4b34      	ldr	r3, [pc, #208]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b0:	4b32      	ldr	r3, [pc, #200]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027b6:	4b31      	ldr	r3, [pc, #196]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027be:	4b2f      	ldr	r3, [pc, #188]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027c4:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80027ca:	4b2c      	ldr	r3, [pc, #176]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027d2:	4b2a      	ldr	r3, [pc, #168]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d8:	4b28      	ldr	r3, [pc, #160]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80027de:	4827      	ldr	r0, [pc, #156]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027e0:	f000 fa70 	bl	8002cc4 <HAL_DMA_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80027ea:	f7ff fe5b 	bl	80024a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a22      	ldr	r2, [pc, #136]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
 80027f4:	4a21      	ldr	r2, [pc, #132]	; (800287c <HAL_UART_MspInit+0x15c>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80027fa:	4b22      	ldr	r3, [pc, #136]	; (8002884 <HAL_UART_MspInit+0x164>)
 80027fc:	4a22      	ldr	r2, [pc, #136]	; (8002888 <HAL_UART_MspInit+0x168>)
 80027fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_UART_MspInit+0x164>)
 8002802:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002806:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_UART_MspInit+0x164>)
 800280a:	2240      	movs	r2, #64	; 0x40
 800280c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_UART_MspInit+0x164>)
 8002810:	2200      	movs	r2, #0
 8002812:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_UART_MspInit+0x164>)
 8002816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800281a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_UART_MspInit+0x164>)
 800281e:	2200      	movs	r2, #0
 8002820:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_UART_MspInit+0x164>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_UART_MspInit+0x164>)
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_UART_MspInit+0x164>)
 8002830:	2200      	movs	r2, #0
 8002832:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <HAL_UART_MspInit+0x164>)
 8002836:	2200      	movs	r2, #0
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800283a:	4812      	ldr	r0, [pc, #72]	; (8002884 <HAL_UART_MspInit+0x164>)
 800283c:	f000 fa42 	bl	8002cc4 <HAL_DMA_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002846:	f7ff fe2d 	bl	80024a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <HAL_UART_MspInit+0x164>)
 800284e:	635a      	str	r2, [r3, #52]	; 0x34
 8002850:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <HAL_UART_MspInit+0x164>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	2026      	movs	r0, #38	; 0x26
 800285c:	f000 f9fb 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002860:	2026      	movs	r0, #38	; 0x26
 8002862:	f000 fa14 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40004400 	.word	0x40004400
 8002874:	40023800 	.word	0x40023800
 8002878:	40020000 	.word	0x40020000
 800287c:	20000110 	.word	0x20000110
 8002880:	40026088 	.word	0x40026088
 8002884:	20000238 	.word	0x20000238
 8002888:	400260a0 	.word	0x400260a0

0800288c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <NMI_Handler+0x4>

08002892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002896:	e7fe      	b.n	8002896 <HardFault_Handler+0x4>

08002898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800289c:	e7fe      	b.n	800289c <MemManage_Handler+0x4>

0800289e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a2:	e7fe      	b.n	80028a2 <BusFault_Handler+0x4>

080028a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a8:	e7fe      	b.n	80028a8 <UsageFault_Handler+0x4>

080028aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d8:	f000 f8c2 	bl	8002a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}

080028e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <DMA1_Stream5_IRQHandler+0x10>)
 80028e6:	f000 fb2d 	bl	8002f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000110 	.word	0x20000110

080028f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <DMA1_Stream6_IRQHandler+0x10>)
 80028fa:	f000 fb23 	bl	8002f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000238 	.word	0x20000238

08002908 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <I2C1_EV_IRQHandler+0x10>)
 800290e:	f001 f85d 	bl	80039cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000178 	.word	0x20000178

0800291c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <I2C1_ER_IRQHandler+0x10>)
 8002922:	f001 f9c4 	bl	8003cae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000178 	.word	0x20000178

08002930 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <USART2_IRQHandler+0x10>)
 8002936:	f004 fa3d 	bl	8006db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000036c 	.word	0x2000036c

08002944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <SystemInit+0x20>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <SystemInit+0x20>)
 8002950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800296c:	480d      	ldr	r0, [pc, #52]	; (80029a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800296e:	490e      	ldr	r1, [pc, #56]	; (80029a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002970:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002974:	e002      	b.n	800297c <LoopCopyDataInit>

08002976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297a:	3304      	adds	r3, #4

0800297c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800297c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002980:	d3f9      	bcc.n	8002976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002982:	4a0b      	ldr	r2, [pc, #44]	; (80029b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002984:	4c0b      	ldr	r4, [pc, #44]	; (80029b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002988:	e001      	b.n	800298e <LoopFillZerobss>

0800298a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800298c:	3204      	adds	r2, #4

0800298e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002990:	d3fb      	bcc.n	800298a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002992:	f7ff ffd7 	bl	8002944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002996:	f005 f82d 	bl	80079f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800299a:	f7fe fb63 	bl	8001064 <main>
  bx  lr    
 800299e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80029ac:	08007c64 	.word	0x08007c64
  ldr r2, =_sbss
 80029b0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80029b4:	200003c0 	.word	0x200003c0

080029b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b8:	e7fe      	b.n	80029b8 <ADC_IRQHandler>
	...

080029bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c0:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <HAL_Init+0x40>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <HAL_Init+0x40>)
 80029c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <HAL_Init+0x40>)
 80029d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_Init+0x40>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a07      	ldr	r2, [pc, #28]	; (80029fc <HAL_Init+0x40>)
 80029de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e4:	2003      	movs	r0, #3
 80029e6:	f000 f92b 	bl	8002c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f000 f808 	bl	8002a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f0:	f7ff fd5e 	bl	80024b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023c00 	.word	0x40023c00

08002a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_InitTick+0x54>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_InitTick+0x58>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f943 	bl	8002caa <HAL_SYSTICK_Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00e      	b.n	8002a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b0f      	cmp	r3, #15
 8002a32:	d80a      	bhi.n	8002a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a34:	2200      	movs	r2, #0
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	f000 f90b 	bl	8002c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a40:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <HAL_InitTick+0x5c>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000010 	.word	0x20000010
 8002a58:	20000018 	.word	0x20000018
 8002a5c:	20000014 	.word	0x20000014

08002a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_IncTick+0x20>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_IncTick+0x24>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_IncTick+0x24>)
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000018 	.word	0x20000018
 8002a84:	200003bc 	.word	0x200003bc

08002a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_GetTick+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	200003bc 	.word	0x200003bc

08002aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002abc:	4013      	ands	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad2:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	60d3      	str	r3, [r2, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <__NVIC_GetPriorityGrouping+0x18>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	f003 0307 	and.w	r3, r3, #7
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	db0b      	blt.n	8002b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	4907      	ldr	r1, [pc, #28]	; (8002b3c <__NVIC_EnableIRQ+0x38>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2001      	movs	r0, #1
 8002b26:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db0a      	blt.n	8002b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	490c      	ldr	r1, [pc, #48]	; (8002b8c <__NVIC_SetPriority+0x4c>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	440b      	add	r3, r1
 8002b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b68:	e00a      	b.n	8002b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4908      	ldr	r1, [pc, #32]	; (8002b90 <__NVIC_SetPriority+0x50>)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3b04      	subs	r3, #4
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	761a      	strb	r2, [r3, #24]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000e100 	.word	0xe000e100
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f1c3 0307 	rsb	r3, r3, #7
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	bf28      	it	cs
 8002bb2:	2304      	movcs	r3, #4
 8002bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d902      	bls.n	8002bc4 <NVIC_EncodePriority+0x30>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3b03      	subs	r3, #3
 8002bc2:	e000      	b.n	8002bc6 <NVIC_EncodePriority+0x32>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	4313      	orrs	r3, r2
         );
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c0c:	d301      	bcc.n	8002c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e00f      	b.n	8002c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <SysTick_Config+0x40>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	f7ff ff8e 	bl	8002b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <SysTick_Config+0x40>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2a:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <SysTick_Config+0x40>)
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	e000e010 	.word	0xe000e010

08002c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ff29 	bl	8002aa0 <__NVIC_SetPriorityGrouping>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c68:	f7ff ff3e 	bl	8002ae8 <__NVIC_GetPriorityGrouping>
 8002c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f7ff ff8e 	bl	8002b94 <NVIC_EncodePriority>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff5d 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff31 	bl	8002b04 <__NVIC_EnableIRQ>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ffa2 	bl	8002bfc <SysTick_Config>
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff feda 	bl	8002a88 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e099      	b.n	8002e14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d00:	e00f      	b.n	8002d22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d02:	f7ff fec1 	bl	8002a88 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d908      	bls.n	8002d22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e078      	b.n	8002e14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e8      	bne.n	8002d02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <HAL_DMA_Init+0x158>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d107      	bne.n	8002d8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	4313      	orrs	r3, r2
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0307 	bic.w	r3, r3, #7
 8002da2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d117      	bne.n	8002de6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fa89 	bl	80032e0 <DMA_CheckFifoParam>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002de2:	2301      	movs	r3, #1
 8002de4:	e016      	b.n	8002e14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa40 	bl	8003274 <DMA_CalcBaseAndBitshift>
 8002df4:	4603      	mov	r3, r0
 8002df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	223f      	movs	r2, #63	; 0x3f
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	f010803f 	.word	0xf010803f

08002e20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e2e:	f7ff fe2b 	bl	8002a88 <HAL_GetTick>
 8002e32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d008      	beq.n	8002e52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e052      	b.n	8002ef8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0216 	bic.w	r2, r2, #22
 8002e60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d103      	bne.n	8002e82 <HAL_DMA_Abort+0x62>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0208 	bic.w	r2, r2, #8
 8002e90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea2:	e013      	b.n	8002ecc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ea4:	f7ff fdf0 	bl	8002a88 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d90c      	bls.n	8002ecc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e015      	b.n	8002ef8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e4      	bne.n	8002ea4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	223f      	movs	r2, #63	; 0x3f
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d004      	beq.n	8002f1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e00c      	b.n	8002f38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2205      	movs	r2, #5
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0201 	bic.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f50:	4b92      	ldr	r3, [pc, #584]	; (800319c <HAL_DMA_IRQHandler+0x258>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a92      	ldr	r2, [pc, #584]	; (80031a0 <HAL_DMA_IRQHandler+0x25c>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	0a9b      	lsrs	r3, r3, #10
 8002f5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	2208      	movs	r2, #8
 8002f70:	409a      	lsls	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01a      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d012      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fde:	f043 0202 	orr.w	r2, r3, #2
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	2204      	movs	r2, #4
 8002fec:	409a      	lsls	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d012      	beq.n	800301c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00b      	beq.n	800301c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	2204      	movs	r2, #4
 800300a:	409a      	lsls	r2, r3
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	f043 0204 	orr.w	r2, r3, #4
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	2210      	movs	r2, #16
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d043      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d03c      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	2210      	movs	r2, #16
 8003040:	409a      	lsls	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d018      	beq.n	8003086 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d024      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
 8003072:	e01f      	b.n	80030b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01b      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
 8003084:	e016      	b.n	80030b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0208 	bic.w	r2, r2, #8
 80030a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	2220      	movs	r2, #32
 80030ba:	409a      	lsls	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 808e 	beq.w	80031e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8086 	beq.w	80031e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030da:	2220      	movs	r2, #32
 80030dc:	409a      	lsls	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d136      	bne.n	800315c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0216 	bic.w	r2, r2, #22
 80030fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800310c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d103      	bne.n	800311e <HAL_DMA_IRQHandler+0x1da>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0208 	bic.w	r2, r2, #8
 800312c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	223f      	movs	r2, #63	; 0x3f
 8003134:	409a      	lsls	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314e:	2b00      	cmp	r3, #0
 8003150:	d07d      	beq.n	800324e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
        }
        return;
 800315a:	e078      	b.n	800324e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01c      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d108      	bne.n	800318a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	2b00      	cmp	r3, #0
 800317e:	d030      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4798      	blx	r3
 8003188:	e02b      	b.n	80031e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d027      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
 800319a:	e022      	b.n	80031e2 <HAL_DMA_IRQHandler+0x29e>
 800319c:	20000010 	.word	0x20000010
 80031a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0210 	bic.w	r2, r2, #16
 80031c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d032      	beq.n	8003250 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d022      	beq.n	800323c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2205      	movs	r2, #5
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3301      	adds	r3, #1
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	429a      	cmp	r2, r3
 8003218:	d307      	bcc.n	800322a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f2      	bne.n	800320e <HAL_DMA_IRQHandler+0x2ca>
 8003228:	e000      	b.n	800322c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800322a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
 800324c:	e000      	b.n	8003250 <HAL_DMA_IRQHandler+0x30c>
        return;
 800324e:	bf00      	nop
    }
  }
}
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop

08003258 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003266:	b2db      	uxtb	r3, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	3b10      	subs	r3, #16
 8003284:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <DMA_CalcBaseAndBitshift+0x68>)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d909      	bls.n	80032b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032aa:	f023 0303 	bic.w	r3, r3, #3
 80032ae:	1d1a      	adds	r2, r3, #4
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	659a      	str	r2, [r3, #88]	; 0x58
 80032b4:	e007      	b.n	80032c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	aaaaaaab 	.word	0xaaaaaaab
 80032dc:	08007c4c 	.word	0x08007c4c

080032e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11f      	bne.n	800333a <DMA_CheckFifoParam+0x5a>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d856      	bhi.n	80033ae <DMA_CheckFifoParam+0xce>
 8003300:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <DMA_CheckFifoParam+0x28>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	08003319 	.word	0x08003319
 800330c:	0800332b 	.word	0x0800332b
 8003310:	08003319 	.word	0x08003319
 8003314:	080033af 	.word	0x080033af
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d046      	beq.n	80033b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003328:	e043      	b.n	80033b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003332:	d140      	bne.n	80033b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003338:	e03d      	b.n	80033b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003342:	d121      	bne.n	8003388 <DMA_CheckFifoParam+0xa8>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d837      	bhi.n	80033ba <DMA_CheckFifoParam+0xda>
 800334a:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <DMA_CheckFifoParam+0x70>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	08003361 	.word	0x08003361
 8003354:	08003367 	.word	0x08003367
 8003358:	08003361 	.word	0x08003361
 800335c:	08003379 	.word	0x08003379
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e030      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d025      	beq.n	80033be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003376:	e022      	b.n	80033be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003380:	d11f      	bne.n	80033c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003386:	e01c      	b.n	80033c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d903      	bls.n	8003396 <DMA_CheckFifoParam+0xb6>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d003      	beq.n	800339c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003394:	e018      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
      break;
 800339a:	e015      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00e      	beq.n	80033c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      break;
 80033ac:	e00b      	b.n	80033c6 <DMA_CheckFifoParam+0xe6>
      break;
 80033ae:	bf00      	nop
 80033b0:	e00a      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;
 80033b2:	bf00      	nop
 80033b4:	e008      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;
 80033b6:	bf00      	nop
 80033b8:	e006      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ba:	bf00      	nop
 80033bc:	e004      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <DMA_CheckFifoParam+0xe8>
      break;
 80033c6:	bf00      	nop
    }
  } 
  
  return status; 
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop

080033d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e159      	b.n	80036a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f4:	2201      	movs	r2, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	429a      	cmp	r2, r3
 800340e:	f040 8148 	bne.w	80036a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d005      	beq.n	800342a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003426:	2b02      	cmp	r3, #2
 8003428:	d130      	bne.n	800348c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	2203      	movs	r2, #3
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003460:	2201      	movs	r2, #1
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 0201 	and.w	r2, r3, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b03      	cmp	r3, #3
 8003496:	d017      	beq.n	80034c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d123      	bne.n	800351c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	08da      	lsrs	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3208      	adds	r2, #8
 80034dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	220f      	movs	r2, #15
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	08da      	lsrs	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3208      	adds	r2, #8
 8003516:	69b9      	ldr	r1, [r7, #24]
 8003518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80a2 	beq.w	80036a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <HAL_GPIO_Init+0x2e8>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	4a56      	ldr	r2, [pc, #344]	; (80036c0 <HAL_GPIO_Init+0x2e8>)
 8003568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800356c:	6453      	str	r3, [r2, #68]	; 0x44
 800356e:	4b54      	ldr	r3, [pc, #336]	; (80036c0 <HAL_GPIO_Init+0x2e8>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800357a:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_GPIO_Init+0x2ec>)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	3302      	adds	r3, #2
 8003582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	220f      	movs	r2, #15
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a49      	ldr	r2, [pc, #292]	; (80036c8 <HAL_GPIO_Init+0x2f0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d019      	beq.n	80035da <HAL_GPIO_Init+0x202>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a48      	ldr	r2, [pc, #288]	; (80036cc <HAL_GPIO_Init+0x2f4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_GPIO_Init+0x1fe>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a47      	ldr	r2, [pc, #284]	; (80036d0 <HAL_GPIO_Init+0x2f8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00d      	beq.n	80035d2 <HAL_GPIO_Init+0x1fa>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a46      	ldr	r2, [pc, #280]	; (80036d4 <HAL_GPIO_Init+0x2fc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <HAL_GPIO_Init+0x1f6>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a45      	ldr	r2, [pc, #276]	; (80036d8 <HAL_GPIO_Init+0x300>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_GPIO_Init+0x1f2>
 80035c6:	2304      	movs	r3, #4
 80035c8:	e008      	b.n	80035dc <HAL_GPIO_Init+0x204>
 80035ca:	2307      	movs	r3, #7
 80035cc:	e006      	b.n	80035dc <HAL_GPIO_Init+0x204>
 80035ce:	2303      	movs	r3, #3
 80035d0:	e004      	b.n	80035dc <HAL_GPIO_Init+0x204>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_Init+0x204>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_GPIO_Init+0x204>
 80035da:	2300      	movs	r3, #0
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	f002 0203 	and.w	r2, r2, #3
 80035e2:	0092      	lsls	r2, r2, #2
 80035e4:	4093      	lsls	r3, r2
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035ec:	4935      	ldr	r1, [pc, #212]	; (80036c4 <HAL_GPIO_Init+0x2ec>)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	3302      	adds	r3, #2
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035fa:	4b38      	ldr	r3, [pc, #224]	; (80036dc <HAL_GPIO_Init+0x304>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800361e:	4a2f      	ldr	r2, [pc, #188]	; (80036dc <HAL_GPIO_Init+0x304>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003624:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <HAL_GPIO_Init+0x304>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003648:	4a24      	ldr	r2, [pc, #144]	; (80036dc <HAL_GPIO_Init+0x304>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364e:	4b23      	ldr	r3, [pc, #140]	; (80036dc <HAL_GPIO_Init+0x304>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003672:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <HAL_GPIO_Init+0x304>)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003678:	4b18      	ldr	r3, [pc, #96]	; (80036dc <HAL_GPIO_Init+0x304>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800369c:	4a0f      	ldr	r2, [pc, #60]	; (80036dc <HAL_GPIO_Init+0x304>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3301      	adds	r3, #1
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	f67f aea2 	bls.w	80033f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3724      	adds	r7, #36	; 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40013800 	.word	0x40013800
 80036c8:	40020000 	.word	0x40020000
 80036cc:	40020400 	.word	0x40020400
 80036d0:	40020800 	.word	0x40020800
 80036d4:	40020c00 	.word	0x40020c00
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40013c00 	.word	0x40013c00

080036e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e001      	b.n	8003702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
 800371c:	4613      	mov	r3, r2
 800371e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003720:	787b      	ldrb	r3, [r7, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800372c:	e003      	b.n	8003736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800372e:	887b      	ldrh	r3, [r7, #2]
 8003730:	041a      	lsls	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	619a      	str	r2, [r3, #24]
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e12b      	b.n	80039ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fec8 	bl	8002500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a8:	f002 fa2e 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4a81      	ldr	r2, [pc, #516]	; (80039b8 <HAL_I2C_Init+0x274>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d807      	bhi.n	80037c8 <HAL_I2C_Init+0x84>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a80      	ldr	r2, [pc, #512]	; (80039bc <HAL_I2C_Init+0x278>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e006      	b.n	80037d6 <HAL_I2C_Init+0x92>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a7d      	ldr	r2, [pc, #500]	; (80039c0 <HAL_I2C_Init+0x27c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bf94      	ite	ls
 80037d0:	2301      	movls	r3, #1
 80037d2:	2300      	movhi	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0e7      	b.n	80039ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a78      	ldr	r2, [pc, #480]	; (80039c4 <HAL_I2C_Init+0x280>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0c9b      	lsrs	r3, r3, #18
 80037e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a6a      	ldr	r2, [pc, #424]	; (80039b8 <HAL_I2C_Init+0x274>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d802      	bhi.n	8003818 <HAL_I2C_Init+0xd4>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3301      	adds	r3, #1
 8003816:	e009      	b.n	800382c <HAL_I2C_Init+0xe8>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	4a69      	ldr	r2, [pc, #420]	; (80039c8 <HAL_I2C_Init+0x284>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	3301      	adds	r3, #1
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	430b      	orrs	r3, r1
 8003832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800383e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	495c      	ldr	r1, [pc, #368]	; (80039b8 <HAL_I2C_Init+0x274>)
 8003848:	428b      	cmp	r3, r1
 800384a:	d819      	bhi.n	8003880 <HAL_I2C_Init+0x13c>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1e59      	subs	r1, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fbb1 f3f3 	udiv	r3, r1, r3
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003860:	400b      	ands	r3, r1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_I2C_Init+0x138>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1e59      	subs	r1, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fbb1 f3f3 	udiv	r3, r1, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387a:	e051      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 800387c:	2304      	movs	r3, #4
 800387e:	e04f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d111      	bne.n	80038ac <HAL_I2C_Init+0x168>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e012      	b.n	80038d2 <HAL_I2C_Init+0x18e>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e58      	subs	r0, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	0099      	lsls	r1, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Init+0x196>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e022      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10e      	bne.n	8003900 <HAL_I2C_Init+0x1bc>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1e58      	subs	r0, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	440b      	add	r3, r1
 80038f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f4:	3301      	adds	r3, #1
 80038f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fe:	e00f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	6809      	ldr	r1, [r1, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800394e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6911      	ldr	r1, [r2, #16]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	430b      	orrs	r3, r1
 8003962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	000186a0 	.word	0x000186a0
 80039bc:	001e847f 	.word	0x001e847f
 80039c0:	003d08ff 	.word	0x003d08ff
 80039c4:	431bde83 	.word	0x431bde83
 80039c8:	10624dd3 	.word	0x10624dd3

080039cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d003      	beq.n	8003a04 <HAL_I2C_EV_IRQHandler+0x38>
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	f040 80c1 	bne.w	8003b86 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <HAL_I2C_EV_IRQHandler+0x6e>
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a24:	d003      	beq.n	8003a2e <HAL_I2C_EV_IRQHandler+0x62>
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2C_EV_IRQHandler+0x66>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_I2C_EV_IRQHandler+0x68>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	f000 8132 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00c      	beq.n	8003a5e <HAL_I2C_EV_IRQHandler+0x92>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	0a5b      	lsrs	r3, r3, #9
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d006      	beq.n	8003a5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f001 fc71 	bl	8005338 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fd79 	bl	800454e <I2C_Master_SB>
 8003a5c:	e092      	b.n	8003b84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	08db      	lsrs	r3, r3, #3
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_I2C_EV_IRQHandler+0xb2>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	0a5b      	lsrs	r3, r3, #9
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fdef 	bl	800465a <I2C_Master_ADD10>
 8003a7c:	e082      	b.n	8003b84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_I2C_EV_IRQHandler+0xd2>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	0a5b      	lsrs	r3, r3, #9
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fe09 	bl	80046ae <I2C_Master_ADDR>
 8003a9c:	e072      	b.n	8003b84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d03b      	beq.n	8003b22 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab8:	f000 80f3 	beq.w	8003ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	09db      	lsrs	r3, r3, #7
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00f      	beq.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	0a9b      	lsrs	r3, r3, #10
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f9f3 	bl	8003ecc <I2C_MasterTransmit_TXE>
 8003ae6:	e04d      	b.n	8003b84 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80d6 	beq.w	8003ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	0a5b      	lsrs	r3, r3, #9
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80cf 	beq.w	8003ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b04:	7bbb      	ldrb	r3, [r7, #14]
 8003b06:	2b21      	cmp	r3, #33	; 0x21
 8003b08:	d103      	bne.n	8003b12 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa7a 	bl	8004004 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b10:	e0c7      	b.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	f040 80c4 	bne.w	8003ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fae8 	bl	80040f0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b20:	e0bf      	b.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b30:	f000 80b7 	beq.w	8003ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	099b      	lsrs	r3, r3, #6
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00f      	beq.n	8003b60 <HAL_I2C_EV_IRQHandler+0x194>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	0a9b      	lsrs	r3, r3, #10
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <HAL_I2C_EV_IRQHandler+0x194>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	089b      	lsrs	r3, r3, #2
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d103      	bne.n	8003b60 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fb5d 	bl	8004218 <I2C_MasterReceive_RXNE>
 8003b5e:	e011      	b.n	8003b84 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 809a 	beq.w	8003ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	0a5b      	lsrs	r3, r3, #9
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8093 	beq.w	8003ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fbfc 	bl	800437a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b82:	e08e      	b.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b84:	e08d      	b.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	e007      	b.n	8003ba8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d012      	beq.n	8003bda <HAL_I2C_EV_IRQHandler+0x20e>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	0a5b      	lsrs	r3, r3, #9
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 ffba 	bl	8004b4c <I2C_Slave_ADDR>
 8003bd8:	e066      	b.n	8003ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_I2C_EV_IRQHandler+0x22e>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	0a5b      	lsrs	r3, r3, #9
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fff4 	bl	8004be0 <I2C_Slave_STOPF>
 8003bf8:	e056      	b.n	8003ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bfa:	7bbb      	ldrb	r3, [r7, #14]
 8003bfc:	2b21      	cmp	r3, #33	; 0x21
 8003bfe:	d002      	beq.n	8003c06 <HAL_I2C_EV_IRQHandler+0x23a>
 8003c00:	7bbb      	ldrb	r3, [r7, #14]
 8003c02:	2b29      	cmp	r3, #41	; 0x29
 8003c04:	d125      	bne.n	8003c52 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	09db      	lsrs	r3, r3, #7
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00f      	beq.n	8003c32 <HAL_I2C_EV_IRQHandler+0x266>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	0a9b      	lsrs	r3, r3, #10
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_I2C_EV_IRQHandler+0x266>
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d103      	bne.n	8003c32 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fed0 	bl	80049d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c30:	e039      	b.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	089b      	lsrs	r3, r3, #2
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d033      	beq.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x2da>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	0a5b      	lsrs	r3, r3, #9
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d02d      	beq.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fefd 	bl	8004a4a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c50:	e029      	b.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00f      	beq.n	8003c7e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	0a9b      	lsrs	r3, r3, #10
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 ff08 	bl	8004a8c <I2C_SlaveReceive_RXNE>
 8003c7c:	e014      	b.n	8003ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00e      	beq.n	8003ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	0a5b      	lsrs	r3, r3, #9
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 ff36 	bl	8004b08 <I2C_SlaveReceive_BTF>
 8003c9c:	e004      	b.n	8003ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003c9e:	bf00      	nop
 8003ca0:	e002      	b.n	8003ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ca2:	bf00      	nop
 8003ca4:	e000      	b.n	8003ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ca6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b08a      	sub	sp, #40	; 0x28
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00e      	beq.n	8003cfc <HAL_I2C_ER_IRQHandler+0x4e>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cfa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	0a5b      	lsrs	r3, r3, #9
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00e      	beq.n	8003d26 <HAL_I2C_ER_IRQHandler+0x78>
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	f043 0302 	orr.w	r3, r3, #2
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003d24:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	0a9b      	lsrs	r3, r3, #10
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d03f      	beq.n	8003db2 <HAL_I2C_ER_IRQHandler+0x104>
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d039      	beq.n	8003db2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003d3e:	7efb      	ldrb	r3, [r7, #27]
 8003d40:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d58:	7ebb      	ldrb	r3, [r7, #26]
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d112      	bne.n	8003d84 <HAL_I2C_ER_IRQHandler+0xd6>
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10f      	bne.n	8003d84 <HAL_I2C_ER_IRQHandler+0xd6>
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	2b21      	cmp	r3, #33	; 0x21
 8003d68:	d008      	beq.n	8003d7c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b29      	cmp	r3, #41	; 0x29
 8003d6e:	d005      	beq.n	8003d7c <HAL_I2C_ER_IRQHandler+0xce>
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	2b28      	cmp	r3, #40	; 0x28
 8003d74:	d106      	bne.n	8003d84 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b21      	cmp	r3, #33	; 0x21
 8003d7a:	d103      	bne.n	8003d84 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f001 f85f 	bl	8004e40 <I2C_Slave_AF>
 8003d82:	e016      	b.n	8003db2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d8c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d96:	7efb      	ldrb	r3, [r7, #27]
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d002      	beq.n	8003da2 <HAL_I2C_ER_IRQHandler+0xf4>
 8003d9c:	7efb      	ldrb	r3, [r7, #27]
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d107      	bne.n	8003db2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	0adb      	lsrs	r3, r3, #11
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00e      	beq.n	8003ddc <HAL_I2C_ER_IRQHandler+0x12e>
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	f043 0308 	orr.w	r3, r3, #8
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003dda:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f001 f896 	bl	8004f20 <I2C_ITError>
  }
}
 8003df4:	bf00      	nop
 8003df6:	3728      	adds	r7, #40	; 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d150      	bne.n	8003f94 <I2C_MasterTransmit_TXE+0xc8>
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b21      	cmp	r3, #33	; 0x21
 8003ef6:	d14d      	bne.n	8003f94 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d01d      	beq.n	8003f3a <I2C_MasterTransmit_TXE+0x6e>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d01a      	beq.n	8003f3a <I2C_MasterTransmit_TXE+0x6e>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f0a:	d016      	beq.n	8003f3a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f1a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2211      	movs	r2, #17
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff ff62 	bl	8003dfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f38:	e060      	b.n	8003ffc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f48:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f58:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d107      	bne.n	8003f84 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff7d 	bl	8003e7c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f82:	e03b      	b.n	8003ffc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ff35 	bl	8003dfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f92:	e033      	b.n	8003ffc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	2b21      	cmp	r3, #33	; 0x21
 8003f98:	d005      	beq.n	8003fa6 <I2C_MasterTransmit_TXE+0xda>
 8003f9a:	7bbb      	ldrb	r3, [r7, #14]
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d12d      	bne.n	8003ffc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b22      	cmp	r3, #34	; 0x22
 8003fa4:	d12a      	bne.n	8003ffc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d108      	bne.n	8003fc2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fbe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003fc0:	e01c      	b.n	8003ffc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	d103      	bne.n	8003fd6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f88e 	bl	80040f0 <I2C_MemoryTransmit_TXE_BTF>
}
 8003fd4:	e012      	b.n	8003ffc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ffa:	e7ff      	b.n	8003ffc <I2C_MasterTransmit_TXE+0x130>
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b21      	cmp	r3, #33	; 0x21
 800401c:	d164      	bne.n	80040e8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d012      	beq.n	800404e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800404c:	e04c      	b.n	80040e8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d01d      	beq.n	8004090 <I2C_MasterTransmit_BTF+0x8c>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b20      	cmp	r3, #32
 8004058:	d01a      	beq.n	8004090 <I2C_MasterTransmit_BTF+0x8c>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004060:	d016      	beq.n	8004090 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004070:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2211      	movs	r2, #17
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff feb7 	bl	8003dfc <HAL_I2C_MasterTxCpltCallback>
}
 800408e:	e02b      	b.n	80040e8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800409e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	d107      	bne.n	80040da <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fed2 	bl	8003e7c <HAL_I2C_MemTxCpltCallback>
}
 80040d8:	e006      	b.n	80040e8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fe8a 	bl	8003dfc <HAL_I2C_MasterTxCpltCallback>
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004104:	2b00      	cmp	r3, #0
 8004106:	d11d      	bne.n	8004144 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d10b      	bne.n	8004128 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004114:	b2da      	uxtb	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004126:	e073      	b.n	8004210 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412c:	b29b      	uxth	r3, r3
 800412e:	121b      	asrs	r3, r3, #8
 8004130:	b2da      	uxtb	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004142:	e065      	b.n	8004210 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	2b01      	cmp	r3, #1
 800414a:	d10b      	bne.n	8004164 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004150:	b2da      	uxtb	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004162:	e055      	b.n	8004210 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	2b02      	cmp	r3, #2
 800416a:	d151      	bne.n	8004210 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b22      	cmp	r3, #34	; 0x22
 8004170:	d10d      	bne.n	800418e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004180:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800418c:	e040      	b.n	8004210 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d015      	beq.n	80041c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b21      	cmp	r3, #33	; 0x21
 800419c:	d112      	bne.n	80041c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041c2:	e025      	b.n	8004210 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d120      	bne.n	8004210 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b21      	cmp	r3, #33	; 0x21
 80041d2:	d11d      	bne.n	8004210 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff fe36 	bl	8003e7c <HAL_I2C_MemTxCpltCallback>
}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b22      	cmp	r3, #34	; 0x22
 800422a:	f040 80a2 	bne.w	8004372 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d921      	bls.n	8004280 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b03      	cmp	r3, #3
 800426a:	f040 8082 	bne.w	8004372 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800427e:	e078      	b.n	8004372 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	2b02      	cmp	r3, #2
 8004286:	d074      	beq.n	8004372 <I2C_MasterReceive_RXNE+0x15a>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d002      	beq.n	8004294 <I2C_MasterReceive_RXNE+0x7c>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d16e      	bne.n	8004372 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f001 f81d 	bl	80052d4 <I2C_WaitOnSTOPRequestThroughIT>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d142      	bne.n	8004326 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d10a      	bne.n	8004310 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fdc1 	bl	8003e90 <HAL_I2C_MemRxCpltCallback>
}
 800430e:	e030      	b.n	8004372 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2212      	movs	r2, #18
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff fd76 	bl	8003e10 <HAL_I2C_MasterRxCpltCallback>
}
 8004324:	e025      	b.n	8004372 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004334:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff fd99 	bl	8003ea4 <HAL_I2C_ErrorCallback>
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b04      	cmp	r3, #4
 8004390:	d11b      	bne.n	80043ca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80043c8:	e0bd      	b.n	8004546 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d129      	bne.n	8004428 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d00a      	beq.n	8004400 <I2C_MasterReceive_BTF+0x86>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d007      	beq.n	8004400 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004426:	e08e      	b.n	8004546 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d176      	bne.n	8004520 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d002      	beq.n	800443e <I2C_MasterReceive_BTF+0xc4>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b10      	cmp	r3, #16
 800443c:	d108      	bne.n	8004450 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e019      	b.n	8004484 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b04      	cmp	r3, #4
 8004454:	d002      	beq.n	800445c <I2C_MasterReceive_BTF+0xe2>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d108      	bne.n	800446e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e00a      	b.n	8004484 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b10      	cmp	r3, #16
 8004472:	d007      	beq.n	8004484 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004482:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80044de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d10a      	bne.n	800450a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fcc4 	bl	8003e90 <HAL_I2C_MemRxCpltCallback>
}
 8004508:	e01d      	b.n	8004546 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2212      	movs	r2, #18
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fc79 	bl	8003e10 <HAL_I2C_MasterRxCpltCallback>
}
 800451e:	e012      	b.n	8004546 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d117      	bne.n	8004592 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	b2db      	uxtb	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800457a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800457c:	e067      	b.n	800464e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	b2da      	uxtb	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	611a      	str	r2, [r3, #16]
}
 8004590:	e05d      	b.n	800464e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800459a:	d133      	bne.n	8004604 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b21      	cmp	r3, #33	; 0x21
 80045a6:	d109      	bne.n	80045bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045b8:	611a      	str	r2, [r3, #16]
 80045ba:	e008      	b.n	80045ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <I2C_Master_SB+0x92>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d108      	bne.n	80045f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d032      	beq.n	800464e <I2C_Master_SB+0x100>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d02d      	beq.n	800464e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004600:	605a      	str	r2, [r3, #4]
}
 8004602:	e024      	b.n	800464e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10e      	bne.n	800462a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	b29b      	uxth	r3, r3
 8004612:	11db      	asrs	r3, r3, #7
 8004614:	b2db      	uxtb	r3, r3
 8004616:	f003 0306 	and.w	r3, r3, #6
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f063 030f 	orn	r3, r3, #15
 8004620:	b2da      	uxtb	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	611a      	str	r2, [r3, #16]
}
 8004628:	e011      	b.n	800464e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10d      	bne.n	800464e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	b29b      	uxth	r3, r3
 8004638:	11db      	asrs	r3, r3, #7
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f003 0306 	and.w	r3, r3, #6
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f063 030e 	orn	r3, r3, #14
 8004646:	b2da      	uxtb	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	611a      	str	r2, [r3, #16]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	b2da      	uxtb	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	2b00      	cmp	r3, #0
 8004674:	d004      	beq.n	8004680 <I2C_Master_ADD10+0x26>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d108      	bne.n	8004692 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00c      	beq.n	80046a2 <I2C_Master_ADD10+0x48>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a0:	605a      	str	r2, [r3, #4]
  }
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b091      	sub	sp, #68	; 0x44
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b22      	cmp	r3, #34	; 0x22
 80046d6:	f040 8169 	bne.w	80049ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10f      	bne.n	8004702 <I2C_Master_ADDR+0x54>
 80046e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046e6:	2b40      	cmp	r3, #64	; 0x40
 80046e8:	d10b      	bne.n	8004702 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ea:	2300      	movs	r3, #0
 80046ec:	633b      	str	r3, [r7, #48]	; 0x30
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	633b      	str	r3, [r7, #48]	; 0x30
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	633b      	str	r3, [r7, #48]	; 0x30
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	e160      	b.n	80049c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004706:	2b00      	cmp	r3, #0
 8004708:	d11d      	bne.n	8004746 <I2C_Master_ADDR+0x98>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004712:	d118      	bne.n	8004746 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004714:	2300      	movs	r3, #0
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	651a      	str	r2, [r3, #80]	; 0x50
 8004744:	e13e      	b.n	80049c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d113      	bne.n	8004778 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004750:	2300      	movs	r3, #0
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
 8004764:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e115      	b.n	80049a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	f040 808a 	bne.w	8004898 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800478a:	d137      	bne.n	80047fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047aa:	d113      	bne.n	80047d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047bc:	2300      	movs	r3, #0
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	e0e7      	b.n	80049a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d4:	2300      	movs	r3, #0
 80047d6:	623b      	str	r3, [r7, #32]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	623b      	str	r3, [r7, #32]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e0d3      	b.n	80049a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d02e      	beq.n	8004860 <I2C_Master_ADDR+0x1b2>
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	2b20      	cmp	r3, #32
 8004806:	d02b      	beq.n	8004860 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	2b12      	cmp	r3, #18
 800480c:	d102      	bne.n	8004814 <I2C_Master_ADDR+0x166>
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	2b01      	cmp	r3, #1
 8004812:	d125      	bne.n	8004860 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	2b04      	cmp	r3, #4
 8004818:	d00e      	beq.n	8004838 <I2C_Master_ADDR+0x18a>
 800481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481c:	2b02      	cmp	r3, #2
 800481e:	d00b      	beq.n	8004838 <I2C_Master_ADDR+0x18a>
 8004820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004822:	2b10      	cmp	r3, #16
 8004824:	d008      	beq.n	8004838 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	e007      	b.n	8004848 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004846:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004848:	2300      	movs	r3, #0
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	61fb      	str	r3, [r7, #28]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	e0a1      	b.n	80049a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	61bb      	str	r3, [r7, #24]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	61bb      	str	r3, [r7, #24]
 8004884:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e085      	b.n	80049a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d14d      	bne.n	800493e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d016      	beq.n	80048d6 <I2C_Master_ADDR+0x228>
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d013      	beq.n	80048d6 <I2C_Master_ADDR+0x228>
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d010      	beq.n	80048d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e007      	b.n	80048e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f4:	d117      	bne.n	8004926 <I2C_Master_ADDR+0x278>
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048fc:	d00b      	beq.n	8004916 <I2C_Master_ADDR+0x268>
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	2b01      	cmp	r3, #1
 8004902:	d008      	beq.n	8004916 <I2C_Master_ADDR+0x268>
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	2b08      	cmp	r3, #8
 8004908:	d005      	beq.n	8004916 <I2C_Master_ADDR+0x268>
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	2b10      	cmp	r3, #16
 800490e:	d002      	beq.n	8004916 <I2C_Master_ADDR+0x268>
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	2b20      	cmp	r3, #32
 8004914:	d107      	bne.n	8004926 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004924:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	e032      	b.n	80049a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800494c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495c:	d117      	bne.n	800498e <I2C_Master_ADDR+0x2e0>
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004964:	d00b      	beq.n	800497e <I2C_Master_ADDR+0x2d0>
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	2b01      	cmp	r3, #1
 800496a:	d008      	beq.n	800497e <I2C_Master_ADDR+0x2d0>
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	2b08      	cmp	r3, #8
 8004970:	d005      	beq.n	800497e <I2C_Master_ADDR+0x2d0>
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	2b10      	cmp	r3, #16
 8004976:	d002      	beq.n	800497e <I2C_Master_ADDR+0x2d0>
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	2b20      	cmp	r3, #32
 800497c:	d107      	bne.n	800498e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800498c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80049aa:	e00b      	b.n	80049c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
}
 80049c2:	e7ff      	b.n	80049c4 <I2C_Master_ADDR+0x316>
 80049c4:	bf00      	nop
 80049c6:	3744      	adds	r7, #68	; 0x44
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d02b      	beq.n	8004a42 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	781a      	ldrb	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d114      	bne.n	8004a42 <I2C_SlaveTransmit_TXE+0x72>
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	2b29      	cmp	r3, #41	; 0x29
 8004a1c:	d111      	bne.n	8004a42 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2221      	movs	r2, #33	; 0x21
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2228      	movs	r2, #40	; 0x28
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff f9f1 	bl	8003e24 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d011      	beq.n	8004a80 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	781a      	ldrb	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d02c      	beq.n	8004b00 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d114      	bne.n	8004b00 <I2C_SlaveReceive_RXNE+0x74>
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8004ada:	d111      	bne.n	8004b00 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2222      	movs	r2, #34	; 0x22
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2228      	movs	r2, #40	; 0x28
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff f99c 	bl	8003e38 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b00:	bf00      	nop
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d012      	beq.n	8004b40 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b66:	2b28      	cmp	r3, #40	; 0x28
 8004b68:	d127      	bne.n	8004bba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b78:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	09db      	lsrs	r3, r3, #7
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d103      	bne.n	8004b9e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	81bb      	strh	r3, [r7, #12]
 8004b9c:	e002      	b.n	8004ba4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004bac:	89ba      	ldrh	r2, [r7, #12]
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff f94a 	bl	8003e4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004bb8:	e00e      	b.n	8004bd8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bfe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	60bb      	str	r3, [r7, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3c:	d172      	bne.n	8004d24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b22      	cmp	r3, #34	; 0x22
 8004c42:	d002      	beq.n	8004c4a <I2C_Slave_STOPF+0x6a>
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	2b2a      	cmp	r3, #42	; 0x2a
 8004c48:	d135      	bne.n	8004cb6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f043 0204 	orr.w	r2, r3, #4
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe fae8 	bl	8003258 <HAL_DMA_GetState>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d049      	beq.n	8004d22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	4a69      	ldr	r2, [pc, #420]	; (8004e38 <I2C_Slave_STOPF+0x258>)
 8004c94:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe f930 	bl	8002f00 <HAL_DMA_Abort_IT>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d03d      	beq.n	8004d22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cb4:	e035      	b.n	8004d22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f043 0204 	orr.w	r2, r3, #4
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fab2 	bl	8003258 <HAL_DMA_GetState>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d014      	beq.n	8004d24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	4a4e      	ldr	r2, [pc, #312]	; (8004e38 <I2C_Slave_STOPF+0x258>)
 8004d00:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe f8fa 	bl	8002f00 <HAL_DMA_Abort_IT>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d008      	beq.n	8004d24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4798      	blx	r3
 8004d20:	e000      	b.n	8004d24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d03e      	beq.n	8004dac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d112      	bne.n	8004d62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	d112      	bne.n	8004d96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	f043 0204 	orr.w	r2, r3, #4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f8b3 	bl	8004f20 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004dba:	e039      	b.n	8004e30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8004dc0:	d109      	bne.n	8004dd6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2228      	movs	r2, #40	; 0x28
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff f831 	bl	8003e38 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b28      	cmp	r3, #40	; 0x28
 8004de0:	d111      	bne.n	8004e06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a15      	ldr	r2, [pc, #84]	; (8004e3c <I2C_Slave_STOPF+0x25c>)
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff f832 	bl	8003e68 <HAL_I2C_ListenCpltCallback>
}
 8004e04:	e014      	b.n	8004e30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	2b22      	cmp	r3, #34	; 0x22
 8004e0c:	d002      	beq.n	8004e14 <I2C_Slave_STOPF+0x234>
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2b22      	cmp	r3, #34	; 0x22
 8004e12:	d10d      	bne.n	8004e30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff f804 	bl	8003e38 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	08005185 	.word	0x08005185
 8004e3c:	ffff0000 	.word	0xffff0000

08004e40 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d002      	beq.n	8004e62 <I2C_Slave_AF+0x22>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d129      	bne.n	8004eb6 <I2C_Slave_AF+0x76>
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	2b28      	cmp	r3, #40	; 0x28
 8004e66:	d126      	bne.n	8004eb6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a2c      	ldr	r2, [pc, #176]	; (8004f1c <I2C_Slave_AF+0xdc>)
 8004e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e7c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e86:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e96:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fe ffda 	bl	8003e68 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004eb4:	e02e      	b.n	8004f14 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b21      	cmp	r3, #33	; 0x21
 8004eba:	d126      	bne.n	8004f0a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <I2C_Slave_AF+0xdc>)
 8004ec0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2221      	movs	r2, #33	; 0x21
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ee6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ef0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f00:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fe ff8e 	bl	8003e24 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f08:	e004      	b.n	8004f14 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f12:	615a      	str	r2, [r3, #20]
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	ffff0000 	.word	0xffff0000

08004f20 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f36:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f38:	7bbb      	ldrb	r3, [r7, #14]
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d002      	beq.n	8004f44 <I2C_ITError+0x24>
 8004f3e:	7bbb      	ldrb	r3, [r7, #14]
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d10a      	bne.n	8004f5a <I2C_ITError+0x3a>
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b22      	cmp	r3, #34	; 0x22
 8004f48:	d107      	bne.n	8004f5a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f58:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f60:	2b28      	cmp	r3, #40	; 0x28
 8004f62:	d107      	bne.n	8004f74 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2228      	movs	r2, #40	; 0x28
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f72:	e015      	b.n	8004fa0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f82:	d00a      	beq.n	8004f9a <I2C_ITError+0x7a>
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b60      	cmp	r3, #96	; 0x60
 8004f88:	d007      	beq.n	8004f9a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fae:	d162      	bne.n	8005076 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fbe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d020      	beq.n	8005010 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	4a6a      	ldr	r2, [pc, #424]	; (800517c <I2C_ITError+0x25c>)
 8004fd4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fd ff90 	bl	8002f00 <HAL_DMA_Abort_IT>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8089 	beq.w	80050fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800500a:	4610      	mov	r0, r2
 800500c:	4798      	blx	r3
 800500e:	e074      	b.n	80050fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	4a59      	ldr	r2, [pc, #356]	; (800517c <I2C_ITError+0x25c>)
 8005016:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	4618      	mov	r0, r3
 800501e:	f7fd ff6f 	bl	8002f00 <HAL_DMA_Abort_IT>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d068      	beq.n	80050fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d10b      	bne.n	800504e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005070:	4610      	mov	r0, r2
 8005072:	4798      	blx	r3
 8005074:	e041      	b.n	80050fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b60      	cmp	r3, #96	; 0x60
 8005080:	d125      	bne.n	80050ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	d10b      	bne.n	80050b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fe fef6 	bl	8003eb8 <HAL_I2C_AbortCpltCallback>
 80050cc:	e015      	b.n	80050fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d10b      	bne.n	80050f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fe fed5 	bl	8003ea4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10e      	bne.n	8005128 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005110:	2b00      	cmp	r3, #0
 8005112:	d109      	bne.n	8005128 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005136:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b04      	cmp	r3, #4
 800514a:	d113      	bne.n	8005174 <I2C_ITError+0x254>
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b28      	cmp	r3, #40	; 0x28
 8005150:	d110      	bne.n	8005174 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a0a      	ldr	r2, [pc, #40]	; (8005180 <I2C_ITError+0x260>)
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fe fe7a 	bl	8003e68 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	08005185 	.word	0x08005185
 8005180:	ffff0000 	.word	0xffff0000

08005184 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800519e:	4b4b      	ldr	r3, [pc, #300]	; (80052cc <I2C_DMAAbort+0x148>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	08db      	lsrs	r3, r3, #3
 80051a4:	4a4a      	ldr	r2, [pc, #296]	; (80052d0 <I2C_DMAAbort+0x14c>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	0a1a      	lsrs	r2, r3, #8
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	00da      	lsls	r2, r3, #3
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f043 0220 	orr.w	r2, r3, #32
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80051ca:	e00a      	b.n	80051e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e0:	d0ea      	beq.n	80051b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ee:	2200      	movs	r2, #0
 80051f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	2200      	movs	r2, #0
 8005200:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005210:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2200      	movs	r2, #0
 8005216:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005224:	2200      	movs	r2, #0
 8005226:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	2200      	movs	r2, #0
 8005236:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b60      	cmp	r3, #96	; 0x60
 8005252:	d10e      	bne.n	8005272 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2200      	movs	r2, #0
 8005268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800526a:	6978      	ldr	r0, [r7, #20]
 800526c:	f7fe fe24 	bl	8003eb8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005270:	e027      	b.n	80052c2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005272:	7cfb      	ldrb	r3, [r7, #19]
 8005274:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005278:	2b28      	cmp	r3, #40	; 0x28
 800527a:	d117      	bne.n	80052ac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800529a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2228      	movs	r2, #40	; 0x28
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052aa:	e007      	b.n	80052bc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80052bc:	6978      	ldr	r0, [r7, #20]
 80052be:	f7fe fdf1 	bl	8003ea4 <HAL_I2C_ErrorCallback>
}
 80052c2:	bf00      	nop
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000010 	.word	0x20000010
 80052d0:	14f8b589 	.word	0x14f8b589

080052d4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052e0:	4b13      	ldr	r3, [pc, #76]	; (8005330 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	08db      	lsrs	r3, r3, #3
 80052e6:	4a13      	ldr	r2, [pc, #76]	; (8005334 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	0a1a      	lsrs	r2, r3, #8
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e008      	b.n	8005324 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800531c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005320:	d0e9      	beq.n	80052f6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20000010 	.word	0x20000010
 8005334:	14f8b589 	.word	0x14f8b589

08005338 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005348:	d103      	bne.n	8005352 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005350:	e007      	b.n	8005362 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800535a:	d102      	bne.n	8005362 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2208      	movs	r2, #8
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e264      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d075      	beq.n	800547a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800538e:	4ba3      	ldr	r3, [pc, #652]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b04      	cmp	r3, #4
 8005398:	d00c      	beq.n	80053b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539a:	4ba0      	ldr	r3, [pc, #640]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d112      	bne.n	80053cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053a6:	4b9d      	ldr	r3, [pc, #628]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b2:	d10b      	bne.n	80053cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b4:	4b99      	ldr	r3, [pc, #612]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d05b      	beq.n	8005478 <HAL_RCC_OscConfig+0x108>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d157      	bne.n	8005478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e23f      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d106      	bne.n	80053e4 <HAL_RCC_OscConfig+0x74>
 80053d6:	4b91      	ldr	r3, [pc, #580]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a90      	ldr	r2, [pc, #576]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e01d      	b.n	8005420 <HAL_RCC_OscConfig+0xb0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053ec:	d10c      	bne.n	8005408 <HAL_RCC_OscConfig+0x98>
 80053ee:	4b8b      	ldr	r3, [pc, #556]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a8a      	ldr	r2, [pc, #552]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b88      	ldr	r3, [pc, #544]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a87      	ldr	r2, [pc, #540]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e00b      	b.n	8005420 <HAL_RCC_OscConfig+0xb0>
 8005408:	4b84      	ldr	r3, [pc, #528]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a83      	ldr	r2, [pc, #524]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800540e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	4b81      	ldr	r3, [pc, #516]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a80      	ldr	r2, [pc, #512]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800541a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800541e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d013      	beq.n	8005450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005428:	f7fd fb2e 	bl	8002a88 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005430:	f7fd fb2a 	bl	8002a88 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	; 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e204      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005442:	4b76      	ldr	r3, [pc, #472]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0xc0>
 800544e:	e014      	b.n	800547a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005450:	f7fd fb1a 	bl	8002a88 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005458:	f7fd fb16 	bl	8002a88 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	; 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e1f0      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546a:	4b6c      	ldr	r3, [pc, #432]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0xe8>
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d063      	beq.n	800554e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005486:	4b65      	ldr	r3, [pc, #404]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005492:	4b62      	ldr	r3, [pc, #392]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800549a:	2b08      	cmp	r3, #8
 800549c:	d11c      	bne.n	80054d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800549e:	4b5f      	ldr	r3, [pc, #380]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d116      	bne.n	80054d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054aa:	4b5c      	ldr	r3, [pc, #368]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_RCC_OscConfig+0x152>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e1c4      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c2:	4b56      	ldr	r3, [pc, #344]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4952      	ldr	r1, [pc, #328]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d6:	e03a      	b.n	800554e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d020      	beq.n	8005522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e0:	4b4f      	ldr	r3, [pc, #316]	; (8005620 <HAL_RCC_OscConfig+0x2b0>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fd facf 	bl	8002a88 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ee:	f7fd facb 	bl	8002a88 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e1a5      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005500:	4b46      	ldr	r3, [pc, #280]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550c:	4b43      	ldr	r3, [pc, #268]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	4940      	ldr	r1, [pc, #256]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]
 8005520:	e015      	b.n	800554e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005522:	4b3f      	ldr	r3, [pc, #252]	; (8005620 <HAL_RCC_OscConfig+0x2b0>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fd faae 	bl	8002a88 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005530:	f7fd faaa 	bl	8002a88 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e184      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005542:	4b36      	ldr	r3, [pc, #216]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d030      	beq.n	80055bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d016      	beq.n	8005590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005562:	4b30      	ldr	r3, [pc, #192]	; (8005624 <HAL_RCC_OscConfig+0x2b4>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005568:	f7fd fa8e 	bl	8002a88 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005570:	f7fd fa8a 	bl	8002a88 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e164      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005582:	4b26      	ldr	r3, [pc, #152]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 8005584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0x200>
 800558e:	e015      	b.n	80055bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005590:	4b24      	ldr	r3, [pc, #144]	; (8005624 <HAL_RCC_OscConfig+0x2b4>)
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005596:	f7fd fa77 	bl	8002a88 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800559e:	f7fd fa73 	bl	8002a88 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e14d      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80055b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f0      	bne.n	800559e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80a0 	beq.w	800570a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10f      	bne.n	80055fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	4b0f      	ldr	r3, [pc, #60]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	4a0e      	ldr	r2, [pc, #56]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	60bb      	str	r3, [r7, #8]
 80055f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_RCC_OscConfig+0x2b8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d121      	bne.n	800564a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <HAL_RCC_OscConfig+0x2b8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a07      	ldr	r2, [pc, #28]	; (8005628 <HAL_RCC_OscConfig+0x2b8>)
 800560c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005612:	f7fd fa39 	bl	8002a88 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005618:	e011      	b.n	800563e <HAL_RCC_OscConfig+0x2ce>
 800561a:	bf00      	nop
 800561c:	40023800 	.word	0x40023800
 8005620:	42470000 	.word	0x42470000
 8005624:	42470e80 	.word	0x42470e80
 8005628:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562c:	f7fd fa2c 	bl	8002a88 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e106      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563e:	4b85      	ldr	r3, [pc, #532]	; (8005854 <HAL_RCC_OscConfig+0x4e4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d106      	bne.n	8005660 <HAL_RCC_OscConfig+0x2f0>
 8005652:	4b81      	ldr	r3, [pc, #516]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005656:	4a80      	ldr	r2, [pc, #512]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	6713      	str	r3, [r2, #112]	; 0x70
 800565e:	e01c      	b.n	800569a <HAL_RCC_OscConfig+0x32a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b05      	cmp	r3, #5
 8005666:	d10c      	bne.n	8005682 <HAL_RCC_OscConfig+0x312>
 8005668:	4b7b      	ldr	r3, [pc, #492]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	4a7a      	ldr	r2, [pc, #488]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 800566e:	f043 0304 	orr.w	r3, r3, #4
 8005672:	6713      	str	r3, [r2, #112]	; 0x70
 8005674:	4b78      	ldr	r3, [pc, #480]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	4a77      	ldr	r2, [pc, #476]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6713      	str	r3, [r2, #112]	; 0x70
 8005680:	e00b      	b.n	800569a <HAL_RCC_OscConfig+0x32a>
 8005682:	4b75      	ldr	r3, [pc, #468]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	4a74      	ldr	r2, [pc, #464]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	6713      	str	r3, [r2, #112]	; 0x70
 800568e:	4b72      	ldr	r3, [pc, #456]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	4a71      	ldr	r2, [pc, #452]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005694:	f023 0304 	bic.w	r3, r3, #4
 8005698:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d015      	beq.n	80056ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a2:	f7fd f9f1 	bl	8002a88 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a8:	e00a      	b.n	80056c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fd f9ed 	bl	8002a88 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e0c5      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c0:	4b65      	ldr	r3, [pc, #404]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ee      	beq.n	80056aa <HAL_RCC_OscConfig+0x33a>
 80056cc:	e014      	b.n	80056f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ce:	f7fd f9db 	bl	8002a88 <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d4:	e00a      	b.n	80056ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d6:	f7fd f9d7 	bl	8002a88 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e0af      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ec:	4b5a      	ldr	r3, [pc, #360]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1ee      	bne.n	80056d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d105      	bne.n	800570a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056fe:	4b56      	ldr	r3, [pc, #344]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	4a55      	ldr	r2, [pc, #340]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005708:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 809b 	beq.w	800584a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005714:	4b50      	ldr	r3, [pc, #320]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 030c 	and.w	r3, r3, #12
 800571c:	2b08      	cmp	r3, #8
 800571e:	d05c      	beq.n	80057da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d141      	bne.n	80057ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005728:	4b4c      	ldr	r3, [pc, #304]	; (800585c <HAL_RCC_OscConfig+0x4ec>)
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572e:	f7fd f9ab 	bl	8002a88 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005736:	f7fd f9a7 	bl	8002a88 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e081      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005748:	4b43      	ldr	r3, [pc, #268]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f0      	bne.n	8005736 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	019b      	lsls	r3, r3, #6
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	3b01      	subs	r3, #1
 800576e:	041b      	lsls	r3, r3, #16
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	061b      	lsls	r3, r3, #24
 8005778:	4937      	ldr	r1, [pc, #220]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 800577a:	4313      	orrs	r3, r2
 800577c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800577e:	4b37      	ldr	r3, [pc, #220]	; (800585c <HAL_RCC_OscConfig+0x4ec>)
 8005780:	2201      	movs	r2, #1
 8005782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005784:	f7fd f980 	bl	8002a88 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800578c:	f7fd f97c 	bl	8002a88 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e056      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579e:	4b2e      	ldr	r3, [pc, #184]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0f0      	beq.n	800578c <HAL_RCC_OscConfig+0x41c>
 80057aa:	e04e      	b.n	800584a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ac:	4b2b      	ldr	r3, [pc, #172]	; (800585c <HAL_RCC_OscConfig+0x4ec>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7fd f969 	bl	8002a88 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ba:	f7fd f965 	bl	8002a88 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e03f      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057cc:	4b22      	ldr	r3, [pc, #136]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1f0      	bne.n	80057ba <HAL_RCC_OscConfig+0x44a>
 80057d8:	e037      	b.n	800584a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e032      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057e6:	4b1c      	ldr	r3, [pc, #112]	; (8005858 <HAL_RCC_OscConfig+0x4e8>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d028      	beq.n	8005846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057fe:	429a      	cmp	r2, r3
 8005800:	d121      	bne.n	8005846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580c:	429a      	cmp	r2, r3
 800580e:	d11a      	bne.n	8005846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005816:	4013      	ands	r3, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800581c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800581e:	4293      	cmp	r3, r2
 8005820:	d111      	bne.n	8005846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	3b01      	subs	r3, #1
 8005830:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005832:	429a      	cmp	r2, r3
 8005834:	d107      	bne.n	8005846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d001      	beq.n	800584a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40007000 	.word	0x40007000
 8005858:	40023800 	.word	0x40023800
 800585c:	42470060 	.word	0x42470060

08005860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0cc      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005874:	4b68      	ldr	r3, [pc, #416]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d90c      	bls.n	800589c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005882:	4b65      	ldr	r3, [pc, #404]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b63      	ldr	r3, [pc, #396]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0b8      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d020      	beq.n	80058ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b4:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4a58      	ldr	r2, [pc, #352]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058cc:	4b53      	ldr	r3, [pc, #332]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4a52      	ldr	r2, [pc, #328]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d8:	4b50      	ldr	r3, [pc, #320]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	494d      	ldr	r1, [pc, #308]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d044      	beq.n	8005980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d107      	bne.n	800590e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fe:	4b47      	ldr	r3, [pc, #284]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d119      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e07f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d003      	beq.n	800591e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591a:	2b03      	cmp	r3, #3
 800591c:	d107      	bne.n	800592e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591e:	4b3f      	ldr	r3, [pc, #252]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e06f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592e:	4b3b      	ldr	r3, [pc, #236]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e067      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800593e:	4b37      	ldr	r3, [pc, #220]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f023 0203 	bic.w	r2, r3, #3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	4934      	ldr	r1, [pc, #208]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	4313      	orrs	r3, r2
 800594e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005950:	f7fd f89a 	bl	8002a88 <HAL_GetTick>
 8005954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005956:	e00a      	b.n	800596e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005958:	f7fd f896 	bl	8002a88 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	; 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e04f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596e:	4b2b      	ldr	r3, [pc, #172]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 020c 	and.w	r2, r3, #12
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	429a      	cmp	r2, r3
 800597e:	d1eb      	bne.n	8005958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005980:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d20c      	bcs.n	80059a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598e:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e032      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b4:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4916      	ldr	r1, [pc, #88]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	490e      	ldr	r1, [pc, #56]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059e6:	f000 f821 	bl	8005a2c <HAL_RCC_GetSysClockFreq>
 80059ea:	4602      	mov	r2, r0
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	490a      	ldr	r1, [pc, #40]	; (8005a20 <HAL_RCC_ClockConfig+0x1c0>)
 80059f8:	5ccb      	ldrb	r3, [r1, r3]
 80059fa:	fa22 f303 	lsr.w	r3, r2, r3
 80059fe:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 8005a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fc fffa 	bl	8002a00 <HAL_InitTick>

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40023c00 	.word	0x40023c00
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	08007c34 	.word	0x08007c34
 8005a24:	20000010 	.word	0x20000010
 8005a28:	20000014 	.word	0x20000014

08005a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	607b      	str	r3, [r7, #4]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a44:	4b67      	ldr	r3, [pc, #412]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d00d      	beq.n	8005a6c <HAL_RCC_GetSysClockFreq+0x40>
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	f200 80bd 	bhi.w	8005bd0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0x34>
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d003      	beq.n	8005a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a5e:	e0b7      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a60:	4b61      	ldr	r3, [pc, #388]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a62:	60bb      	str	r3, [r7, #8]
       break;
 8005a64:	e0b7      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a66:	4b61      	ldr	r3, [pc, #388]	; (8005bec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005a68:	60bb      	str	r3, [r7, #8]
      break;
 8005a6a:	e0b4      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a6c:	4b5d      	ldr	r3, [pc, #372]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a76:	4b5b      	ldr	r3, [pc, #364]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04d      	beq.n	8005b1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a82:	4b58      	ldr	r3, [pc, #352]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	099b      	lsrs	r3, r3, #6
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a92:	f04f 0100 	mov.w	r1, #0
 8005a96:	ea02 0800 	and.w	r8, r2, r0
 8005a9a:	ea03 0901 	and.w	r9, r3, r1
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	014b      	lsls	r3, r1, #5
 8005aac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ab0:	0142      	lsls	r2, r0, #5
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	ebb0 0008 	subs.w	r0, r0, r8
 8005aba:	eb61 0109 	sbc.w	r1, r1, r9
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	018b      	lsls	r3, r1, #6
 8005ac8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005acc:	0182      	lsls	r2, r0, #6
 8005ace:	1a12      	subs	r2, r2, r0
 8005ad0:	eb63 0301 	sbc.w	r3, r3, r1
 8005ad4:	f04f 0000 	mov.w	r0, #0
 8005ad8:	f04f 0100 	mov.w	r1, #0
 8005adc:	00d9      	lsls	r1, r3, #3
 8005ade:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ae2:	00d0      	lsls	r0, r2, #3
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	eb12 0208 	adds.w	r2, r2, r8
 8005aec:	eb43 0309 	adc.w	r3, r3, r9
 8005af0:	f04f 0000 	mov.w	r0, #0
 8005af4:	f04f 0100 	mov.w	r1, #0
 8005af8:	0259      	lsls	r1, r3, #9
 8005afa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005afe:	0250      	lsls	r0, r2, #9
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4610      	mov	r0, r2
 8005b06:	4619      	mov	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	f7fb f92c 	bl	8000d6c <__aeabi_uldivmod>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4613      	mov	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e04a      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b1e:	4b31      	ldr	r3, [pc, #196]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	099b      	lsrs	r3, r3, #6
 8005b24:	461a      	mov	r2, r3
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b2e:	f04f 0100 	mov.w	r1, #0
 8005b32:	ea02 0400 	and.w	r4, r2, r0
 8005b36:	ea03 0501 	and.w	r5, r3, r1
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	014b      	lsls	r3, r1, #5
 8005b48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b4c:	0142      	lsls	r2, r0, #5
 8005b4e:	4610      	mov	r0, r2
 8005b50:	4619      	mov	r1, r3
 8005b52:	1b00      	subs	r0, r0, r4
 8005b54:	eb61 0105 	sbc.w	r1, r1, r5
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	018b      	lsls	r3, r1, #6
 8005b62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b66:	0182      	lsls	r2, r0, #6
 8005b68:	1a12      	subs	r2, r2, r0
 8005b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b6e:	f04f 0000 	mov.w	r0, #0
 8005b72:	f04f 0100 	mov.w	r1, #0
 8005b76:	00d9      	lsls	r1, r3, #3
 8005b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b7c:	00d0      	lsls	r0, r2, #3
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	1912      	adds	r2, r2, r4
 8005b84:	eb45 0303 	adc.w	r3, r5, r3
 8005b88:	f04f 0000 	mov.w	r0, #0
 8005b8c:	f04f 0100 	mov.w	r1, #0
 8005b90:	0299      	lsls	r1, r3, #10
 8005b92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b96:	0290      	lsls	r0, r2, #10
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	f7fb f8e0 	bl	8000d6c <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	0c1b      	lsrs	r3, r3, #16
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	60bb      	str	r3, [r7, #8]
      break;
 8005bce:	e002      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bd2:	60bb      	str	r3, [r7, #8]
      break;
 8005bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005be2:	bf00      	nop
 8005be4:	40023800 	.word	0x40023800
 8005be8:	00f42400 	.word	0x00f42400
 8005bec:	007a1200 	.word	0x007a1200

08005bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf4:	4b03      	ldr	r3, [pc, #12]	; (8005c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000010 	.word	0x20000010

08005c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c0c:	f7ff fff0 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c10:	4602      	mov	r2, r0
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	0a9b      	lsrs	r3, r3, #10
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	4903      	ldr	r1, [pc, #12]	; (8005c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c1e:	5ccb      	ldrb	r3, [r1, r3]
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	08007c44 	.word	0x08007c44

08005c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c34:	f7ff ffdc 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	0b5b      	lsrs	r3, r3, #13
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	4903      	ldr	r1, [pc, #12]	; (8005c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c46:	5ccb      	ldrb	r3, [r1, r3]
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40023800 	.word	0x40023800
 8005c54:	08007c44 	.word	0x08007c44

08005c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e041      	b.n	8005cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fc fc96 	bl	80025b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f000 fcb2 	bl	8006600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d001      	beq.n	8005d10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e03c      	b.n	8005d8a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <HAL_TIM_Base_Start+0xa0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d018      	beq.n	8005d54 <HAL_TIM_Base_Start+0x5c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2a:	d013      	beq.n	8005d54 <HAL_TIM_Base_Start+0x5c>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1a      	ldr	r2, [pc, #104]	; (8005d9c <HAL_TIM_Base_Start+0xa4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00e      	beq.n	8005d54 <HAL_TIM_Base_Start+0x5c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a19      	ldr	r2, [pc, #100]	; (8005da0 <HAL_TIM_Base_Start+0xa8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_TIM_Base_Start+0x5c>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a17      	ldr	r2, [pc, #92]	; (8005da4 <HAL_TIM_Base_Start+0xac>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_TIM_Base_Start+0x5c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a16      	ldr	r2, [pc, #88]	; (8005da8 <HAL_TIM_Base_Start+0xb0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d111      	bne.n	8005d78 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b06      	cmp	r3, #6
 8005d64:	d010      	beq.n	8005d88 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0201 	orr.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d76:	e007      	b.n	8005d88 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000800 	.word	0x40000800
 8005da4:	40000c00 	.word	0x40000c00
 8005da8:	40014000 	.word	0x40014000

08005dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d001      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e044      	b.n	8005e4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1e      	ldr	r2, [pc, #120]	; (8005e5c <HAL_TIM_Base_Start_IT+0xb0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d018      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x6c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dee:	d013      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x6c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a1a      	ldr	r2, [pc, #104]	; (8005e60 <HAL_TIM_Base_Start_IT+0xb4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x6c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a19      	ldr	r2, [pc, #100]	; (8005e64 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x6c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a17      	ldr	r2, [pc, #92]	; (8005e68 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x6c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <HAL_TIM_Base_Start_IT+0xc0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d111      	bne.n	8005e3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b06      	cmp	r3, #6
 8005e28:	d010      	beq.n	8005e4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f042 0201 	orr.w	r2, r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3a:	e007      	b.n	8005e4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40000400 	.word	0x40000400
 8005e64:	40000800 	.word	0x40000800
 8005e68:	40000c00 	.word	0x40000c00
 8005e6c:	40014000 	.word	0x40014000

08005e70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e041      	b.n	8005f06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f839 	bl	8005f0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f000 fba6 	bl	8006600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d109      	bne.n	8005f48 <HAL_TIM_PWM_Start+0x24>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	bf14      	ite	ne
 8005f40:	2301      	movne	r3, #1
 8005f42:	2300      	moveq	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	e022      	b.n	8005f8e <HAL_TIM_PWM_Start+0x6a>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d109      	bne.n	8005f62 <HAL_TIM_PWM_Start+0x3e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	bf14      	ite	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	2300      	moveq	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	e015      	b.n	8005f8e <HAL_TIM_PWM_Start+0x6a>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d109      	bne.n	8005f7c <HAL_TIM_PWM_Start+0x58>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	bf14      	ite	ne
 8005f74:	2301      	movne	r3, #1
 8005f76:	2300      	moveq	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	e008      	b.n	8005f8e <HAL_TIM_PWM_Start+0x6a>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	bf14      	ite	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	2300      	moveq	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e068      	b.n	8006068 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d104      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0x82>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fa4:	e013      	b.n	8005fce <HAL_TIM_PWM_Start+0xaa>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d104      	bne.n	8005fb6 <HAL_TIM_PWM_Start+0x92>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb4:	e00b      	b.n	8005fce <HAL_TIM_PWM_Start+0xaa>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d104      	bne.n	8005fc6 <HAL_TIM_PWM_Start+0xa2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc4:	e003      	b.n	8005fce <HAL_TIM_PWM_Start+0xaa>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fdb8 	bl	8006b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a23      	ldr	r2, [pc, #140]	; (8006070 <HAL_TIM_PWM_Start+0x14c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d107      	bne.n	8005ff6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1d      	ldr	r2, [pc, #116]	; (8006070 <HAL_TIM_PWM_Start+0x14c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d018      	beq.n	8006032 <HAL_TIM_PWM_Start+0x10e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006008:	d013      	beq.n	8006032 <HAL_TIM_PWM_Start+0x10e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a19      	ldr	r2, [pc, #100]	; (8006074 <HAL_TIM_PWM_Start+0x150>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00e      	beq.n	8006032 <HAL_TIM_PWM_Start+0x10e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a17      	ldr	r2, [pc, #92]	; (8006078 <HAL_TIM_PWM_Start+0x154>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d009      	beq.n	8006032 <HAL_TIM_PWM_Start+0x10e>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a16      	ldr	r2, [pc, #88]	; (800607c <HAL_TIM_PWM_Start+0x158>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d004      	beq.n	8006032 <HAL_TIM_PWM_Start+0x10e>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a14      	ldr	r2, [pc, #80]	; (8006080 <HAL_TIM_PWM_Start+0x15c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d111      	bne.n	8006056 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b06      	cmp	r3, #6
 8006042:	d010      	beq.n	8006066 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006054:	e007      	b.n	8006066 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0201 	orr.w	r2, r2, #1
 8006064:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40010000 	.word	0x40010000
 8006074:	40000400 	.word	0x40000400
 8006078:	40000800 	.word	0x40000800
 800607c:	40000c00 	.word	0x40000c00
 8006080:	40014000 	.word	0x40014000

08006084 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e097      	b.n	80061c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d106      	bne.n	80060b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7fc fab5 	bl	800261c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2202      	movs	r2, #2
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c8:	f023 0307 	bic.w	r3, r3, #7
 80060cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4619      	mov	r1, r3
 80060d8:	4610      	mov	r0, r2
 80060da:	f000 fa91 	bl	8006600 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006106:	f023 0303 	bic.w	r3, r3, #3
 800610a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	4313      	orrs	r3, r2
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006124:	f023 030c 	bic.w	r3, r3, #12
 8006128:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006130:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	4313      	orrs	r3, r2
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	011a      	lsls	r2, r3, #4
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	031b      	lsls	r3, r3, #12
 8006154:	4313      	orrs	r3, r2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800616a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	4313      	orrs	r3, r2
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d110      	bne.n	8006222 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d102      	bne.n	800620c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006206:	7b7b      	ldrb	r3, [r7, #13]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d001      	beq.n	8006210 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e069      	b.n	80062e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006220:	e031      	b.n	8006286 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b04      	cmp	r3, #4
 8006226:	d110      	bne.n	800624a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d102      	bne.n	8006234 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800622e:	7b3b      	ldrb	r3, [r7, #12]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d001      	beq.n	8006238 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e055      	b.n	80062e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006248:	e01d      	b.n	8006286 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d108      	bne.n	8006262 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006250:	7bbb      	ldrb	r3, [r7, #14]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d105      	bne.n	8006262 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006256:	7b7b      	ldrb	r3, [r7, #13]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d102      	bne.n	8006262 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800625c:	7b3b      	ldrb	r3, [r7, #12]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d001      	beq.n	8006266 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e03e      	b.n	80062e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2202      	movs	r2, #2
 800626a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_TIM_Encoder_Start+0xc4>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b04      	cmp	r3, #4
 8006290:	d008      	beq.n	80062a4 <HAL_TIM_Encoder_Start+0xd4>
 8006292:	e00f      	b.n	80062b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2201      	movs	r2, #1
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fc55 	bl	8006b4c <TIM_CCxChannelCmd>
      break;
 80062a2:	e016      	b.n	80062d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2201      	movs	r2, #1
 80062aa:	2104      	movs	r1, #4
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fc4d 	bl	8006b4c <TIM_CCxChannelCmd>
      break;
 80062b2:	e00e      	b.n	80062d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2201      	movs	r2, #1
 80062ba:	2100      	movs	r1, #0
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fc45 	bl	8006b4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2201      	movs	r2, #1
 80062c8:	2104      	movs	r1, #4
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fc3e 	bl	8006b4c <TIM_CCxChannelCmd>
      break;
 80062d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006306:	2302      	movs	r3, #2
 8006308:	e0ae      	b.n	8006468 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b0c      	cmp	r3, #12
 8006316:	f200 809f 	bhi.w	8006458 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800631a:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	08006355 	.word	0x08006355
 8006324:	08006459 	.word	0x08006459
 8006328:	08006459 	.word	0x08006459
 800632c:	08006459 	.word	0x08006459
 8006330:	08006395 	.word	0x08006395
 8006334:	08006459 	.word	0x08006459
 8006338:	08006459 	.word	0x08006459
 800633c:	08006459 	.word	0x08006459
 8006340:	080063d7 	.word	0x080063d7
 8006344:	08006459 	.word	0x08006459
 8006348:	08006459 	.word	0x08006459
 800634c:	08006459 	.word	0x08006459
 8006350:	08006417 	.word	0x08006417
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 f9d0 	bl	8006700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0208 	orr.w	r2, r2, #8
 800636e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0204 	bic.w	r2, r2, #4
 800637e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6999      	ldr	r1, [r3, #24]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	619a      	str	r2, [r3, #24]
      break;
 8006392:	e064      	b.n	800645e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fa16 	bl	80067cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6999      	ldr	r1, [r3, #24]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	021a      	lsls	r2, r3, #8
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	619a      	str	r2, [r3, #24]
      break;
 80063d4:	e043      	b.n	800645e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fa61 	bl	80068a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0208 	orr.w	r2, r2, #8
 80063f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0204 	bic.w	r2, r2, #4
 8006400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69d9      	ldr	r1, [r3, #28]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	61da      	str	r2, [r3, #28]
      break;
 8006414:	e023      	b.n	800645e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	4618      	mov	r0, r3
 800641e:	f000 faab 	bl	8006978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69da      	ldr	r2, [r3, #28]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69da      	ldr	r2, [r3, #28]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69d9      	ldr	r1, [r3, #28]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	021a      	lsls	r2, r3, #8
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	61da      	str	r2, [r3, #28]
      break;
 8006456:	e002      	b.n	800645e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	75fb      	strb	r3, [r7, #23]
      break;
 800645c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_TIM_ConfigClockSource+0x1c>
 8006488:	2302      	movs	r3, #2
 800648a:	e0b4      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x186>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c4:	d03e      	beq.n	8006544 <HAL_TIM_ConfigClockSource+0xd4>
 80064c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ca:	f200 8087 	bhi.w	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d2:	f000 8086 	beq.w	80065e2 <HAL_TIM_ConfigClockSource+0x172>
 80064d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064da:	d87f      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b70      	cmp	r3, #112	; 0x70
 80064de:	d01a      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0xa6>
 80064e0:	2b70      	cmp	r3, #112	; 0x70
 80064e2:	d87b      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b60      	cmp	r3, #96	; 0x60
 80064e6:	d050      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x11a>
 80064e8:	2b60      	cmp	r3, #96	; 0x60
 80064ea:	d877      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064ec:	2b50      	cmp	r3, #80	; 0x50
 80064ee:	d03c      	beq.n	800656a <HAL_TIM_ConfigClockSource+0xfa>
 80064f0:	2b50      	cmp	r3, #80	; 0x50
 80064f2:	d873      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d058      	beq.n	80065aa <HAL_TIM_ConfigClockSource+0x13a>
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d86f      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064fc:	2b30      	cmp	r3, #48	; 0x30
 80064fe:	d064      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006500:	2b30      	cmp	r3, #48	; 0x30
 8006502:	d86b      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 8006504:	2b20      	cmp	r3, #32
 8006506:	d060      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006508:	2b20      	cmp	r3, #32
 800650a:	d867      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05c      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006510:	2b10      	cmp	r3, #16
 8006512:	d05a      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006514:	e062      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	6899      	ldr	r1, [r3, #8]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f000 faf1 	bl	8006b0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	609a      	str	r2, [r3, #8]
      break;
 8006542:	e04f      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	6899      	ldr	r1, [r3, #8]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f000 fada 	bl	8006b0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006566:	609a      	str	r2, [r3, #8]
      break;
 8006568:	e03c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6859      	ldr	r1, [r3, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	461a      	mov	r2, r3
 8006578:	f000 fa4e 	bl	8006a18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2150      	movs	r1, #80	; 0x50
 8006582:	4618      	mov	r0, r3
 8006584:	f000 faa7 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 8006588:	e02c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6859      	ldr	r1, [r3, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	461a      	mov	r2, r3
 8006598:	f000 fa6d 	bl	8006a76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2160      	movs	r1, #96	; 0x60
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fa97 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 80065a8:	e01c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6859      	ldr	r1, [r3, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f000 fa2e 	bl	8006a18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2140      	movs	r1, #64	; 0x40
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fa87 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 80065c8:	e00c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f000 fa7e 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 80065da:	e003      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
      break;
 80065e0:	e000      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a34      	ldr	r2, [pc, #208]	; (80066e4 <TIM_Base_SetConfig+0xe4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00f      	beq.n	8006638 <TIM_Base_SetConfig+0x38>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800661e:	d00b      	beq.n	8006638 <TIM_Base_SetConfig+0x38>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a31      	ldr	r2, [pc, #196]	; (80066e8 <TIM_Base_SetConfig+0xe8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d007      	beq.n	8006638 <TIM_Base_SetConfig+0x38>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a30      	ldr	r2, [pc, #192]	; (80066ec <TIM_Base_SetConfig+0xec>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d003      	beq.n	8006638 <TIM_Base_SetConfig+0x38>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a2f      	ldr	r2, [pc, #188]	; (80066f0 <TIM_Base_SetConfig+0xf0>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d108      	bne.n	800664a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a25      	ldr	r2, [pc, #148]	; (80066e4 <TIM_Base_SetConfig+0xe4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01b      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006658:	d017      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a22      	ldr	r2, [pc, #136]	; (80066e8 <TIM_Base_SetConfig+0xe8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d013      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a21      	ldr	r2, [pc, #132]	; (80066ec <TIM_Base_SetConfig+0xec>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a20      	ldr	r2, [pc, #128]	; (80066f0 <TIM_Base_SetConfig+0xf0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1f      	ldr	r2, [pc, #124]	; (80066f4 <TIM_Base_SetConfig+0xf4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a1e      	ldr	r2, [pc, #120]	; (80066f8 <TIM_Base_SetConfig+0xf8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a1d      	ldr	r2, [pc, #116]	; (80066fc <TIM_Base_SetConfig+0xfc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d108      	bne.n	800669c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a08      	ldr	r2, [pc, #32]	; (80066e4 <TIM_Base_SetConfig+0xe4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d103      	bne.n	80066d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	615a      	str	r2, [r3, #20]
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800

08006700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f023 0201 	bic.w	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f023 0302 	bic.w	r3, r3, #2
 8006748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a1c      	ldr	r2, [pc, #112]	; (80067c8 <TIM_OC1_SetConfig+0xc8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d10c      	bne.n	8006776 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0308 	bic.w	r3, r3, #8
 8006762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f023 0304 	bic.w	r3, r3, #4
 8006774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <TIM_OC1_SetConfig+0xc8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d111      	bne.n	80067a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800678c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	621a      	str	r2, [r3, #32]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	40010000 	.word	0x40010000

080067cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	f023 0210 	bic.w	r2, r3, #16
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0320 	bic.w	r3, r3, #32
 8006816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a1e      	ldr	r2, [pc, #120]	; (80068a0 <TIM_OC2_SetConfig+0xd4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d10d      	bne.n	8006848 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006846:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <TIM_OC2_SetConfig+0xd4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d113      	bne.n	8006878 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800685e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40010000 	.word	0x40010000

080068a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <TIM_OC3_SetConfig+0xd0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10d      	bne.n	800691e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800691c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a14      	ldr	r2, [pc, #80]	; (8006974 <TIM_OC3_SetConfig+0xd0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d113      	bne.n	800694e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800692c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	621a      	str	r2, [r3, #32]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40010000 	.word	0x40010000

08006978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	031b      	lsls	r3, r3, #12
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a10      	ldr	r2, [pc, #64]	; (8006a14 <TIM_OC4_SetConfig+0x9c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d109      	bne.n	80069ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	019b      	lsls	r3, r3, #6
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	621a      	str	r2, [r3, #32]
}
 8006a06:	bf00      	nop
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40010000 	.word	0x40010000

08006a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 030a 	bic.w	r3, r3, #10
 8006a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	f023 0210 	bic.w	r2, r3, #16
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	031b      	lsls	r3, r3, #12
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f043 0307 	orr.w	r3, r3, #7
 8006af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]
}
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	021a      	lsls	r2, r3, #8
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	bf00      	nop
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f003 031f 	and.w	r3, r3, #31
 8006b5e:	2201      	movs	r2, #1
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1a      	ldr	r2, [r3, #32]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	401a      	ands	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1a      	ldr	r2, [r3, #32]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	fa01 f303 	lsl.w	r3, r1, r3
 8006b84:	431a      	orrs	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	621a      	str	r2, [r3, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e050      	b.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1c      	ldr	r2, [pc, #112]	; (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfc:	d013      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a18      	ldr	r2, [pc, #96]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a16      	ldr	r2, [pc, #88]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a15      	ldr	r2, [pc, #84]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a13      	ldr	r2, [pc, #76]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d10c      	bne.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40014000 	.word	0x40014000

08006c74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e03d      	b.n	8006d0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e03f      	b.n	8006daa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d106      	bne.n	8006d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fb fcee 	bl	8002720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2224      	movs	r2, #36	; 0x24
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fc7b 	bl	8007658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691a      	ldr	r2, [r3, #16]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695a      	ldr	r2, [r3, #20]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b0ba      	sub	sp, #232	; 0xe8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10f      	bne.n	8006e1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d009      	beq.n	8006e1a <HAL_UART_IRQHandler+0x66>
 8006e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fb65 	bl	80074e2 <UART_Receive_IT>
      return;
 8006e18:	e256      	b.n	80072c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 80de 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x22c>
 8006e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 80d1 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00b      	beq.n	8006e62 <HAL_UART_IRQHandler+0xae>
 8006e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	f043 0201 	orr.w	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <HAL_UART_IRQHandler+0xd2>
 8006e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d005      	beq.n	8006e86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	f043 0202 	orr.w	r2, r3, #2
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00b      	beq.n	8006eaa <HAL_UART_IRQHandler+0xf6>
 8006e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f043 0204 	orr.w	r2, r3, #4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d011      	beq.n	8006eda <HAL_UART_IRQHandler+0x126>
 8006eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d105      	bne.n	8006ece <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f043 0208 	orr.w	r2, r3, #8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 81ed 	beq.w	80072be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <HAL_UART_IRQHandler+0x14e>
 8006ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 faf0 	bl	80074e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0c:	2b40      	cmp	r3, #64	; 0x40
 8006f0e:	bf0c      	ite	eq
 8006f10:	2301      	moveq	r3, #1
 8006f12:	2300      	movne	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d103      	bne.n	8006f2e <HAL_UART_IRQHandler+0x17a>
 8006f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d04f      	beq.n	8006fce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f9f8 	bl	8007324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	d141      	bne.n	8006fc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3314      	adds	r3, #20
 8006f48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3314      	adds	r3, #20
 8006f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1d9      	bne.n	8006f42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d013      	beq.n	8006fbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	4a7d      	ldr	r2, [pc, #500]	; (8007190 <HAL_UART_IRQHandler+0x3dc>)
 8006f9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fb ffac 	bl	8002f00 <HAL_DMA_Abort_IT>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d016      	beq.n	8006fdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fbc:	e00e      	b.n	8006fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f99a 	bl	80072f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc4:	e00a      	b.n	8006fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f996 	bl	80072f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fcc:	e006      	b.n	8006fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f992 	bl	80072f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006fda:	e170      	b.n	80072be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fdc:	bf00      	nop
    return;
 8006fde:	e16e      	b.n	80072be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	f040 814a 	bne.w	800727e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fee:	f003 0310 	and.w	r3, r3, #16
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8143 	beq.w	800727e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 813c 	beq.w	800727e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007006:	2300      	movs	r3, #0
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	f040 80b4 	bne.w	8007194 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007038:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8140 	beq.w	80072c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800704a:	429a      	cmp	r2, r3
 800704c:	f080 8139 	bcs.w	80072c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007056:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007062:	f000 8088 	beq.w	8007176 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800707c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	330c      	adds	r3, #12
 800708e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007092:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800709e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1d9      	bne.n	8007066 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3314      	adds	r3, #20
 80070b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070c4:	f023 0301 	bic.w	r3, r3, #1
 80070c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3314      	adds	r3, #20
 80070d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e1      	bne.n	80070b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3314      	adds	r3, #20
 80070f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3314      	adds	r3, #20
 800710e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007112:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007114:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007118:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e3      	bne.n	80070ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007146:	f023 0310 	bic.w	r3, r3, #16
 800714a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	330c      	adds	r3, #12
 8007154:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007158:	65ba      	str	r2, [r7, #88]	; 0x58
 800715a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800715e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e3      	bne.n	8007134 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	4618      	mov	r0, r3
 8007172:	f7fb fe55 	bl	8002e20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800717e:	b29b      	uxth	r3, r3
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	b29b      	uxth	r3, r3
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f8c0 	bl	800730c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800718c:	e099      	b.n	80072c2 <HAL_UART_IRQHandler+0x50e>
 800718e:	bf00      	nop
 8007190:	080073eb 	.word	0x080073eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800719c:	b29b      	uxth	r3, r3
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 808b 	beq.w	80072c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80071b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 8086 	beq.w	80072c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	330c      	adds	r3, #12
 80071c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	330c      	adds	r3, #12
 80071da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80071de:	647a      	str	r2, [r7, #68]	; 0x44
 80071e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e3      	bne.n	80071ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3314      	adds	r3, #20
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	623b      	str	r3, [r7, #32]
   return(result);
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	f023 0301 	bic.w	r3, r3, #1
 8007208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3314      	adds	r3, #20
 8007212:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007216:	633a      	str	r2, [r7, #48]	; 0x30
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800721c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e3      	bne.n	80071f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	330c      	adds	r3, #12
 800723e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	60fb      	str	r3, [r7, #12]
   return(result);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 0310 	bic.w	r3, r3, #16
 800724e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	330c      	adds	r3, #12
 8007258:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800725c:	61fa      	str	r2, [r7, #28]
 800725e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	69b9      	ldr	r1, [r7, #24]
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	617b      	str	r3, [r7, #20]
   return(result);
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e3      	bne.n	8007238 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f848 	bl	800730c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800727c:	e023      	b.n	80072c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <HAL_UART_IRQHandler+0x4ea>
 800728a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f8bb 	bl	8007412 <UART_Transmit_IT>
    return;
 800729c:	e014      	b.n	80072c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800729e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00e      	beq.n	80072c8 <HAL_UART_IRQHandler+0x514>
 80072aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d008      	beq.n	80072c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8fb 	bl	80074b2 <UART_EndTransmit_IT>
    return;
 80072bc:	e004      	b.n	80072c8 <HAL_UART_IRQHandler+0x514>
    return;
 80072be:	bf00      	nop
 80072c0:	e002      	b.n	80072c8 <HAL_UART_IRQHandler+0x514>
      return;
 80072c2:	bf00      	nop
 80072c4:	e000      	b.n	80072c8 <HAL_UART_IRQHandler+0x514>
      return;
 80072c6:	bf00      	nop
  }
}
 80072c8:	37e8      	adds	r7, #232	; 0xe8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop

080072d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b095      	sub	sp, #84	; 0x54
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	330c      	adds	r3, #12
 8007332:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330c      	adds	r3, #12
 800734a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800734c:	643a      	str	r2, [r7, #64]	; 0x40
 800734e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e5      	bne.n	800732c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3314      	adds	r3, #20
 8007366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	f023 0301 	bic.w	r3, r3, #1
 8007376:	64bb      	str	r3, [r7, #72]	; 0x48
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3314      	adds	r3, #20
 800737e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007380:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e5      	bne.n	8007360 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007398:	2b01      	cmp	r3, #1
 800739a:	d119      	bne.n	80073d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	330c      	adds	r3, #12
 80073a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f023 0310 	bic.w	r3, r3, #16
 80073b2:	647b      	str	r3, [r7, #68]	; 0x44
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073bc:	61ba      	str	r2, [r7, #24]
 80073be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6979      	ldr	r1, [r7, #20]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	613b      	str	r3, [r7, #16]
   return(result);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e5      	bne.n	800739c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2220      	movs	r2, #32
 80073d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073de:	bf00      	nop
 80073e0:	3754      	adds	r7, #84	; 0x54
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff ff77 	bl	80072f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800740a:	bf00      	nop
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007412:	b480      	push	{r7}
 8007414:	b085      	sub	sp, #20
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b21      	cmp	r3, #33	; 0x21
 8007424:	d13e      	bne.n	80074a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800742e:	d114      	bne.n	800745a <UART_Transmit_IT+0x48>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d110      	bne.n	800745a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800744c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	1c9a      	adds	r2, r3, #2
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	621a      	str	r2, [r3, #32]
 8007458:	e008      	b.n	800746c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	1c59      	adds	r1, r3, #1
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	6211      	str	r1, [r2, #32]
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007470:	b29b      	uxth	r3, r3
 8007472:	3b01      	subs	r3, #1
 8007474:	b29b      	uxth	r3, r3
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	4619      	mov	r1, r3
 800747a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10f      	bne.n	80074a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800748e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800749e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	e000      	b.n	80074a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074a4:	2302      	movs	r3, #2
  }
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff fefc 	bl	80072d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b08c      	sub	sp, #48	; 0x30
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b22      	cmp	r3, #34	; 0x22
 80074f4:	f040 80ab 	bne.w	800764e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007500:	d117      	bne.n	8007532 <UART_Receive_IT+0x50>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d113      	bne.n	8007532 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800750a:	2300      	movs	r3, #0
 800750c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007512:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	b29b      	uxth	r3, r3
 800751c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007520:	b29a      	uxth	r2, r3
 8007522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	1c9a      	adds	r2, r3, #2
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	629a      	str	r2, [r3, #40]	; 0x28
 8007530:	e026      	b.n	8007580 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007538:	2300      	movs	r3, #0
 800753a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007544:	d007      	beq.n	8007556 <UART_Receive_IT+0x74>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <UART_Receive_IT+0x82>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	b2da      	uxtb	r2, r3
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	701a      	strb	r2, [r3, #0]
 8007562:	e008      	b.n	8007576 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007570:	b2da      	uxtb	r2, r3
 8007572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007574:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29b      	uxth	r3, r3
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	4619      	mov	r1, r3
 800758e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007590:	2b00      	cmp	r3, #0
 8007592:	d15a      	bne.n	800764a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0220 	bic.w	r2, r2, #32
 80075a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	695a      	ldr	r2, [r3, #20]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0201 	bic.w	r2, r2, #1
 80075c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d135      	bne.n	8007640 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	330c      	adds	r3, #12
 80075e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	613b      	str	r3, [r7, #16]
   return(result);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f023 0310 	bic.w	r3, r3, #16
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	330c      	adds	r3, #12
 80075f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fa:	623a      	str	r2, [r7, #32]
 80075fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	69f9      	ldr	r1, [r7, #28]
 8007600:	6a3a      	ldr	r2, [r7, #32]
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	61bb      	str	r3, [r7, #24]
   return(result);
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e5      	bne.n	80075da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0310 	and.w	r3, r3, #16
 8007618:	2b10      	cmp	r3, #16
 800761a:	d10a      	bne.n	8007632 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7ff fe67 	bl	800730c <HAL_UARTEx_RxEventCallback>
 800763e:	e002      	b.n	8007646 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff fe4f 	bl	80072e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	e002      	b.n	8007650 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	e000      	b.n	8007650 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800764e:	2302      	movs	r3, #2
  }
}
 8007650:	4618      	mov	r0, r3
 8007652:	3730      	adds	r7, #48	; 0x30
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	b09f      	sub	sp, #124	; 0x7c
 800765e:	af00      	add	r7, sp, #0
 8007660:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800766c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800766e:	68d9      	ldr	r1, [r3, #12]
 8007670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	ea40 0301 	orr.w	r3, r0, r1
 8007678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800767a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	431a      	orrs	r2, r3
 8007684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	431a      	orrs	r2, r3
 800768a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	4313      	orrs	r3, r2
 8007690:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800769c:	f021 010c 	bic.w	r1, r1, #12
 80076a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076a6:	430b      	orrs	r3, r1
 80076a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b6:	6999      	ldr	r1, [r3, #24]
 80076b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	ea40 0301 	orr.w	r3, r0, r1
 80076c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4bc5      	ldr	r3, [pc, #788]	; (80079dc <UART_SetConfig+0x384>)
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d004      	beq.n	80076d6 <UART_SetConfig+0x7e>
 80076cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	4bc3      	ldr	r3, [pc, #780]	; (80079e0 <UART_SetConfig+0x388>)
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d103      	bne.n	80076de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076d6:	f7fe faab 	bl	8005c30 <HAL_RCC_GetPCLK2Freq>
 80076da:	6778      	str	r0, [r7, #116]	; 0x74
 80076dc:	e002      	b.n	80076e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076de:	f7fe fa93 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 80076e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ec:	f040 80b6 	bne.w	800785c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f2:	461c      	mov	r4, r3
 80076f4:	f04f 0500 	mov.w	r5, #0
 80076f8:	4622      	mov	r2, r4
 80076fa:	462b      	mov	r3, r5
 80076fc:	1891      	adds	r1, r2, r2
 80076fe:	6439      	str	r1, [r7, #64]	; 0x40
 8007700:	415b      	adcs	r3, r3
 8007702:	647b      	str	r3, [r7, #68]	; 0x44
 8007704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007708:	1912      	adds	r2, r2, r4
 800770a:	eb45 0303 	adc.w	r3, r5, r3
 800770e:	f04f 0000 	mov.w	r0, #0
 8007712:	f04f 0100 	mov.w	r1, #0
 8007716:	00d9      	lsls	r1, r3, #3
 8007718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800771c:	00d0      	lsls	r0, r2, #3
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	1911      	adds	r1, r2, r4
 8007724:	6639      	str	r1, [r7, #96]	; 0x60
 8007726:	416b      	adcs	r3, r5
 8007728:	667b      	str	r3, [r7, #100]	; 0x64
 800772a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	461a      	mov	r2, r3
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	1891      	adds	r1, r2, r2
 8007736:	63b9      	str	r1, [r7, #56]	; 0x38
 8007738:	415b      	adcs	r3, r3
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800773c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007740:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007744:	f7f9 fb12 	bl	8000d6c <__aeabi_uldivmod>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4ba5      	ldr	r3, [pc, #660]	; (80079e4 <UART_SetConfig+0x38c>)
 800774e:	fba3 2302 	umull	r2, r3, r3, r2
 8007752:	095b      	lsrs	r3, r3, #5
 8007754:	011e      	lsls	r6, r3, #4
 8007756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007758:	461c      	mov	r4, r3
 800775a:	f04f 0500 	mov.w	r5, #0
 800775e:	4622      	mov	r2, r4
 8007760:	462b      	mov	r3, r5
 8007762:	1891      	adds	r1, r2, r2
 8007764:	6339      	str	r1, [r7, #48]	; 0x30
 8007766:	415b      	adcs	r3, r3
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
 800776a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800776e:	1912      	adds	r2, r2, r4
 8007770:	eb45 0303 	adc.w	r3, r5, r3
 8007774:	f04f 0000 	mov.w	r0, #0
 8007778:	f04f 0100 	mov.w	r1, #0
 800777c:	00d9      	lsls	r1, r3, #3
 800777e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007782:	00d0      	lsls	r0, r2, #3
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	1911      	adds	r1, r2, r4
 800778a:	65b9      	str	r1, [r7, #88]	; 0x58
 800778c:	416b      	adcs	r3, r5
 800778e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	461a      	mov	r2, r3
 8007796:	f04f 0300 	mov.w	r3, #0
 800779a:	1891      	adds	r1, r2, r2
 800779c:	62b9      	str	r1, [r7, #40]	; 0x28
 800779e:	415b      	adcs	r3, r3
 80077a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80077aa:	f7f9 fadf 	bl	8000d6c <__aeabi_uldivmod>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4b8c      	ldr	r3, [pc, #560]	; (80079e4 <UART_SetConfig+0x38c>)
 80077b4:	fba3 1302 	umull	r1, r3, r3, r2
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	2164      	movs	r1, #100	; 0x64
 80077bc:	fb01 f303 	mul.w	r3, r1, r3
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	3332      	adds	r3, #50	; 0x32
 80077c6:	4a87      	ldr	r2, [pc, #540]	; (80079e4 <UART_SetConfig+0x38c>)
 80077c8:	fba2 2303 	umull	r2, r3, r2, r3
 80077cc:	095b      	lsrs	r3, r3, #5
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077d4:	441e      	add	r6, r3
 80077d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077d8:	4618      	mov	r0, r3
 80077da:	f04f 0100 	mov.w	r1, #0
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	1894      	adds	r4, r2, r2
 80077e4:	623c      	str	r4, [r7, #32]
 80077e6:	415b      	adcs	r3, r3
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
 80077ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077ee:	1812      	adds	r2, r2, r0
 80077f0:	eb41 0303 	adc.w	r3, r1, r3
 80077f4:	f04f 0400 	mov.w	r4, #0
 80077f8:	f04f 0500 	mov.w	r5, #0
 80077fc:	00dd      	lsls	r5, r3, #3
 80077fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007802:	00d4      	lsls	r4, r2, #3
 8007804:	4622      	mov	r2, r4
 8007806:	462b      	mov	r3, r5
 8007808:	1814      	adds	r4, r2, r0
 800780a:	653c      	str	r4, [r7, #80]	; 0x50
 800780c:	414b      	adcs	r3, r1
 800780e:	657b      	str	r3, [r7, #84]	; 0x54
 8007810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	461a      	mov	r2, r3
 8007816:	f04f 0300 	mov.w	r3, #0
 800781a:	1891      	adds	r1, r2, r2
 800781c:	61b9      	str	r1, [r7, #24]
 800781e:	415b      	adcs	r3, r3
 8007820:	61fb      	str	r3, [r7, #28]
 8007822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007826:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800782a:	f7f9 fa9f 	bl	8000d6c <__aeabi_uldivmod>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4b6c      	ldr	r3, [pc, #432]	; (80079e4 <UART_SetConfig+0x38c>)
 8007834:	fba3 1302 	umull	r1, r3, r3, r2
 8007838:	095b      	lsrs	r3, r3, #5
 800783a:	2164      	movs	r1, #100	; 0x64
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	3332      	adds	r3, #50	; 0x32
 8007846:	4a67      	ldr	r2, [pc, #412]	; (80079e4 <UART_SetConfig+0x38c>)
 8007848:	fba2 2303 	umull	r2, r3, r2, r3
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	f003 0207 	and.w	r2, r3, #7
 8007852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4432      	add	r2, r6
 8007858:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800785a:	e0b9      	b.n	80079d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800785c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800785e:	461c      	mov	r4, r3
 8007860:	f04f 0500 	mov.w	r5, #0
 8007864:	4622      	mov	r2, r4
 8007866:	462b      	mov	r3, r5
 8007868:	1891      	adds	r1, r2, r2
 800786a:	6139      	str	r1, [r7, #16]
 800786c:	415b      	adcs	r3, r3
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007874:	1912      	adds	r2, r2, r4
 8007876:	eb45 0303 	adc.w	r3, r5, r3
 800787a:	f04f 0000 	mov.w	r0, #0
 800787e:	f04f 0100 	mov.w	r1, #0
 8007882:	00d9      	lsls	r1, r3, #3
 8007884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007888:	00d0      	lsls	r0, r2, #3
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	eb12 0804 	adds.w	r8, r2, r4
 8007892:	eb43 0905 	adc.w	r9, r3, r5
 8007896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	4618      	mov	r0, r3
 800789c:	f04f 0100 	mov.w	r1, #0
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	008b      	lsls	r3, r1, #2
 80078aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80078ae:	0082      	lsls	r2, r0, #2
 80078b0:	4640      	mov	r0, r8
 80078b2:	4649      	mov	r1, r9
 80078b4:	f7f9 fa5a 	bl	8000d6c <__aeabi_uldivmod>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4b49      	ldr	r3, [pc, #292]	; (80079e4 <UART_SetConfig+0x38c>)
 80078be:	fba3 2302 	umull	r2, r3, r3, r2
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	011e      	lsls	r6, r3, #4
 80078c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c8:	4618      	mov	r0, r3
 80078ca:	f04f 0100 	mov.w	r1, #0
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	1894      	adds	r4, r2, r2
 80078d4:	60bc      	str	r4, [r7, #8]
 80078d6:	415b      	adcs	r3, r3
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078de:	1812      	adds	r2, r2, r0
 80078e0:	eb41 0303 	adc.w	r3, r1, r3
 80078e4:	f04f 0400 	mov.w	r4, #0
 80078e8:	f04f 0500 	mov.w	r5, #0
 80078ec:	00dd      	lsls	r5, r3, #3
 80078ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078f2:	00d4      	lsls	r4, r2, #3
 80078f4:	4622      	mov	r2, r4
 80078f6:	462b      	mov	r3, r5
 80078f8:	1814      	adds	r4, r2, r0
 80078fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80078fc:	414b      	adcs	r3, r1
 80078fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	4618      	mov	r0, r3
 8007906:	f04f 0100 	mov.w	r1, #0
 800790a:	f04f 0200 	mov.w	r2, #0
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	008b      	lsls	r3, r1, #2
 8007914:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007918:	0082      	lsls	r2, r0, #2
 800791a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800791e:	f7f9 fa25 	bl	8000d6c <__aeabi_uldivmod>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4b2f      	ldr	r3, [pc, #188]	; (80079e4 <UART_SetConfig+0x38c>)
 8007928:	fba3 1302 	umull	r1, r3, r3, r2
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	2164      	movs	r1, #100	; 0x64
 8007930:	fb01 f303 	mul.w	r3, r1, r3
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	3332      	adds	r3, #50	; 0x32
 800793a:	4a2a      	ldr	r2, [pc, #168]	; (80079e4 <UART_SetConfig+0x38c>)
 800793c:	fba2 2303 	umull	r2, r3, r2, r3
 8007940:	095b      	lsrs	r3, r3, #5
 8007942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007946:	441e      	add	r6, r3
 8007948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800794a:	4618      	mov	r0, r3
 800794c:	f04f 0100 	mov.w	r1, #0
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	1894      	adds	r4, r2, r2
 8007956:	603c      	str	r4, [r7, #0]
 8007958:	415b      	adcs	r3, r3
 800795a:	607b      	str	r3, [r7, #4]
 800795c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007960:	1812      	adds	r2, r2, r0
 8007962:	eb41 0303 	adc.w	r3, r1, r3
 8007966:	f04f 0400 	mov.w	r4, #0
 800796a:	f04f 0500 	mov.w	r5, #0
 800796e:	00dd      	lsls	r5, r3, #3
 8007970:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007974:	00d4      	lsls	r4, r2, #3
 8007976:	4622      	mov	r2, r4
 8007978:	462b      	mov	r3, r5
 800797a:	eb12 0a00 	adds.w	sl, r2, r0
 800797e:	eb43 0b01 	adc.w	fp, r3, r1
 8007982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	4618      	mov	r0, r3
 8007988:	f04f 0100 	mov.w	r1, #0
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	f04f 0300 	mov.w	r3, #0
 8007994:	008b      	lsls	r3, r1, #2
 8007996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800799a:	0082      	lsls	r2, r0, #2
 800799c:	4650      	mov	r0, sl
 800799e:	4659      	mov	r1, fp
 80079a0:	f7f9 f9e4 	bl	8000d6c <__aeabi_uldivmod>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <UART_SetConfig+0x38c>)
 80079aa:	fba3 1302 	umull	r1, r3, r3, r2
 80079ae:	095b      	lsrs	r3, r3, #5
 80079b0:	2164      	movs	r1, #100	; 0x64
 80079b2:	fb01 f303 	mul.w	r3, r1, r3
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	011b      	lsls	r3, r3, #4
 80079ba:	3332      	adds	r3, #50	; 0x32
 80079bc:	4a09      	ldr	r2, [pc, #36]	; (80079e4 <UART_SetConfig+0x38c>)
 80079be:	fba2 2303 	umull	r2, r3, r2, r3
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	f003 020f 	and.w	r2, r3, #15
 80079c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4432      	add	r2, r6
 80079ce:	609a      	str	r2, [r3, #8]
}
 80079d0:	bf00      	nop
 80079d2:	377c      	adds	r7, #124	; 0x7c
 80079d4:	46bd      	mov	sp, r7
 80079d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079da:	bf00      	nop
 80079dc:	40011000 	.word	0x40011000
 80079e0:	40011400 	.word	0x40011400
 80079e4:	51eb851f 	.word	0x51eb851f

080079e8 <__errno>:
 80079e8:	4b01      	ldr	r3, [pc, #4]	; (80079f0 <__errno+0x8>)
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	2000001c 	.word	0x2000001c

080079f4 <__libc_init_array>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	4d0d      	ldr	r5, [pc, #52]	; (8007a2c <__libc_init_array+0x38>)
 80079f8:	4c0d      	ldr	r4, [pc, #52]	; (8007a30 <__libc_init_array+0x3c>)
 80079fa:	1b64      	subs	r4, r4, r5
 80079fc:	10a4      	asrs	r4, r4, #2
 80079fe:	2600      	movs	r6, #0
 8007a00:	42a6      	cmp	r6, r4
 8007a02:	d109      	bne.n	8007a18 <__libc_init_array+0x24>
 8007a04:	4d0b      	ldr	r5, [pc, #44]	; (8007a34 <__libc_init_array+0x40>)
 8007a06:	4c0c      	ldr	r4, [pc, #48]	; (8007a38 <__libc_init_array+0x44>)
 8007a08:	f000 f908 	bl	8007c1c <_init>
 8007a0c:	1b64      	subs	r4, r4, r5
 8007a0e:	10a4      	asrs	r4, r4, #2
 8007a10:	2600      	movs	r6, #0
 8007a12:	42a6      	cmp	r6, r4
 8007a14:	d105      	bne.n	8007a22 <__libc_init_array+0x2e>
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
 8007a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1c:	4798      	blx	r3
 8007a1e:	3601      	adds	r6, #1
 8007a20:	e7ee      	b.n	8007a00 <__libc_init_array+0xc>
 8007a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a26:	4798      	blx	r3
 8007a28:	3601      	adds	r6, #1
 8007a2a:	e7f2      	b.n	8007a12 <__libc_init_array+0x1e>
 8007a2c:	08007c5c 	.word	0x08007c5c
 8007a30:	08007c5c 	.word	0x08007c5c
 8007a34:	08007c5c 	.word	0x08007c5c
 8007a38:	08007c60 	.word	0x08007c60

08007a3c <memset>:
 8007a3c:	4402      	add	r2, r0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d100      	bne.n	8007a46 <memset+0xa>
 8007a44:	4770      	bx	lr
 8007a46:	f803 1b01 	strb.w	r1, [r3], #1
 8007a4a:	e7f9      	b.n	8007a40 <memset+0x4>

08007a4c <sqrt>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	ed2d 8b02 	vpush	{d8}
 8007a52:	ec55 4b10 	vmov	r4, r5, d0
 8007a56:	f000 f82d 	bl	8007ab4 <__ieee754_sqrt>
 8007a5a:	4b15      	ldr	r3, [pc, #84]	; (8007ab0 <sqrt+0x64>)
 8007a5c:	eeb0 8a40 	vmov.f32	s16, s0
 8007a60:	eef0 8a60 	vmov.f32	s17, s1
 8007a64:	f993 3000 	ldrsb.w	r3, [r3]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	d019      	beq.n	8007aa0 <sqrt+0x54>
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	462b      	mov	r3, r5
 8007a70:	4620      	mov	r0, r4
 8007a72:	4629      	mov	r1, r5
 8007a74:	f7f9 f806 	bl	8000a84 <__aeabi_dcmpun>
 8007a78:	b990      	cbnz	r0, 8007aa0 <sqrt+0x54>
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4620      	mov	r0, r4
 8007a80:	4629      	mov	r1, r5
 8007a82:	f7f8 ffd7 	bl	8000a34 <__aeabi_dcmplt>
 8007a86:	b158      	cbz	r0, 8007aa0 <sqrt+0x54>
 8007a88:	f7ff ffae 	bl	80079e8 <__errno>
 8007a8c:	2321      	movs	r3, #33	; 0x21
 8007a8e:	6003      	str	r3, [r0, #0]
 8007a90:	2200      	movs	r2, #0
 8007a92:	2300      	movs	r3, #0
 8007a94:	4610      	mov	r0, r2
 8007a96:	4619      	mov	r1, r3
 8007a98:	f7f8 fe84 	bl	80007a4 <__aeabi_ddiv>
 8007a9c:	ec41 0b18 	vmov	d8, r0, r1
 8007aa0:	eeb0 0a48 	vmov.f32	s0, s16
 8007aa4:	eef0 0a68 	vmov.f32	s1, s17
 8007aa8:	ecbd 8b02 	vpop	{d8}
 8007aac:	bd38      	pop	{r3, r4, r5, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000080 	.word	0x20000080

08007ab4 <__ieee754_sqrt>:
 8007ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab8:	ec55 4b10 	vmov	r4, r5, d0
 8007abc:	4e56      	ldr	r6, [pc, #344]	; (8007c18 <__ieee754_sqrt+0x164>)
 8007abe:	43ae      	bics	r6, r5
 8007ac0:	ee10 0a10 	vmov	r0, s0
 8007ac4:	ee10 3a10 	vmov	r3, s0
 8007ac8:	4629      	mov	r1, r5
 8007aca:	462a      	mov	r2, r5
 8007acc:	d110      	bne.n	8007af0 <__ieee754_sqrt+0x3c>
 8007ace:	ee10 2a10 	vmov	r2, s0
 8007ad2:	462b      	mov	r3, r5
 8007ad4:	f7f8 fd3c 	bl	8000550 <__aeabi_dmul>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4620      	mov	r0, r4
 8007ade:	4629      	mov	r1, r5
 8007ae0:	f7f8 fb80 	bl	80001e4 <__adddf3>
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	460d      	mov	r5, r1
 8007ae8:	ec45 4b10 	vmov	d0, r4, r5
 8007aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af0:	2d00      	cmp	r5, #0
 8007af2:	dc10      	bgt.n	8007b16 <__ieee754_sqrt+0x62>
 8007af4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007af8:	4330      	orrs	r0, r6
 8007afa:	d0f5      	beq.n	8007ae8 <__ieee754_sqrt+0x34>
 8007afc:	b15d      	cbz	r5, 8007b16 <__ieee754_sqrt+0x62>
 8007afe:	ee10 2a10 	vmov	r2, s0
 8007b02:	462b      	mov	r3, r5
 8007b04:	ee10 0a10 	vmov	r0, s0
 8007b08:	f7f8 fb6a 	bl	80001e0 <__aeabi_dsub>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	f7f8 fe48 	bl	80007a4 <__aeabi_ddiv>
 8007b14:	e7e6      	b.n	8007ae4 <__ieee754_sqrt+0x30>
 8007b16:	1509      	asrs	r1, r1, #20
 8007b18:	d076      	beq.n	8007c08 <__ieee754_sqrt+0x154>
 8007b1a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007b1e:	07ce      	lsls	r6, r1, #31
 8007b20:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007b24:	bf5e      	ittt	pl
 8007b26:	0fda      	lsrpl	r2, r3, #31
 8007b28:	005b      	lslpl	r3, r3, #1
 8007b2a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007b2e:	0fda      	lsrs	r2, r3, #31
 8007b30:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007b34:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007b38:	2000      	movs	r0, #0
 8007b3a:	106d      	asrs	r5, r5, #1
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	f04f 0e16 	mov.w	lr, #22
 8007b42:	4684      	mov	ip, r0
 8007b44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b48:	eb0c 0401 	add.w	r4, ip, r1
 8007b4c:	4294      	cmp	r4, r2
 8007b4e:	bfde      	ittt	le
 8007b50:	1b12      	suble	r2, r2, r4
 8007b52:	eb04 0c01 	addle.w	ip, r4, r1
 8007b56:	1840      	addle	r0, r0, r1
 8007b58:	0052      	lsls	r2, r2, #1
 8007b5a:	f1be 0e01 	subs.w	lr, lr, #1
 8007b5e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007b62:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007b66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b6a:	d1ed      	bne.n	8007b48 <__ieee754_sqrt+0x94>
 8007b6c:	4671      	mov	r1, lr
 8007b6e:	2720      	movs	r7, #32
 8007b70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007b74:	4562      	cmp	r2, ip
 8007b76:	eb04 060e 	add.w	r6, r4, lr
 8007b7a:	dc02      	bgt.n	8007b82 <__ieee754_sqrt+0xce>
 8007b7c:	d113      	bne.n	8007ba6 <__ieee754_sqrt+0xf2>
 8007b7e:	429e      	cmp	r6, r3
 8007b80:	d811      	bhi.n	8007ba6 <__ieee754_sqrt+0xf2>
 8007b82:	2e00      	cmp	r6, #0
 8007b84:	eb06 0e04 	add.w	lr, r6, r4
 8007b88:	da43      	bge.n	8007c12 <__ieee754_sqrt+0x15e>
 8007b8a:	f1be 0f00 	cmp.w	lr, #0
 8007b8e:	db40      	blt.n	8007c12 <__ieee754_sqrt+0x15e>
 8007b90:	f10c 0801 	add.w	r8, ip, #1
 8007b94:	eba2 020c 	sub.w	r2, r2, ip
 8007b98:	429e      	cmp	r6, r3
 8007b9a:	bf88      	it	hi
 8007b9c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007ba0:	1b9b      	subs	r3, r3, r6
 8007ba2:	4421      	add	r1, r4
 8007ba4:	46c4      	mov	ip, r8
 8007ba6:	0052      	lsls	r2, r2, #1
 8007ba8:	3f01      	subs	r7, #1
 8007baa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007bae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007bb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007bb6:	d1dd      	bne.n	8007b74 <__ieee754_sqrt+0xc0>
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	d006      	beq.n	8007bca <__ieee754_sqrt+0x116>
 8007bbc:	1c4c      	adds	r4, r1, #1
 8007bbe:	bf13      	iteet	ne
 8007bc0:	3101      	addne	r1, #1
 8007bc2:	3001      	addeq	r0, #1
 8007bc4:	4639      	moveq	r1, r7
 8007bc6:	f021 0101 	bicne.w	r1, r1, #1
 8007bca:	1043      	asrs	r3, r0, #1
 8007bcc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007bd0:	0849      	lsrs	r1, r1, #1
 8007bd2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007bd6:	07c2      	lsls	r2, r0, #31
 8007bd8:	bf48      	it	mi
 8007bda:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007bde:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007be2:	460c      	mov	r4, r1
 8007be4:	463d      	mov	r5, r7
 8007be6:	e77f      	b.n	8007ae8 <__ieee754_sqrt+0x34>
 8007be8:	0ada      	lsrs	r2, r3, #11
 8007bea:	3815      	subs	r0, #21
 8007bec:	055b      	lsls	r3, r3, #21
 8007bee:	2a00      	cmp	r2, #0
 8007bf0:	d0fa      	beq.n	8007be8 <__ieee754_sqrt+0x134>
 8007bf2:	02d7      	lsls	r7, r2, #11
 8007bf4:	d50a      	bpl.n	8007c0c <__ieee754_sqrt+0x158>
 8007bf6:	f1c1 0420 	rsb	r4, r1, #32
 8007bfa:	fa23 f404 	lsr.w	r4, r3, r4
 8007bfe:	1e4d      	subs	r5, r1, #1
 8007c00:	408b      	lsls	r3, r1
 8007c02:	4322      	orrs	r2, r4
 8007c04:	1b41      	subs	r1, r0, r5
 8007c06:	e788      	b.n	8007b1a <__ieee754_sqrt+0x66>
 8007c08:	4608      	mov	r0, r1
 8007c0a:	e7f0      	b.n	8007bee <__ieee754_sqrt+0x13a>
 8007c0c:	0052      	lsls	r2, r2, #1
 8007c0e:	3101      	adds	r1, #1
 8007c10:	e7ef      	b.n	8007bf2 <__ieee754_sqrt+0x13e>
 8007c12:	46e0      	mov	r8, ip
 8007c14:	e7be      	b.n	8007b94 <__ieee754_sqrt+0xe0>
 8007c16:	bf00      	nop
 8007c18:	7ff00000 	.word	0x7ff00000

08007c1c <_init>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	bf00      	nop
 8007c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c22:	bc08      	pop	{r3}
 8007c24:	469e      	mov	lr, r3
 8007c26:	4770      	bx	lr

08007c28 <_fini>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr


Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080ec  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a4  080082a4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080082a4  080082a4  000182a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082ac  080082ac  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082ac  080082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082b0  080082b0  000182b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080082b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000090  08008340  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08008340  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001135f  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002005  00000000  00000000  0003141b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00033420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  000343d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f50  00000000  00000000  000352f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012466  00000000  00000000  0004c240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091848  00000000  00000000  0005e6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efeee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f0  00000000  00000000  000eff40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800826c 	.word	0x0800826c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800826c 	.word	0x0800826c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_uldivmod>:
 8000dbc:	b953      	cbnz	r3, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dbe:	b94a      	cbnz	r2, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	bf08      	it	eq
 8000dc4:	2800      	cmpeq	r0, #0
 8000dc6:	bf1c      	itt	ne
 8000dc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd0:	f000 b974 	b.w	80010bc <__aeabi_idiv0>
 8000dd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ddc:	f000 f806 	bl	8000dec <__udivmoddi4>
 8000de0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de8:	b004      	add	sp, #16
 8000dea:	4770      	bx	lr

08000dec <__udivmoddi4>:
 8000dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df0:	9d08      	ldr	r5, [sp, #32]
 8000df2:	4604      	mov	r4, r0
 8000df4:	468e      	mov	lr, r1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d14d      	bne.n	8000e96 <__udivmoddi4+0xaa>
 8000dfa:	428a      	cmp	r2, r1
 8000dfc:	4694      	mov	ip, r2
 8000dfe:	d969      	bls.n	8000ed4 <__udivmoddi4+0xe8>
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	b152      	cbz	r2, 8000e1c <__udivmoddi4+0x30>
 8000e06:	fa01 f302 	lsl.w	r3, r1, r2
 8000e0a:	f1c2 0120 	rsb	r1, r2, #32
 8000e0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000e12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e16:	ea41 0e03 	orr.w	lr, r1, r3
 8000e1a:	4094      	lsls	r4, r2
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	0c21      	lsrs	r1, r4, #16
 8000e22:	fbbe f6f8 	udiv	r6, lr, r8
 8000e26:	fa1f f78c 	uxth.w	r7, ip
 8000e2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e32:	fb06 f107 	mul.w	r1, r6, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d90a      	bls.n	8000e50 <__udivmoddi4+0x64>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e42:	f080 811f 	bcs.w	8001084 <__udivmoddi4+0x298>
 8000e46:	4299      	cmp	r1, r3
 8000e48:	f240 811c 	bls.w	8001084 <__udivmoddi4+0x298>
 8000e4c:	3e02      	subs	r6, #2
 8000e4e:	4463      	add	r3, ip
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e58:	fb08 3310 	mls	r3, r8, r0, r3
 8000e5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e60:	fb00 f707 	mul.w	r7, r0, r7
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x92>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e70:	f080 810a 	bcs.w	8001088 <__udivmoddi4+0x29c>
 8000e74:	42a7      	cmp	r7, r4
 8000e76:	f240 8107 	bls.w	8001088 <__udivmoddi4+0x29c>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	1be4      	subs	r4, r4, r7
 8000e84:	2600      	movs	r6, #0
 8000e86:	b11d      	cbz	r5, 8000e90 <__udivmoddi4+0xa4>
 8000e88:	40d4      	lsrs	r4, r2
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d909      	bls.n	8000eae <__udivmoddi4+0xc2>
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	f000 80ef 	beq.w	800107e <__udivmoddi4+0x292>
 8000ea0:	2600      	movs	r6, #0
 8000ea2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	fab3 f683 	clz	r6, r3
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d14a      	bne.n	8000f4c <__udivmoddi4+0x160>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xd4>
 8000eba:	4282      	cmp	r2, r0
 8000ebc:	f200 80f9 	bhi.w	80010b2 <__udivmoddi4+0x2c6>
 8000ec0:	1a84      	subs	r4, r0, r2
 8000ec2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	469e      	mov	lr, r3
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d0e0      	beq.n	8000e90 <__udivmoddi4+0xa4>
 8000ece:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ed2:	e7dd      	b.n	8000e90 <__udivmoddi4+0xa4>
 8000ed4:	b902      	cbnz	r2, 8000ed8 <__udivmoddi4+0xec>
 8000ed6:	deff      	udf	#255	; 0xff
 8000ed8:	fab2 f282 	clz	r2, r2
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	f040 8092 	bne.w	8001006 <__udivmoddi4+0x21a>
 8000ee2:	eba1 010c 	sub.w	r1, r1, ip
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2601      	movs	r6, #1
 8000ef0:	0c20      	lsrs	r0, r4, #16
 8000ef2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ef6:	fb07 1113 	mls	r1, r7, r3, r1
 8000efa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efe:	fb0e f003 	mul.w	r0, lr, r3
 8000f02:	4288      	cmp	r0, r1
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x12c>
 8000f06:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x12a>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2c0>
 8000f16:	4643      	mov	r3, r8
 8000f18:	1a09      	subs	r1, r1, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f20:	fb07 1110 	mls	r1, r7, r0, r1
 8000f24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x156>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x154>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2ca>
 8000f40:	4608      	mov	r0, r1
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f4a:	e79c      	b.n	8000e86 <__udivmoddi4+0x9a>
 8000f4c:	f1c6 0720 	rsb	r7, r6, #32
 8000f50:	40b3      	lsls	r3, r6
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f62:	431c      	orrs	r4, r3
 8000f64:	40f9      	lsrs	r1, r7
 8000f66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f72:	0c20      	lsrs	r0, r4, #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fb09 1118 	mls	r1, r9, r8, r1
 8000f7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f80:	fb08 f00e 	mul.w	r0, r8, lr
 8000f84:	4288      	cmp	r0, r1
 8000f86:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b8>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2bc>
 8000f98:	4288      	cmp	r0, r1
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2bc>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4461      	add	r1, ip
 8000fa4:	1a09      	subs	r1, r1, r0
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fac:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fb8:	458e      	cmp	lr, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1e2>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2b4>
 8000fc6:	458e      	cmp	lr, r1
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2b4>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fd6:	eba1 010e 	sub.w	r1, r1, lr
 8000fda:	42a1      	cmp	r1, r4
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46a6      	mov	lr, r4
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x2a4>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x2a0>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x212>
 8000fe6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fea:	eb61 010e 	sbc.w	r1, r1, lr
 8000fee:	fa01 f707 	lsl.w	r7, r1, r7
 8000ff2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ff6:	40f1      	lsrs	r1, r6
 8000ff8:	431f      	orrs	r7, r3
 8000ffa:	e9c5 7100 	strd	r7, r1, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	f1c2 0320 	rsb	r3, r2, #32
 800100a:	40d8      	lsrs	r0, r3
 800100c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001010:	fa21 f303 	lsr.w	r3, r1, r3
 8001014:	4091      	lsls	r1, r2
 8001016:	4301      	orrs	r1, r0
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb3 f0f7 	udiv	r0, r3, r7
 8001024:	fb07 3610 	mls	r6, r7, r0, r3
 8001028:	0c0b      	lsrs	r3, r1, #16
 800102a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800102e:	fb00 f60e 	mul.w	r6, r0, lr
 8001032:	429e      	cmp	r6, r3
 8001034:	fa04 f402 	lsl.w	r4, r4, r2
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x260>
 800103a:	eb1c 0303 	adds.w	r3, ip, r3
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b8>
 8001044:	429e      	cmp	r6, r3
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b8>
 8001048:	3802      	subs	r0, #2
 800104a:	4463      	add	r3, ip
 800104c:	1b9b      	subs	r3, r3, r6
 800104e:	b289      	uxth	r1, r1
 8001050:	fbb3 f6f7 	udiv	r6, r3, r7
 8001054:	fb07 3316 	mls	r3, r7, r6, r3
 8001058:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800105c:	fb06 f30e 	mul.w	r3, r6, lr
 8001060:	428b      	cmp	r3, r1
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x28a>
 8001064:	eb1c 0101 	adds.w	r1, ip, r1
 8001068:	f106 38ff 	add.w	r8, r6, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2b0>
 800106e:	428b      	cmp	r3, r1
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2b0>
 8001072:	3e02      	subs	r6, #2
 8001074:	4461      	add	r1, ip
 8001076:	1ac9      	subs	r1, r1, r3
 8001078:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0x104>
 800107e:	462e      	mov	r6, r5
 8001080:	4628      	mov	r0, r5
 8001082:	e705      	b.n	8000e90 <__udivmoddi4+0xa4>
 8001084:	4606      	mov	r6, r0
 8001086:	e6e3      	b.n	8000e50 <__udivmoddi4+0x64>
 8001088:	4618      	mov	r0, r3
 800108a:	e6f8      	b.n	8000e7e <__udivmoddi4+0x92>
 800108c:	454b      	cmp	r3, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f8>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001098:	3801      	subs	r0, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f8>
 800109c:	4646      	mov	r6, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x28a>
 80010a0:	4620      	mov	r0, r4
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1e2>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x260>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b8>
 80010ac:	3b02      	subs	r3, #2
 80010ae:	4461      	add	r1, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x12c>
 80010b2:	4630      	mov	r0, r6
 80010b4:	e709      	b.n	8000eca <__udivmoddi4+0xde>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x156>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c8:	f002 fc52 	bl	8003970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 fa2a 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f000 fc5e 	bl	8001990 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010d4:	f000 fabc 	bl	8001650 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010d8:	f000 fb66 	bl	80017a8 <MX_TIM2_Init>
  MX_DMA_Init();
 80010dc:	f000 fc30 	bl	8001940 <MX_DMA_Init>
  MX_I2C1_Init();
 80010e0:	f000 fa88 	bl	80015f4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80010e4:	f000 fbac 	bl	8001840 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80010e8:	f000 fbfe 	bl	80018e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

UART2.huart = &huart2;
 80010ec:	4b75      	ldr	r3, [pc, #468]	; (80012c4 <main+0x204>)
 80010ee:	4a76      	ldr	r2, [pc, #472]	; (80012c8 <main+0x208>)
 80010f0:	601a      	str	r2, [r3, #0]
UART2.RxLen = 255;
 80010f2:	4b74      	ldr	r3, [pc, #464]	; (80012c4 <main+0x204>)
 80010f4:	22ff      	movs	r2, #255	; 0xff
 80010f6:	80da      	strh	r2, [r3, #6]
UART2.TxLen = 255;
 80010f8:	4b72      	ldr	r3, [pc, #456]	; (80012c4 <main+0x204>)
 80010fa:	22ff      	movs	r2, #255	; 0xff
 80010fc:	809a      	strh	r2, [r3, #4]
UARTInit(&UART2);
 80010fe:	4871      	ldr	r0, [pc, #452]	; (80012c4 <main+0x204>)
 8001100:	f000 fcea 	bl	8001ad8 <UARTInit>
UARTResetStart(&UART2);
 8001104:	486f      	ldr	r0, [pc, #444]	; (80012c4 <main+0x204>)
 8001106:	f000 fd0f 	bl	8001b28 <UARTResetStart>


	PIDinit() ;
 800110a:	f001 fec7 	bl	8002e9c <PIDinit>

  // start PWM
  HAL_TIM_Base_Start(&htim1);
 800110e:	486f      	ldr	r0, [pc, #444]	; (80012cc <main+0x20c>)
 8001110:	f004 fcc2 	bl	8005a98 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001114:	2100      	movs	r1, #0
 8001116:	486d      	ldr	r0, [pc, #436]	; (80012cc <main+0x20c>)
 8001118:	f004 fdd4 	bl	8005cc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800111c:	2104      	movs	r1, #4
 800111e:	486b      	ldr	r0, [pc, #428]	; (80012cc <main+0x20c>)
 8001120:	f004 fdd0 	bl	8005cc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001124:	2108      	movs	r1, #8
 8001126:	4869      	ldr	r0, [pc, #420]	; (80012cc <main+0x20c>)
 8001128:	f004 fdcc 	bl	8005cc4 <HAL_TIM_PWM_Start>

  // start micros
  HAL_TIM_Base_Start_IT(&htim2);
 800112c:	4868      	ldr	r0, [pc, #416]	; (80012d0 <main+0x210>)
 800112e:	f004 fd0d 	bl	8005b4c <HAL_TIM_Base_Start_IT>

  // start Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001132:	213c      	movs	r1, #60	; 0x3c
 8001134:	4867      	ldr	r0, [pc, #412]	; (80012d4 <main+0x214>)
 8001136:	f004 ff1b 	bl	8005f70 <HAL_TIM_Encoder_Start>
//	  {
//		  FinalPos = Station[FinishedStation];
//	  }

//***********General********************************
	  ButtonBuffer[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800113a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113e:	4866      	ldr	r0, [pc, #408]	; (80012d8 <main+0x218>)
 8001140:	f003 fb44 	bl	80047cc <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b64      	ldr	r3, [pc, #400]	; (80012dc <main+0x21c>)
 800114a:	701a      	strb	r2, [r3, #0]
	  if (ButtonBuffer[1] == 0 && ButtonBuffer[0]== 1)
 800114c:	4b63      	ldr	r3, [pc, #396]	; (80012dc <main+0x21c>)
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d105      	bne.n	8001160 <main+0xa0>
 8001154:	4b61      	ldr	r3, [pc, #388]	; (80012dc <main+0x21c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <main+0xa0>
	  {
		  EndEffWrite();
 800115c:	f000 fc92 	bl	8001a84 <EndEffWrite>
	  }
	  ButtonBuffer[1] = ButtonBuffer[0];
 8001160:	4b5e      	ldr	r3, [pc, #376]	; (80012dc <main+0x21c>)
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <main+0x21c>)
 8001166:	705a      	strb	r2, [r3, #1]
	  Degree = htim3.Instance->CNT * 360.0 / 2048.0 ; //Degree unit
 8001168:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <main+0x214>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f974 	bl	800045c <__aeabi_ui2d>
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b59      	ldr	r3, [pc, #356]	; (80012e0 <main+0x220>)
 800117a:	f7ff f9e9 	bl	8000550 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <main+0x224>)
 800118c:	f7ff fb0a 	bl	80007a4 <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fcb2 	bl	8000b00 <__aeabi_d2f>
 800119c:	4603      	mov	r3, r0
 800119e:	4a52      	ldr	r2, [pc, #328]	; (80012e8 <main+0x228>)
 80011a0:	6013      	str	r3, [r2, #0]
	  PWMgeneration() ; //Gen PWM
 80011a2:	f002 f8af 	bl	8003304 <PWMgeneration>
//***************************************************
//**********Get Real Vmax****************************
	  float V;
	  VelocityRPM = Velocity() ; //rpm unit
 80011a6:	f002 f849 	bl	800323c <Velocity>
 80011aa:	eef0 7a40 	vmov.f32	s15, s0
 80011ae:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <main+0x22c>)
 80011b0:	edc3 7a00 	vstr	s15, [r3]
	  if (VelocityRPM < 0)
 80011b4:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <main+0x22c>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	d515      	bpl.n	80011f0 <main+0x130>
	  {
		  V = (-1) * VelocityRPM;
 80011c4:	4b49      	ldr	r3, [pc, #292]	; (80012ec <main+0x22c>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eef1 7a67 	vneg.f32	s15, s15
 80011ce:	edc7 7a03 	vstr	s15, [r7, #12]
		  if (V > VmaxReal)
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <main+0x230>)
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	dd15      	ble.n	8001212 <main+0x152>
		  {
			  VmaxReal = VelocityRPM;
 80011e6:	4b41      	ldr	r3, [pc, #260]	; (80012ec <main+0x22c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a41      	ldr	r2, [pc, #260]	; (80012f0 <main+0x230>)
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e010      	b.n	8001212 <main+0x152>
		  }
	  }
	  else
	  {
		  V = VelocityRPM;
 80011f0:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <main+0x22c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
		  if (V > VmaxReal)
 80011f6:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <main+0x230>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	dd03      	ble.n	8001212 <main+0x152>
		  {
			  VmaxReal = VelocityRPM;
 800120a:	4b38      	ldr	r3, [pc, #224]	; (80012ec <main+0x22c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <main+0x230>)
 8001210:	6013      	str	r3, [r2, #0]
		  }
	  }
//*****************************************************
//**********Set Home******************************
	  if (StartSetHome == 1)
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <main+0x234>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <main+0x15e>
	  {
		  SetHome() ;
 800121a:	f001 f9a7 	bl	800256c <SetHome>
	  }
//***********************************************
//**************PID******************************
	  if (YangMaiTrong == 0)
 800121e:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <main+0x238>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d122      	bne.n	800126c <main+0x1ac>
	  {
		  if (micros() - TimestampPID > 1000)
 8001226:	f002 f8eb 	bl	8003400 <micros>
 800122a:	4b34      	ldr	r3, [pc, #208]	; (80012fc <main+0x23c>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	1a84      	subs	r4, r0, r2
 8001232:	eb61 0503 	sbc.w	r5, r1, r3
 8001236:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800123a:	429c      	cmp	r4, r3
 800123c:	f175 0300 	sbcs.w	r3, r5, #0
 8001240:	d314      	bcc.n	800126c <main+0x1ac>
		  {
	//		  if (request != 0)
	//		  {
				  P = p;
 8001242:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <main+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a2f      	ldr	r2, [pc, #188]	; (8001304 <main+0x244>)
 8001248:	6013      	str	r3, [r2, #0]
				  I = i;
 800124a:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <main+0x248>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a2f      	ldr	r2, [pc, #188]	; (800130c <main+0x24c>)
 8001250:	6013      	str	r3, [r2, #0]
				  D = d;
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <main+0x250>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a2f      	ldr	r2, [pc, #188]	; (8001314 <main+0x254>)
 8001258:	6013      	str	r3, [r2, #0]
				  PID() ;
 800125a:	f001 fe67 	bl	8002f2c <PID>
	//		  }
			  TimestampPID = micros() ;
 800125e:	f002 f8cf 	bl	8003400 <micros>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4925      	ldr	r1, [pc, #148]	; (80012fc <main+0x23c>)
 8001268:	e9c1 2300 	strd	r2, r3, [r1]
		  }
	  }
	  if (YangMaiTrong)
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <main+0x238>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d07b      	beq.n	800136c <main+0x2ac>
	  {
		  request = -1;
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <main+0x258>)
 8001276:	4a29      	ldr	r2, [pc, #164]	; (800131c <main+0x25c>)
 8001278:	601a      	str	r2, [r3, #0]
		  if (FinalPos - Degree > 0.5 || FinalPos - Degree < -0.5)
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <main+0x260>)
 800127c:	ed93 7a00 	vldr	s14, [r3]
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <main+0x228>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800128e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001296:	dc0e      	bgt.n	80012b6 <main+0x1f6>
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <main+0x260>)
 800129a:	ed93 7a00 	vldr	s14, [r3]
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <main+0x228>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80012ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b4:	d538      	bpl.n	8001328 <main+0x268>
		  {
			  SecondPID();//Re Control
 80012b6:	f001 fef1 	bl	800309c <SecondPID>
			  Vi = 0;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <main+0x264>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e054      	b.n	800136c <main+0x2ac>
 80012c2:	bf00      	nop
 80012c4:	200002dc 	.word	0x200002dc
 80012c8:	200001d8 	.word	0x200001d8
 80012cc:	20000100 	.word	0x20000100
 80012d0:	20000148 	.word	0x20000148
 80012d4:	20000190 	.word	0x20000190
 80012d8:	40020800 	.word	0x40020800
 80012dc:	20000504 	.word	0x20000504
 80012e0:	40768000 	.word	0x40768000
 80012e4:	40a00000 	.word	0x40a00000
 80012e8:	200004fc 	.word	0x200004fc
 80012ec:	200004f8 	.word	0x200004f8
 80012f0:	200004ac 	.word	0x200004ac
 80012f4:	200004cd 	.word	0x200004cd
 80012f8:	200004b0 	.word	0x200004b0
 80012fc:	20000418 	.word	0x20000418
 8001300:	20000004 	.word	0x20000004
 8001304:	20000440 	.word	0x20000440
 8001308:	20000008 	.word	0x20000008
 800130c:	20000444 	.word	0x20000444
 8001310:	2000000c 	.word	0x2000000c
 8001314:	20000448 	.word	0x20000448
 8001318:	200004e4 	.word	0x200004e4
 800131c:	bf800000 	.word	0xbf800000
 8001320:	20000010 	.word	0x20000010
 8001324:	200004c0 	.word	0x200004c0
		  }
		  else
		  {
			  if (Vi == 0)
 8001328:	4b69      	ldr	r3, [pc, #420]	; (80014d0 <main+0x410>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d109      	bne.n	8001344 <main+0x284>
			  {
				  Trong1Vi = micros();
 8001330:	f002 f866 	bl	8003400 <micros>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4966      	ldr	r1, [pc, #408]	; (80014d4 <main+0x414>)
 800133a:	e9c1 2300 	strd	r2, r3, [r1]
				  Vi = 1;
 800133e:	4b64      	ldr	r3, [pc, #400]	; (80014d0 <main+0x410>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
			  }
			  if (micros() - Trong1Vi > 500000)
 8001344:	f002 f85c 	bl	8003400 <micros>
 8001348:	4b62      	ldr	r3, [pc, #392]	; (80014d4 <main+0x414>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	ebb0 0802 	subs.w	r8, r0, r2
 8001352:	eb61 0903 	sbc.w	r9, r1, r3
 8001356:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <main+0x418>)
 8001358:	4598      	cmp	r8, r3
 800135a:	f179 0300 	sbcs.w	r3, r9, #0
 800135e:	d305      	bcc.n	800136c <main+0x2ac>
			  {
				  YangMaiTrong = 0;
 8001360:	4b5e      	ldr	r3, [pc, #376]	; (80014dc <main+0x41c>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
				  FinishedTraj = 0;
 8001366:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <main+0x420>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]

		  }
	  }
//************************************************
//**************UART******************************
	  int16_t inputChar = UARTReadChar(&UART2);
 800136c:	485d      	ldr	r0, [pc, #372]	; (80014e4 <main+0x424>)
 800136e:	f000 fbff 	bl	8001b70 <UARTReadChar>
 8001372:	4603      	mov	r3, r0
 8001374:	817b      	strh	r3, [r7, #10]
	  if (inputChar != -1)
 8001376:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800137a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137e:	d005      	beq.n	800138c <main+0x2cc>
	  {
		  Protocal(inputChar, &UART2);
 8001380:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001384:	4957      	ldr	r1, [pc, #348]	; (80014e4 <main+0x424>)
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fcb6 	bl	8001cf8 <Protocal>
	  }

	  if (Mode == 8)
 800138c:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <main+0x428>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b08      	cmp	r3, #8
 8001392:	d105      	bne.n	80013a0 <main+0x2e0>
	  {
		  if (FinishedTask)
 8001394:	4b55      	ldr	r3, [pc, #340]	; (80014ec <main+0x42c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <main+0x2e0>
		  {
			  WriteACK2();
 800139c:	f001 f8d4 	bl	8002548 <WriteACK2>
		  }
	  }
	  if (Mode == 10) //Read ACK
 80013a0:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <main+0x428>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b0a      	cmp	r3, #10
 80013a6:	d116      	bne.n	80013d6 <main+0x316>
	  {
		  int16_t inputChar = UARTReadChar(&UART2);
 80013a8:	484e      	ldr	r0, [pc, #312]	; (80014e4 <main+0x424>)
 80013aa:	f000 fbe1 	bl	8001b70 <UARTReadChar>
 80013ae:	4603      	mov	r3, r0
 80013b0:	813b      	strh	r3, [r7, #8]
		  if (inputChar != -1)
 80013b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ba:	d00c      	beq.n	80013d6 <main+0x316>
		  {
			  MainMemory[n] = inputChar ;
 80013bc:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <main+0x430>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	893b      	ldrh	r3, [r7, #8]
 80013c4:	b2d9      	uxtb	r1, r3
 80013c6:	4b4b      	ldr	r3, [pc, #300]	; (80014f4 <main+0x434>)
 80013c8:	5499      	strb	r1, [r3, r2]
			  n++ ;
 80013ca:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <main+0x430>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	4b47      	ldr	r3, [pc, #284]	; (80014f0 <main+0x430>)
 80013d4:	801a      	strh	r2, [r3, #0]
		  }
	  }
	  if (Mode == 11) //Read ACK
 80013d6:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <main+0x428>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b0b      	cmp	r3, #11
 80013dc:	d116      	bne.n	800140c <main+0x34c>
	  {
		  int16_t inputChar = UARTReadChar(&UART2);
 80013de:	4841      	ldr	r0, [pc, #260]	; (80014e4 <main+0x424>)
 80013e0:	f000 fbc6 	bl	8001b70 <UARTReadChar>
 80013e4:	4603      	mov	r3, r0
 80013e6:	80fb      	strh	r3, [r7, #6]
		  if (inputChar != -1)
 80013e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d00c      	beq.n	800140c <main+0x34c>
		  {
			  MainMemory[n] = inputChar ;
 80013f2:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <main+0x430>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	b2d9      	uxtb	r1, r3
 80013fc:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <main+0x434>)
 80013fe:	5499      	strb	r1, [r3, r2]
			  n++ ;
 8001400:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <main+0x430>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <main+0x430>)
 800140a:	801a      	strh	r2, [r3, #0]
		  }
	  }
	  if (Mode == 12)
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <main+0x428>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b0c      	cmp	r3, #12
 8001412:	d102      	bne.n	800141a <main+0x35a>
	  {
		  enable_eff = 1;
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <main+0x438>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
	  }
	  if (Mode == 13)
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <main+0x428>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b0d      	cmp	r3, #13
 8001420:	d102      	bne.n	8001428 <main+0x368>
	  {
		  enable_eff = 0;
 8001422:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <main+0x438>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
//
//	  }


//********Stop Motor***************************************
	  if (request == 0)
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <main+0x43c>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	d102      	bne.n	800143e <main+0x37e>
	  {
		  Direction = 2 ;
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <main+0x440>)
 800143a:	2202      	movs	r2, #2
 800143c:	701a      	strb	r2, [r3, #0]
	  }
//****************************************************
//*******init Traj***********************************
	  if (StartMoving == 0)
 800143e:	4b31      	ldr	r3, [pc, #196]	; (8001504 <main+0x444>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10e      	bne.n	8001464 <main+0x3a4>
	  {
		  T = 0;
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <main+0x448>)
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
		  TV = 0;
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <main+0x44c>)
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
		  TA = 0;
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <main+0x450>)
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
		  ST = 0;
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <main+0x454>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
//		  PIDinit();
	  }
//**************************************************
//*******Start Generate Trajectory*******************
	  if (StartMoving == 1)
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <main+0x444>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <main+0x3b0>
	  {
		  Trajec();
 800146c:	f001 f908 	bl	8002680 <Trajec>
	  }
	  if (FinishedTraj)
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <main+0x420>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d027      	beq.n	80014c8 <main+0x408>
	  {
		  if (FinalPos - Degree < -0.5 || FinalPos - Degree > 0.5)
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <main+0x458>)
 800147a:	ed93 7a00 	vldr	s14, [r3]
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <main+0x45c>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001488:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800148c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	d40e      	bmi.n	80014b4 <main+0x3f4>
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <main+0x458>)
 8001498:	ed93 7a00 	vldr	s14, [r3]
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <main+0x45c>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	dd07      	ble.n	80014c4 <main+0x404>
		  {
			  YangMaiTrong = 1;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <main+0x41c>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
			  SUM = 0; //init second PID
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <main+0x460>)
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e001      	b.n	80014c8 <main+0x408>
		  }
		  else
		  {
			  EndEffWrite();
 80014c4:	f000 fade 	bl	8001a84 <EndEffWrite>

//***************************************************
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UARTTxDumpBuffer(&UART2);
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <main+0x424>)
 80014ca:	f000 fb7b 	bl	8001bc4 <UARTTxDumpBuffer>
  {
 80014ce:	e634      	b.n	800113a <main+0x7a>
 80014d0:	200004c0 	.word	0x200004c0
 80014d4:	200004b8 	.word	0x200004b8
 80014d8:	0007a121 	.word	0x0007a121
 80014dc:	200004b0 	.word	0x200004b0
 80014e0:	200004b1 	.word	0x200004b1
 80014e4:	200002dc 	.word	0x200002dc
 80014e8:	200003f6 	.word	0x200003f6
 80014ec:	20000506 	.word	0x20000506
 80014f0:	200003f4 	.word	0x200003f4
 80014f4:	200002f4 	.word	0x200002f4
 80014f8:	20000412 	.word	0x20000412
 80014fc:	200004e4 	.word	0x200004e4
 8001500:	20000500 	.word	0x20000500
 8001504:	20000464 	.word	0x20000464
 8001508:	20000488 	.word	0x20000488
 800150c:	20000484 	.word	0x20000484
 8001510:	20000480 	.word	0x20000480
 8001514:	20000465 	.word	0x20000465
 8001518:	20000010 	.word	0x20000010
 800151c:	200004fc 	.word	0x200004fc
 8001520:	20000458 	.word	0x20000458

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b094      	sub	sp, #80	; 0x50
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	2230      	movs	r2, #48	; 0x30
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f006 fcec 	bl	8007f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <SystemClock_Config+0xc8>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a26      	ldr	r2, [pc, #152]	; (80015ec <SystemClock_Config+0xc8>)
 8001552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <SystemClock_Config+0xc8>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <SystemClock_Config+0xcc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <SystemClock_Config+0xcc>)
 800156e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <SystemClock_Config+0xcc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001580:	2302      	movs	r3, #2
 8001582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001584:	2301      	movs	r3, #1
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001588:	2310      	movs	r3, #16
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158c:	2302      	movs	r3, #2
 800158e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001590:	2300      	movs	r3, #0
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001594:	2308      	movs	r3, #8
 8001596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001598:	2364      	movs	r3, #100	; 0x64
 800159a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800159c:	2302      	movs	r3, #2
 800159e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015a0:	2304      	movs	r3, #4
 80015a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	f107 0320 	add.w	r3, r7, #32
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fd8d 	bl	80050c8 <HAL_RCC_OscConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015b4:	f001 ff3e 	bl	8003434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b8:	230f      	movs	r3, #15
 80015ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015bc:	2302      	movs	r3, #2
 80015be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	2103      	movs	r1, #3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 ffef 	bl	80055b8 <HAL_RCC_ClockConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015e0:	f001 ff28 	bl	8003434 <Error_Handler>
  }
}
 80015e4:	bf00      	nop
 80015e6:	3750      	adds	r7, #80	; 0x50
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40007000 	.word	0x40007000

080015f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_I2C1_Init+0x54>)
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <MX_I2C1_Init+0x58>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_I2C1_Init+0x54>)
 8001600:	f242 7210 	movw	r2, #10000	; 0x2710
 8001604:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <MX_I2C1_Init+0x54>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_I2C1_Init+0x54>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <MX_I2C1_Init+0x54>)
 8001614:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001618:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_I2C1_Init+0x54>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_I2C1_Init+0x54>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_I2C1_Init+0x54>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_I2C1_Init+0x54>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_I2C1_Init+0x54>)
 8001634:	f003 f8fc 	bl	8004830 <HAL_I2C_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800163e:	f001 fef9 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000ac 	.word	0x200000ac
 800164c:	40005400 	.word	0x40005400

08001650 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b096      	sub	sp, #88	; 0x58
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001656:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	615a      	str	r2, [r3, #20]
 8001680:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2220      	movs	r2, #32
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f006 fc41 	bl	8007f10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800168e:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <MX_TIM1_Init+0x150>)
 8001690:	4a44      	ldr	r2, [pc, #272]	; (80017a4 <MX_TIM1_Init+0x154>)
 8001692:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001694:	4b42      	ldr	r3, [pc, #264]	; (80017a0 <MX_TIM1_Init+0x150>)
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169a:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <MX_TIM1_Init+0x150>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <MX_TIM1_Init+0x150>)
 80016a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a8:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <MX_TIM1_Init+0x150>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <MX_TIM1_Init+0x150>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016b4:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <MX_TIM1_Init+0x150>)
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ba:	4839      	ldr	r0, [pc, #228]	; (80017a0 <MX_TIM1_Init+0x150>)
 80016bc:	f004 f99c 	bl	80059f8 <HAL_TIM_Base_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016c6:	f001 feb5 	bl	8003434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016d4:	4619      	mov	r1, r3
 80016d6:	4832      	ldr	r0, [pc, #200]	; (80017a0 <MX_TIM1_Init+0x150>)
 80016d8:	f004 fd9a 	bl	8006210 <HAL_TIM_ConfigClockSource>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016e2:	f001 fea7 	bl	8003434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016e6:	482e      	ldr	r0, [pc, #184]	; (80017a0 <MX_TIM1_Init+0x150>)
 80016e8:	f004 fa92 	bl	8005c10 <HAL_TIM_PWM_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016f2:	f001 fe9f 	bl	8003434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001702:	4619      	mov	r1, r3
 8001704:	4826      	ldr	r0, [pc, #152]	; (80017a0 <MX_TIM1_Init+0x150>)
 8001706:	f005 f917 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001710:	f001 fe90 	bl	8003434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001714:	2360      	movs	r3, #96	; 0x60
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	2200      	movs	r2, #0
 8001736:	4619      	mov	r1, r3
 8001738:	4819      	ldr	r0, [pc, #100]	; (80017a0 <MX_TIM1_Init+0x150>)
 800173a:	f004 fca7 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001744:	f001 fe76 	bl	8003434 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	2204      	movs	r2, #4
 800174e:	4619      	mov	r1, r3
 8001750:	4813      	ldr	r0, [pc, #76]	; (80017a0 <MX_TIM1_Init+0x150>)
 8001752:	f004 fc9b 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800175c:	f001 fe6a 	bl	8003434 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001778:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	4807      	ldr	r0, [pc, #28]	; (80017a0 <MX_TIM1_Init+0x150>)
 8001784:	f005 f946 	bl	8006a14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800178e:	f001 fe51 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001792:	4803      	ldr	r0, [pc, #12]	; (80017a0 <MX_TIM1_Init+0x150>)
 8001794:	f001 ff42 	bl	800361c <HAL_TIM_MspPostInit>

}
 8001798:	bf00      	nop
 800179a:	3758      	adds	r7, #88	; 0x58
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000100 	.word	0x20000100
 80017a4:	40010000 	.word	0x40010000

080017a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <MX_TIM2_Init+0x94>)
 80017c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_TIM2_Init+0x94>)
 80017ce:	2263      	movs	r2, #99	; 0x63
 80017d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_TIM2_Init+0x94>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_TIM2_Init+0x94>)
 80017da:	f04f 32ff 	mov.w	r2, #4294967295
 80017de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <MX_TIM2_Init+0x94>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_TIM2_Init+0x94>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ec:	4813      	ldr	r0, [pc, #76]	; (800183c <MX_TIM2_Init+0x94>)
 80017ee:	f004 f903 	bl	80059f8 <HAL_TIM_Base_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017f8:	f001 fe1c 	bl	8003434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001800:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4619      	mov	r1, r3
 8001808:	480c      	ldr	r0, [pc, #48]	; (800183c <MX_TIM2_Init+0x94>)
 800180a:	f004 fd01 	bl	8006210 <HAL_TIM_ConfigClockSource>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001814:	f001 fe0e 	bl	8003434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001820:	463b      	mov	r3, r7
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_TIM2_Init+0x94>)
 8001826:	f005 f887 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001830:	f001 fe00 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000148 	.word	0x20000148

08001840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	2224      	movs	r2, #36	; 0x24
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f006 fb5e 	bl	8007f10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MX_TIM3_Init+0xa0>)
 800185e:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <MX_TIM3_Init+0xa4>)
 8001860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <MX_TIM3_Init+0xa0>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <MX_TIM3_Init+0xa0>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_TIM3_Init+0xa0>)
 8001870:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_TIM3_Init+0xa0>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_TIM3_Init+0xa0>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001882:	2303      	movs	r3, #3
 8001884:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800188a:	2301      	movs	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800189a:	2301      	movs	r3, #1
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	4619      	mov	r1, r3
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <MX_TIM3_Init+0xa0>)
 80018ae:	f004 fab9 	bl	8005e24 <HAL_TIM_Encoder_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80018b8:	f001 fdbc 	bl	8003434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_TIM3_Init+0xa0>)
 80018ca:	f005 f835 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018d4:	f001 fdae 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	3730      	adds	r7, #48	; 0x30
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000190 	.word	0x20000190
 80018e4:	40000400 	.word	0x40000400

080018e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_USART2_UART_Init+0x50>)
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <MX_USART2_UART_Init+0x54>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART2_UART_Init+0x50>)
 80018f4:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80018f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_USART2_UART_Init+0x50>)
 80018fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001900:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <MX_USART2_UART_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART2_UART_Init+0x50>)
 800190a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART2_UART_Init+0x50>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART2_UART_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART2_UART_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART2_UART_Init+0x50>)
 8001924:	f005 f8c8 	bl	8006ab8 <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800192e:	f001 fd81 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200001d8 	.word	0x200001d8
 800193c:	40004400 	.word	0x40004400

08001940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <MX_DMA_Init+0x4c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <MX_DMA_Init+0x4c>)
 8001950:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <MX_DMA_Init+0x4c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	2010      	movs	r0, #16
 8001968:	f002 f973 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800196c:	2010      	movs	r0, #16
 800196e:	f002 f98c 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2011      	movs	r0, #17
 8001978:	f002 f96b 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800197c:	2011      	movs	r0, #17
 800197e:	f002 f984 	bl	8003c8a <HAL_NVIC_EnableIRQ>

}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <MX_GPIO_Init+0xe8>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a32      	ldr	r2, [pc, #200]	; (8001a78 <MX_GPIO_Init+0xe8>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <MX_GPIO_Init+0xe8>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <MX_GPIO_Init+0xe8>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a2b      	ldr	r2, [pc, #172]	; (8001a78 <MX_GPIO_Init+0xe8>)
 80019cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <MX_GPIO_Init+0xe8>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <MX_GPIO_Init+0xe8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <MX_GPIO_Init+0xe8>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <MX_GPIO_Init+0xe8>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_GPIO_Init+0xe8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a1d      	ldr	r2, [pc, #116]	; (8001a78 <MX_GPIO_Init+0xe8>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <MX_GPIO_Init+0xe8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2120      	movs	r1, #32
 8001a1a:	4818      	ldr	r0, [pc, #96]	; (8001a7c <MX_GPIO_Init+0xec>)
 8001a1c:	f002 feee 	bl	80047fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4812      	ldr	r0, [pc, #72]	; (8001a80 <MX_GPIO_Init+0xf0>)
 8001a38:	f002 fd44 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Home_Pin */
  GPIO_InitStruct.Pin = Home_Pin;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Home_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_GPIO_Init+0xf0>)
 8001a50:	f002 fd38 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a54:	2320      	movs	r3, #32
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_GPIO_Init+0xec>)
 8001a6c:	f002 fd2a 	bl	80044c4 <HAL_GPIO_Init>

}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020800 	.word	0x40020800

08001a84 <EndEffWrite>:

/* USER CODE BEGIN 4 */
void EndEffWrite()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY && enable_eff)
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <EndEffWrite+0x4c>)
 8001a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d117      	bne.n	8001ac6 <EndEffWrite+0x42>
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <EndEffWrite+0x50>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d013      	beq.n	8001ac6 <EndEffWrite+0x42>
	{
		HAL_Delay(500);
 8001a9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aa2:	f001 ffd7 	bl	8003a54 <HAL_Delay>
		uint8_t temp = 0x45;
 8001aa6:	2345      	movs	r3, #69	; 0x45
 8001aa8:	71bb      	strb	r3, [r7, #6]
		uint8_t add = 0x23;
 8001aaa:	2323      	movs	r3, #35	; 0x23
 8001aac:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Master_Transmit(&hi2c1, add << 1, &temp, 1, 1000); //Write eff
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	b299      	uxth	r1, r3
 8001ab6:	1dba      	adds	r2, r7, #6
 8001ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <EndEffWrite+0x4c>)
 8001ac2:	f002 fff9 	bl	8004ab8 <HAL_I2C_Master_Transmit>
//		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x23<<1, 0x45, 1);
	}

}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200000ac 	.word	0x200000ac
 8001ad4:	20000412 	.word	0x20000412

08001ad8 <UARTInit>:
//{
//
//}

void UARTInit(UARTStucrture *uart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <UARTInit+0x4c>)
 8001ae2:	88db      	ldrh	r3, [r3, #6]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f006 f9d2 	bl	8007e90 <calloc>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <UARTInit+0x4c>)
 8001af6:	889b      	ldrh	r3, [r3, #4]
 8001af8:	4619      	mov	r1, r3
 8001afa:	2001      	movs	r0, #1
 8001afc:	f006 f9c8 	bl	8007e90 <calloc>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	81da      	strh	r2, [r3, #14]

}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200002dc 	.word	0x200002dc

08001b28 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6919      	ldr	r1, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	88db      	ldrh	r3, [r3, #6]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f005 f887 	bl	8006c50 <HAL_UART_Receive_DMA>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	88db      	ldrh	r3, [r3, #6]
 8001b56:	461a      	mov	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	1ad3      	subs	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	uint16_t Result = -1; // -1 Mean no new data
 8001b78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b7c:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	8a9b      	ldrh	r3, [r3, #20]
 8001b82:	461c      	mov	r4, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ffe0 	bl	8001b4a <UARTGetRxHead>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	429c      	cmp	r4, r3
 8001b8e:	d013      	beq.n	8001bb8 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	8a92      	ldrh	r2, [r2, #20]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	8a9b      	ldrh	r3, [r3, #20]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	88d2      	ldrh	r2, [r2, #6]
 8001ba8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bac:	fb01 f202 	mul.w	r2, r1, r2
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8001bb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd90      	pop	{r4, r7, pc}

08001bc4 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d13d      	bne.n	8001c56 <UARTTxDumpBuffer+0x92>
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <UARTTxDumpBuffer+0x9c>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d139      	bne.n	8001c56 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8001be2:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <UARTTxDumpBuffer+0x9c>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	89da      	ldrh	r2, [r3, #14]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	899b      	ldrh	r3, [r3, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d02d      	beq.n	8001c50 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	89da      	ldrh	r2, [r3, #14]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d906      	bls.n	8001c0e <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	89da      	ldrh	r2, [r3, #14]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	e005      	b.n	8001c1a <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	889a      	ldrh	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	8992      	ldrh	r2, [r2, #12]
 8001c28:	4413      	add	r3, r2
 8001c2a:	89fa      	ldrh	r2, [r7, #14]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f004 ff91 	bl	8006b54 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	899b      	ldrh	r3, [r3, #12]
 8001c36:	461a      	mov	r2, r3
 8001c38:	89fb      	ldrh	r3, [r7, #14]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	8892      	ldrh	r2, [r2, #4]
 8001c40:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c44:	fb01 f202 	mul.w	r2, r1, r2
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <UARTTxDumpBuffer+0x9c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
	}

}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000050d 	.word	0x2000050d

08001c64 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	80fb      	strh	r3, [r7, #6]

	//check data len is more than buffer?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	889b      	ldrh	r3, [r3, #4]
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	bf28      	it	cs
 8001c7c:	4613      	movcs	r3, r2
 8001c7e:	82fb      	strh	r3, [r7, #22]

	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8001c80:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	889b      	ldrh	r3, [r3, #4]
 8001c86:	4619      	mov	r1, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	89db      	ldrh	r3, [r3, #14]
 8001c8c:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	bfa8      	it	ge
 8001c92:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8001c94:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	89d2      	ldrh	r2, [r2, #14]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	8aba      	ldrh	r2, [r7, #20]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f006 f925 	bl	8007ef4 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	89db      	ldrh	r3, [r3, #14]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	8afb      	ldrh	r3, [r7, #22]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	8892      	ldrh	r2, [r2, #4]
 8001cb8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cbc:	fb01 f202 	mul.w	r2, r1, r2
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8001cc8:	8afa      	ldrh	r2, [r7, #22]
 8001cca:	8abb      	ldrh	r3, [r7, #20]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d00a      	beq.n	8001ce6 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6898      	ldr	r0, [r3, #8]
 8001cd4:	8abb      	ldrh	r3, [r7, #20]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8001cda:	8afa      	ldrh	r2, [r7, #22]
 8001cdc:	8abb      	ldrh	r3, [r7, #20]
 8001cde:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f006 f907 	bl	8007ef4 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f7ff ff6c 	bl	8001bc4 <UARTTxDumpBuffer>
}
 8001cec:	bf00      	nop
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	0000      	movs	r0, r0
	...

08001cf8 <Protocal>:

void Protocal(int16_t dataIn,UARTStucrture *uart)
{
 8001cf8:	b5b0      	push	{r4, r5, r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	81fb      	strh	r3, [r7, #14]
	static uint16_t CollectedData2 = 0;
	static uint16_t stationSUM;
	static uint8_t CurrentAngle1 = 0;
	static uint8_t CurrentAngle2 = 0;

	DataInTest = dataIn&0xf0;
 8001d04:	89fb      	ldrh	r3, [r7, #14]
 8001d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <Protocal+0x44>)
 8001d0e:	801a      	strh	r2, [r3, #0]


//	//State Machine
	switch (State)
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <Protocal+0x48>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b06      	cmp	r3, #6
 8001d16:	f200 839f 	bhi.w	8002458 <Protocal+0x760>
 8001d1a:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <Protocal+0x28>)
 8001d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d20:	08001d45 	.word	0x08001d45
 8001d24:	08002021 	.word	0x08002021
 8001d28:	080021ed 	.word	0x080021ed
 8001d2c:	080021fb 	.word	0x080021fb
 8001d30:	080023b5 	.word	0x080023b5
 8001d34:	080023c5 	.word	0x080023c5
 8001d38:	0800226d 	.word	0x0800226d
 8001d3c:	2000050a 	.word	0x2000050a
 8001d40:	2000050e 	.word	0x2000050e
	{
	case Idle:
		UARTsuccess = 0;
 8001d44:	4ba1      	ldr	r3, [pc, #644]	; (8001fcc <Protocal+0x2d4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
		UARTerror = 0;
 8001d4a:	4ba1      	ldr	r3, [pc, #644]	; (8001fd0 <Protocal+0x2d8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
		if (DataInTest == 0b10010000)
 8001d50:	4ba0      	ldr	r3, [pc, #640]	; (8001fd4 <Protocal+0x2dc>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	2b90      	cmp	r3, #144	; 0x90
 8001d56:	f040 815f 	bne.w	8002018 <Protocal+0x320>
		{
			ModeIN = dataIn&0xf;
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	4b9c      	ldr	r3, [pc, #624]	; (8001fd8 <Protocal+0x2e0>)
 8001d66:	701a      	strb	r2, [r3, #0]
			if (ModeIN == 0b0001)
 8001d68:	4b9b      	ldr	r3, [pc, #620]	; (8001fd8 <Protocal+0x2e0>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d112      	bne.n	8001d96 <Protocal+0x9e>
			{
				Mode = 1;
 8001d70:	4b9a      	ldr	r3, [pc, #616]	; (8001fdc <Protocal+0x2e4>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1;
 8001d76:	4b9a      	ldr	r3, [pc, #616]	; (8001fe0 <Protocal+0x2e8>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	b25b      	sxtb	r3, r3
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b97      	ldr	r3, [pc, #604]	; (8001fe4 <Protocal+0x2ec>)
 8001d88:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 8001d8a:	4b97      	ldr	r3, [pc, #604]	; (8001fe8 <Protocal+0x2f0>)
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 8001d90:	4b96      	ldr	r3, [pc, #600]	; (8001fec <Protocal+0x2f4>)
 8001d92:	2202      	movs	r2, #2
 8001d94:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0010)
 8001d96:	4b90      	ldr	r3, [pc, #576]	; (8001fd8 <Protocal+0x2e0>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d112      	bne.n	8001dc4 <Protocal+0xcc>
			{
				Mode = 2;
 8001d9e:	4b8f      	ldr	r3, [pc, #572]	; (8001fdc <Protocal+0x2e4>)
 8001da0:	2202      	movs	r2, #2
 8001da2:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8001da4:	4b91      	ldr	r3, [pc, #580]	; (8001fec <Protocal+0x2f4>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8001daa:	4b8f      	ldr	r3, [pc, #572]	; (8001fe8 <Protocal+0x2f0>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b10;
 8001db0:	4b8b      	ldr	r3, [pc, #556]	; (8001fe0 <Protocal+0x2e8>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	b25b      	sxtb	r3, r3
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <Protocal+0x2ec>)
 8001dc2:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0011)
 8001dc4:	4b84      	ldr	r3, [pc, #528]	; (8001fd8 <Protocal+0x2e0>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d112      	bne.n	8001df2 <Protocal+0xfa>
			{
				Mode = 3;
 8001dcc:	4b83      	ldr	r3, [pc, #524]	; (8001fdc <Protocal+0x2e4>)
 8001dce:	2203      	movs	r2, #3
 8001dd0:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8001dd2:	4b86      	ldr	r3, [pc, #536]	; (8001fec <Protocal+0x2f4>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8001dd8:	4b83      	ldr	r3, [pc, #524]	; (8001fe8 <Protocal+0x2f0>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b11;
 8001dde:	4b80      	ldr	r3, [pc, #512]	; (8001fe0 <Protocal+0x2e8>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	f043 0303 	orr.w	r3, r3, #3
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b7d      	ldr	r3, [pc, #500]	; (8001fe4 <Protocal+0x2ec>)
 8001df0:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0100)
 8001df2:	4b79      	ldr	r3, [pc, #484]	; (8001fd8 <Protocal+0x2e0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d112      	bne.n	8001e20 <Protocal+0x128>
			{
				Mode = 4;
 8001dfa:	4b78      	ldr	r3, [pc, #480]	; (8001fdc <Protocal+0x2e4>)
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 8001e00:	4b7a      	ldr	r3, [pc, #488]	; (8001fec <Protocal+0x2f4>)
 8001e02:	2202      	movs	r2, #2
 8001e04:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 8001e06:	4b78      	ldr	r3, [pc, #480]	; (8001fe8 <Protocal+0x2f0>)
 8001e08:	2202      	movs	r2, #2
 8001e0a:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b100;
 8001e0c:	4b74      	ldr	r3, [pc, #464]	; (8001fe0 <Protocal+0x2e8>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b71      	ldr	r3, [pc, #452]	; (8001fe4 <Protocal+0x2ec>)
 8001e1e:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0101)
 8001e20:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <Protocal+0x2e0>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d112      	bne.n	8001e4e <Protocal+0x156>
			{
				Mode = 5;
 8001e28:	4b6c      	ldr	r3, [pc, #432]	; (8001fdc <Protocal+0x2e4>)
 8001e2a:	2205      	movs	r2, #5
 8001e2c:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 8001e2e:	4b6f      	ldr	r3, [pc, #444]	; (8001fec <Protocal+0x2f4>)
 8001e30:	2202      	movs	r2, #2
 8001e32:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 8001e34:	4b6c      	ldr	r3, [pc, #432]	; (8001fe8 <Protocal+0x2f0>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b101;
 8001e3a:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <Protocal+0x2e8>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	f043 0305 	orr.w	r3, r3, #5
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4b66      	ldr	r3, [pc, #408]	; (8001fe4 <Protocal+0x2ec>)
 8001e4c:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0110)
 8001e4e:	4b62      	ldr	r3, [pc, #392]	; (8001fd8 <Protocal+0x2e0>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d112      	bne.n	8001e7c <Protocal+0x184>
			{
				Mode = 6;
 8001e56:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <Protocal+0x2e4>)
 8001e58:	2206      	movs	r2, #6
 8001e5a:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 8001e5c:	4b63      	ldr	r3, [pc, #396]	; (8001fec <Protocal+0x2f4>)
 8001e5e:	2202      	movs	r2, #2
 8001e60:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 8001e62:	4b61      	ldr	r3, [pc, #388]	; (8001fe8 <Protocal+0x2f0>)
 8001e64:	2202      	movs	r2, #2
 8001e66:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b110;
 8001e68:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <Protocal+0x2e8>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	f043 0306 	orr.w	r3, r3, #6
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b5a      	ldr	r3, [pc, #360]	; (8001fe4 <Protocal+0x2ec>)
 8001e7a:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0111)
 8001e7c:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <Protocal+0x2e0>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b07      	cmp	r3, #7
 8001e82:	d112      	bne.n	8001eaa <Protocal+0x1b2>
			{
				Mode = 7;
 8001e84:	4b55      	ldr	r3, [pc, #340]	; (8001fdc <Protocal+0x2e4>)
 8001e86:	2207      	movs	r2, #7
 8001e88:	701a      	strb	r2, [r3, #0]
				State = Frame3_n;
 8001e8a:	4b58      	ldr	r3, [pc, #352]	; (8001fec <Protocal+0x2f4>)
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	701a      	strb	r2, [r3, #0]
				Frame = 3;
 8001e90:	4b55      	ldr	r3, [pc, #340]	; (8001fe8 <Protocal+0x2f0>)
 8001e92:	2203      	movs	r2, #3
 8001e94:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b111;
 8001e96:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <Protocal+0x2e8>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	f043 0307 	orr.w	r3, r3, #7
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <Protocal+0x2ec>)
 8001ea8:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1000)
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <Protocal+0x2e0>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d112      	bne.n	8001ed8 <Protocal+0x1e0>
			{
				Mode = 8;
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <Protocal+0x2e4>)
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <Protocal+0x2f4>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8001ebe:	4b4a      	ldr	r3, [pc, #296]	; (8001fe8 <Protocal+0x2f0>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1000;
 8001ec4:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <Protocal+0x2e8>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <Protocal+0x2ec>)
 8001ed6:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1001)
 8001ed8:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <Protocal+0x2e0>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	d112      	bne.n	8001f06 <Protocal+0x20e>
			{
				Mode = 9;
 8001ee0:	4b3e      	ldr	r3, [pc, #248]	; (8001fdc <Protocal+0x2e4>)
 8001ee2:	2209      	movs	r2, #9
 8001ee4:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8001ee6:	4b41      	ldr	r3, [pc, #260]	; (8001fec <Protocal+0x2f4>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8001eec:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <Protocal+0x2f0>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1001;
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <Protocal+0x2e8>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	f043 0309 	orr.w	r3, r3, #9
 8001efe:	b25b      	sxtb	r3, r3
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <Protocal+0x2ec>)
 8001f04:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1010)
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <Protocal+0x2e0>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b0a      	cmp	r3, #10
 8001f0c:	d112      	bne.n	8001f34 <Protocal+0x23c>
			{
				Mode = 10;
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <Protocal+0x2e4>)
 8001f10:	220a      	movs	r2, #10
 8001f12:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8001f14:	4b35      	ldr	r3, [pc, #212]	; (8001fec <Protocal+0x2f4>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8001f1a:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <Protocal+0x2f0>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1010;
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <Protocal+0x2e8>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	f043 030a 	orr.w	r3, r3, #10
 8001f2c:	b25b      	sxtb	r3, r3
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <Protocal+0x2ec>)
 8001f32:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1011)
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <Protocal+0x2e0>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b0b      	cmp	r3, #11
 8001f3a:	d112      	bne.n	8001f62 <Protocal+0x26a>
			{
				Mode = 11;
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <Protocal+0x2e4>)
 8001f3e:	220b      	movs	r2, #11
 8001f40:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <Protocal+0x2f4>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <Protocal+0x2f0>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1011;
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <Protocal+0x2e8>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	f043 030b 	orr.w	r3, r3, #11
 8001f5a:	b25b      	sxtb	r3, r3
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <Protocal+0x2ec>)
 8001f60:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1100)
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <Protocal+0x2e0>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d112      	bne.n	8001f90 <Protocal+0x298>
			{
				Mode = 12;
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <Protocal+0x2e4>)
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8001f70:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <Protocal+0x2f4>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <Protocal+0x2f0>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1100;
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <Protocal+0x2e8>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	b25b      	sxtb	r3, r3
 8001f84:	f043 030c 	orr.w	r3, r3, #12
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <Protocal+0x2ec>)
 8001f8e:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1101)
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <Protocal+0x2e0>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b0d      	cmp	r3, #13
 8001f96:	d112      	bne.n	8001fbe <Protocal+0x2c6>
			{
				Mode = 13;
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <Protocal+0x2e4>)
 8001f9a:	220d      	movs	r2, #13
 8001f9c:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <Protocal+0x2f4>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <Protocal+0x2f0>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1101;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <Protocal+0x2e8>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	f043 030d 	orr.w	r3, r3, #13
 8001fb6:	b25b      	sxtb	r3, r3
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <Protocal+0x2ec>)
 8001fbc:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1110)
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <Protocal+0x2e0>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b0e      	cmp	r3, #14
 8001fc4:	f040 8245 	bne.w	8002452 <Protocal+0x75a>
 8001fc8:	e012      	b.n	8001ff0 <Protocal+0x2f8>
 8001fca:	bf00      	nop
 8001fcc:	20000410 	.word	0x20000410
 8001fd0:	20000411 	.word	0x20000411
 8001fd4:	2000050a 	.word	0x2000050a
 8001fd8:	2000050f 	.word	0x2000050f
 8001fdc:	200003f6 	.word	0x200003f6
 8001fe0:	20000018 	.word	0x20000018
 8001fe4:	20000510 	.word	0x20000510
 8001fe8:	200003f7 	.word	0x200003f7
 8001fec:	2000050e 	.word	0x2000050e
			{
				Mode = 14;
 8001ff0:	4b87      	ldr	r3, [pc, #540]	; (8002210 <Protocal+0x518>)
 8001ff2:	220e      	movs	r2, #14
 8001ff4:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8001ff6:	4b87      	ldr	r3, [pc, #540]	; (8002214 <Protocal+0x51c>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8001ffc:	4b86      	ldr	r3, [pc, #536]	; (8002218 <Protocal+0x520>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1110;
 8002002:	4b86      	ldr	r3, [pc, #536]	; (800221c <Protocal+0x524>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	b25b      	sxtb	r3, r3
 800200a:	f043 030e 	orr.w	r3, r3, #14
 800200e:	b25b      	sxtb	r3, r3
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b83      	ldr	r3, [pc, #524]	; (8002220 <Protocal+0x528>)
 8002014:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			State = Idle;
		}
		break;
 8002016:	e21c      	b.n	8002452 <Protocal+0x75a>
			State = Idle;
 8002018:	4b7e      	ldr	r3, [pc, #504]	; (8002214 <Protocal+0x51c>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
		break;
 800201e:	e218      	b.n	8002452 <Protocal+0x75a>
	case Frame1:
		frame1 = dataIn;
 8002020:	89fb      	ldrh	r3, [r7, #14]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <Protocal+0x52c>)
 8002026:	701a      	strb	r2, [r3, #0]
		checksumtest = CheckSumFunction(CheckSum, Frame, CollectedData);
 8002028:	4b7d      	ldr	r3, [pc, #500]	; (8002220 <Protocal+0x528>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4a7a      	ldr	r2, [pc, #488]	; (8002218 <Protocal+0x520>)
 800202e:	7811      	ldrb	r1, [r2, #0]
 8002030:	4a7d      	ldr	r2, [pc, #500]	; (8002228 <Protocal+0x530>)
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fa44 	bl	80024c4 <CheckSumFunction>
 800203c:	4603      	mov	r3, r0
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b7a      	ldr	r3, [pc, #488]	; (800222c <Protocal+0x534>)
 8002042:	701a      	strb	r2, [r3, #0]
			if (frame1 == checksumtest)
 8002044:	4b77      	ldr	r3, [pc, #476]	; (8002224 <Protocal+0x52c>)
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	4b78      	ldr	r3, [pc, #480]	; (800222c <Protocal+0x534>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	f040 80c0 	bne.w	80021d2 <Protocal+0x4da>
			{
				UARTsuccess += 1;
 8002052:	4b77      	ldr	r3, [pc, #476]	; (8002230 <Protocal+0x538>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b75      	ldr	r3, [pc, #468]	; (8002230 <Protocal+0x538>)
 800205c:	701a      	strb	r2, [r3, #0]
				if (Mode == 2 || Mode == 3 || Mode == 12 || Mode == 13 || Mode == 14)
 800205e:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <Protocal+0x518>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d00f      	beq.n	8002086 <Protocal+0x38e>
 8002066:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <Protocal+0x518>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d00b      	beq.n	8002086 <Protocal+0x38e>
 800206e:	4b68      	ldr	r3, [pc, #416]	; (8002210 <Protocal+0x518>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d007      	beq.n	8002086 <Protocal+0x38e>
 8002076:	4b66      	ldr	r3, [pc, #408]	; (8002210 <Protocal+0x518>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b0d      	cmp	r3, #13
 800207c:	d003      	beq.n	8002086 <Protocal+0x38e>
 800207e:	4b64      	ldr	r3, [pc, #400]	; (8002210 <Protocal+0x518>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b0e      	cmp	r3, #14
 8002084:	d101      	bne.n	800208a <Protocal+0x392>
				{
					WriteACK1();
 8002086:	f000 fa4d 	bl	8002524 <WriteACK1>
				}
				if (Mode == 8) // Go to Station N
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <Protocal+0x518>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b08      	cmp	r3, #8
 8002090:	d101      	bne.n	8002096 <Protocal+0x39e>
				{
					WriteACK1();
 8002092:	f000 fa47 	bl	8002524 <WriteACK1>
				}
				if (Mode == 10) //Decimal 4 degree
 8002096:	4b5e      	ldr	r3, [pc, #376]	; (8002210 <Protocal+0x518>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b0a      	cmp	r3, #10
 800209c:	d166      	bne.n	800216c <Protocal+0x474>
				{
					WriteACK1();
 800209e:	f000 fa41 	bl	8002524 <WriteACK1>
					CurrentAngle1 = (int8_t)(Degree * 10000 * 3.14159265 / 256 /180) ;
 80020a2:	4b64      	ldr	r3, [pc, #400]	; (8002234 <Protocal+0x53c>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002238 <Protocal+0x540>
 80020ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b0:	ee17 0a90 	vmov	r0, s15
 80020b4:	f7fe f9f4 	bl	80004a0 <__aeabi_f2d>
 80020b8:	a353      	add	r3, pc, #332	; (adr r3, 8002208 <Protocal+0x510>)
 80020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020be:	f7fe fa47 	bl	8000550 <__aeabi_dmul>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	4b5b      	ldr	r3, [pc, #364]	; (800223c <Protocal+0x544>)
 80020d0:	f7fe fb68 	bl	80007a4 <__aeabi_ddiv>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	4b57      	ldr	r3, [pc, #348]	; (8002240 <Protocal+0x548>)
 80020e2:	f7fe fb5f 	bl	80007a4 <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	f7fe fcdf 	bl	8000ab0 <__aeabi_d2iz>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b52      	ldr	r3, [pc, #328]	; (8002244 <Protocal+0x54c>)
 80020fa:	701a      	strb	r2, [r3, #0]
					CurrentAngle2 = (int8_t)((int)(Degree* 10000 * 3.14159265 / 180) % 256) ;
 80020fc:	4b4d      	ldr	r3, [pc, #308]	; (8002234 <Protocal+0x53c>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002238 <Protocal+0x540>
 8002106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210a:	ee17 0a90 	vmov	r0, s15
 800210e:	f7fe f9c7 	bl	80004a0 <__aeabi_f2d>
 8002112:	a33d      	add	r3, pc, #244	; (adr r3, 8002208 <Protocal+0x510>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	f7fe fa1a 	bl	8000550 <__aeabi_dmul>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	4b45      	ldr	r3, [pc, #276]	; (8002240 <Protocal+0x548>)
 800212a:	f7fe fb3b 	bl	80007a4 <__aeabi_ddiv>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	f7fe fcbb 	bl	8000ab0 <__aeabi_d2iz>
 800213a:	4603      	mov	r3, r0
 800213c:	425a      	negs	r2, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	bf58      	it	pl
 8002144:	4253      	negpl	r3, r2
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <Protocal+0x550>)
 800214a:	701a      	strb	r2, [r3, #0]
					uint8_t temp[] = {CurrentAngle1, CurrentAngle2};
 800214c:	4b3d      	ldr	r3, [pc, #244]	; (8002244 <Protocal+0x54c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	753b      	strb	r3, [r7, #20]
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <Protocal+0x550>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	757b      	strb	r3, [r7, #21]
					UARTTxWrite(&UART2, temp, 2);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2202      	movs	r2, #2
 800215e:	4619      	mov	r1, r3
 8002160:	483a      	ldr	r0, [pc, #232]	; (800224c <Protocal+0x554>)
 8002162:	f7ff fd7f 	bl	8001c64 <UARTTxWrite>
					n = 0;
 8002166:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <Protocal+0x558>)
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
					//read Ack in while loop
				}
				if (Mode == 11)
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <Protocal+0x518>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b0b      	cmp	r3, #11
 8002172:	d120      	bne.n	80021b6 <Protocal+0x4be>
				{
					WriteACK1();
 8002174:	f000 f9d6 	bl	8002524 <WriteACK1>
					uint8_t temp[] = {(int8_t)VmaxReal * 255 / 10};
 8002178:	4b36      	ldr	r3, [pc, #216]	; (8002254 <Protocal+0x55c>)
 800217a:	edd3 7a00 	vldr	s15, [r3]
 800217e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002182:	edc7 7a01 	vstr	s15, [r7, #4]
 8002186:	793b      	ldrb	r3, [r7, #4]
 8002188:	b25b      	sxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	4613      	mov	r3, r2
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	4a31      	ldr	r2, [pc, #196]	; (8002258 <Protocal+0x560>)
 8002194:	fb82 1203 	smull	r1, r2, r2, r3
 8002198:	1092      	asrs	r2, r2, #2
 800219a:	17db      	asrs	r3, r3, #31
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	743b      	strb	r3, [r7, #16]
					UARTTxWrite(&UART2, temp, 1) ;
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	2201      	movs	r2, #1
 80021a8:	4619      	mov	r1, r3
 80021aa:	4828      	ldr	r0, [pc, #160]	; (800224c <Protocal+0x554>)
 80021ac:	f7ff fd5a 	bl	8001c64 <UARTTxWrite>
					//send Vmax
					n = 0;
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <Protocal+0x558>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	801a      	strh	r2, [r3, #0]
					//read Ack in while loop

				}
				if (Mode == 14)
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <Protocal+0x518>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b0e      	cmp	r3, #14
 80021bc:	d105      	bne.n	80021ca <Protocal+0x4d2>
				{
					StartSetHome = 1;
 80021be:	4b27      	ldr	r3, [pc, #156]	; (800225c <Protocal+0x564>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
					SetHomeFlag = 0;
 80021c4:	4b26      	ldr	r3, [pc, #152]	; (8002260 <Protocal+0x568>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
				}
				State = Idle;
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <Protocal+0x51c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
			{
				Mode = 0;
				UARTerror += 1;
				State = Idle;
			}
		break;
 80021d0:	e142      	b.n	8002458 <Protocal+0x760>
				Mode = 0;
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <Protocal+0x518>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
				UARTerror += 1;
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <Protocal+0x56c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	3301      	adds	r3, #1
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <Protocal+0x56c>)
 80021e2:	701a      	strb	r2, [r3, #0]
				State = Idle;
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <Protocal+0x51c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
		break;
 80021ea:	e135      	b.n	8002458 <Protocal+0x760>

	case Frame2_1:
		CollectedData = dataIn;
 80021ec:	89fa      	ldrh	r2, [r7, #14]
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <Protocal+0x530>)
 80021f0:	801a      	strh	r2, [r3, #0]
		State = Frame2_2;
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <Protocal+0x51c>)
 80021f4:	2203      	movs	r2, #3
 80021f6:	701a      	strb	r2, [r3, #0]
		break;
 80021f8:	e12e      	b.n	8002458 <Protocal+0x760>
	case Frame2_2:
		CollectedData2 = dataIn;
 80021fa:	89fa      	ldrh	r2, [r7, #14]
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <Protocal+0x570>)
 80021fe:	801a      	strh	r2, [r3, #0]
		State = CheckSum2;
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <Protocal+0x51c>)
 8002202:	2206      	movs	r2, #6
 8002204:	701a      	strb	r2, [r3, #0]
		break;
 8002206:	e127      	b.n	8002458 <Protocal+0x760>
 8002208:	53c8d4f1 	.word	0x53c8d4f1
 800220c:	400921fb 	.word	0x400921fb
 8002210:	200003f6 	.word	0x200003f6
 8002214:	2000050e 	.word	0x2000050e
 8002218:	200003f7 	.word	0x200003f7
 800221c:	20000018 	.word	0x20000018
 8002220:	20000510 	.word	0x20000510
 8002224:	20000508 	.word	0x20000508
 8002228:	20000512 	.word	0x20000512
 800222c:	2000050c 	.word	0x2000050c
 8002230:	20000410 	.word	0x20000410
 8002234:	200004fc 	.word	0x200004fc
 8002238:	461c4000 	.word	0x461c4000
 800223c:	40700000 	.word	0x40700000
 8002240:	40668000 	.word	0x40668000
 8002244:	20000514 	.word	0x20000514
 8002248:	20000515 	.word	0x20000515
 800224c:	200002dc 	.word	0x200002dc
 8002250:	200003f4 	.word	0x200003f4
 8002254:	200004ac 	.word	0x200004ac
 8002258:	66666667 	.word	0x66666667
 800225c:	200004cd 	.word	0x200004cd
 8002260:	200004cc 	.word	0x200004cc
 8002264:	20000411 	.word	0x20000411
 8002268:	20000516 	.word	0x20000516
	case CheckSum2:
		frame2 = dataIn;
 800226c:	89fb      	ldrh	r3, [r7, #14]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b81      	ldr	r3, [pc, #516]	; (8002478 <Protocal+0x780>)
 8002272:	701a      	strb	r2, [r3, #0]
		test = CheckSum + CollectedData + CollectedData2;//test
 8002274:	4b81      	ldr	r3, [pc, #516]	; (800247c <Protocal+0x784>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b81      	ldr	r3, [pc, #516]	; (8002480 <Protocal+0x788>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b80      	ldr	r3, [pc, #512]	; (8002484 <Protocal+0x78c>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	4413      	add	r3, r2
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b7e      	ldr	r3, [pc, #504]	; (8002488 <Protocal+0x790>)
 800228e:	701a      	strb	r2, [r3, #0]
		checksumtest = CheckSumFunction(CheckSum, Frame, CollectedData + CollectedData2);
 8002290:	4b7b      	ldr	r3, [pc, #492]	; (8002480 <Protocal+0x788>)
 8002292:	7818      	ldrb	r0, [r3, #0]
 8002294:	4b7d      	ldr	r3, [pc, #500]	; (800248c <Protocal+0x794>)
 8002296:	7819      	ldrb	r1, [r3, #0]
 8002298:	4b78      	ldr	r3, [pc, #480]	; (800247c <Protocal+0x784>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b79      	ldr	r3, [pc, #484]	; (8002484 <Protocal+0x78c>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	f000 f90b 	bl	80024c4 <CheckSumFunction>
 80022ae:	4603      	mov	r3, r0
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b77      	ldr	r3, [pc, #476]	; (8002490 <Protocal+0x798>)
 80022b4:	701a      	strb	r2, [r3, #0]
		if (frame2 == checksumtest)
 80022b6:	4b70      	ldr	r3, [pc, #448]	; (8002478 <Protocal+0x780>)
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	4b75      	ldr	r3, [pc, #468]	; (8002490 <Protocal+0x798>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d16e      	bne.n	80023a0 <Protocal+0x6a8>
		{
			UARTsuccess += 1;
 80022c2:	4b74      	ldr	r3, [pc, #464]	; (8002494 <Protocal+0x79c>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b72      	ldr	r3, [pc, #456]	; (8002494 <Protocal+0x79c>)
 80022cc:	701a      	strb	r2, [r3, #0]
			if (Mode == 4)
 80022ce:	4b72      	ldr	r3, [pc, #456]	; (8002498 <Protocal+0x7a0>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d11d      	bne.n	8002312 <Protocal+0x61a>
			{
				VmaxRPM = (double)CollectedData2/255*10 ;
 80022d6:	4b6b      	ldr	r3, [pc, #428]	; (8002484 <Protocal+0x78c>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f8be 	bl	800045c <__aeabi_ui2d>
 80022e0:	a35f      	add	r3, pc, #380	; (adr r3, 8002460 <Protocal+0x768>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f7fe fa5d 	bl	80007a4 <__aeabi_ddiv>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	4b69      	ldr	r3, [pc, #420]	; (800249c <Protocal+0x7a4>)
 80022f8:	f7fe f92a 	bl	8000550 <__aeabi_dmul>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f7fe fbfc 	bl	8000b00 <__aeabi_d2f>
 8002308:	4603      	mov	r3, r0
 800230a:	4a65      	ldr	r2, [pc, #404]	; (80024a0 <Protocal+0x7a8>)
 800230c:	6013      	str	r3, [r2, #0]
				WriteACK1();
 800230e:	f000 f909 	bl	8002524 <WriteACK1>
			}
			if (Mode == 5)
 8002312:	4b61      	ldr	r3, [pc, #388]	; (8002498 <Protocal+0x7a0>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d13e      	bne.n	8002398 <Protocal+0x6a0>
			{
				FinalPos = (((double)CollectedData * 256) + ((double)CollectedData2))/10000/3.14159265*180;
 800231a:	4b58      	ldr	r3, [pc, #352]	; (800247c <Protocal+0x784>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f89c 	bl	800045c <__aeabi_ui2d>
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	4b5e      	ldr	r3, [pc, #376]	; (80024a4 <Protocal+0x7ac>)
 800232a:	f7fe f911 	bl	8000550 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4614      	mov	r4, r2
 8002334:	461d      	mov	r5, r3
 8002336:	4b53      	ldr	r3, [pc, #332]	; (8002484 <Protocal+0x78c>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f88e 	bl	800045c <__aeabi_ui2d>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4620      	mov	r0, r4
 8002346:	4629      	mov	r1, r5
 8002348:	f7fd ff4c 	bl	80001e4 <__adddf3>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	a344      	add	r3, pc, #272	; (adr r3, 8002468 <Protocal+0x770>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	f7fe fa23 	bl	80007a4 <__aeabi_ddiv>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	a342      	add	r3, pc, #264	; (adr r3, 8002470 <Protocal+0x778>)
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	f7fe fa1a 	bl	80007a4 <__aeabi_ddiv>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <Protocal+0x7b0>)
 800237e:	f7fe f8e7 	bl	8000550 <__aeabi_dmul>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	f7fe fbb9 	bl	8000b00 <__aeabi_d2f>
 800238e:	4603      	mov	r3, r0
 8002390:	4a46      	ldr	r2, [pc, #280]	; (80024ac <Protocal+0x7b4>)
 8002392:	6013      	str	r3, [r2, #0]
				WriteACK1();
 8002394:	f000 f8c6 	bl	8002524 <WriteACK1>
			}

			State = Idle;
 8002398:	4b45      	ldr	r3, [pc, #276]	; (80024b0 <Protocal+0x7b8>)
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
		{
			UARTerror += 1;
			State = Idle;
		}

		break;
 800239e:	e05b      	b.n	8002458 <Protocal+0x760>
			UARTerror += 1;
 80023a0:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <Protocal+0x7bc>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <Protocal+0x7bc>)
 80023aa:	701a      	strb	r2, [r3, #0]
			State = Idle;
 80023ac:	4b40      	ldr	r3, [pc, #256]	; (80024b0 <Protocal+0x7b8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
		break;
 80023b2:	e051      	b.n	8002458 <Protocal+0x760>
	case Frame3_n:
		n_Station = dataIn;
 80023b4:	89fb      	ldrh	r3, [r7, #14]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <Protocal+0x7c0>)
 80023ba:	701a      	strb	r2, [r3, #0]
		State = Frame3_station;
 80023bc:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <Protocal+0x7b8>)
 80023be:	2205      	movs	r2, #5
 80023c0:	701a      	strb	r2, [r3, #0]
		break;
 80023c2:	e049      	b.n	8002458 <Protocal+0x760>
	case Frame3_station:
		if (n_Station > 0)
 80023c4:	4b3c      	ldr	r3, [pc, #240]	; (80024b8 <Protocal+0x7c0>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d014      	beq.n	80023f6 <Protocal+0x6fe>
		{
			Station[via_point] = dataIn&0xf;
 80023cc:	89fb      	ldrh	r3, [r7, #14]
 80023ce:	4a3b      	ldr	r2, [pc, #236]	; (80024bc <Protocal+0x7c4>)
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	b299      	uxth	r1, r3
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <Protocal+0x7c8>)
 80023da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			via_point++;
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <Protocal+0x7c4>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b35      	ldr	r3, [pc, #212]	; (80024bc <Protocal+0x7c4>)
 80023e8:	701a      	strb	r2, [r3, #0]
			n_Station--;
 80023ea:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <Protocal+0x7c0>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <Protocal+0x7c0>)
 80023f4:	701a      	strb	r2, [r3, #0]
		}
		if (n_Station==0)
 80023f6:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <Protocal+0x7c0>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d103      	bne.n	8002406 <Protocal+0x70e>
		{
			State = Idle;
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <Protocal+0x7b8>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
			break;
 8002404:	e028      	b.n	8002458 <Protocal+0x760>
		}
		if (n_Station>0)
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <Protocal+0x7c0>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <Protocal+0x74a>
		{
			Station[via_point] = (dataIn&0xf0)>>4;
 800240e:	89fb      	ldrh	r3, [r7, #14]
 8002410:	111b      	asrs	r3, r3, #4
 8002412:	b29b      	uxth	r3, r3
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <Protocal+0x7c4>)
 8002416:	7812      	ldrb	r2, [r2, #0]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	b299      	uxth	r1, r3
 800241e:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <Protocal+0x7c8>)
 8002420:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			via_point++;
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <Protocal+0x7c4>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b23      	ldr	r3, [pc, #140]	; (80024bc <Protocal+0x7c4>)
 800242e:	701a      	strb	r2, [r3, #0]
			n_Station--;
 8002430:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <Protocal+0x7c0>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	3b01      	subs	r3, #1
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <Protocal+0x7c0>)
 800243a:	701a      	strb	r2, [r3, #0]
			State = Frame3_station;
 800243c:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <Protocal+0x7b8>)
 800243e:	2205      	movs	r2, #5
 8002440:	701a      	strb	r2, [r3, #0]
		}
		if (n_Station==0)
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <Protocal+0x7c0>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <Protocal+0x75e>
		{
			State = Idle;
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <Protocal+0x7b8>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
			break;
 8002450:	e002      	b.n	8002458 <Protocal+0x760>
		break;
 8002452:	bf00      	nop
 8002454:	e000      	b.n	8002458 <Protocal+0x760>
		}
		break;
 8002456:	bf00      	nop
	}
}
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bdb0      	pop	{r4, r5, r7, pc}
 8002460:	00000000 	.word	0x00000000
 8002464:	406fe000 	.word	0x406fe000
 8002468:	00000000 	.word	0x00000000
 800246c:	40c38800 	.word	0x40c38800
 8002470:	53c8d4f1 	.word	0x53c8d4f1
 8002474:	400921fb 	.word	0x400921fb
 8002478:	20000509 	.word	0x20000509
 800247c:	20000512 	.word	0x20000512
 8002480:	20000510 	.word	0x20000510
 8002484:	20000516 	.word	0x20000516
 8002488:	20000507 	.word	0x20000507
 800248c:	200003f7 	.word	0x200003f7
 8002490:	2000050c 	.word	0x2000050c
 8002494:	20000410 	.word	0x20000410
 8002498:	200003f6 	.word	0x200003f6
 800249c:	40240000 	.word	0x40240000
 80024a0:	20000014 	.word	0x20000014
 80024a4:	40700000 	.word	0x40700000
 80024a8:	40668000 	.word	0x40668000
 80024ac:	20000010 	.word	0x20000010
 80024b0:	2000050e 	.word	0x2000050e
 80024b4:	20000411 	.word	0x20000411
 80024b8:	200003f8 	.word	0x200003f8
 80024bc:	200004a8 	.word	0x200004a8
 80024c0:	200003fc 	.word	0x200003fc

080024c4 <CheckSumFunction>:

int16_t CheckSumFunction(uint8_t CheckSum, uint8_t Frame, uint8_t Data)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
 80024ce:	460b      	mov	r3, r1
 80024d0:	71bb      	strb	r3, [r7, #6]
 80024d2:	4613      	mov	r3, r2
 80024d4:	717b      	strb	r3, [r7, #5]
	uint16_t result = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	81fb      	strh	r3, [r7, #14]
	if (Frame == 1)
 80024da:	79bb      	ldrb	r3, [r7, #6]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d103      	bne.n	80024e8 <CheckSumFunction+0x24>
	{
		result = ~(CheckSum);
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	81fb      	strh	r3, [r7, #14]
	}
	if (Frame == 2)
 80024e8:	79bb      	ldrb	r3, [r7, #6]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d107      	bne.n	80024fe <CheckSumFunction+0x3a>
	{
		result = ~((CheckSum)+Data);
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	797b      	ldrb	r3, [r7, #5]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	81fb      	strh	r3, [r7, #14]
	}
	if (Frame == 3)
 80024fe:	79bb      	ldrb	r3, [r7, #6]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d107      	bne.n	8002514 <CheckSumFunction+0x50>
	{
		result = ~((CheckSum)+Data);
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	b29a      	uxth	r2, r3
 8002508:	797b      	ldrb	r3, [r7, #5]
 800250a:	b29b      	uxth	r3, r3
 800250c:	4413      	add	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	81fb      	strh	r3, [r7, #14]
	}
	return result;
 8002514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <WriteACK1>:

void WriteACK1()
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
	//*********write ACK1*****************
	uint8_t temp[] = {0x58, 0b01110101};
 800252a:	f247 5358 	movw	r3, #30040	; 0x7558
 800252e:	80bb      	strh	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 2);
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	2202      	movs	r2, #2
 8002534:	4619      	mov	r1, r3
 8002536:	4803      	ldr	r0, [pc, #12]	; (8002544 <WriteACK1+0x20>)
 8002538:	f7ff fb94 	bl	8001c64 <UARTTxWrite>
	//************************************
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200002dc 	.word	0x200002dc

08002548 <WriteACK2>:
void WriteACK2()
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
	//*********write ACK2*****************
	uint8_t temp[] = {70, 0x6e};
 800254e:	f646 6346 	movw	r3, #28230	; 0x6e46
 8002552:	80bb      	strh	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 2);
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2202      	movs	r2, #2
 8002558:	4619      	mov	r1, r3
 800255a:	4803      	ldr	r0, [pc, #12]	; (8002568 <WriteACK2+0x20>)
 800255c:	f7ff fb82 	bl	8001c64 <UARTTxWrite>
	//************************************
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200002dc 	.word	0x200002dc

0800256c <SetHome>:
void SetHome()
{
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	af00      	add	r7, sp, #0
	HomeSignal[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) ; //Read set home
 8002570:	2101      	movs	r1, #1
 8002572:	4838      	ldr	r0, [pc, #224]	; (8002654 <SetHome+0xe8>)
 8002574:	f002 f92a 	bl	80047cc <HAL_GPIO_ReadPin>
 8002578:	4603      	mov	r3, r0
 800257a:	461a      	mov	r2, r3
 800257c:	4b36      	ldr	r3, [pc, #216]	; (8002658 <SetHome+0xec>)
 800257e:	701a      	strb	r2, [r3, #0]
	sum = HomeSignal[0] + HomeSignal[1]+ HomeSignal[2]+ HomeSignal[3]+ HomeSignal[4]+ HomeSignal[5]+ HomeSignal[6]+ HomeSignal[7];
 8002580:	4b35      	ldr	r3, [pc, #212]	; (8002658 <SetHome+0xec>)
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	4b34      	ldr	r3, [pc, #208]	; (8002658 <SetHome+0xec>)
 8002586:	785b      	ldrb	r3, [r3, #1]
 8002588:	4413      	add	r3, r2
 800258a:	b2da      	uxtb	r2, r3
 800258c:	4b32      	ldr	r3, [pc, #200]	; (8002658 <SetHome+0xec>)
 800258e:	789b      	ldrb	r3, [r3, #2]
 8002590:	4413      	add	r3, r2
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b30      	ldr	r3, [pc, #192]	; (8002658 <SetHome+0xec>)
 8002596:	78db      	ldrb	r3, [r3, #3]
 8002598:	4413      	add	r3, r2
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <SetHome+0xec>)
 800259e:	791b      	ldrb	r3, [r3, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <SetHome+0xec>)
 80025a6:	795b      	ldrb	r3, [r3, #5]
 80025a8:	4413      	add	r3, r2
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <SetHome+0xec>)
 80025ae:	799b      	ldrb	r3, [r3, #6]
 80025b0:	4413      	add	r3, r2
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b28      	ldr	r3, [pc, #160]	; (8002658 <SetHome+0xec>)
 80025b6:	79db      	ldrb	r3, [r3, #7]
 80025b8:	4413      	add	r3, r2
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b27      	ldr	r3, [pc, #156]	; (800265c <SetHome+0xf0>)
 80025be:	701a      	strb	r2, [r3, #0]

	if (SetHomeFlag == 0)
 80025c0:	4b27      	ldr	r3, [pc, #156]	; (8002660 <SetHome+0xf4>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d110      	bne.n	80025ea <SetHome+0x7e>
	{
		request = 5;
 80025c8:	4b26      	ldr	r3, [pc, #152]	; (8002664 <SetHome+0xf8>)
 80025ca:	4a27      	ldr	r2, [pc, #156]	; (8002668 <SetHome+0xfc>)
 80025cc:	601a      	str	r2, [r3, #0]
		if (sum > 0)
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <SetHome+0xf0>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <SetHome+0x7e>
		{
			SetHomeFlag = 1;
 80025d6:	4b22      	ldr	r3, [pc, #136]	; (8002660 <SetHome+0xf4>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
			SetHomeTimeStamp = micros();
 80025dc:	f000 ff10 	bl	8003400 <micros>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4921      	ldr	r1, [pc, #132]	; (800266c <SetHome+0x100>)
 80025e6:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}
	if (SetHomeFlag == 1)
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <SetHome+0xf4>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d113      	bne.n	800261a <SetHome+0xae>
	{
		request = 0;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <SetHome+0xf8>)
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
		if (micros()-SetHomeTimeStamp > 1000000)
 80025fa:	f000 ff01 	bl	8003400 <micros>
 80025fe:	4b1b      	ldr	r3, [pc, #108]	; (800266c <SetHome+0x100>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	1a84      	subs	r4, r0, r2
 8002606:	eb61 0503 	sbc.w	r5, r1, r3
 800260a:	4b19      	ldr	r3, [pc, #100]	; (8002670 <SetHome+0x104>)
 800260c:	429c      	cmp	r4, r3
 800260e:	f175 0300 	sbcs.w	r3, r5, #0
 8002612:	d302      	bcc.n	800261a <SetHome+0xae>
		{
			SetHomeFlag = 2;
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <SetHome+0xf4>)
 8002616:	2202      	movs	r2, #2
 8002618:	701a      	strb	r2, [r3, #0]
		}
	}
	if (SetHomeFlag == 2)
 800261a:	4b11      	ldr	r3, [pc, #68]	; (8002660 <SetHome+0xf4>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d115      	bne.n	800264e <SetHome+0xe2>
	{
		request = -0.5;
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <SetHome+0xf8>)
 8002624:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8002628:	601a      	str	r2, [r3, #0]
		if (sum > 0)
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <SetHome+0xf0>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <SetHome+0xe2>
		{
			request = 0;
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <SetHome+0xf8>)
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
			htim3.Instance->CNT = 0;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <SetHome+0x108>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
			SetHomeFlag = 0;
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <SetHome+0xf4>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
			StartSetHome = 0;
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <SetHome+0x10c>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800264e:	bf00      	nop
 8002650:	bdb0      	pop	{r4, r5, r7, pc}
 8002652:	bf00      	nop
 8002654:	40020800 	.word	0x40020800
 8002658:	200004c4 	.word	0x200004c4
 800265c:	200004ce 	.word	0x200004ce
 8002660:	200004cc 	.word	0x200004cc
 8002664:	200004e4 	.word	0x200004e4
 8002668:	40a00000 	.word	0x40a00000
 800266c:	200004d0 	.word	0x200004d0
 8002670:	000f4241 	.word	0x000f4241
 8002674:	20000190 	.word	0x20000190
 8002678:	200004cd 	.word	0x200004cd
 800267c:	00000000 	.word	0x00000000

08002680 <Trajec>:


void Trajec()
{
 8002680:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002684:	b088      	sub	sp, #32
 8002686:	af00      	add	r7, sp, #0
	float Vmax;
	Vmax = VmaxRPM * 0.10472 ; //rad per sec
 8002688:	4bbb      	ldr	r3, [pc, #748]	; (8002978 <Trajec+0x2f8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff07 	bl	80004a0 <__aeabi_f2d>
 8002692:	a3ad      	add	r3, pc, #692	; (adr r3, 8002948 <Trajec+0x2c8>)
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f7fd ff5a 	bl	8000550 <__aeabi_dmul>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	f7fe fa2c 	bl	8000b00 <__aeabi_d2f>
 80026a8:	4603      	mov	r3, r0
 80026aa:	61fb      	str	r3, [r7, #28]
	float Amax = 0.5 ;  //rad per sec square
 80026ac:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80026b0:	61bb      	str	r3, [r7, #24]
	if (ST == 0)
 80026b2:	4bb2      	ldr	r3, [pc, #712]	; (800297c <Trajec+0x2fc>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d129      	bne.n	800270e <Trajec+0x8e>
	{
		StartTime = micros() ;
 80026ba:	f000 fea1 	bl	8003400 <micros>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	f7fe fb33 	bl	8000d30 <__aeabi_ul2f>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4aac      	ldr	r2, [pc, #688]	; (8002980 <Trajec+0x300>)
 80026ce:	6013      	str	r3, [r2, #0]
		ST = 1 ;
 80026d0:	4baa      	ldr	r3, [pc, #680]	; (800297c <Trajec+0x2fc>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
		StartPos = Degree * 3.14159 / 180.0 ; //rad
 80026d6:	4bab      	ldr	r3, [pc, #684]	; (8002984 <Trajec+0x304>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fee0 	bl	80004a0 <__aeabi_f2d>
 80026e0:	a39b      	add	r3, pc, #620	; (adr r3, 8002950 <Trajec+0x2d0>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	f7fd ff33 	bl	8000550 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	4ba4      	ldr	r3, [pc, #656]	; (8002988 <Trajec+0x308>)
 80026f8:	f7fe f854 	bl	80007a4 <__aeabi_ddiv>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f7fe f9fc 	bl	8000b00 <__aeabi_d2f>
 8002708:	4603      	mov	r3, r0
 800270a:	4aa0      	ldr	r2, [pc, #640]	; (800298c <Trajec+0x30c>)
 800270c:	6013      	str	r3, [r2, #0]
	}
	tau = (micros() - StartTime) / 1000000 ; //sec
 800270e:	f000 fe77 	bl	8003400 <micros>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f7fe fb09 	bl	8000d30 <__aeabi_ul2f>
 800271e:	ee07 0a10 	vmov	s14, r0
 8002722:	4b97      	ldr	r3, [pc, #604]	; (8002980 <Trajec+0x300>)
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	ee37 7a67 	vsub.f32	s14, s14, s15
 800272c:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002990 <Trajec+0x310>
 8002730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002734:	4b97      	ldr	r3, [pc, #604]	; (8002994 <Trajec+0x314>)
 8002736:	edc3 7a00 	vstr	s15, [r3]

	Qi = StartPos ;
 800273a:	4b94      	ldr	r3, [pc, #592]	; (800298c <Trajec+0x30c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a96      	ldr	r2, [pc, #600]	; (8002998 <Trajec+0x318>)
 8002740:	6013      	str	r3, [r2, #0]
	Qf = FinalPos * 3.14159 / 180.0 ;
 8002742:	4b96      	ldr	r3, [pc, #600]	; (800299c <Trajec+0x31c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd feaa 	bl	80004a0 <__aeabi_f2d>
 800274c:	a380      	add	r3, pc, #512	; (adr r3, 8002950 <Trajec+0x2d0>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	f7fd fefd 	bl	8000550 <__aeabi_dmul>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	4b89      	ldr	r3, [pc, #548]	; (8002988 <Trajec+0x308>)
 8002764:	f7fe f81e 	bl	80007a4 <__aeabi_ddiv>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	f7fe f9c6 	bl	8000b00 <__aeabi_d2f>
 8002774:	4603      	mov	r3, r0
 8002776:	4a8a      	ldr	r2, [pc, #552]	; (80029a0 <Trajec+0x320>)
 8002778:	6013      	str	r3, [r2, #0]

	if (Qf - Qi > 3.14159265)
 800277a:	4b89      	ldr	r3, [pc, #548]	; (80029a0 <Trajec+0x320>)
 800277c:	ed93 7a00 	vldr	s14, [r3]
 8002780:	4b85      	ldr	r3, [pc, #532]	; (8002998 <Trajec+0x318>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800278a:	ee17 0a90 	vmov	r0, s15
 800278e:	f7fd fe87 	bl	80004a0 <__aeabi_f2d>
 8002792:	a371      	add	r3, pc, #452	; (adr r3, 8002958 <Trajec+0x2d8>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fe f96a 	bl	8000a70 <__aeabi_dcmpgt>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d012      	beq.n	80027c8 <Trajec+0x148>
	{
		Qi += 2*3.14159265;
 80027a2:	4b7d      	ldr	r3, [pc, #500]	; (8002998 <Trajec+0x318>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd fe7a 	bl	80004a0 <__aeabi_f2d>
 80027ac:	a36c      	add	r3, pc, #432	; (adr r3, 8002960 <Trajec+0x2e0>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd fd17 	bl	80001e4 <__adddf3>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f7fe f99f 	bl	8000b00 <__aeabi_d2f>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4a74      	ldr	r2, [pc, #464]	; (8002998 <Trajec+0x318>)
 80027c6:	6013      	str	r3, [r2, #0]
	}
	if (Qf - Qi < -3.14159265)
 80027c8:	4b75      	ldr	r3, [pc, #468]	; (80029a0 <Trajec+0x320>)
 80027ca:	ed93 7a00 	vldr	s14, [r3]
 80027ce:	4b72      	ldr	r3, [pc, #456]	; (8002998 <Trajec+0x318>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d8:	ee17 0a90 	vmov	r0, s15
 80027dc:	f7fd fe60 	bl	80004a0 <__aeabi_f2d>
 80027e0:	a361      	add	r3, pc, #388	; (adr r3, 8002968 <Trajec+0x2e8>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fe f925 	bl	8000a34 <__aeabi_dcmplt>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d012      	beq.n	8002816 <Trajec+0x196>
	{
		Qf += 2*3.14159265;
 80027f0:	4b6b      	ldr	r3, [pc, #428]	; (80029a0 <Trajec+0x320>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd fe53 	bl	80004a0 <__aeabi_f2d>
 80027fa:	a359      	add	r3, pc, #356	; (adr r3, 8002960 <Trajec+0x2e0>)
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	f7fd fcf0 	bl	80001e4 <__adddf3>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f7fe f978 	bl	8000b00 <__aeabi_d2f>
 8002810:	4603      	mov	r3, r0
 8002812:	4a63      	ldr	r2, [pc, #396]	; (80029a0 <Trajec+0x320>)
 8002814:	6013      	str	r3, [r2, #0]
	}
	TA1= (40.0 * sqrt(3.0))*(Qf - Qi);
 8002816:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <Trajec+0x320>)
 8002818:	ed93 7a00 	vldr	s14, [r3]
 800281c:	4b5e      	ldr	r3, [pc, #376]	; (8002998 <Trajec+0x318>)
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002826:	ee17 0a90 	vmov	r0, s15
 800282a:	f7fd fe39 	bl	80004a0 <__aeabi_f2d>
 800282e:	a350      	add	r3, pc, #320	; (adr r3, 8002970 <Trajec+0x2f0>)
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	f7fd fe8c 	bl	8000550 <__aeabi_dmul>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f7fe f95e 	bl	8000b00 <__aeabi_d2f>
 8002844:	4603      	mov	r3, r0
 8002846:	4a57      	ldr	r2, [pc, #348]	; (80029a4 <Trajec+0x324>)
 8002848:	6013      	str	r3, [r2, #0]
	TA2 = TA1/(3.0*Amax) ;
 800284a:	4b56      	ldr	r3, [pc, #344]	; (80029a4 <Trajec+0x324>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe26 	bl	80004a0 <__aeabi_f2d>
 8002854:	4680      	mov	r8, r0
 8002856:	4689      	mov	r9, r1
 8002858:	69b8      	ldr	r0, [r7, #24]
 800285a:	f7fd fe21 	bl	80004a0 <__aeabi_f2d>
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b51      	ldr	r3, [pc, #324]	; (80029a8 <Trajec+0x328>)
 8002864:	f7fd fe74 	bl	8000550 <__aeabi_dmul>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4640      	mov	r0, r8
 800286e:	4649      	mov	r1, r9
 8002870:	f7fd ff98 	bl	80007a4 <__aeabi_ddiv>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f7fe f940 	bl	8000b00 <__aeabi_d2f>
 8002880:	4603      	mov	r3, r0
 8002882:	4a4a      	ldr	r2, [pc, #296]	; (80029ac <Trajec+0x32c>)
 8002884:	6013      	str	r3, [r2, #0]
	if (TA2 >= 0)
 8002886:	4b49      	ldr	r3, [pc, #292]	; (80029ac <Trajec+0x32c>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002894:	db04      	blt.n	80028a0 <Trajec+0x220>
	{
		TA3 = TA2;
 8002896:	4b45      	ldr	r3, [pc, #276]	; (80029ac <Trajec+0x32c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a45      	ldr	r2, [pc, #276]	; (80029b0 <Trajec+0x330>)
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00c      	b.n	80028ba <Trajec+0x23a>
	}
	else
	{
		TA3 = TA2 - (2*TA2);
 80028a0:	4b42      	ldr	r3, [pc, #264]	; (80029ac <Trajec+0x32c>)
 80028a2:	ed93 7a00 	vldr	s14, [r3]
 80028a6:	4b41      	ldr	r3, [pc, #260]	; (80029ac <Trajec+0x32c>)
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b4:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <Trajec+0x330>)
 80028b6:	edc3 7a00 	vstr	s15, [r3]
	}
	TA = sqrt(TA3) / 2.0 ;
 80028ba:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <Trajec+0x330>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fdee 	bl	80004a0 <__aeabi_f2d>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	ec43 2b10 	vmov	d0, r2, r3
 80028cc:	f005 fbf0 	bl	80080b0 <sqrt>
 80028d0:	ec51 0b10 	vmov	r0, r1, d0
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028dc:	f7fd ff62 	bl	80007a4 <__aeabi_ddiv>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f90a 	bl	8000b00 <__aeabi_d2f>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4a31      	ldr	r2, [pc, #196]	; (80029b4 <Trajec+0x334>)
 80028f0:	6013      	str	r3, [r2, #0]

	TV1 = (15*Qf - 15*Qi)/(8*Vmax);
 80028f2:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <Trajec+0x320>)
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80028fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002900:	4b25      	ldr	r3, [pc, #148]	; (8002998 <Trajec+0x318>)
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800290a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800290e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002912:	edd7 7a07 	vldr	s15, [r7, #28]
 8002916:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800291a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800291e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002922:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <Trajec+0x338>)
 8002924:	edc3 7a00 	vstr	s15, [r3]
	if (TV1 >= 0)
 8002928:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <Trajec+0x338>)
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002936:	db43      	blt.n	80029c0 <Trajec+0x340>
	{
		TV = TV1;
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <Trajec+0x338>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <Trajec+0x33c>)
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e04b      	b.n	80029da <Trajec+0x35a>
 8002942:	bf00      	nop
 8002944:	f3af 8000 	nop.w
 8002948:	0f3cb3e5 	.word	0x0f3cb3e5
 800294c:	3fbaceee 	.word	0x3fbaceee
 8002950:	f01b866e 	.word	0xf01b866e
 8002954:	400921f9 	.word	0x400921f9
 8002958:	53c8d4f1 	.word	0x53c8d4f1
 800295c:	400921fb 	.word	0x400921fb
 8002960:	53c8d4f1 	.word	0x53c8d4f1
 8002964:	401921fb 	.word	0x401921fb
 8002968:	53c8d4f1 	.word	0x53c8d4f1
 800296c:	c00921fb 	.word	0xc00921fb
 8002970:	d1372fea 	.word	0xd1372fea
 8002974:	4051520c 	.word	0x4051520c
 8002978:	20000014 	.word	0x20000014
 800297c:	20000465 	.word	0x20000465
 8002980:	20000460 	.word	0x20000460
 8002984:	200004fc 	.word	0x200004fc
 8002988:	40668000 	.word	0x40668000
 800298c:	20000474 	.word	0x20000474
 8002990:	49742400 	.word	0x49742400
 8002994:	2000048c 	.word	0x2000048c
 8002998:	20000478 	.word	0x20000478
 800299c:	20000010 	.word	0x20000010
 80029a0:	2000047c 	.word	0x2000047c
 80029a4:	20000490 	.word	0x20000490
 80029a8:	40080000 	.word	0x40080000
 80029ac:	20000494 	.word	0x20000494
 80029b0:	20000498 	.word	0x20000498
 80029b4:	20000480 	.word	0x20000480
 80029b8:	2000049c 	.word	0x2000049c
 80029bc:	20000484 	.word	0x20000484
	}
	else
	{
		TV = TV1 - (2*TV1);
 80029c0:	4bd6      	ldr	r3, [pc, #856]	; (8002d1c <Trajec+0x69c>)
 80029c2:	ed93 7a00 	vldr	s14, [r3]
 80029c6:	4bd5      	ldr	r3, [pc, #852]	; (8002d1c <Trajec+0x69c>)
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d4:	4bd2      	ldr	r3, [pc, #840]	; (8002d20 <Trajec+0x6a0>)
 80029d6:	edc3 7a00 	vstr	s15, [r3]
	}

	if (TV > TA)
 80029da:	4bd1      	ldr	r3, [pc, #836]	; (8002d20 <Trajec+0x6a0>)
 80029dc:	ed93 7a00 	vldr	s14, [r3]
 80029e0:	4bd0      	ldr	r3, [pc, #832]	; (8002d24 <Trajec+0x6a4>)
 80029e2:	edd3 7a00 	vldr	s15, [r3]
 80029e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	dd03      	ble.n	80029f8 <Trajec+0x378>
	{
		T = TV ;
 80029f0:	4bcb      	ldr	r3, [pc, #812]	; (8002d20 <Trajec+0x6a0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4acc      	ldr	r2, [pc, #816]	; (8002d28 <Trajec+0x6a8>)
 80029f6:	6013      	str	r3, [r2, #0]
	}
	if (TV <= TA)
 80029f8:	4bc9      	ldr	r3, [pc, #804]	; (8002d20 <Trajec+0x6a0>)
 80029fa:	ed93 7a00 	vldr	s14, [r3]
 80029fe:	4bc9      	ldr	r3, [pc, #804]	; (8002d24 <Trajec+0x6a4>)
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0c:	d803      	bhi.n	8002a16 <Trajec+0x396>
	{
		T = TA ;
 8002a0e:	4bc5      	ldr	r3, [pc, #788]	; (8002d24 <Trajec+0x6a4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4ac5      	ldr	r2, [pc, #788]	; (8002d28 <Trajec+0x6a8>)
 8002a14:	6013      	str	r3, [r2, #0]
	}
	float a0 = Qi ;
 8002a16:	4bc5      	ldr	r3, [pc, #788]	; (8002d2c <Trajec+0x6ac>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	617b      	str	r3, [r7, #20]
	float a1 = 0 ;
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
	float a2 = 0 ;
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
	float a3 = (1 / (2 * (T*T*T))) * (20 * (Qf-Qi)) ;
 8002a28:	4bbf      	ldr	r3, [pc, #764]	; (8002d28 <Trajec+0x6a8>)
 8002a2a:	ed93 7a00 	vldr	s14, [r3]
 8002a2e:	4bbe      	ldr	r3, [pc, #760]	; (8002d28 <Trajec+0x6a8>)
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a38:	4bbb      	ldr	r3, [pc, #748]	; (8002d28 <Trajec+0x6a8>)
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a4e:	4bb8      	ldr	r3, [pc, #736]	; (8002d30 <Trajec+0x6b0>)
 8002a50:	edd3 6a00 	vldr	s13, [r3]
 8002a54:	4bb5      	ldr	r3, [pc, #724]	; (8002d2c <Trajec+0x6ac>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a5e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002a62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6a:	edc7 7a02 	vstr	s15, [r7, #8]
	float a4 = (1 / (2 * (T*T*T*T))) * (30 * (Qi-Qf)) ;
 8002a6e:	4bae      	ldr	r3, [pc, #696]	; (8002d28 <Trajec+0x6a8>)
 8002a70:	ed93 7a00 	vldr	s14, [r3]
 8002a74:	4bac      	ldr	r3, [pc, #688]	; (8002d28 <Trajec+0x6a8>)
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a7e:	4baa      	ldr	r3, [pc, #680]	; (8002d28 <Trajec+0x6a8>)
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a88:	4ba7      	ldr	r3, [pc, #668]	; (8002d28 <Trajec+0x6a8>)
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a9e:	4ba3      	ldr	r3, [pc, #652]	; (8002d2c <Trajec+0x6ac>)
 8002aa0:	edd3 6a00 	vldr	s13, [r3]
 8002aa4:	4ba2      	ldr	r3, [pc, #648]	; (8002d30 <Trajec+0x6b0>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002aae:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002ab2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aba:	edc7 7a01 	vstr	s15, [r7, #4]
	float a5 = (1 / (2 * (T*T*T*T*T))) * (12 * (Qf-Qi)) ;
 8002abe:	4b9a      	ldr	r3, [pc, #616]	; (8002d28 <Trajec+0x6a8>)
 8002ac0:	ed93 7a00 	vldr	s14, [r3]
 8002ac4:	4b98      	ldr	r3, [pc, #608]	; (8002d28 <Trajec+0x6a8>)
 8002ac6:	edd3 7a00 	vldr	s15, [r3]
 8002aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ace:	4b96      	ldr	r3, [pc, #600]	; (8002d28 <Trajec+0x6a8>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad8:	4b93      	ldr	r3, [pc, #588]	; (8002d28 <Trajec+0x6a8>)
 8002ada:	edd3 7a00 	vldr	s15, [r3]
 8002ade:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae2:	4b91      	ldr	r3, [pc, #580]	; (8002d28 <Trajec+0x6a8>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002af0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002af4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002af8:	4b8d      	ldr	r3, [pc, #564]	; (8002d30 <Trajec+0x6b0>)
 8002afa:	edd3 6a00 	vldr	s13, [r3]
 8002afe:	4b8b      	ldr	r3, [pc, #556]	; (8002d2c <Trajec+0x6ac>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b08:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002b0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b14:	edc7 7a00 	vstr	s15, [r7]

	if (micros() - StartTime < T*1000000)
 8002b18:	f000 fc72 	bl	8003400 <micros>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	f7fe f904 	bl	8000d30 <__aeabi_ul2f>
 8002b28:	ee07 0a10 	vmov	s14, r0
 8002b2c:	4b81      	ldr	r3, [pc, #516]	; (8002d34 <Trajec+0x6b4>)
 8002b2e:	edd3 7a00 	vldr	s15, [r3]
 8002b32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b36:	4b7c      	ldr	r3, [pc, #496]	; (8002d28 <Trajec+0x6a8>)
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8002d38 <Trajec+0x6b8>
 8002b40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4c:	f140 8156 	bpl.w	8002dfc <Trajec+0x77c>
	{
		if (micros() - Trajtimestamp > 1500)
 8002b50:	f000 fc56 	bl	8003400 <micros>
 8002b54:	4b79      	ldr	r3, [pc, #484]	; (8002d3c <Trajec+0x6bc>)
 8002b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5a:	1a84      	subs	r4, r0, r2
 8002b5c:	eb61 0503 	sbc.w	r5, r1, r3
 8002b60:	f240 53dd 	movw	r3, #1501	; 0x5dd
 8002b64:	429c      	cmp	r4, r3
 8002b66:	f175 0300 	sbcs.w	r3, r5, #0
 8002b6a:	f0c0 8147 	bcc.w	8002dfc <Trajec+0x77c>
		{
			position = a0 + a1*tau + a2*tau*tau + a3*tau*tau*tau + a4*tau*tau*tau*tau + a5*tau*tau*tau*tau*tau; //rad
 8002b6e:	4b74      	ldr	r3, [pc, #464]	; (8002d40 <Trajec+0x6c0>)
 8002b70:	ed93 7a00 	vldr	s14, [r3]
 8002b74:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b84:	4b6e      	ldr	r3, [pc, #440]	; (8002d40 <Trajec+0x6c0>)
 8002b86:	edd3 6a00 	vldr	s13, [r3]
 8002b8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b92:	4b6b      	ldr	r3, [pc, #428]	; (8002d40 <Trajec+0x6c0>)
 8002b94:	edd3 7a00 	vldr	s15, [r3]
 8002b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba0:	4b67      	ldr	r3, [pc, #412]	; (8002d40 <Trajec+0x6c0>)
 8002ba2:	edd3 6a00 	vldr	s13, [r3]
 8002ba6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002baa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bae:	4b64      	ldr	r3, [pc, #400]	; (8002d40 <Trajec+0x6c0>)
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bb8:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <Trajec+0x6c0>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc6:	4b5e      	ldr	r3, [pc, #376]	; (8002d40 <Trajec+0x6c0>)
 8002bc8:	edd3 6a00 	vldr	s13, [r3]
 8002bcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bd4:	4b5a      	ldr	r3, [pc, #360]	; (8002d40 <Trajec+0x6c0>)
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bde:	4b58      	ldr	r3, [pc, #352]	; (8002d40 <Trajec+0x6c0>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002be8:	4b55      	ldr	r3, [pc, #340]	; (8002d40 <Trajec+0x6c0>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf6:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <Trajec+0x6c0>)
 8002bf8:	edd3 6a00 	vldr	s13, [r3]
 8002bfc:	edd7 7a00 	vldr	s15, [r7]
 8002c00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c04:	4b4e      	ldr	r3, [pc, #312]	; (8002d40 <Trajec+0x6c0>)
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c0e:	4b4c      	ldr	r3, [pc, #304]	; (8002d40 <Trajec+0x6c0>)
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c18:	4b49      	ldr	r3, [pc, #292]	; (8002d40 <Trajec+0x6c0>)
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c22:	4b47      	ldr	r3, [pc, #284]	; (8002d40 <Trajec+0x6c0>)
 8002c24:	edd3 7a00 	vldr	s15, [r3]
 8002c28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <Trajec+0x6c4>)
 8002c32:	edc3 7a00 	vstr	s15, [r3]
			velocity = a1 + 2*a2*tau + 3*a3*tau*tau + 4*a4*tau*tau*tau + 5*a5*tau*tau*tau*tau; //rad/s
 8002c36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c3a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c3e:	4b40      	ldr	r3, [pc, #256]	; (8002d40 <Trajec+0x6c0>)
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c48:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c54:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c5c:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <Trajec+0x6c0>)
 8002c5e:	edd3 7a00 	vldr	s15, [r3]
 8002c62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c66:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <Trajec+0x6c0>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c74:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c78:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002c7c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c80:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <Trajec+0x6c0>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c8a:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <Trajec+0x6c0>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <Trajec+0x6c0>)
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca2:	edd7 7a00 	vldr	s15, [r7]
 8002ca6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002caa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <Trajec+0x6c0>)
 8002cb0:	edd3 7a00 	vldr	s15, [r3]
 8002cb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cb8:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <Trajec+0x6c0>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <Trajec+0x6c0>)
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <Trajec+0x6c0>)
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <Trajec+0x6c8>)
 8002cdc:	edc3 7a00 	vstr	s15, [r3]
			acceleration = 2*a2 + 6*a3*tau + 12*a4*tau*tau + 20*a5*tau*tau*tau; //rad per secsquare
 8002ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ce8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cec:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002cf0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <Trajec+0x6c0>)
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d02:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d06:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002d0a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <Trajec+0x6c0>)
 8002d10:	edd3 7a00 	vldr	s15, [r3]
 8002d14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d18:	e018      	b.n	8002d4c <Trajec+0x6cc>
 8002d1a:	bf00      	nop
 8002d1c:	2000049c 	.word	0x2000049c
 8002d20:	20000484 	.word	0x20000484
 8002d24:	20000480 	.word	0x20000480
 8002d28:	20000488 	.word	0x20000488
 8002d2c:	20000478 	.word	0x20000478
 8002d30:	2000047c 	.word	0x2000047c
 8002d34:	20000460 	.word	0x20000460
 8002d38:	49742400 	.word	0x49742400
 8002d3c:	200004a0 	.word	0x200004a0
 8002d40:	2000048c 	.word	0x2000048c
 8002d44:	2000046c 	.word	0x2000046c
 8002d48:	20000468 	.word	0x20000468
 8002d4c:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <Trajec+0x7e8>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5a:	edd7 7a00 	vldr	s15, [r7]
 8002d5e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002d62:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d66:	4b40      	ldr	r3, [pc, #256]	; (8002e68 <Trajec+0x7e8>)
 8002d68:	edd3 7a00 	vldr	s15, [r3]
 8002d6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d70:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <Trajec+0x7e8>)
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <Trajec+0x7e8>)
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d88:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <Trajec+0x7ec>)
 8002d8a:	edc3 7a00 	vstr	s15, [r3]

			position = position * 180 / 3.1415 ; //degree
 8002d8e:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <Trajec+0x7f0>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002e74 <Trajec+0x7f4>
 8002d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9c:	ee17 0a90 	vmov	r0, s15
 8002da0:	f7fd fb7e 	bl	80004a0 <__aeabi_f2d>
 8002da4:	a32c      	add	r3, pc, #176	; (adr r3, 8002e58 <Trajec+0x7d8>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f7fd fcfb 	bl	80007a4 <__aeabi_ddiv>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7fd fea3 	bl	8000b00 <__aeabi_d2f>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <Trajec+0x7f0>)
 8002dbe:	6013      	str	r3, [r2, #0]
			velocity = velocity * 9.549297; //rpm
 8002dc0:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <Trajec+0x7f8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fb6b 	bl	80004a0 <__aeabi_f2d>
 8002dca:	a325      	add	r3, pc, #148	; (adr r3, 8002e60 <Trajec+0x7e0>)
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f7fd fbbe 	bl	8000550 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f7fd fe90 	bl	8000b00 <__aeabi_d2f>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <Trajec+0x7f8>)
 8002de4:	6013      	str	r3, [r2, #0]
			Trajtimestamp = micros() ;
 8002de6:	f000 fb0b 	bl	8003400 <micros>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4923      	ldr	r1, [pc, #140]	; (8002e7c <Trajec+0x7fc>)
 8002df0:	e9c1 2300 	strd	r2, r3, [r1]
			request = velocity ;
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <Trajec+0x7f8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <Trajec+0x800>)
 8002dfa:	6013      	str	r3, [r2, #0]
		}
	}
	if (micros() - StartTime > (T*1000000)+500000)
 8002dfc:	f000 fb00 	bl	8003400 <micros>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f7fd ff92 	bl	8000d30 <__aeabi_ul2f>
 8002e0c:	ee07 0a10 	vmov	s14, r0
 8002e10:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <Trajec+0x804>)
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <Trajec+0x808>)
 8002e1c:	edd3 7a00 	vldr	s15, [r3]
 8002e20:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002e8c <Trajec+0x80c>
 8002e24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e28:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002e90 <Trajec+0x810>
 8002e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e38:	dc00      	bgt.n	8002e3c <Trajec+0x7bc>
//			StartNstation = 10;
//		}

	}

}
 8002e3a:	e005      	b.n	8002e48 <Trajec+0x7c8>
		FinishedTraj = 1;
 8002e3c:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <Trajec+0x814>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
		StartMoving = 0;
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <Trajec+0x818>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e52:	bf00      	nop
 8002e54:	f3af 8000 	nop.w
 8002e58:	c083126f 	.word	0xc083126f
 8002e5c:	400921ca 	.word	0x400921ca
 8002e60:	74d594f2 	.word	0x74d594f2
 8002e64:	4023193d 	.word	0x4023193d
 8002e68:	2000048c 	.word	0x2000048c
 8002e6c:	20000470 	.word	0x20000470
 8002e70:	2000046c 	.word	0x2000046c
 8002e74:	43340000 	.word	0x43340000
 8002e78:	20000468 	.word	0x20000468
 8002e7c:	200004a0 	.word	0x200004a0
 8002e80:	200004e4 	.word	0x200004e4
 8002e84:	20000460 	.word	0x20000460
 8002e88:	20000488 	.word	0x20000488
 8002e8c:	49742400 	.word	0x49742400
 8002e90:	48f42400 	.word	0x48f42400
 8002e94:	200004b1 	.word	0x200004b1
 8002e98:	20000464 	.word	0x20000464

08002e9c <PIDinit>:

void PIDinit()
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
	preErr1 = 0 ;
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <PIDinit+0x64>)
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
	preErr2 = 0 ;
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <PIDinit+0x68>)
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
	PreviousPWM = 0 ;
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <PIDinit+0x6c>)
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
	PWMPercent = 0 ;
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <PIDinit+0x70>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	801a      	strh	r2, [r3, #0]
	Propotional = 0 ;
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <PIDinit+0x74>)
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
	Integrator = 0 ;
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <PIDinit+0x78>)
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
	Differentiator = 0 ;
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <PIDinit+0x7c>)
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
	P = 0 ;
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <PIDinit+0x80>)
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
	I = 0 ;
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <PIDinit+0x84>)
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
	D = 0 ;
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <PIDinit+0x88>)
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
	Tau = 0 ;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <PIDinit+0x8c>)
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	20000424 	.word	0x20000424
 8002f04:	20000428 	.word	0x20000428
 8002f08:	20000420 	.word	0x20000420
 8002f0c:	200004e8 	.word	0x200004e8
 8002f10:	2000042c 	.word	0x2000042c
 8002f14:	20000430 	.word	0x20000430
 8002f18:	20000434 	.word	0x20000434
 8002f1c:	20000440 	.word	0x20000440
 8002f20:	20000444 	.word	0x20000444
 8002f24:	20000448 	.word	0x20000448
 8002f28:	20000438 	.word	0x20000438

08002f2c <PID>:

void PID()
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
	float req,Vel ;
	if (request < 0)
 8002f32:	4b4e      	ldr	r3, [pc, #312]	; (800306c <PID+0x140>)
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f40:	d510      	bpl.n	8002f64 <PID+0x38>
	{
		req = - request ;
 8002f42:	4b4a      	ldr	r3, [pc, #296]	; (800306c <PID+0x140>)
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	eef1 7a67 	vneg.f32	s15, s15
 8002f4c:	edc7 7a03 	vstr	s15, [r7, #12]
		Vel = - VelocityRPM ;
 8002f50:	4b47      	ldr	r3, [pc, #284]	; (8003070 <PID+0x144>)
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	eef1 7a67 	vneg.f32	s15, s15
 8002f5a:	edc7 7a02 	vstr	s15, [r7, #8]
		Direction = 1 ;
 8002f5e:	4b45      	ldr	r3, [pc, #276]	; (8003074 <PID+0x148>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
	}
	if (request > 0)
 8002f64:	4b41      	ldr	r3, [pc, #260]	; (800306c <PID+0x140>)
 8002f66:	edd3 7a00 	vldr	s15, [r3]
 8002f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f72:	dd08      	ble.n	8002f86 <PID+0x5a>
	{
		req = request ;
 8002f74:	4b3d      	ldr	r3, [pc, #244]	; (800306c <PID+0x140>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
		Vel = VelocityRPM ;
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <PID+0x144>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60bb      	str	r3, [r7, #8]
		Direction = 0 ;
 8002f80:	4b3c      	ldr	r3, [pc, #240]	; (8003074 <PID+0x148>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
	}
	float error = req - Vel;
 8002f86:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f92:	edc7 7a01 	vstr	s15, [r7, #4]
	DeltaU = ((P+I+D)*error) - ((P+(2*D))*preErr1) + (D*preErr2) ;
 8002f96:	4b38      	ldr	r3, [pc, #224]	; (8003078 <PID+0x14c>)
 8002f98:	ed93 7a00 	vldr	s14, [r3]
 8002f9c:	4b37      	ldr	r3, [pc, #220]	; (800307c <PID+0x150>)
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <PID+0x154>)
 8002fa8:	edd3 7a00 	vldr	s15, [r3]
 8002fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fb8:	4b31      	ldr	r3, [pc, #196]	; (8003080 <PID+0x154>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <PID+0x14c>)
 8002fc4:	edd3 7a00 	vldr	s15, [r3]
 8002fc8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <PID+0x158>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fda:	4b29      	ldr	r3, [pc, #164]	; (8003080 <PID+0x154>)
 8002fdc:	edd3 6a00 	vldr	s13, [r3]
 8002fe0:	4b29      	ldr	r3, [pc, #164]	; (8003088 <PID+0x15c>)
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fee:	4b27      	ldr	r3, [pc, #156]	; (800308c <PID+0x160>)
 8002ff0:	edc3 7a00 	vstr	s15, [r3]
	PWMPercent = PreviousPWM + DeltaU + InitialPWM ;
 8002ff4:	4b26      	ldr	r3, [pc, #152]	; (8003090 <PID+0x164>)
 8002ff6:	ed93 7a00 	vldr	s14, [r3]
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <PID+0x160>)
 8002ffc:	edd3 7a00 	vldr	s15, [r3]
 8003000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003004:	4b23      	ldr	r3, [pc, #140]	; (8003094 <PID+0x168>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	ee07 3a90 	vmov	s15, r3
 800300c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003018:	ee17 3a90 	vmov	r3, s15
 800301c:	b29a      	uxth	r2, r3
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <PID+0x16c>)
 8003020:	801a      	strh	r2, [r3, #0]
	if (PWMPercent > 50000)
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <PID+0x16c>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	f24c 3250 	movw	r2, #50000	; 0xc350
 800302a:	4293      	cmp	r3, r2
 800302c:	d903      	bls.n	8003036 <PID+0x10a>
	{
		PWMPercent = 50000;
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <PID+0x16c>)
 8003030:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003034:	801a      	strh	r2, [r3, #0]
	}
	if (PWMPercent < 0)
	{
		PWMPercent = 0 ;
	}
	PreviousPWM = PWMPercent - InitialPWM ;
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <PID+0x16c>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	4b15      	ldr	r3, [pc, #84]	; (8003094 <PID+0x168>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <PID+0x164>)
 800304c:	edc3 7a00 	vstr	s15, [r3]
	preErr2 = preErr1 ;
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <PID+0x158>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <PID+0x15c>)
 8003056:	6013      	str	r3, [r2, #0]
	preErr1 = error ;
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <PID+0x158>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6013      	str	r3, [r2, #0]

}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	200004e4 	.word	0x200004e4
 8003070:	200004f8 	.word	0x200004f8
 8003074:	20000500 	.word	0x20000500
 8003078:	20000440 	.word	0x20000440
 800307c:	20000444 	.word	0x20000444
 8003080:	20000448 	.word	0x20000448
 8003084:	20000424 	.word	0x20000424
 8003088:	20000428 	.word	0x20000428
 800308c:	2000043c 	.word	0x2000043c
 8003090:	20000420 	.word	0x20000420
 8003094:	20000000 	.word	0x20000000
 8003098:	200004e8 	.word	0x200004e8

0800309c <SecondPID>:

void SecondPID()
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
	PP = 3;
 80030a2:	4b57      	ldr	r3, [pc, #348]	; (8003200 <SecondPID+0x164>)
 80030a4:	4a57      	ldr	r2, [pc, #348]	; (8003204 <SecondPID+0x168>)
 80030a6:	601a      	str	r2, [r3, #0]
	II = 0.01;
 80030a8:	4b57      	ldr	r3, [pc, #348]	; (8003208 <SecondPID+0x16c>)
 80030aa:	4a58      	ldr	r2, [pc, #352]	; (800320c <SecondPID+0x170>)
 80030ac:	601a      	str	r2, [r3, #0]
	DD = 1;
 80030ae:	4b58      	ldr	r3, [pc, #352]	; (8003210 <SecondPID+0x174>)
 80030b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030b4:	601a      	str	r2, [r3, #0]
	if (FinalPos - Degree < -350 && FinalPos > -360)
 80030b6:	4b57      	ldr	r3, [pc, #348]	; (8003214 <SecondPID+0x178>)
 80030b8:	ed93 7a00 	vldr	s14, [r3]
 80030bc:	4b56      	ldr	r3, [pc, #344]	; (8003218 <SecondPID+0x17c>)
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800321c <SecondPID+0x180>
 80030ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d2:	d513      	bpl.n	80030fc <SecondPID+0x60>
 80030d4:	4b4f      	ldr	r3, [pc, #316]	; (8003214 <SecondPID+0x178>)
 80030d6:	edd3 7a00 	vldr	s15, [r3]
 80030da:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003220 <SecondPID+0x184>
 80030de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e6:	dd09      	ble.n	80030fc <SecondPID+0x60>
	{
		FinalPos = FinalPos + 360;
 80030e8:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <SecondPID+0x178>)
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003224 <SecondPID+0x188>
 80030f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <SecondPID+0x178>)
 80030f8:	edc3 7a00 	vstr	s15, [r3]
	}
	if (FinalPos - Degree > 350 && FinalPos <= 360)
 80030fc:	4b45      	ldr	r3, [pc, #276]	; (8003214 <SecondPID+0x178>)
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	4b45      	ldr	r3, [pc, #276]	; (8003218 <SecondPID+0x17c>)
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003228 <SecondPID+0x18c>
 8003110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003118:	dd13      	ble.n	8003142 <SecondPID+0xa6>
 800311a:	4b3e      	ldr	r3, [pc, #248]	; (8003214 <SecondPID+0x178>)
 800311c:	edd3 7a00 	vldr	s15, [r3]
 8003120:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003224 <SecondPID+0x188>
 8003124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312c:	d809      	bhi.n	8003142 <SecondPID+0xa6>
	{
		FinalPos = FinalPos + 360;
 800312e:	4b39      	ldr	r3, [pc, #228]	; (8003214 <SecondPID+0x178>)
 8003130:	edd3 7a00 	vldr	s15, [r3]
 8003134:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003224 <SecondPID+0x188>
 8003138:	ee77 7a87 	vadd.f32	s15, s15, s14
 800313c:	4b35      	ldr	r3, [pc, #212]	; (8003214 <SecondPID+0x178>)
 800313e:	edc3 7a00 	vstr	s15, [r3]
	}
	if (FinalPos > Degree)
 8003142:	4b34      	ldr	r3, [pc, #208]	; (8003214 <SecondPID+0x178>)
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	4b33      	ldr	r3, [pc, #204]	; (8003218 <SecondPID+0x17c>)
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	dd02      	ble.n	800315e <SecondPID+0xc2>
	{
		Direction = 0;
 8003158:	4b34      	ldr	r3, [pc, #208]	; (800322c <SecondPID+0x190>)
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
	}
	if (FinalPos < Degree)
 800315e:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <SecondPID+0x178>)
 8003160:	ed93 7a00 	vldr	s14, [r3]
 8003164:	4b2c      	ldr	r3, [pc, #176]	; (8003218 <SecondPID+0x17c>)
 8003166:	edd3 7a00 	vldr	s15, [r3]
 800316a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003172:	d502      	bpl.n	800317a <SecondPID+0xde>
	{
		Direction = 1;
 8003174:	4b2d      	ldr	r3, [pc, #180]	; (800322c <SecondPID+0x190>)
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
	}
	float error = FinalPos - Degree;
 800317a:	4b26      	ldr	r3, [pc, #152]	; (8003214 <SecondPID+0x178>)
 800317c:	ed93 7a00 	vldr	s14, [r3]
 8003180:	4b25      	ldr	r3, [pc, #148]	; (8003218 <SecondPID+0x17c>)
 8003182:	edd3 7a00 	vldr	s15, [r3]
 8003186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318a:	edc7 7a01 	vstr	s15, [r7, #4]
	SUM = SUM + error ;
 800318e:	4b28      	ldr	r3, [pc, #160]	; (8003230 <SecondPID+0x194>)
 8003190:	ed93 7a00 	vldr	s14, [r3]
 8003194:	edd7 7a01 	vldr	s15, [r7, #4]
 8003198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <SecondPID+0x194>)
 800319e:	edc3 7a00 	vstr	s15, [r3]
	PWMPercent = (PP*error) + (II*SUM) + (DD*(error - PPreerror)) ;
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <SecondPID+0x164>)
 80031a4:	ed93 7a00 	vldr	s14, [r3]
 80031a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80031ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031b0:	4b15      	ldr	r3, [pc, #84]	; (8003208 <SecondPID+0x16c>)
 80031b2:	edd3 6a00 	vldr	s13, [r3]
 80031b6:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <SecondPID+0x194>)
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031c4:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <SecondPID+0x198>)
 80031c6:	edd3 7a00 	vldr	s15, [r3]
 80031ca:	edd7 6a01 	vldr	s13, [r7, #4]
 80031ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <SecondPID+0x174>)
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e4:	ee17 3a90 	vmov	r3, s15
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <SecondPID+0x19c>)
 80031ec:	801a      	strh	r2, [r3, #0]
	PPreerror = error;
 80031ee:	4a11      	ldr	r2, [pc, #68]	; (8003234 <SecondPID+0x198>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6013      	str	r3, [r2, #0]
//	if (FinalPos - Degree < 0.5 && FinalPos - Degree > -0.5)
//	{
//		YangMaiTrong = 0;
//	}
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	2000044c 	.word	0x2000044c
 8003204:	40400000 	.word	0x40400000
 8003208:	20000450 	.word	0x20000450
 800320c:	3c23d70a 	.word	0x3c23d70a
 8003210:	20000454 	.word	0x20000454
 8003214:	20000010 	.word	0x20000010
 8003218:	200004fc 	.word	0x200004fc
 800321c:	c3af0000 	.word	0xc3af0000
 8003220:	c3b40000 	.word	0xc3b40000
 8003224:	43b40000 	.word	0x43b40000
 8003228:	43af0000 	.word	0x43af0000
 800322c:	20000500 	.word	0x20000500
 8003230:	20000458 	.word	0x20000458
 8003234:	2000045c 	.word	0x2000045c
 8003238:	200004e8 	.word	0x200004e8

0800323c <Velocity>:
//	preVel = Vel ;
//}


float Velocity()
{
 800323c:	b5b0      	push	{r4, r5, r7, lr}
 800323e:	ed2d 8b02 	vpush	{d8}
 8003242:	af00      	add	r7, sp, #0
	  if (micros() - TimestampEncoder >= 100)
 8003244:	f000 f8dc 	bl	8003400 <micros>
 8003248:	4b28      	ldr	r3, [pc, #160]	; (80032ec <Velocity+0xb0>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	1a84      	subs	r4, r0, r2
 8003250:	eb61 0503 	sbc.w	r5, r1, r3
 8003254:	2c64      	cmp	r4, #100	; 0x64
 8003256:	f175 0300 	sbcs.w	r3, r5, #0
 800325a:	d325      	bcc.n	80032a8 <Velocity+0x6c>
	  {
		  TimestampEncoder = micros();
 800325c:	f000 f8d0 	bl	8003400 <micros>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4921      	ldr	r1, [pc, #132]	; (80032ec <Velocity+0xb0>)
 8003266:	e9c1 2300 	strd	r2, r3, [r1]
		  EncoderVel = (EncoderVel * 999 + EncoderVelocity_Update()) / 1000.0;
 800326a:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <Velocity+0xb4>)
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80032f4 <Velocity+0xb8>
 8003274:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003278:	f000 f86e 	bl	8003358 <EncoderVelocity_Update>
 800327c:	eef0 7a40 	vmov.f32	s15, s0
 8003280:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003284:	ee17 0a90 	vmov	r0, s15
 8003288:	f7fd f90a 	bl	80004a0 <__aeabi_f2d>
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <Velocity+0xbc>)
 8003292:	f7fd fa87 	bl	80007a4 <__aeabi_ddiv>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4610      	mov	r0, r2
 800329c:	4619      	mov	r1, r3
 800329e:	f7fd fc2f 	bl	8000b00 <__aeabi_d2f>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <Velocity+0xb4>)
 80032a6:	6013      	str	r3, [r2, #0]
	  }
	  return EncoderVel * 60.0 / 2048.0; //pulse per sec to rpm
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <Velocity+0xb4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd f8f7 	bl	80004a0 <__aeabi_f2d>
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <Velocity+0xc0>)
 80032b8:	f7fd f94a 	bl	8000550 <__aeabi_dmul>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <Velocity+0xc4>)
 80032ca:	f7fd fa6b 	bl	80007a4 <__aeabi_ddiv>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4610      	mov	r0, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	f7fd fc13 	bl	8000b00 <__aeabi_d2f>
 80032da:	4603      	mov	r3, r0
 80032dc:	ee07 3a90 	vmov	s15, r3
}
 80032e0:	eeb0 0a67 	vmov.f32	s0, s15
 80032e4:	46bd      	mov	sp, r7
 80032e6:	ecbd 8b02 	vpop	{d8}
 80032ea:	bdb0      	pop	{r4, r5, r7, pc}
 80032ec:	200004d8 	.word	0x200004d8
 80032f0:	200004e0 	.word	0x200004e0
 80032f4:	4479c000 	.word	0x4479c000
 80032f8:	408f4000 	.word	0x408f4000
 80032fc:	404e0000 	.word	0x404e0000
 8003300:	40a00000 	.word	0x40a00000

08003304 <PWMgeneration>:
void PWMgeneration()
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
	  if (Direction == 0)
 8003308:	4b10      	ldr	r3, [pc, #64]	; (800334c <PWMgeneration+0x48>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <PWMgeneration+0x16>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50000);
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <PWMgeneration+0x4c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003318:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 1)
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <PWMgeneration+0x48>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d103      	bne.n	800332a <PWMgeneration+0x26>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <PWMgeneration+0x4c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2200      	movs	r2, #0
 8003328:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 2)
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <PWMgeneration+0x48>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d104      	bne.n	800333c <PWMgeneration+0x38>
	  {
		  PIDinit() ;
 8003332:	f7ff fdb3 	bl	8002e9c <PIDinit>
		  PWMPercent = 0 ;
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <PWMgeneration+0x50>)
 8003338:	2200      	movs	r2, #0
 800333a:	801a      	strh	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMPercent);
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <PWMgeneration+0x50>)
 800333e:	881a      	ldrh	r2, [r3, #0]
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <PWMgeneration+0x4c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000500 	.word	0x20000500
 8003350:	20000100 	.word	0x20000100
 8003354:	200004e8 	.word	0x200004e8

08003358 <EncoderVelocity_Update>:
#define  HTIM_ENCODER htim3
#define  MAX_SUBPOSITION_OVERFLOW 1024
#define  MAX_ENCODER_PERIOD 2048

float EncoderVelocity_Update()
{
 8003358:	b5b0      	push	{r4, r5, r7, lr}
 800335a:	ed2d 8b02 	vpush	{d8}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8003362:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <EncoderVelocity_Update+0x98>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 800336a:	f000 f849 	bl	8003400 <micros>
 800336e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <EncoderVelocity_Update+0x9c>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800337c:	1a84      	subs	r4, r0, r2
 800337e:	eb61 0503 	sbc.w	r5, r1, r3
 8003382:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <EncoderVelocity_Update+0xa0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003396:	db04      	blt.n	80033a2 <EncoderVelocity_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e007      	b.n	80033b2 <EncoderVelocity_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80033a8:	dc03      	bgt.n	80033b2 <EncoderVelocity_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b0:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80033b2:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <EncoderVelocity_Update+0xa0>)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80033b8:	490e      	ldr	r1, [pc, #56]	; (80033f4 <EncoderVelocity_Update+0x9c>)
 80033ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033be:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <EncoderVelocity_Update+0xa4>)
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80033d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033d6:	f7fd fcab 	bl	8000d30 <__aeabi_ul2f>
 80033da:	ee07 0a10 	vmov	s14, r0
 80033de:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 80033e2:	eeb0 0a67 	vmov.f32	s0, s15
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	ecbd 8b02 	vpop	{d8}
 80033ee:	bdb0      	pop	{r4, r5, r7, pc}
 80033f0:	20000190 	.word	0x20000190
 80033f4:	20000518 	.word	0x20000518
 80033f8:	20000520 	.word	0x20000520
 80033fc:	000f4240 	.word	0x000f4240

08003400 <micros>:
	{
		_micros += 4294967295;
	}
}
uint64_t micros()
{
 8003400:	b4b0      	push	{r4, r5, r7}
 8003402:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8003404:	4b09      	ldr	r3, [pc, #36]	; (800342c <micros+0x2c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2200      	movs	r2, #0
 800340c:	4618      	mov	r0, r3
 800340e:	4611      	mov	r1, r2
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <micros+0x30>)
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	1884      	adds	r4, r0, r2
 8003418:	eb41 0503 	adc.w	r5, r1, r3
 800341c:	4622      	mov	r2, r4
 800341e:	462b      	mov	r3, r5
}
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	bcb0      	pop	{r4, r5, r7}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000148 	.word	0x20000148
 8003430:	200004f0 	.word	0x200004f0

08003434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003438:	b672      	cpsid	i
}
 800343a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800343c:	e7fe      	b.n	800343c <Error_Handler+0x8>
	...

08003440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_MspInit+0x4c>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	4a0f      	ldr	r2, [pc, #60]	; (800348c <HAL_MspInit+0x4c>)
 8003450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003454:	6453      	str	r3, [r2, #68]	; 0x44
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_MspInit+0x4c>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_MspInit+0x4c>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	4a08      	ldr	r2, [pc, #32]	; (800348c <HAL_MspInit+0x4c>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003470:	6413      	str	r3, [r2, #64]	; 0x40
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_MspInit+0x4c>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800347e:	2007      	movs	r0, #7
 8003480:	f000 fbdc 	bl	8003c3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40023800 	.word	0x40023800

08003490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a19      	ldr	r2, [pc, #100]	; (8003514 <HAL_I2C_MspInit+0x84>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d12c      	bne.n	800350c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	4b18      	ldr	r3, [pc, #96]	; (8003518 <HAL_I2C_MspInit+0x88>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a17      	ldr	r2, [pc, #92]	; (8003518 <HAL_I2C_MspInit+0x88>)
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <HAL_I2C_MspInit+0x88>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034d4:	2312      	movs	r3, #18
 80034d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034d8:	2301      	movs	r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80034dc:	2301      	movs	r3, #1
 80034de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034e0:	2304      	movs	r3, #4
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	4619      	mov	r1, r3
 80034ea:	480c      	ldr	r0, [pc, #48]	; (800351c <HAL_I2C_MspInit+0x8c>)
 80034ec:	f000 ffea 	bl	80044c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <HAL_I2C_MspInit+0x88>)
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	4a07      	ldr	r2, [pc, #28]	; (8003518 <HAL_I2C_MspInit+0x88>)
 80034fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_I2C_MspInit+0x88>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800350c:	bf00      	nop
 800350e:	3728      	adds	r7, #40	; 0x28
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40005400 	.word	0x40005400
 8003518:	40023800 	.word	0x40023800
 800351c:	40020400 	.word	0x40020400

08003520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <HAL_TIM_Base_MspInit+0x64>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_TIM_Base_MspInit+0x68>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	4a13      	ldr	r2, [pc, #76]	; (8003588 <HAL_TIM_Base_MspInit+0x68>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6453      	str	r3, [r2, #68]	; 0x44
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_TIM_Base_MspInit+0x68>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800354e:	e012      	b.n	8003576 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d10d      	bne.n	8003576 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <HAL_TIM_Base_MspInit+0x68>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a09      	ldr	r2, [pc, #36]	; (8003588 <HAL_TIM_Base_MspInit+0x68>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_TIM_Base_MspInit+0x68>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
}
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_TIM_Encoder_MspInit+0x84>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d12b      	bne.n	8003606 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <HAL_TIM_Encoder_MspInit+0x88>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a17      	ldr	r2, [pc, #92]	; (8003614 <HAL_TIM_Encoder_MspInit+0x88>)
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_TIM_Encoder_MspInit+0x88>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <HAL_TIM_Encoder_MspInit+0x88>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <HAL_TIM_Encoder_MspInit+0x88>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <HAL_TIM_Encoder_MspInit+0x88>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035e6:	23c0      	movs	r3, #192	; 0xc0
 80035e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	2302      	movs	r3, #2
 80035ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035f6:	2302      	movs	r3, #2
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	4619      	mov	r1, r3
 8003600:	4805      	ldr	r0, [pc, #20]	; (8003618 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003602:	f000 ff5f 	bl	80044c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003606:	bf00      	nop
 8003608:	3728      	adds	r7, #40	; 0x28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40000400 	.word	0x40000400
 8003614:	40023800 	.word	0x40023800
 8003618:	40020000 	.word	0x40020000

0800361c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 030c 	add.w	r3, r7, #12
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a12      	ldr	r2, [pc, #72]	; (8003684 <HAL_TIM_MspPostInit+0x68>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d11e      	bne.n	800367c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_TIM_MspPostInit+0x6c>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	4a10      	ldr	r2, [pc, #64]	; (8003688 <HAL_TIM_MspPostInit+0x6c>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <HAL_TIM_MspPostInit+0x6c>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800365a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800365e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	2302      	movs	r3, #2
 8003662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003668:	2300      	movs	r3, #0
 800366a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800366c:	2301      	movs	r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003670:	f107 030c 	add.w	r3, r7, #12
 8003674:	4619      	mov	r1, r3
 8003676:	4805      	ldr	r0, [pc, #20]	; (800368c <HAL_TIM_MspPostInit+0x70>)
 8003678:	f000 ff24 	bl	80044c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800367c:	bf00      	nop
 800367e:	3720      	adds	r7, #32
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40010000 	.word	0x40010000
 8003688:	40023800 	.word	0x40023800
 800368c:	40020000 	.word	0x40020000

08003690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	; 0x28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a4c      	ldr	r2, [pc, #304]	; (80037e0 <HAL_UART_MspInit+0x150>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	f040 8091 	bne.w	80037d6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	4b4a      	ldr	r3, [pc, #296]	; (80037e4 <HAL_UART_MspInit+0x154>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	4a49      	ldr	r2, [pc, #292]	; (80037e4 <HAL_UART_MspInit+0x154>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c2:	6413      	str	r3, [r2, #64]	; 0x40
 80036c4:	4b47      	ldr	r3, [pc, #284]	; (80037e4 <HAL_UART_MspInit+0x154>)
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	4b43      	ldr	r3, [pc, #268]	; (80037e4 <HAL_UART_MspInit+0x154>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	4a42      	ldr	r2, [pc, #264]	; (80037e4 <HAL_UART_MspInit+0x154>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6313      	str	r3, [r2, #48]	; 0x30
 80036e0:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <HAL_UART_MspInit+0x154>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036ec:	230c      	movs	r3, #12
 80036ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f8:	2303      	movs	r3, #3
 80036fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036fc:	2307      	movs	r3, #7
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	4619      	mov	r1, r3
 8003706:	4838      	ldr	r0, [pc, #224]	; (80037e8 <HAL_UART_MspInit+0x158>)
 8003708:	f000 fedc 	bl	80044c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800370c:	4b37      	ldr	r3, [pc, #220]	; (80037ec <HAL_UART_MspInit+0x15c>)
 800370e:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <HAL_UART_MspInit+0x160>)
 8003710:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003712:	4b36      	ldr	r3, [pc, #216]	; (80037ec <HAL_UART_MspInit+0x15c>)
 8003714:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003718:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800371a:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_UART_MspInit+0x15c>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003720:	4b32      	ldr	r3, [pc, #200]	; (80037ec <HAL_UART_MspInit+0x15c>)
 8003722:	2200      	movs	r2, #0
 8003724:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003726:	4b31      	ldr	r3, [pc, #196]	; (80037ec <HAL_UART_MspInit+0x15c>)
 8003728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800372c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800372e:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <HAL_UART_MspInit+0x15c>)
 8003730:	2200      	movs	r2, #0
 8003732:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_UART_MspInit+0x15c>)
 8003736:	2200      	movs	r2, #0
 8003738:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800373a:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <HAL_UART_MspInit+0x15c>)
 800373c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003740:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003742:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <HAL_UART_MspInit+0x15c>)
 8003744:	2200      	movs	r2, #0
 8003746:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003748:	4b28      	ldr	r3, [pc, #160]	; (80037ec <HAL_UART_MspInit+0x15c>)
 800374a:	2200      	movs	r2, #0
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800374e:	4827      	ldr	r0, [pc, #156]	; (80037ec <HAL_UART_MspInit+0x15c>)
 8003750:	f000 fab6 	bl	8003cc0 <HAL_DMA_Init>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800375a:	f7ff fe6b 	bl	8003434 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a22      	ldr	r2, [pc, #136]	; (80037ec <HAL_UART_MspInit+0x15c>)
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
 8003764:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_UART_MspInit+0x15c>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800376a:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <HAL_UART_MspInit+0x164>)
 800376c:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <HAL_UART_MspInit+0x168>)
 800376e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_UART_MspInit+0x164>)
 8003772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003776:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <HAL_UART_MspInit+0x164>)
 800377a:	2240      	movs	r2, #64	; 0x40
 800377c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_UART_MspInit+0x164>)
 8003780:	2200      	movs	r2, #0
 8003782:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_UART_MspInit+0x164>)
 8003786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800378a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_UART_MspInit+0x164>)
 800378e:	2200      	movs	r2, #0
 8003790:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003792:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <HAL_UART_MspInit+0x164>)
 8003794:	2200      	movs	r2, #0
 8003796:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003798:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <HAL_UART_MspInit+0x164>)
 800379a:	2200      	movs	r2, #0
 800379c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <HAL_UART_MspInit+0x164>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037a4:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <HAL_UART_MspInit+0x164>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80037aa:	4812      	ldr	r0, [pc, #72]	; (80037f4 <HAL_UART_MspInit+0x164>)
 80037ac:	f000 fa88 	bl	8003cc0 <HAL_DMA_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80037b6:	f7ff fe3d 	bl	8003434 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a0d      	ldr	r2, [pc, #52]	; (80037f4 <HAL_UART_MspInit+0x164>)
 80037be:	635a      	str	r2, [r3, #52]	; 0x34
 80037c0:	4a0c      	ldr	r2, [pc, #48]	; (80037f4 <HAL_UART_MspInit+0x164>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	2026      	movs	r0, #38	; 0x26
 80037cc:	f000 fa41 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037d0:	2026      	movs	r0, #38	; 0x26
 80037d2:	f000 fa5a 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037d6:	bf00      	nop
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40004400 	.word	0x40004400
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40020000 	.word	0x40020000
 80037ec:	2000021c 	.word	0x2000021c
 80037f0:	40026088 	.word	0x40026088
 80037f4:	2000027c 	.word	0x2000027c
 80037f8:	400260a0 	.word	0x400260a0

080037fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003800:	e7fe      	b.n	8003800 <NMI_Handler+0x4>

08003802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <HardFault_Handler+0x4>

08003808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800380c:	e7fe      	b.n	800380c <MemManage_Handler+0x4>

0800380e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003812:	e7fe      	b.n	8003812 <BusFault_Handler+0x4>

08003814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003818:	e7fe      	b.n	8003818 <UsageFault_Handler+0x4>

0800381a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003848:	f000 f8e4 	bl	8003a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800384c:	bf00      	nop
 800384e:	bd80      	pop	{r7, pc}

08003850 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003854:	4802      	ldr	r0, [pc, #8]	; (8003860 <DMA1_Stream5_IRQHandler+0x10>)
 8003856:	f000 fbcb 	bl	8003ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	2000021c 	.word	0x2000021c

08003864 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003868:	4802      	ldr	r0, [pc, #8]	; (8003874 <DMA1_Stream6_IRQHandler+0x10>)
 800386a:	f000 fbc1 	bl	8003ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	2000027c 	.word	0x2000027c

08003878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800387c:	4802      	ldr	r0, [pc, #8]	; (8003888 <USART2_IRQHandler+0x10>)
 800387e:	f003 fa17 	bl	8006cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	200001d8 	.word	0x200001d8

0800388c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003894:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <_sbrk+0x5c>)
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <_sbrk+0x60>)
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <_sbrk+0x64>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <_sbrk+0x64>)
 80038aa:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <_sbrk+0x68>)
 80038ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <_sbrk+0x64>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d207      	bcs.n	80038cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038bc:	f004 faf0 	bl	8007ea0 <__errno>
 80038c0:	4603      	mov	r3, r0
 80038c2:	220c      	movs	r2, #12
 80038c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038c6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ca:	e009      	b.n	80038e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <_sbrk+0x64>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <_sbrk+0x64>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <_sbrk+0x64>)
 80038dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20020000 	.word	0x20020000
 80038ec:	00000400 	.word	0x00000400
 80038f0:	20000524 	.word	0x20000524
 80038f4:	20000540 	.word	0x20000540

080038f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <SystemInit+0x20>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	4a05      	ldr	r2, [pc, #20]	; (8003918 <SystemInit+0x20>)
 8003904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800391c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003920:	480d      	ldr	r0, [pc, #52]	; (8003958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003922:	490e      	ldr	r1, [pc, #56]	; (800395c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003924:	4a0e      	ldr	r2, [pc, #56]	; (8003960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003928:	e002      	b.n	8003930 <LoopCopyDataInit>

0800392a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800392a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800392c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800392e:	3304      	adds	r3, #4

08003930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003934:	d3f9      	bcc.n	800392a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003936:	4a0b      	ldr	r2, [pc, #44]	; (8003964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003938:	4c0b      	ldr	r4, [pc, #44]	; (8003968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800393a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800393c:	e001      	b.n	8003942 <LoopFillZerobss>

0800393e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800393e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003940:	3204      	adds	r2, #4

08003942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003944:	d3fb      	bcc.n	800393e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003946:	f7ff ffd7 	bl	80038f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800394a:	f004 faaf 	bl	8007eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800394e:	f7fd fbb7 	bl	80010c0 <main>
  bx  lr    
 8003952:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800395c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003960:	080082b4 	.word	0x080082b4
  ldr r2, =_sbss
 8003964:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003968:	2000053c 	.word	0x2000053c

0800396c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800396c:	e7fe      	b.n	800396c <ADC_IRQHandler>
	...

08003970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003974:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <HAL_Init+0x40>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0d      	ldr	r2, [pc, #52]	; (80039b0 <HAL_Init+0x40>)
 800397a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_Init+0x40>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <HAL_Init+0x40>)
 8003986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800398c:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <HAL_Init+0x40>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a07      	ldr	r2, [pc, #28]	; (80039b0 <HAL_Init+0x40>)
 8003992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003998:	2003      	movs	r0, #3
 800399a:	f000 f94f 	bl	8003c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800399e:	2000      	movs	r0, #0
 80039a0:	f000 f808 	bl	80039b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039a4:	f7ff fd4c 	bl	8003440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00

080039b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_InitTick+0x54>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_InitTick+0x58>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	4619      	mov	r1, r3
 80039c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f967 	bl	8003ca6 <HAL_SYSTICK_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e00e      	b.n	8003a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b0f      	cmp	r3, #15
 80039e6:	d80a      	bhi.n	80039fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e8:	2200      	movs	r2, #0
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	f04f 30ff 	mov.w	r0, #4294967295
 80039f0:	f000 f92f 	bl	8003c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039f4:	4a06      	ldr	r2, [pc, #24]	; (8003a10 <HAL_InitTick+0x5c>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	2000001c 	.word	0x2000001c
 8003a0c:	20000024 	.word	0x20000024
 8003a10:	20000020 	.word	0x20000020

08003a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_IncTick+0x20>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_IncTick+0x24>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4413      	add	r3, r2
 8003a24:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <HAL_IncTick+0x24>)
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000024 	.word	0x20000024
 8003a38:	20000528 	.word	0x20000528

08003a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_GetTick+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000528 	.word	0x20000528

08003a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a5c:	f7ff ffee 	bl	8003a3c <HAL_GetTick>
 8003a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d005      	beq.n	8003a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_Delay+0x44>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a7a:	bf00      	nop
 8003a7c:	f7ff ffde 	bl	8003a3c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d8f7      	bhi.n	8003a7c <HAL_Delay+0x28>
  {
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000024 	.word	0x20000024

08003a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ace:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	60d3      	str	r3, [r2, #12]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <__NVIC_GetPriorityGrouping+0x18>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	f003 0307 	and.w	r3, r3, #7
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	db0b      	blt.n	8003b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	f003 021f 	and.w	r2, r3, #31
 8003b18:	4907      	ldr	r1, [pc, #28]	; (8003b38 <__NVIC_EnableIRQ+0x38>)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	2001      	movs	r0, #1
 8003b22:	fa00 f202 	lsl.w	r2, r0, r2
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000e100 	.word	0xe000e100

08003b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	db0a      	blt.n	8003b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	490c      	ldr	r1, [pc, #48]	; (8003b88 <__NVIC_SetPriority+0x4c>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b64:	e00a      	b.n	8003b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4908      	ldr	r1, [pc, #32]	; (8003b8c <__NVIC_SetPriority+0x50>)
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	3b04      	subs	r3, #4
 8003b74:	0112      	lsls	r2, r2, #4
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	440b      	add	r3, r1
 8003b7a:	761a      	strb	r2, [r3, #24]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000e100 	.word	0xe000e100
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f1c3 0307 	rsb	r3, r3, #7
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	bf28      	it	cs
 8003bae:	2304      	movcs	r3, #4
 8003bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d902      	bls.n	8003bc0 <NVIC_EncodePriority+0x30>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3b03      	subs	r3, #3
 8003bbe:	e000      	b.n	8003bc2 <NVIC_EncodePriority+0x32>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	43d9      	mvns	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	4313      	orrs	r3, r2
         );
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3724      	adds	r7, #36	; 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c08:	d301      	bcc.n	8003c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00f      	b.n	8003c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <SysTick_Config+0x40>)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c16:	210f      	movs	r1, #15
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	f7ff ff8e 	bl	8003b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <SysTick_Config+0x40>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <SysTick_Config+0x40>)
 8003c28:	2207      	movs	r2, #7
 8003c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	e000e010 	.word	0xe000e010

08003c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff29 	bl	8003a9c <__NVIC_SetPriorityGrouping>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b086      	sub	sp, #24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c64:	f7ff ff3e 	bl	8003ae4 <__NVIC_GetPriorityGrouping>
 8003c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	6978      	ldr	r0, [r7, #20]
 8003c70:	f7ff ff8e 	bl	8003b90 <NVIC_EncodePriority>
 8003c74:	4602      	mov	r2, r0
 8003c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff ff5d 	bl	8003b3c <__NVIC_SetPriority>
}
 8003c82:	bf00      	nop
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff31 	bl	8003b00 <__NVIC_EnableIRQ>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ffa2 	bl	8003bf8 <SysTick_Config>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7ff feb6 	bl	8003a3c <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e099      	b.n	8003e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfc:	e00f      	b.n	8003d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cfe:	f7ff fe9d 	bl	8003a3c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d908      	bls.n	8003d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2203      	movs	r2, #3
 8003d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e078      	b.n	8003e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e8      	bne.n	8003cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <HAL_DMA_Init+0x158>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d107      	bne.n	8003d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	4313      	orrs	r3, r2
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 0307 	bic.w	r3, r3, #7
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d117      	bne.n	8003de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fb01 	bl	80043cc <DMA_CheckFifoParam>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dde:	2301      	movs	r3, #1
 8003de0:	e016      	b.n	8003e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fab8 	bl	8004360 <DMA_CalcBaseAndBitshift>
 8003df0:	4603      	mov	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	223f      	movs	r2, #63	; 0x3f
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	f010803f 	.word	0xf010803f

08003e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_DMA_Start_IT+0x26>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e040      	b.n	8003ec4 <HAL_DMA_Start_IT+0xa8>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d12f      	bne.n	8003eb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fa4a 	bl	8004304 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	223f      	movs	r2, #63	; 0x3f
 8003e76:	409a      	lsls	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0216 	orr.w	r2, r2, #22
 8003e8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0208 	orr.w	r2, r2, #8
 8003ea2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e005      	b.n	8003ec2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003eda:	f7ff fdaf 	bl	8003a3c <HAL_GetTick>
 8003ede:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d008      	beq.n	8003efe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2280      	movs	r2, #128	; 0x80
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e052      	b.n	8003fa4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0216 	bic.w	r2, r2, #22
 8003f0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <HAL_DMA_Abort+0x62>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d007      	beq.n	8003f3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0208 	bic.w	r2, r2, #8
 8003f3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f4e:	e013      	b.n	8003f78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f50:	f7ff fd74 	bl	8003a3c <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	d90c      	bls.n	8003f78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2203      	movs	r2, #3
 8003f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e015      	b.n	8003fa4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e4      	bne.n	8003f50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8a:	223f      	movs	r2, #63	; 0x3f
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d004      	beq.n	8003fca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2280      	movs	r2, #128	; 0x80
 8003fc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e00c      	b.n	8003fe4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2205      	movs	r2, #5
 8003fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ffc:	4b8e      	ldr	r3, [pc, #568]	; (8004238 <HAL_DMA_IRQHandler+0x248>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a8e      	ldr	r2, [pc, #568]	; (800423c <HAL_DMA_IRQHandler+0x24c>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	0a9b      	lsrs	r3, r3, #10
 8004008:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	2208      	movs	r2, #8
 800401c:	409a      	lsls	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01a      	beq.n	800405c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d013      	beq.n	800405c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0204 	bic.w	r2, r2, #4
 8004042:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004048:	2208      	movs	r2, #8
 800404a:	409a      	lsls	r2, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	f043 0201 	orr.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004060:	2201      	movs	r2, #1
 8004062:	409a      	lsls	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4013      	ands	r3, r2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d012      	beq.n	8004092 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407e:	2201      	movs	r2, #1
 8004080:	409a      	lsls	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	f043 0202 	orr.w	r2, r3, #2
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004096:	2204      	movs	r2, #4
 8004098:	409a      	lsls	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4013      	ands	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d012      	beq.n	80040c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00b      	beq.n	80040c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	2204      	movs	r2, #4
 80040b6:	409a      	lsls	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	f043 0204 	orr.w	r2, r3, #4
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040cc:	2210      	movs	r2, #16
 80040ce:	409a      	lsls	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d043      	beq.n	8004160 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d03c      	beq.n	8004160 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ea:	2210      	movs	r2, #16
 80040ec:	409a      	lsls	r2, r3
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d018      	beq.n	8004132 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d108      	bne.n	8004120 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d024      	beq.n	8004160 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4798      	blx	r3
 800411e:	e01f      	b.n	8004160 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01b      	beq.n	8004160 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	4798      	blx	r3
 8004130:	e016      	b.n	8004160 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d107      	bne.n	8004150 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0208 	bic.w	r2, r2, #8
 800414e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	2220      	movs	r2, #32
 8004166:	409a      	lsls	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 808f 	beq.w	8004290 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 8087 	beq.w	8004290 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004186:	2220      	movs	r2, #32
 8004188:	409a      	lsls	r2, r3
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b05      	cmp	r3, #5
 8004198:	d136      	bne.n	8004208 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0216 	bic.w	r2, r2, #22
 80041a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d103      	bne.n	80041ca <HAL_DMA_IRQHandler+0x1da>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0208 	bic.w	r2, r2, #8
 80041d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041de:	223f      	movs	r2, #63	; 0x3f
 80041e0:	409a      	lsls	r2, r3
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d07e      	beq.n	80042fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
        }
        return;
 8004206:	e079      	b.n	80042fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01d      	beq.n	8004252 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10d      	bne.n	8004240 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	2b00      	cmp	r3, #0
 800422a:	d031      	beq.n	8004290 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
 8004234:	e02c      	b.n	8004290 <HAL_DMA_IRQHandler+0x2a0>
 8004236:	bf00      	nop
 8004238:	2000001c 	.word	0x2000001c
 800423c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d023      	beq.n	8004290 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	4798      	blx	r3
 8004250:	e01e      	b.n	8004290 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10f      	bne.n	8004280 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0210 	bic.w	r2, r2, #16
 800426e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	2b00      	cmp	r3, #0
 8004296:	d032      	beq.n	80042fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d022      	beq.n	80042ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2205      	movs	r2, #5
 80042a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	3301      	adds	r3, #1
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d307      	bcc.n	80042d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f2      	bne.n	80042bc <HAL_DMA_IRQHandler+0x2cc>
 80042d6:	e000      	b.n	80042da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
 80042fa:	e000      	b.n	80042fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80042fc:	bf00      	nop
    }
  }
}
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004320:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d108      	bne.n	8004344 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004342:	e007      	b.n	8004354 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	60da      	str	r2, [r3, #12]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	3b10      	subs	r3, #16
 8004370:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <DMA_CalcBaseAndBitshift+0x64>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800437a:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <DMA_CalcBaseAndBitshift+0x68>)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b03      	cmp	r3, #3
 800438c:	d909      	bls.n	80043a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004396:	f023 0303 	bic.w	r3, r3, #3
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	659a      	str	r2, [r3, #88]	; 0x58
 80043a0:	e007      	b.n	80043b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	aaaaaaab 	.word	0xaaaaaaab
 80043c8:	0800829c 	.word	0x0800829c

080043cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d11f      	bne.n	8004426 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d856      	bhi.n	800449a <DMA_CheckFifoParam+0xce>
 80043ec:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <DMA_CheckFifoParam+0x28>)
 80043ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f2:	bf00      	nop
 80043f4:	08004405 	.word	0x08004405
 80043f8:	08004417 	.word	0x08004417
 80043fc:	08004405 	.word	0x08004405
 8004400:	0800449b 	.word	0x0800449b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d046      	beq.n	800449e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004414:	e043      	b.n	800449e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800441e:	d140      	bne.n	80044a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004424:	e03d      	b.n	80044a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442e:	d121      	bne.n	8004474 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d837      	bhi.n	80044a6 <DMA_CheckFifoParam+0xda>
 8004436:	a201      	add	r2, pc, #4	; (adr r2, 800443c <DMA_CheckFifoParam+0x70>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	0800444d 	.word	0x0800444d
 8004440:	08004453 	.word	0x08004453
 8004444:	0800444d 	.word	0x0800444d
 8004448:	08004465 	.word	0x08004465
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
      break;
 8004450:	e030      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d025      	beq.n	80044aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004462:	e022      	b.n	80044aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800446c:	d11f      	bne.n	80044ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004472:	e01c      	b.n	80044ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d903      	bls.n	8004482 <DMA_CheckFifoParam+0xb6>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d003      	beq.n	8004488 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004480:	e018      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
      break;
 8004486:	e015      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00e      	beq.n	80044b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
      break;
 8004498:	e00b      	b.n	80044b2 <DMA_CheckFifoParam+0xe6>
      break;
 800449a:	bf00      	nop
 800449c:	e00a      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;
 800449e:	bf00      	nop
 80044a0:	e008      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;
 80044a2:	bf00      	nop
 80044a4:	e006      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;
 80044a6:	bf00      	nop
 80044a8:	e004      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;
 80044b2:	bf00      	nop
    }
  } 
  
  return status; 
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop

080044c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044da:	2300      	movs	r3, #0
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	e159      	b.n	8004794 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044e0:	2201      	movs	r2, #1
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	f040 8148 	bne.w	800478e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d005      	beq.n	8004516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004512:	2b02      	cmp	r3, #2
 8004514:	d130      	bne.n	8004578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	2203      	movs	r2, #3
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800454c:	2201      	movs	r2, #1
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4013      	ands	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 0201 	and.w	r2, r3, #1
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b03      	cmp	r3, #3
 8004582:	d017      	beq.n	80045b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	2203      	movs	r2, #3
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d123      	bne.n	8004608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	08da      	lsrs	r2, r3, #3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3208      	adds	r2, #8
 80045c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	220f      	movs	r2, #15
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	08da      	lsrs	r2, r3, #3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3208      	adds	r2, #8
 8004602:	69b9      	ldr	r1, [r7, #24]
 8004604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	2203      	movs	r2, #3
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 0203 	and.w	r2, r3, #3
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80a2 	beq.w	800478e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	4b57      	ldr	r3, [pc, #348]	; (80047ac <HAL_GPIO_Init+0x2e8>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	4a56      	ldr	r2, [pc, #344]	; (80047ac <HAL_GPIO_Init+0x2e8>)
 8004654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004658:	6453      	str	r3, [r2, #68]	; 0x44
 800465a:	4b54      	ldr	r3, [pc, #336]	; (80047ac <HAL_GPIO_Init+0x2e8>)
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004666:	4a52      	ldr	r2, [pc, #328]	; (80047b0 <HAL_GPIO_Init+0x2ec>)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	3302      	adds	r3, #2
 800466e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	220f      	movs	r2, #15
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4013      	ands	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a49      	ldr	r2, [pc, #292]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d019      	beq.n	80046c6 <HAL_GPIO_Init+0x202>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a48      	ldr	r2, [pc, #288]	; (80047b8 <HAL_GPIO_Init+0x2f4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_GPIO_Init+0x1fe>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a47      	ldr	r2, [pc, #284]	; (80047bc <HAL_GPIO_Init+0x2f8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00d      	beq.n	80046be <HAL_GPIO_Init+0x1fa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a46      	ldr	r2, [pc, #280]	; (80047c0 <HAL_GPIO_Init+0x2fc>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <HAL_GPIO_Init+0x1f6>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a45      	ldr	r2, [pc, #276]	; (80047c4 <HAL_GPIO_Init+0x300>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_GPIO_Init+0x1f2>
 80046b2:	2304      	movs	r3, #4
 80046b4:	e008      	b.n	80046c8 <HAL_GPIO_Init+0x204>
 80046b6:	2307      	movs	r3, #7
 80046b8:	e006      	b.n	80046c8 <HAL_GPIO_Init+0x204>
 80046ba:	2303      	movs	r3, #3
 80046bc:	e004      	b.n	80046c8 <HAL_GPIO_Init+0x204>
 80046be:	2302      	movs	r3, #2
 80046c0:	e002      	b.n	80046c8 <HAL_GPIO_Init+0x204>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <HAL_GPIO_Init+0x204>
 80046c6:	2300      	movs	r3, #0
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	f002 0203 	and.w	r2, r2, #3
 80046ce:	0092      	lsls	r2, r2, #2
 80046d0:	4093      	lsls	r3, r2
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046d8:	4935      	ldr	r1, [pc, #212]	; (80047b0 <HAL_GPIO_Init+0x2ec>)
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	089b      	lsrs	r3, r3, #2
 80046de:	3302      	adds	r3, #2
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046e6:	4b38      	ldr	r3, [pc, #224]	; (80047c8 <HAL_GPIO_Init+0x304>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800470a:	4a2f      	ldr	r2, [pc, #188]	; (80047c8 <HAL_GPIO_Init+0x304>)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004710:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <HAL_GPIO_Init+0x304>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004734:	4a24      	ldr	r2, [pc, #144]	; (80047c8 <HAL_GPIO_Init+0x304>)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800473a:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <HAL_GPIO_Init+0x304>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800475e:	4a1a      	ldr	r2, [pc, #104]	; (80047c8 <HAL_GPIO_Init+0x304>)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004764:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <HAL_GPIO_Init+0x304>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004788:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <HAL_GPIO_Init+0x304>)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b0f      	cmp	r3, #15
 8004798:	f67f aea2 	bls.w	80044e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	3724      	adds	r7, #36	; 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40013800 	.word	0x40013800
 80047b4:	40020000 	.word	0x40020000
 80047b8:	40020400 	.word	0x40020400
 80047bc:	40020800 	.word	0x40020800
 80047c0:	40020c00 	.word	0x40020c00
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40013c00 	.word	0x40013c00

080047cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	887b      	ldrh	r3, [r7, #2]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	e001      	b.n	80047ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
 8004808:	4613      	mov	r3, r2
 800480a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800480c:	787b      	ldrb	r3, [r7, #1]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004818:	e003      	b.n	8004822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800481a:	887b      	ldrh	r3, [r7, #2]
 800481c:	041a      	lsls	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	619a      	str	r2, [r3, #24]
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e12b      	b.n	8004a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fe fe1a 	bl	8003490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2224      	movs	r2, #36	; 0x24
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004894:	f001 f888 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 8004898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4a81      	ldr	r2, [pc, #516]	; (8004aa4 <HAL_I2C_Init+0x274>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d807      	bhi.n	80048b4 <HAL_I2C_Init+0x84>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a80      	ldr	r2, [pc, #512]	; (8004aa8 <HAL_I2C_Init+0x278>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	bf94      	ite	ls
 80048ac:	2301      	movls	r3, #1
 80048ae:	2300      	movhi	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e006      	b.n	80048c2 <HAL_I2C_Init+0x92>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a7d      	ldr	r2, [pc, #500]	; (8004aac <HAL_I2C_Init+0x27c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	bf94      	ite	ls
 80048bc:	2301      	movls	r3, #1
 80048be:	2300      	movhi	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e0e7      	b.n	8004a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4a78      	ldr	r2, [pc, #480]	; (8004ab0 <HAL_I2C_Init+0x280>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	0c9b      	lsrs	r3, r3, #18
 80048d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4a6a      	ldr	r2, [pc, #424]	; (8004aa4 <HAL_I2C_Init+0x274>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d802      	bhi.n	8004904 <HAL_I2C_Init+0xd4>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	3301      	adds	r3, #1
 8004902:	e009      	b.n	8004918 <HAL_I2C_Init+0xe8>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	4a69      	ldr	r2, [pc, #420]	; (8004ab4 <HAL_I2C_Init+0x284>)
 8004910:	fba2 2303 	umull	r2, r3, r2, r3
 8004914:	099b      	lsrs	r3, r3, #6
 8004916:	3301      	adds	r3, #1
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	430b      	orrs	r3, r1
 800491e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800492a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	495c      	ldr	r1, [pc, #368]	; (8004aa4 <HAL_I2C_Init+0x274>)
 8004934:	428b      	cmp	r3, r1
 8004936:	d819      	bhi.n	800496c <HAL_I2C_Init+0x13c>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e59      	subs	r1, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	fbb1 f3f3 	udiv	r3, r1, r3
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	f640 73fc 	movw	r3, #4092	; 0xffc
 800494c:	400b      	ands	r3, r1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_I2C_Init+0x138>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1e59      	subs	r1, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004960:	3301      	adds	r3, #1
 8004962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004966:	e051      	b.n	8004a0c <HAL_I2C_Init+0x1dc>
 8004968:	2304      	movs	r3, #4
 800496a:	e04f      	b.n	8004a0c <HAL_I2C_Init+0x1dc>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d111      	bne.n	8004998 <HAL_I2C_Init+0x168>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1e58      	subs	r0, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6859      	ldr	r1, [r3, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	440b      	add	r3, r1
 8004982:	fbb0 f3f3 	udiv	r3, r0, r3
 8004986:	3301      	adds	r3, #1
 8004988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e012      	b.n	80049be <HAL_I2C_Init+0x18e>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1e58      	subs	r0, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	0099      	lsls	r1, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ae:	3301      	adds	r3, #1
 80049b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf0c      	ite	eq
 80049b8:	2301      	moveq	r3, #1
 80049ba:	2300      	movne	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Init+0x196>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e022      	b.n	8004a0c <HAL_I2C_Init+0x1dc>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10e      	bne.n	80049ec <HAL_I2C_Init+0x1bc>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1e58      	subs	r0, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6859      	ldr	r1, [r3, #4]
 80049d6:	460b      	mov	r3, r1
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	440b      	add	r3, r1
 80049dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e0:	3301      	adds	r3, #1
 80049e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ea:	e00f      	b.n	8004a0c <HAL_I2C_Init+0x1dc>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1e58      	subs	r0, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6859      	ldr	r1, [r3, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	0099      	lsls	r1, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	6809      	ldr	r1, [r1, #0]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6911      	ldr	r1, [r2, #16]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68d2      	ldr	r2, [r2, #12]
 8004a46:	4311      	orrs	r1, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	000186a0 	.word	0x000186a0
 8004aa8:	001e847f 	.word	0x001e847f
 8004aac:	003d08ff 	.word	0x003d08ff
 8004ab0:	431bde83 	.word	0x431bde83
 8004ab4:	10624dd3 	.word	0x10624dd3

08004ab8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	607a      	str	r2, [r7, #4]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	817b      	strh	r3, [r7, #10]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004acc:	f7fe ffb6 	bl	8003a3c <HAL_GetTick>
 8004ad0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b20      	cmp	r3, #32
 8004adc:	f040 80e0 	bne.w	8004ca0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	2319      	movs	r3, #25
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	4970      	ldr	r1, [pc, #448]	; (8004cac <HAL_I2C_Master_Transmit+0x1f4>)
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f964 	bl	8004db8 <I2C_WaitOnFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
 8004af8:	e0d3      	b.n	8004ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_I2C_Master_Transmit+0x50>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e0cc      	b.n	8004ca2 <HAL_I2C_Master_Transmit+0x1ea>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d007      	beq.n	8004b2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2221      	movs	r2, #33	; 0x21
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2210      	movs	r2, #16
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	893a      	ldrh	r2, [r7, #8]
 8004b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a50      	ldr	r2, [pc, #320]	; (8004cb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b70:	8979      	ldrh	r1, [r7, #10]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	6a3a      	ldr	r2, [r7, #32]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f89c 	bl	8004cb4 <I2C_MasterRequestWrite>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e08d      	b.n	8004ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b86:	2300      	movs	r3, #0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b9c:	e066      	b.n	8004c6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	6a39      	ldr	r1, [r7, #32]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f9de 	bl	8004f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00d      	beq.n	8004bca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d107      	bne.n	8004bc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e06b      	b.n	8004ca2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	781a      	ldrb	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d11b      	bne.n	8004c40 <HAL_I2C_Master_Transmit+0x188>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d017      	beq.n	8004c40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	781a      	ldrb	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	6a39      	ldr	r1, [r7, #32]
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f9ce 	bl	8004fe6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00d      	beq.n	8004c6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d107      	bne.n	8004c68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e01a      	b.n	8004ca2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d194      	bne.n	8004b9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e000      	b.n	8004ca2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
  }
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	00100002 	.word	0x00100002
 8004cb0:	ffff0000 	.word	0xffff0000

08004cb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d006      	beq.n	8004cde <I2C_MasterRequestWrite+0x2a>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d003      	beq.n	8004cde <I2C_MasterRequestWrite+0x2a>
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cdc:	d108      	bne.n	8004cf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	e00b      	b.n	8004d08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	2b12      	cmp	r3, #18
 8004cf6:	d107      	bne.n	8004d08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f84f 	bl	8004db8 <I2C_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00d      	beq.n	8004d3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2e:	d103      	bne.n	8004d38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e035      	b.n	8004da8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d44:	d108      	bne.n	8004d58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d46:	897b      	ldrh	r3, [r7, #10]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d54:	611a      	str	r2, [r3, #16]
 8004d56:	e01b      	b.n	8004d90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d58:	897b      	ldrh	r3, [r7, #10]
 8004d5a:	11db      	asrs	r3, r3, #7
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	f003 0306 	and.w	r3, r3, #6
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f063 030f 	orn	r3, r3, #15
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	490e      	ldr	r1, [pc, #56]	; (8004db0 <I2C_MasterRequestWrite+0xfc>)
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f875 	bl	8004e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e010      	b.n	8004da8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d86:	897b      	ldrh	r3, [r7, #10]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4907      	ldr	r1, [pc, #28]	; (8004db4 <I2C_MasterRequestWrite+0x100>)
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f865 	bl	8004e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	00010008 	.word	0x00010008
 8004db4:	00010002 	.word	0x00010002

08004db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dc8:	e025      	b.n	8004e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d021      	beq.n	8004e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd2:	f7fe fe33 	bl	8003a3c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d116      	bne.n	8004e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f043 0220 	orr.w	r2, r3, #32
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e023      	b.n	8004e5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d10d      	bne.n	8004e3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	43da      	mvns	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	e00c      	b.n	8004e56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	43da      	mvns	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf0c      	ite	eq
 8004e4e:	2301      	moveq	r3, #1
 8004e50:	2300      	movne	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d0b6      	beq.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e74:	e051      	b.n	8004f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e84:	d123      	bne.n	8004ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f043 0204 	orr.w	r2, r3, #4
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e046      	b.n	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d021      	beq.n	8004f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed6:	f7fe fdb1 	bl	8003a3c <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d302      	bcc.n	8004eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d116      	bne.n	8004f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f043 0220 	orr.w	r2, r3, #32
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e020      	b.n	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d10c      	bne.n	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	43da      	mvns	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	bf14      	ite	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	2300      	moveq	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	e00b      	b.n	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	43da      	mvns	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bf14      	ite	ne
 8004f50:	2301      	movne	r3, #1
 8004f52:	2300      	moveq	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d18d      	bne.n	8004e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f70:	e02d      	b.n	8004fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f878 	bl	8005068 <I2C_IsAcknowledgeFailed>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e02d      	b.n	8004fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d021      	beq.n	8004fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8a:	f7fe fd57 	bl	8003a3c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d302      	bcc.n	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d116      	bne.n	8004fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f043 0220 	orr.w	r2, r3, #32
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e007      	b.n	8004fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d1ca      	bne.n	8004f72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ff2:	e02d      	b.n	8005050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f837 	bl	8005068 <I2C_IsAcknowledgeFailed>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e02d      	b.n	8005060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d021      	beq.n	8005050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500c:	f7fe fd16 	bl	8003a3c <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	429a      	cmp	r2, r3
 800501a:	d302      	bcc.n	8005022 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d116      	bne.n	8005050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e007      	b.n	8005060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d1ca      	bne.n	8004ff4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507e:	d11b      	bne.n	80050b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005088:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	f043 0204 	orr.w	r2, r3, #4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e267      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d075      	beq.n	80051d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050e6:	4b88      	ldr	r3, [pc, #544]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d00c      	beq.n	800510c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050f2:	4b85      	ldr	r3, [pc, #532]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d112      	bne.n	8005124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050fe:	4b82      	ldr	r3, [pc, #520]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800510a:	d10b      	bne.n	8005124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800510c:	4b7e      	ldr	r3, [pc, #504]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d05b      	beq.n	80051d0 <HAL_RCC_OscConfig+0x108>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d157      	bne.n	80051d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e242      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512c:	d106      	bne.n	800513c <HAL_RCC_OscConfig+0x74>
 800512e:	4b76      	ldr	r3, [pc, #472]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a75      	ldr	r2, [pc, #468]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e01d      	b.n	8005178 <HAL_RCC_OscConfig+0xb0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005144:	d10c      	bne.n	8005160 <HAL_RCC_OscConfig+0x98>
 8005146:	4b70      	ldr	r3, [pc, #448]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a6f      	ldr	r2, [pc, #444]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 800514c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	4b6d      	ldr	r3, [pc, #436]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a6c      	ldr	r2, [pc, #432]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e00b      	b.n	8005178 <HAL_RCC_OscConfig+0xb0>
 8005160:	4b69      	ldr	r3, [pc, #420]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a68      	ldr	r2, [pc, #416]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	4b66      	ldr	r3, [pc, #408]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a65      	ldr	r2, [pc, #404]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d013      	beq.n	80051a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005180:	f7fe fc5c 	bl	8003a3c <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005188:	f7fe fc58 	bl	8003a3c <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	; 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e207      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519a:	4b5b      	ldr	r3, [pc, #364]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0xc0>
 80051a6:	e014      	b.n	80051d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fe fc48 	bl	8003a3c <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051b0:	f7fe fc44 	bl	8003a3c <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b64      	cmp	r3, #100	; 0x64
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e1f3      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c2:	4b51      	ldr	r3, [pc, #324]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0xe8>
 80051ce:	e000      	b.n	80051d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d063      	beq.n	80052a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051de:	4b4a      	ldr	r3, [pc, #296]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ea:	4b47      	ldr	r3, [pc, #284]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d11c      	bne.n	8005230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f6:	4b44      	ldr	r3, [pc, #272]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d116      	bne.n	8005230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005202:	4b41      	ldr	r3, [pc, #260]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_RCC_OscConfig+0x152>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d001      	beq.n	800521a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e1c7      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521a:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4937      	ldr	r1, [pc, #220]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 800522a:	4313      	orrs	r3, r2
 800522c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522e:	e03a      	b.n	80052a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d020      	beq.n	800527a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005238:	4b34      	ldr	r3, [pc, #208]	; (800530c <HAL_RCC_OscConfig+0x244>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7fe fbfd 	bl	8003a3c <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005246:	f7fe fbf9 	bl	8003a3c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e1a8      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005258:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005264:	4b28      	ldr	r3, [pc, #160]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4925      	ldr	r1, [pc, #148]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 8005274:	4313      	orrs	r3, r2
 8005276:	600b      	str	r3, [r1, #0]
 8005278:	e015      	b.n	80052a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527a:	4b24      	ldr	r3, [pc, #144]	; (800530c <HAL_RCC_OscConfig+0x244>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fe fbdc 	bl	8003a3c <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005288:	f7fe fbd8 	bl	8003a3c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e187      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529a:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d036      	beq.n	8005320 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d016      	beq.n	80052e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <HAL_RCC_OscConfig+0x248>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fe fbbc 	bl	8003a3c <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c8:	f7fe fbb8 	bl	8003a3c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e167      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCC_OscConfig+0x240>)
 80052dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x200>
 80052e6:	e01b      	b.n	8005320 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e8:	4b09      	ldr	r3, [pc, #36]	; (8005310 <HAL_RCC_OscConfig+0x248>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ee:	f7fe fba5 	bl	8003a3c <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	e00e      	b.n	8005314 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052f6:	f7fe fba1 	bl	8003a3c <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d907      	bls.n	8005314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e150      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
 8005308:	40023800 	.word	0x40023800
 800530c:	42470000 	.word	0x42470000
 8005310:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005314:	4b88      	ldr	r3, [pc, #544]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 8005316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1ea      	bne.n	80052f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 8097 	beq.w	800545c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005332:	4b81      	ldr	r3, [pc, #516]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	4b7d      	ldr	r3, [pc, #500]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	4a7c      	ldr	r2, [pc, #496]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534c:	6413      	str	r3, [r2, #64]	; 0x40
 800534e:	4b7a      	ldr	r3, [pc, #488]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535e:	4b77      	ldr	r3, [pc, #476]	; (800553c <HAL_RCC_OscConfig+0x474>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d118      	bne.n	800539c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800536a:	4b74      	ldr	r3, [pc, #464]	; (800553c <HAL_RCC_OscConfig+0x474>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a73      	ldr	r2, [pc, #460]	; (800553c <HAL_RCC_OscConfig+0x474>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005376:	f7fe fb61 	bl	8003a3c <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537e:	f7fe fb5d 	bl	8003a3c <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e10c      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005390:	4b6a      	ldr	r3, [pc, #424]	; (800553c <HAL_RCC_OscConfig+0x474>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d106      	bne.n	80053b2 <HAL_RCC_OscConfig+0x2ea>
 80053a4:	4b64      	ldr	r3, [pc, #400]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80053a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a8:	4a63      	ldr	r2, [pc, #396]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	6713      	str	r3, [r2, #112]	; 0x70
 80053b0:	e01c      	b.n	80053ec <HAL_RCC_OscConfig+0x324>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b05      	cmp	r3, #5
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x30c>
 80053ba:	4b5f      	ldr	r3, [pc, #380]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053be:	4a5e      	ldr	r2, [pc, #376]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80053c0:	f043 0304 	orr.w	r3, r3, #4
 80053c4:	6713      	str	r3, [r2, #112]	; 0x70
 80053c6:	4b5c      	ldr	r3, [pc, #368]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ca:	4a5b      	ldr	r2, [pc, #364]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	6713      	str	r3, [r2, #112]	; 0x70
 80053d2:	e00b      	b.n	80053ec <HAL_RCC_OscConfig+0x324>
 80053d4:	4b58      	ldr	r3, [pc, #352]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	4a57      	ldr	r2, [pc, #348]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	6713      	str	r3, [r2, #112]	; 0x70
 80053e0:	4b55      	ldr	r3, [pc, #340]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	4a54      	ldr	r2, [pc, #336]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80053e6:	f023 0304 	bic.w	r3, r3, #4
 80053ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d015      	beq.n	8005420 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fe fb22 	bl	8003a3c <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fc:	f7fe fb1e 	bl	8003a3c <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	; 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e0cb      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005412:	4b49      	ldr	r3, [pc, #292]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0ee      	beq.n	80053fc <HAL_RCC_OscConfig+0x334>
 800541e:	e014      	b.n	800544a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005420:	f7fe fb0c 	bl	8003a3c <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005426:	e00a      	b.n	800543e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fe fb08 	bl	8003a3c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e0b5      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543e:	4b3e      	ldr	r3, [pc, #248]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1ee      	bne.n	8005428 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005450:	4b39      	ldr	r3, [pc, #228]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	4a38      	ldr	r2, [pc, #224]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 8005456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80a1 	beq.w	80055a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005466:	4b34      	ldr	r3, [pc, #208]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b08      	cmp	r3, #8
 8005470:	d05c      	beq.n	800552c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d141      	bne.n	80054fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547a:	4b31      	ldr	r3, [pc, #196]	; (8005540 <HAL_RCC_OscConfig+0x478>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7fe fadc 	bl	8003a3c <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005488:	f7fe fad8 	bl	8003a3c <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e087      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549a:	4b27      	ldr	r3, [pc, #156]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69da      	ldr	r2, [r3, #28]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	019b      	lsls	r3, r3, #6
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	3b01      	subs	r3, #1
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	061b      	lsls	r3, r3, #24
 80054ca:	491b      	ldr	r1, [pc, #108]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d0:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <HAL_RCC_OscConfig+0x478>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d6:	f7fe fab1 	bl	8003a3c <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054de:	f7fe faad 	bl	8003a3c <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e05c      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f0:	4b11      	ldr	r3, [pc, #68]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x416>
 80054fc:	e054      	b.n	80055a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fe:	4b10      	ldr	r3, [pc, #64]	; (8005540 <HAL_RCC_OscConfig+0x478>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fe fa9a 	bl	8003a3c <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800550c:	f7fe fa96 	bl	8003a3c <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e045      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <HAL_RCC_OscConfig+0x470>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x444>
 800552a:	e03d      	b.n	80055a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d107      	bne.n	8005544 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e038      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
 8005538:	40023800 	.word	0x40023800
 800553c:	40007000 	.word	0x40007000
 8005540:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005544:	4b1b      	ldr	r3, [pc, #108]	; (80055b4 <HAL_RCC_OscConfig+0x4ec>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d028      	beq.n	80055a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555c:	429a      	cmp	r2, r3
 800555e:	d121      	bne.n	80055a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556a:	429a      	cmp	r2, r3
 800556c:	d11a      	bne.n	80055a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005574:	4013      	ands	r3, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800557a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800557c:	4293      	cmp	r3, r2
 800557e:	d111      	bne.n	80055a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	085b      	lsrs	r3, r3, #1
 800558c:	3b01      	subs	r3, #1
 800558e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005590:	429a      	cmp	r2, r3
 8005592:	d107      	bne.n	80055a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d001      	beq.n	80055a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40023800 	.word	0x40023800

080055b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0cc      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055cc:	4b68      	ldr	r3, [pc, #416]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d90c      	bls.n	80055f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055da:	4b65      	ldr	r3, [pc, #404]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e2:	4b63      	ldr	r3, [pc, #396]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d001      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0b8      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d020      	beq.n	8005642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800560c:	4b59      	ldr	r3, [pc, #356]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4a58      	ldr	r2, [pc, #352]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005624:	4b53      	ldr	r3, [pc, #332]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	4a52      	ldr	r2, [pc, #328]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800562e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005630:	4b50      	ldr	r3, [pc, #320]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	494d      	ldr	r1, [pc, #308]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	4313      	orrs	r3, r2
 8005640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d044      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d107      	bne.n	8005666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005656:	4b47      	ldr	r3, [pc, #284]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d119      	bne.n	8005696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e07f      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d003      	beq.n	8005676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005672:	2b03      	cmp	r3, #3
 8005674:	d107      	bne.n	8005686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005676:	4b3f      	ldr	r3, [pc, #252]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e06f      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005686:	4b3b      	ldr	r3, [pc, #236]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e067      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005696:	4b37      	ldr	r3, [pc, #220]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f023 0203 	bic.w	r2, r3, #3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	4934      	ldr	r1, [pc, #208]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056a8:	f7fe f9c8 	bl	8003a3c <HAL_GetTick>
 80056ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ae:	e00a      	b.n	80056c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b0:	f7fe f9c4 	bl	8003a3c <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e04f      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c6:	4b2b      	ldr	r3, [pc, #172]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 020c 	and.w	r2, r3, #12
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d1eb      	bne.n	80056b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056d8:	4b25      	ldr	r3, [pc, #148]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d20c      	bcs.n	8005700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e6:	4b22      	ldr	r3, [pc, #136]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ee:	4b20      	ldr	r3, [pc, #128]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d001      	beq.n	8005700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e032      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800570c:	4b19      	ldr	r3, [pc, #100]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4916      	ldr	r1, [pc, #88]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	4313      	orrs	r3, r2
 800571c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572a:	4b12      	ldr	r3, [pc, #72]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	490e      	ldr	r1, [pc, #56]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800573e:	f000 f821 	bl	8005784 <HAL_RCC_GetSysClockFreq>
 8005742:	4602      	mov	r2, r0
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	490a      	ldr	r1, [pc, #40]	; (8005778 <HAL_RCC_ClockConfig+0x1c0>)
 8005750:	5ccb      	ldrb	r3, [r1, r3]
 8005752:	fa22 f303 	lsr.w	r3, r2, r3
 8005756:	4a09      	ldr	r2, [pc, #36]	; (800577c <HAL_RCC_ClockConfig+0x1c4>)
 8005758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800575a:	4b09      	ldr	r3, [pc, #36]	; (8005780 <HAL_RCC_ClockConfig+0x1c8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe f928 	bl	80039b4 <HAL_InitTick>

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40023c00 	.word	0x40023c00
 8005774:	40023800 	.word	0x40023800
 8005778:	08008284 	.word	0x08008284
 800577c:	2000001c 	.word	0x2000001c
 8005780:	20000020 	.word	0x20000020

08005784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005788:	b094      	sub	sp, #80	; 0x50
 800578a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	647b      	str	r3, [r7, #68]	; 0x44
 8005790:	2300      	movs	r3, #0
 8005792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005794:	2300      	movs	r3, #0
 8005796:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800579c:	4b79      	ldr	r3, [pc, #484]	; (8005984 <HAL_RCC_GetSysClockFreq+0x200>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f003 030c 	and.w	r3, r3, #12
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d00d      	beq.n	80057c4 <HAL_RCC_GetSysClockFreq+0x40>
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	f200 80e1 	bhi.w	8005970 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0x34>
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d003      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0x3a>
 80057b6:	e0db      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057b8:	4b73      	ldr	r3, [pc, #460]	; (8005988 <HAL_RCC_GetSysClockFreq+0x204>)
 80057ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80057bc:	e0db      	b.n	8005976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057be:	4b73      	ldr	r3, [pc, #460]	; (800598c <HAL_RCC_GetSysClockFreq+0x208>)
 80057c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057c2:	e0d8      	b.n	8005976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057c4:	4b6f      	ldr	r3, [pc, #444]	; (8005984 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ce:	4b6d      	ldr	r3, [pc, #436]	; (8005984 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d063      	beq.n	80058a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057da:	4b6a      	ldr	r3, [pc, #424]	; (8005984 <HAL_RCC_GetSysClockFreq+0x200>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	099b      	lsrs	r3, r3, #6
 80057e0:	2200      	movs	r2, #0
 80057e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ec:	633b      	str	r3, [r7, #48]	; 0x30
 80057ee:	2300      	movs	r3, #0
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
 80057f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057f6:	4622      	mov	r2, r4
 80057f8:	462b      	mov	r3, r5
 80057fa:	f04f 0000 	mov.w	r0, #0
 80057fe:	f04f 0100 	mov.w	r1, #0
 8005802:	0159      	lsls	r1, r3, #5
 8005804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005808:	0150      	lsls	r0, r2, #5
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4621      	mov	r1, r4
 8005810:	1a51      	subs	r1, r2, r1
 8005812:	6139      	str	r1, [r7, #16]
 8005814:	4629      	mov	r1, r5
 8005816:	eb63 0301 	sbc.w	r3, r3, r1
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005828:	4659      	mov	r1, fp
 800582a:	018b      	lsls	r3, r1, #6
 800582c:	4651      	mov	r1, sl
 800582e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005832:	4651      	mov	r1, sl
 8005834:	018a      	lsls	r2, r1, #6
 8005836:	4651      	mov	r1, sl
 8005838:	ebb2 0801 	subs.w	r8, r2, r1
 800583c:	4659      	mov	r1, fp
 800583e:	eb63 0901 	sbc.w	r9, r3, r1
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800584e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005856:	4690      	mov	r8, r2
 8005858:	4699      	mov	r9, r3
 800585a:	4623      	mov	r3, r4
 800585c:	eb18 0303 	adds.w	r3, r8, r3
 8005860:	60bb      	str	r3, [r7, #8]
 8005862:	462b      	mov	r3, r5
 8005864:	eb49 0303 	adc.w	r3, r9, r3
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005876:	4629      	mov	r1, r5
 8005878:	024b      	lsls	r3, r1, #9
 800587a:	4621      	mov	r1, r4
 800587c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005880:	4621      	mov	r1, r4
 8005882:	024a      	lsls	r2, r1, #9
 8005884:	4610      	mov	r0, r2
 8005886:	4619      	mov	r1, r3
 8005888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588a:	2200      	movs	r2, #0
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
 800588e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005890:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005894:	f7fb fa92 	bl	8000dbc <__aeabi_uldivmod>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4613      	mov	r3, r2
 800589e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a0:	e058      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058a2:	4b38      	ldr	r3, [pc, #224]	; (8005984 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	099b      	lsrs	r3, r3, #6
 80058a8:	2200      	movs	r2, #0
 80058aa:	4618      	mov	r0, r3
 80058ac:	4611      	mov	r1, r2
 80058ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058b2:	623b      	str	r3, [r7, #32]
 80058b4:	2300      	movs	r3, #0
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
 80058b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058bc:	4642      	mov	r2, r8
 80058be:	464b      	mov	r3, r9
 80058c0:	f04f 0000 	mov.w	r0, #0
 80058c4:	f04f 0100 	mov.w	r1, #0
 80058c8:	0159      	lsls	r1, r3, #5
 80058ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ce:	0150      	lsls	r0, r2, #5
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4641      	mov	r1, r8
 80058d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80058da:	4649      	mov	r1, r9
 80058dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058f4:	ebb2 040a 	subs.w	r4, r2, sl
 80058f8:	eb63 050b 	sbc.w	r5, r3, fp
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	00eb      	lsls	r3, r5, #3
 8005906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800590a:	00e2      	lsls	r2, r4, #3
 800590c:	4614      	mov	r4, r2
 800590e:	461d      	mov	r5, r3
 8005910:	4643      	mov	r3, r8
 8005912:	18e3      	adds	r3, r4, r3
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	464b      	mov	r3, r9
 8005918:	eb45 0303 	adc.w	r3, r5, r3
 800591c:	607b      	str	r3, [r7, #4]
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800592a:	4629      	mov	r1, r5
 800592c:	028b      	lsls	r3, r1, #10
 800592e:	4621      	mov	r1, r4
 8005930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005934:	4621      	mov	r1, r4
 8005936:	028a      	lsls	r2, r1, #10
 8005938:	4610      	mov	r0, r2
 800593a:	4619      	mov	r1, r3
 800593c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800593e:	2200      	movs	r2, #0
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	61fa      	str	r2, [r7, #28]
 8005944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005948:	f7fb fa38 	bl	8000dbc <__aeabi_uldivmod>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4613      	mov	r3, r2
 8005952:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005954:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <HAL_RCC_GetSysClockFreq+0x200>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	3301      	adds	r3, #1
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005968:	fbb2 f3f3 	udiv	r3, r2, r3
 800596c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800596e:	e002      	b.n	8005976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <HAL_RCC_GetSysClockFreq+0x204>)
 8005972:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005978:	4618      	mov	r0, r3
 800597a:	3750      	adds	r7, #80	; 0x50
 800597c:	46bd      	mov	sp, r7
 800597e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005982:	bf00      	nop
 8005984:	40023800 	.word	0x40023800
 8005988:	00f42400 	.word	0x00f42400
 800598c:	007a1200 	.word	0x007a1200

08005990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005994:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005996:	681b      	ldr	r3, [r3, #0]
}
 8005998:	4618      	mov	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	2000001c 	.word	0x2000001c

080059a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059ac:	f7ff fff0 	bl	8005990 <HAL_RCC_GetHCLKFreq>
 80059b0:	4602      	mov	r2, r0
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	0a9b      	lsrs	r3, r3, #10
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	4903      	ldr	r1, [pc, #12]	; (80059cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059be:	5ccb      	ldrb	r3, [r1, r3]
 80059c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40023800 	.word	0x40023800
 80059cc:	08008294 	.word	0x08008294

080059d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059d4:	f7ff ffdc 	bl	8005990 <HAL_RCC_GetHCLKFreq>
 80059d8:	4602      	mov	r2, r0
 80059da:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	0b5b      	lsrs	r3, r3, #13
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	4903      	ldr	r1, [pc, #12]	; (80059f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059e6:	5ccb      	ldrb	r3, [r1, r3]
 80059e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40023800 	.word	0x40023800
 80059f4:	08008294 	.word	0x08008294

080059f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e041      	b.n	8005a8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fd fd7e 	bl	8003520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4619      	mov	r1, r3
 8005a36:	4610      	mov	r0, r2
 8005a38:	f000 fcb2 	bl	80063a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d001      	beq.n	8005ab0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e03c      	b.n	8005b2a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1e      	ldr	r2, [pc, #120]	; (8005b38 <HAL_TIM_Base_Start+0xa0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d018      	beq.n	8005af4 <HAL_TIM_Base_Start+0x5c>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aca:	d013      	beq.n	8005af4 <HAL_TIM_Base_Start+0x5c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1a      	ldr	r2, [pc, #104]	; (8005b3c <HAL_TIM_Base_Start+0xa4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00e      	beq.n	8005af4 <HAL_TIM_Base_Start+0x5c>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a19      	ldr	r2, [pc, #100]	; (8005b40 <HAL_TIM_Base_Start+0xa8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d009      	beq.n	8005af4 <HAL_TIM_Base_Start+0x5c>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a17      	ldr	r2, [pc, #92]	; (8005b44 <HAL_TIM_Base_Start+0xac>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d004      	beq.n	8005af4 <HAL_TIM_Base_Start+0x5c>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a16      	ldr	r2, [pc, #88]	; (8005b48 <HAL_TIM_Base_Start+0xb0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d111      	bne.n	8005b18 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b06      	cmp	r3, #6
 8005b04:	d010      	beq.n	8005b28 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0201 	orr.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b16:	e007      	b.n	8005b28 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40014000 	.word	0x40014000

08005b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d001      	beq.n	8005b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e044      	b.n	8005bee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1e      	ldr	r2, [pc, #120]	; (8005bfc <HAL_TIM_Base_Start_IT+0xb0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8e:	d013      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a19      	ldr	r2, [pc, #100]	; (8005c04 <HAL_TIM_Base_Start_IT+0xb8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <HAL_TIM_Base_Start_IT+0xbc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <HAL_TIM_Base_Start_IT+0xc0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d111      	bne.n	8005bdc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b06      	cmp	r3, #6
 8005bc8:	d010      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0201 	orr.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bda:	e007      	b.n	8005bec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40014000 	.word	0x40014000

08005c10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e041      	b.n	8005ca6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f839 	bl	8005cae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f000 fba6 	bl	80063a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <HAL_TIM_PWM_Start+0x24>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	bf14      	ite	ne
 8005ce0:	2301      	movne	r3, #1
 8005ce2:	2300      	moveq	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	e022      	b.n	8005d2e <HAL_TIM_PWM_Start+0x6a>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d109      	bne.n	8005d02 <HAL_TIM_PWM_Start+0x3e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	bf14      	ite	ne
 8005cfa:	2301      	movne	r3, #1
 8005cfc:	2300      	moveq	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	e015      	b.n	8005d2e <HAL_TIM_PWM_Start+0x6a>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d109      	bne.n	8005d1c <HAL_TIM_PWM_Start+0x58>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	bf14      	ite	ne
 8005d14:	2301      	movne	r3, #1
 8005d16:	2300      	moveq	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	e008      	b.n	8005d2e <HAL_TIM_PWM_Start+0x6a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	bf14      	ite	ne
 8005d28:	2301      	movne	r3, #1
 8005d2a:	2300      	moveq	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e068      	b.n	8005e08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <HAL_TIM_PWM_Start+0x82>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d44:	e013      	b.n	8005d6e <HAL_TIM_PWM_Start+0xaa>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d104      	bne.n	8005d56 <HAL_TIM_PWM_Start+0x92>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d54:	e00b      	b.n	8005d6e <HAL_TIM_PWM_Start+0xaa>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d104      	bne.n	8005d66 <HAL_TIM_PWM_Start+0xa2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d64:	e003      	b.n	8005d6e <HAL_TIM_PWM_Start+0xaa>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2201      	movs	r2, #1
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fdb8 	bl	80068ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a23      	ldr	r2, [pc, #140]	; (8005e10 <HAL_TIM_PWM_Start+0x14c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d107      	bne.n	8005d96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1d      	ldr	r2, [pc, #116]	; (8005e10 <HAL_TIM_PWM_Start+0x14c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d018      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x10e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da8:	d013      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x10e>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <HAL_TIM_PWM_Start+0x150>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00e      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x10e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <HAL_TIM_PWM_Start+0x154>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d009      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x10e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <HAL_TIM_PWM_Start+0x158>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d004      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x10e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <HAL_TIM_PWM_Start+0x15c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d111      	bne.n	8005df6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b06      	cmp	r3, #6
 8005de2:	d010      	beq.n	8005e06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df4:	e007      	b.n	8005e06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 0201 	orr.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40010000 	.word	0x40010000
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40000c00 	.word	0x40000c00
 8005e20:	40014000 	.word	0x40014000

08005e24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e097      	b.n	8005f68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7fd fb9d 	bl	800358c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e68:	f023 0307 	bic.w	r3, r3, #7
 8005e6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	4610      	mov	r0, r2
 8005e7a:	f000 fa91 	bl	80063a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea6:	f023 0303 	bic.w	r3, r3, #3
 8005eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005ec4:	f023 030c 	bic.w	r3, r3, #12
 8005ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ed4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	021b      	lsls	r3, r3, #8
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	011a      	lsls	r2, r3, #4
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	031b      	lsls	r3, r3, #12
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	4313      	orrs	r3, r2
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d110      	bne.n	8005fc2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d102      	bne.n	8005fac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fa6:	7b7b      	ldrb	r3, [r7, #13]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d001      	beq.n	8005fb0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e069      	b.n	8006084 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fc0:	e031      	b.n	8006026 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d110      	bne.n	8005fea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fc8:	7bbb      	ldrb	r3, [r7, #14]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d102      	bne.n	8005fd4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fce:	7b3b      	ldrb	r3, [r7, #12]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d001      	beq.n	8005fd8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e055      	b.n	8006084 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fe8:	e01d      	b.n	8006026 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d108      	bne.n	8006002 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d105      	bne.n	8006002 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ff6:	7b7b      	ldrb	r3, [r7, #13]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d102      	bne.n	8006002 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ffc:	7b3b      	ldrb	r3, [r7, #12]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d001      	beq.n	8006006 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e03e      	b.n	8006084 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2202      	movs	r2, #2
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_TIM_Encoder_Start+0xc4>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b04      	cmp	r3, #4
 8006030:	d008      	beq.n	8006044 <HAL_TIM_Encoder_Start+0xd4>
 8006032:	e00f      	b.n	8006054 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2201      	movs	r2, #1
 800603a:	2100      	movs	r1, #0
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fc55 	bl	80068ec <TIM_CCxChannelCmd>
      break;
 8006042:	e016      	b.n	8006072 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2201      	movs	r2, #1
 800604a:	2104      	movs	r1, #4
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fc4d 	bl	80068ec <TIM_CCxChannelCmd>
      break;
 8006052:	e00e      	b.n	8006072 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2201      	movs	r2, #1
 800605a:	2100      	movs	r1, #0
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fc45 	bl	80068ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2201      	movs	r2, #1
 8006068:	2104      	movs	r1, #4
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fc3e 	bl	80068ec <TIM_CCxChannelCmd>
      break;
 8006070:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e0ae      	b.n	8006208 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b0c      	cmp	r3, #12
 80060b6:	f200 809f 	bhi.w	80061f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	080061f9 	.word	0x080061f9
 80060c8:	080061f9 	.word	0x080061f9
 80060cc:	080061f9 	.word	0x080061f9
 80060d0:	08006135 	.word	0x08006135
 80060d4:	080061f9 	.word	0x080061f9
 80060d8:	080061f9 	.word	0x080061f9
 80060dc:	080061f9 	.word	0x080061f9
 80060e0:	08006177 	.word	0x08006177
 80060e4:	080061f9 	.word	0x080061f9
 80060e8:	080061f9 	.word	0x080061f9
 80060ec:	080061f9 	.word	0x080061f9
 80060f0:	080061b7 	.word	0x080061b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 f9d0 	bl	80064a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0208 	orr.w	r2, r2, #8
 800610e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0204 	bic.w	r2, r2, #4
 800611e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6999      	ldr	r1, [r3, #24]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	619a      	str	r2, [r3, #24]
      break;
 8006132:	e064      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fa16 	bl	800656c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800614e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6999      	ldr	r1, [r3, #24]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	021a      	lsls	r2, r3, #8
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	619a      	str	r2, [r3, #24]
      break;
 8006174:	e043      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fa61 	bl	8006644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0208 	orr.w	r2, r2, #8
 8006190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0204 	bic.w	r2, r2, #4
 80061a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69d9      	ldr	r1, [r3, #28]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	61da      	str	r2, [r3, #28]
      break;
 80061b4:	e023      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 faab 	bl	8006718 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	021a      	lsls	r2, r3, #8
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	61da      	str	r2, [r3, #28]
      break;
 80061f6:	e002      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	75fb      	strb	r3, [r7, #23]
      break;
 80061fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006206:	7dfb      	ldrb	r3, [r7, #23]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIM_ConfigClockSource+0x1c>
 8006228:	2302      	movs	r3, #2
 800622a:	e0b4      	b.n	8006396 <HAL_TIM_ConfigClockSource+0x186>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800624a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006264:	d03e      	beq.n	80062e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800626a:	f200 8087 	bhi.w	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800626e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006272:	f000 8086 	beq.w	8006382 <HAL_TIM_ConfigClockSource+0x172>
 8006276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627a:	d87f      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800627c:	2b70      	cmp	r3, #112	; 0x70
 800627e:	d01a      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006280:	2b70      	cmp	r3, #112	; 0x70
 8006282:	d87b      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 8006284:	2b60      	cmp	r3, #96	; 0x60
 8006286:	d050      	beq.n	800632a <HAL_TIM_ConfigClockSource+0x11a>
 8006288:	2b60      	cmp	r3, #96	; 0x60
 800628a:	d877      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800628c:	2b50      	cmp	r3, #80	; 0x50
 800628e:	d03c      	beq.n	800630a <HAL_TIM_ConfigClockSource+0xfa>
 8006290:	2b50      	cmp	r3, #80	; 0x50
 8006292:	d873      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	d058      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x13a>
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	d86f      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800629c:	2b30      	cmp	r3, #48	; 0x30
 800629e:	d064      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062a0:	2b30      	cmp	r3, #48	; 0x30
 80062a2:	d86b      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d060      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d867      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d05c      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d05a      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062b4:	e062      	b.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	6899      	ldr	r1, [r3, #8]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f000 faf1 	bl	80068ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	609a      	str	r2, [r3, #8]
      break;
 80062e2:	e04f      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	6899      	ldr	r1, [r3, #8]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f000 fada 	bl	80068ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006306:	609a      	str	r2, [r3, #8]
      break;
 8006308:	e03c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6859      	ldr	r1, [r3, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	461a      	mov	r2, r3
 8006318:	f000 fa4e 	bl	80067b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2150      	movs	r1, #80	; 0x50
 8006322:	4618      	mov	r0, r3
 8006324:	f000 faa7 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 8006328:	e02c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6859      	ldr	r1, [r3, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	461a      	mov	r2, r3
 8006338:	f000 fa6d 	bl	8006816 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2160      	movs	r1, #96	; 0x60
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fa97 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 8006348:	e01c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6859      	ldr	r1, [r3, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	461a      	mov	r2, r3
 8006358:	f000 fa2e 	bl	80067b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2140      	movs	r1, #64	; 0x40
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fa87 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 8006368:	e00c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4619      	mov	r1, r3
 8006374:	4610      	mov	r0, r2
 8006376:	f000 fa7e 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 800637a:	e003      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]
      break;
 8006380:	e000      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a34      	ldr	r2, [pc, #208]	; (8006484 <TIM_Base_SetConfig+0xe4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00f      	beq.n	80063d8 <TIM_Base_SetConfig+0x38>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063be:	d00b      	beq.n	80063d8 <TIM_Base_SetConfig+0x38>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a31      	ldr	r2, [pc, #196]	; (8006488 <TIM_Base_SetConfig+0xe8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d007      	beq.n	80063d8 <TIM_Base_SetConfig+0x38>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a30      	ldr	r2, [pc, #192]	; (800648c <TIM_Base_SetConfig+0xec>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_Base_SetConfig+0x38>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a2f      	ldr	r2, [pc, #188]	; (8006490 <TIM_Base_SetConfig+0xf0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d108      	bne.n	80063ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a25      	ldr	r2, [pc, #148]	; (8006484 <TIM_Base_SetConfig+0xe4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01b      	beq.n	800642a <TIM_Base_SetConfig+0x8a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f8:	d017      	beq.n	800642a <TIM_Base_SetConfig+0x8a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a22      	ldr	r2, [pc, #136]	; (8006488 <TIM_Base_SetConfig+0xe8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <TIM_Base_SetConfig+0x8a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a21      	ldr	r2, [pc, #132]	; (800648c <TIM_Base_SetConfig+0xec>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00f      	beq.n	800642a <TIM_Base_SetConfig+0x8a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a20      	ldr	r2, [pc, #128]	; (8006490 <TIM_Base_SetConfig+0xf0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00b      	beq.n	800642a <TIM_Base_SetConfig+0x8a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a1f      	ldr	r2, [pc, #124]	; (8006494 <TIM_Base_SetConfig+0xf4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <TIM_Base_SetConfig+0x8a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a1e      	ldr	r2, [pc, #120]	; (8006498 <TIM_Base_SetConfig+0xf8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_Base_SetConfig+0x8a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a1d      	ldr	r2, [pc, #116]	; (800649c <TIM_Base_SetConfig+0xfc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d108      	bne.n	800643c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	4313      	orrs	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a08      	ldr	r2, [pc, #32]	; (8006484 <TIM_Base_SetConfig+0xe4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d103      	bne.n	8006470 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	615a      	str	r2, [r3, #20]
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40010000 	.word	0x40010000
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800

080064a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f023 0201 	bic.w	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f023 0302 	bic.w	r3, r3, #2
 80064e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a1c      	ldr	r2, [pc, #112]	; (8006568 <TIM_OC1_SetConfig+0xc8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d10c      	bne.n	8006516 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f023 0308 	bic.w	r3, r3, #8
 8006502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f023 0304 	bic.w	r3, r3, #4
 8006514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a13      	ldr	r2, [pc, #76]	; (8006568 <TIM_OC1_SetConfig+0xc8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d111      	bne.n	8006542 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800652c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	621a      	str	r2, [r3, #32]
}
 800655c:	bf00      	nop
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	40010000 	.word	0x40010000

0800656c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f023 0210 	bic.w	r2, r3, #16
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f023 0320 	bic.w	r3, r3, #32
 80065b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a1e      	ldr	r2, [pc, #120]	; (8006640 <TIM_OC2_SetConfig+0xd4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d10d      	bne.n	80065e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a15      	ldr	r2, [pc, #84]	; (8006640 <TIM_OC2_SetConfig+0xd4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d113      	bne.n	8006618 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	621a      	str	r2, [r3, #32]
}
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40010000 	.word	0x40010000

08006644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800668c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <TIM_OC3_SetConfig+0xd0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d10d      	bne.n	80066be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a14      	ldr	r2, [pc, #80]	; (8006714 <TIM_OC3_SetConfig+0xd0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d113      	bne.n	80066ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	621a      	str	r2, [r3, #32]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	40010000 	.word	0x40010000

08006718 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	031b      	lsls	r3, r3, #12
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a10      	ldr	r2, [pc, #64]	; (80067b4 <TIM_OC4_SetConfig+0x9c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d109      	bne.n	800678c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800677e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	019b      	lsls	r3, r3, #6
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	621a      	str	r2, [r3, #32]
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40010000 	.word	0x40010000

080067b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f023 0201 	bic.w	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 030a 	bic.w	r3, r3, #10
 80067f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006816:	b480      	push	{r7}
 8006818:	b087      	sub	sp, #28
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f023 0210 	bic.w	r2, r3, #16
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006840:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	031b      	lsls	r3, r3, #12
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006852:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	621a      	str	r2, [r3, #32]
}
 800686a:	bf00      	nop
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	f043 0307 	orr.w	r3, r3, #7
 8006898:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	609a      	str	r2, [r3, #8]
}
 80068a0:	bf00      	nop
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	431a      	orrs	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	609a      	str	r2, [r3, #8]
}
 80068e0:	bf00      	nop
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2201      	movs	r2, #1
 8006900:	fa02 f303 	lsl.w	r3, r2, r3
 8006904:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1a      	ldr	r2, [r3, #32]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	43db      	mvns	r3, r3
 800690e:	401a      	ands	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a1a      	ldr	r2, [r3, #32]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	fa01 f303 	lsl.w	r3, r1, r3
 8006924:	431a      	orrs	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	621a      	str	r2, [r3, #32]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800694c:	2302      	movs	r3, #2
 800694e:	e050      	b.n	80069f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a1c      	ldr	r2, [pc, #112]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d018      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699c:	d013      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a18      	ldr	r2, [pc, #96]	; (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00e      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a16      	ldr	r2, [pc, #88]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d009      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a15      	ldr	r2, [pc, #84]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a13      	ldr	r2, [pc, #76]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d10c      	bne.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40010000 	.word	0x40010000
 8006a04:	40000400 	.word	0x40000400
 8006a08:	40000800 	.word	0x40000800
 8006a0c:	40000c00 	.word	0x40000c00
 8006a10:	40014000 	.word	0x40014000

08006a14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e03d      	b.n	8006aac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e03f      	b.n	8006b4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fc fdd6 	bl	8003690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2224      	movs	r2, #36	; 0x24
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 ff53 	bl	80079a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695a      	ldr	r2, [r3, #20]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08c      	sub	sp, #48	; 0x30
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d165      	bne.n	8006c3a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <HAL_UART_Transmit_DMA+0x26>
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e05e      	b.n	8006c3c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_UART_Transmit_DMA+0x38>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e057      	b.n	8006c3c <HAL_UART_Transmit_DMA+0xe8>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	88fa      	ldrh	r2, [r7, #6]
 8006b9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	88fa      	ldrh	r2, [r7, #6]
 8006ba4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2221      	movs	r2, #33	; 0x21
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb8:	4a22      	ldr	r2, [pc, #136]	; (8006c44 <HAL_UART_Transmit_DMA+0xf0>)
 8006bba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc0:	4a21      	ldr	r2, [pc, #132]	; (8006c48 <HAL_UART_Transmit_DMA+0xf4>)
 8006bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc8:	4a20      	ldr	r2, [pc, #128]	; (8006c4c <HAL_UART_Transmit_DMA+0xf8>)
 8006bca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006bd4:	f107 0308 	add.w	r3, r7, #8
 8006bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	6819      	ldr	r1, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3304      	adds	r3, #4
 8006be8:	461a      	mov	r2, r3
 8006bea:	88fb      	ldrh	r3, [r7, #6]
 8006bec:	f7fd f916 	bl	8003e1c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bf8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3314      	adds	r3, #20
 8006c08:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	617b      	str	r3, [r7, #20]
   return(result);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3314      	adds	r3, #20
 8006c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c22:	627a      	str	r2, [r7, #36]	; 0x24
 8006c24:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6a39      	ldr	r1, [r7, #32]
 8006c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e5      	bne.n	8006c02 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e000      	b.n	8006c3c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006c3a:	2302      	movs	r3, #2
  }
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3730      	adds	r7, #48	; 0x30
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	08007249 	.word	0x08007249
 8006c48:	080072e3 	.word	0x080072e3
 8006c4c:	0800745b 	.word	0x0800745b

08006c50 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d11d      	bne.n	8006ca6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <HAL_UART_Receive_DMA+0x26>
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e016      	b.n	8006ca8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_UART_Receive_DMA+0x38>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e00f      	b.n	8006ca8 <HAL_UART_Receive_DMA+0x58>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c96:	88fb      	ldrh	r3, [r7, #6]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 fc27 	bl	80074f0 <UART_Start_Receive_DMA>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	e000      	b.n	8006ca8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ca6:	2302      	movs	r3, #2
  }
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b0ba      	sub	sp, #232	; 0xe8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10f      	bne.n	8006d16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d009      	beq.n	8006d16 <HAL_UART_IRQHandler+0x66>
 8006d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d06:	f003 0320 	and.w	r3, r3, #32
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fd8f 	bl	8007832 <UART_Receive_IT>
      return;
 8006d14:	e256      	b.n	80071c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80de 	beq.w	8006edc <HAL_UART_IRQHandler+0x22c>
 8006d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d106      	bne.n	8006d3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 80d1 	beq.w	8006edc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00b      	beq.n	8006d5e <HAL_UART_IRQHandler+0xae>
 8006d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	f043 0201 	orr.w	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <HAL_UART_IRQHandler+0xd2>
 8006d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	f043 0202 	orr.w	r2, r3, #2
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00b      	beq.n	8006da6 <HAL_UART_IRQHandler+0xf6>
 8006d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d005      	beq.n	8006da6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	f043 0204 	orr.w	r2, r3, #4
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d011      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x126>
 8006db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	f043 0208 	orr.w	r2, r3, #8
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 81ed 	beq.w	80071ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d008      	beq.n	8006dfe <HAL_UART_IRQHandler+0x14e>
 8006dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fd1a 	bl	8007832 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	bf0c      	ite	eq
 8006e0c:	2301      	moveq	r3, #1
 8006e0e:	2300      	movne	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <HAL_UART_IRQHandler+0x17a>
 8006e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d04f      	beq.n	8006eca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fc22 	bl	8007674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d141      	bne.n	8006ec2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3314      	adds	r3, #20
 8006e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1d9      	bne.n	8006e3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d013      	beq.n	8006eba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	4a7d      	ldr	r2, [pc, #500]	; (800708c <HAL_UART_IRQHandler+0x3dc>)
 8006e98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fd f884 	bl	8003fac <HAL_DMA_Abort_IT>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d016      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb8:	e00e      	b.n	8006ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f9ae 	bl	800721c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec0:	e00a      	b.n	8006ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f9aa 	bl	800721c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec8:	e006      	b.n	8006ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f9a6 	bl	800721c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ed6:	e170      	b.n	80071ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed8:	bf00      	nop
    return;
 8006eda:	e16e      	b.n	80071ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	f040 814a 	bne.w	800717a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eea:	f003 0310 	and.w	r3, r3, #16
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 8143 	beq.w	800717a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 813c 	beq.w	800717a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f02:	2300      	movs	r3, #0
 8006f04:	60bb      	str	r3, [r7, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60bb      	str	r3, [r7, #8]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	60bb      	str	r3, [r7, #8]
 8006f16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	f040 80b4 	bne.w	8007090 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 8140 	beq.w	80071be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f46:	429a      	cmp	r2, r3
 8006f48:	f080 8139 	bcs.w	80071be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5e:	f000 8088 	beq.w	8007072 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1d9      	bne.n	8006f62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3314      	adds	r3, #20
 8006fb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3314      	adds	r3, #20
 8006fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e1      	bne.n	8006fae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3314      	adds	r3, #20
 8006ff0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3314      	adds	r3, #20
 800700a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800700e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007010:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007014:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800701c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e3      	bne.n	8006fea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	330c      	adds	r3, #12
 8007036:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007042:	f023 0310 	bic.w	r3, r3, #16
 8007046:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	330c      	adds	r3, #12
 8007050:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007054:	65ba      	str	r2, [r7, #88]	; 0x58
 8007056:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800705a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e3      	bne.n	8007030 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	4618      	mov	r0, r3
 800706e:	f7fc ff2d 	bl	8003ecc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800707a:	b29b      	uxth	r3, r3
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	b29b      	uxth	r3, r3
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f8d4 	bl	8007230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007088:	e099      	b.n	80071be <HAL_UART_IRQHandler+0x50e>
 800708a:	bf00      	nop
 800708c:	0800773b 	.word	0x0800773b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007098:	b29b      	uxth	r3, r3
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 808b 	beq.w	80071c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80070ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8086 	beq.w	80071c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070da:	647a      	str	r2, [r7, #68]	; 0x44
 80070dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e3      	bne.n	80070b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3314      	adds	r3, #20
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	623b      	str	r3, [r7, #32]
   return(result);
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3314      	adds	r3, #20
 800710e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007112:	633a      	str	r2, [r7, #48]	; 0x30
 8007114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e3      	bne.n	80070ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	60fb      	str	r3, [r7, #12]
   return(result);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0310 	bic.w	r3, r3, #16
 800714a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	330c      	adds	r3, #12
 8007154:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007158:	61fa      	str	r2, [r7, #28]
 800715a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	69b9      	ldr	r1, [r7, #24]
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	617b      	str	r3, [r7, #20]
   return(result);
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e3      	bne.n	8007134 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800716c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f85c 	bl	8007230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007178:	e023      	b.n	80071c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007182:	2b00      	cmp	r3, #0
 8007184:	d009      	beq.n	800719a <HAL_UART_IRQHandler+0x4ea>
 8007186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800718a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fae5 	bl	8007762 <UART_Transmit_IT>
    return;
 8007198:	e014      	b.n	80071c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00e      	beq.n	80071c4 <HAL_UART_IRQHandler+0x514>
 80071a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d008      	beq.n	80071c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fb25 	bl	8007802 <UART_EndTransmit_IT>
    return;
 80071b8:	e004      	b.n	80071c4 <HAL_UART_IRQHandler+0x514>
    return;
 80071ba:	bf00      	nop
 80071bc:	e002      	b.n	80071c4 <HAL_UART_IRQHandler+0x514>
      return;
 80071be:	bf00      	nop
 80071c0:	e000      	b.n	80071c4 <HAL_UART_IRQHandler+0x514>
      return;
 80071c2:	bf00      	nop
  }
}
 80071c4:	37e8      	adds	r7, #232	; 0xe8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop

080071cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b090      	sub	sp, #64	; 0x40
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007260:	2b00      	cmp	r3, #0
 8007262:	d137      	bne.n	80072d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007266:	2200      	movs	r2, #0
 8007268:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800726a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3314      	adds	r3, #20
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	623b      	str	r3, [r7, #32]
   return(result);
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007280:	63bb      	str	r3, [r7, #56]	; 0x38
 8007282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3314      	adds	r3, #20
 8007288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800728a:	633a      	str	r2, [r7, #48]	; 0x30
 800728c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e5      	bne.n	800726a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800729e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	330c      	adds	r3, #12
 80072a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b4:	637b      	str	r3, [r7, #52]	; 0x34
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072be:	61fa      	str	r2, [r7, #28]
 80072c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	69b9      	ldr	r1, [r7, #24]
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	617b      	str	r3, [r7, #20]
   return(result);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e5      	bne.n	800729e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072d2:	e002      	b.n	80072da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80072d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072d6:	f7ff ff79 	bl	80071cc <HAL_UART_TxCpltCallback>
}
 80072da:	bf00      	nop
 80072dc:	3740      	adds	r7, #64	; 0x40
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f7ff ff75 	bl	80071e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072f6:	bf00      	nop
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b09c      	sub	sp, #112	; 0x70
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007316:	2b00      	cmp	r3, #0
 8007318:	d172      	bne.n	8007400 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800731a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731c:	2200      	movs	r2, #0
 800731e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	330c      	adds	r3, #12
 8007326:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007332:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007336:	66bb      	str	r3, [r7, #104]	; 0x68
 8007338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	330c      	adds	r3, #12
 800733e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007340:	65ba      	str	r2, [r7, #88]	; 0x58
 8007342:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007346:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800734e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e5      	bne.n	8007320 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3314      	adds	r3, #20
 800735a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007366:	f023 0301 	bic.w	r3, r3, #1
 800736a:	667b      	str	r3, [r7, #100]	; 0x64
 800736c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007374:	647a      	str	r2, [r7, #68]	; 0x44
 8007376:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800737a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e5      	bne.n	8007354 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3314      	adds	r3, #20
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	623b      	str	r3, [r7, #32]
   return(result);
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739e:	663b      	str	r3, [r7, #96]	; 0x60
 80073a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3314      	adds	r3, #20
 80073a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073a8:	633a      	str	r2, [r7, #48]	; 0x30
 80073aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e5      	bne.n	8007388 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d119      	bne.n	8007400 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	330c      	adds	r3, #12
 80073d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	60fb      	str	r3, [r7, #12]
   return(result);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0310 	bic.w	r3, r3, #16
 80073e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	330c      	adds	r3, #12
 80073ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073ec:	61fa      	str	r2, [r7, #28]
 80073ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	69b9      	ldr	r1, [r7, #24]
 80073f2:	69fa      	ldr	r2, [r7, #28]
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	617b      	str	r3, [r7, #20]
   return(result);
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e5      	bne.n	80073cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	2b01      	cmp	r3, #1
 8007406:	d106      	bne.n	8007416 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800740c:	4619      	mov	r1, r3
 800740e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007410:	f7ff ff0e 	bl	8007230 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007414:	e002      	b.n	800741c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007416:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007418:	f7ff feec 	bl	80071f4 <HAL_UART_RxCpltCallback>
}
 800741c:	bf00      	nop
 800741e:	3770      	adds	r7, #112	; 0x70
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	2b01      	cmp	r3, #1
 8007438:	d108      	bne.n	800744c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	b29b      	uxth	r3, r3
 8007442:	4619      	mov	r1, r3
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff fef3 	bl	8007230 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800744a:	e002      	b.n	8007452 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f7ff fedb 	bl	8007208 <HAL_UART_RxHalfCpltCallback>
}
 8007452:	bf00      	nop
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007476:	2b80      	cmp	r3, #128	; 0x80
 8007478:	bf0c      	ite	eq
 800747a:	2301      	moveq	r3, #1
 800747c:	2300      	movne	r3, #0
 800747e:	b2db      	uxtb	r3, r3
 8007480:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b21      	cmp	r3, #33	; 0x21
 800748c:	d108      	bne.n	80074a0 <UART_DMAError+0x46>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2200      	movs	r2, #0
 8007498:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800749a:	68b8      	ldr	r0, [r7, #8]
 800749c:	f000 f8c2 	bl	8007624 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b40      	cmp	r3, #64	; 0x40
 80074ac:	bf0c      	ite	eq
 80074ae:	2301      	moveq	r3, #1
 80074b0:	2300      	movne	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b22      	cmp	r3, #34	; 0x22
 80074c0:	d108      	bne.n	80074d4 <UART_DMAError+0x7a>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2200      	movs	r2, #0
 80074cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80074ce:	68b8      	ldr	r0, [r7, #8]
 80074d0:	f000 f8d0 	bl	8007674 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d8:	f043 0210 	orr.w	r2, r3, #16
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074e0:	68b8      	ldr	r0, [r7, #8]
 80074e2:	f7ff fe9b 	bl	800721c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074e6:	bf00      	nop
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b098      	sub	sp, #96	; 0x60
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	88fa      	ldrh	r2, [r7, #6]
 8007508:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2222      	movs	r2, #34	; 0x22
 8007514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	4a3e      	ldr	r2, [pc, #248]	; (8007618 <UART_Start_Receive_DMA+0x128>)
 800751e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007524:	4a3d      	ldr	r2, [pc, #244]	; (800761c <UART_Start_Receive_DMA+0x12c>)
 8007526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	4a3c      	ldr	r2, [pc, #240]	; (8007620 <UART_Start_Receive_DMA+0x130>)
 800752e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	2200      	movs	r2, #0
 8007536:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007538:	f107 0308 	add.w	r3, r7, #8
 800753c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3304      	adds	r3, #4
 8007548:	4619      	mov	r1, r3
 800754a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	88fb      	ldrh	r3, [r7, #6]
 8007550:	f7fc fc64 	bl	8003e1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007554:	2300      	movs	r3, #0
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	613b      	str	r3, [r7, #16]
 8007568:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	330c      	adds	r3, #12
 8007578:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007588:	65bb      	str	r3, [r7, #88]	; 0x58
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007592:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007594:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80075a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e5      	bne.n	8007572 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3314      	adds	r3, #20
 80075ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b8:	f043 0301 	orr.w	r3, r3, #1
 80075bc:	657b      	str	r3, [r7, #84]	; 0x54
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3314      	adds	r3, #20
 80075c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e5      	bne.n	80075a6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3314      	adds	r3, #20
 80075e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	617b      	str	r3, [r7, #20]
   return(result);
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f0:	653b      	str	r3, [r7, #80]	; 0x50
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3314      	adds	r3, #20
 80075f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075fa:	627a      	str	r2, [r7, #36]	; 0x24
 80075fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6a39      	ldr	r1, [r7, #32]
 8007600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	61fb      	str	r3, [r7, #28]
   return(result);
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e5      	bne.n	80075da <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3760      	adds	r7, #96	; 0x60
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	080072ff 	.word	0x080072ff
 800761c:	08007425 	.word	0x08007425
 8007620:	0800745b 	.word	0x0800745b

08007624 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007624:	b480      	push	{r7}
 8007626:	b089      	sub	sp, #36	; 0x24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	330c      	adds	r3, #12
 8007632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	60bb      	str	r3, [r7, #8]
   return(result);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007642:	61fb      	str	r3, [r7, #28]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	61ba      	str	r2, [r7, #24]
 800764e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6979      	ldr	r1, [r7, #20]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	613b      	str	r3, [r7, #16]
   return(result);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e5      	bne.n	800762c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007668:	bf00      	nop
 800766a:	3724      	adds	r7, #36	; 0x24
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b095      	sub	sp, #84	; 0x54
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	330c      	adds	r3, #12
 8007682:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	330c      	adds	r3, #12
 800769a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800769c:	643a      	str	r2, [r7, #64]	; 0x40
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e5      	bne.n	800767c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3314      	adds	r3, #20
 80076b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	61fb      	str	r3, [r7, #28]
   return(result);
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f023 0301 	bic.w	r3, r3, #1
 80076c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3314      	adds	r3, #20
 80076ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e5      	bne.n	80076b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d119      	bne.n	8007720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	330c      	adds	r3, #12
 80076f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f023 0310 	bic.w	r3, r3, #16
 8007702:	647b      	str	r3, [r7, #68]	; 0x44
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	330c      	adds	r3, #12
 800770a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800770c:	61ba      	str	r2, [r7, #24]
 800770e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6979      	ldr	r1, [r7, #20]
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	613b      	str	r3, [r7, #16]
   return(result);
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e5      	bne.n	80076ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800772e:	bf00      	nop
 8007730:	3754      	adds	r7, #84	; 0x54
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f7ff fd61 	bl	800721c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007762:	b480      	push	{r7}
 8007764:	b085      	sub	sp, #20
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b21      	cmp	r3, #33	; 0x21
 8007774:	d13e      	bne.n	80077f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777e:	d114      	bne.n	80077aa <UART_Transmit_IT+0x48>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d110      	bne.n	80077aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800779c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	1c9a      	adds	r2, r3, #2
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	621a      	str	r2, [r3, #32]
 80077a8:	e008      	b.n	80077bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	1c59      	adds	r1, r3, #1
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6211      	str	r1, [r2, #32]
 80077b4:	781a      	ldrb	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	4619      	mov	r1, r3
 80077ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10f      	bne.n	80077f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	e000      	b.n	80077f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077f4:	2302      	movs	r3, #2
  }
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007818:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7ff fcd2 	bl	80071cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b08c      	sub	sp, #48	; 0x30
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b22      	cmp	r3, #34	; 0x22
 8007844:	f040 80ab 	bne.w	800799e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007850:	d117      	bne.n	8007882 <UART_Receive_IT+0x50>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d113      	bne.n	8007882 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007870:	b29a      	uxth	r2, r3
 8007872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007874:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	1c9a      	adds	r2, r3, #2
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	629a      	str	r2, [r3, #40]	; 0x28
 8007880:	e026      	b.n	80078d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007888:	2300      	movs	r3, #0
 800788a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007894:	d007      	beq.n	80078a6 <UART_Receive_IT+0x74>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10a      	bne.n	80078b4 <UART_Receive_IT+0x82>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b0:	701a      	strb	r2, [r3, #0]
 80078b2:	e008      	b.n	80078c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	3b01      	subs	r3, #1
 80078d8:	b29b      	uxth	r3, r3
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	4619      	mov	r1, r3
 80078de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d15a      	bne.n	800799a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0220 	bic.w	r2, r2, #32
 80078f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	695a      	ldr	r2, [r3, #20]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0201 	bic.w	r2, r2, #1
 8007912:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007920:	2b01      	cmp	r3, #1
 8007922:	d135      	bne.n	8007990 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	330c      	adds	r3, #12
 8007930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	613b      	str	r3, [r7, #16]
   return(result);
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f023 0310 	bic.w	r3, r3, #16
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	330c      	adds	r3, #12
 8007948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800794a:	623a      	str	r2, [r7, #32]
 800794c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	69f9      	ldr	r1, [r7, #28]
 8007950:	6a3a      	ldr	r2, [r7, #32]
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	61bb      	str	r3, [r7, #24]
   return(result);
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e5      	bne.n	800792a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0310 	and.w	r3, r3, #16
 8007968:	2b10      	cmp	r3, #16
 800796a:	d10a      	bne.n	8007982 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff fc51 	bl	8007230 <HAL_UARTEx_RxEventCallback>
 800798e:	e002      	b.n	8007996 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff fc2f 	bl	80071f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e002      	b.n	80079a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	e000      	b.n	80079a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800799e:	2302      	movs	r3, #2
  }
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3730      	adds	r7, #48	; 0x30
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079ac:	b0c0      	sub	sp, #256	; 0x100
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c4:	68d9      	ldr	r1, [r3, #12]
 80079c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	ea40 0301 	orr.w	r3, r0, r1
 80079d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	431a      	orrs	r2, r3
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	431a      	orrs	r2, r3
 80079e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a00:	f021 010c 	bic.w	r1, r1, #12
 8007a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a0e:	430b      	orrs	r3, r1
 8007a10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a22:	6999      	ldr	r1, [r3, #24]
 8007a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	ea40 0301 	orr.w	r3, r0, r1
 8007a2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	4b8f      	ldr	r3, [pc, #572]	; (8007c74 <UART_SetConfig+0x2cc>)
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d005      	beq.n	8007a48 <UART_SetConfig+0xa0>
 8007a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	4b8d      	ldr	r3, [pc, #564]	; (8007c78 <UART_SetConfig+0x2d0>)
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d104      	bne.n	8007a52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a48:	f7fd ffc2 	bl	80059d0 <HAL_RCC_GetPCLK2Freq>
 8007a4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007a50:	e003      	b.n	8007a5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a52:	f7fd ffa9 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 8007a56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a64:	f040 810c 	bne.w	8007c80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a7a:	4622      	mov	r2, r4
 8007a7c:	462b      	mov	r3, r5
 8007a7e:	1891      	adds	r1, r2, r2
 8007a80:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a82:	415b      	adcs	r3, r3
 8007a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	eb12 0801 	adds.w	r8, r2, r1
 8007a90:	4629      	mov	r1, r5
 8007a92:	eb43 0901 	adc.w	r9, r3, r1
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007aaa:	4690      	mov	r8, r2
 8007aac:	4699      	mov	r9, r3
 8007aae:	4623      	mov	r3, r4
 8007ab0:	eb18 0303 	adds.w	r3, r8, r3
 8007ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ab8:	462b      	mov	r3, r5
 8007aba:	eb49 0303 	adc.w	r3, r9, r3
 8007abe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ace:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007ad2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	18db      	adds	r3, r3, r3
 8007ada:	653b      	str	r3, [r7, #80]	; 0x50
 8007adc:	4613      	mov	r3, r2
 8007ade:	eb42 0303 	adc.w	r3, r2, r3
 8007ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8007ae4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ae8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007aec:	f7f9 f966 	bl	8000dbc <__aeabi_uldivmod>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4b61      	ldr	r3, [pc, #388]	; (8007c7c <UART_SetConfig+0x2d4>)
 8007af6:	fba3 2302 	umull	r2, r3, r3, r2
 8007afa:	095b      	lsrs	r3, r3, #5
 8007afc:	011c      	lsls	r4, r3, #4
 8007afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b10:	4642      	mov	r2, r8
 8007b12:	464b      	mov	r3, r9
 8007b14:	1891      	adds	r1, r2, r2
 8007b16:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b18:	415b      	adcs	r3, r3
 8007b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b20:	4641      	mov	r1, r8
 8007b22:	eb12 0a01 	adds.w	sl, r2, r1
 8007b26:	4649      	mov	r1, r9
 8007b28:	eb43 0b01 	adc.w	fp, r3, r1
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b40:	4692      	mov	sl, r2
 8007b42:	469b      	mov	fp, r3
 8007b44:	4643      	mov	r3, r8
 8007b46:	eb1a 0303 	adds.w	r3, sl, r3
 8007b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b4e:	464b      	mov	r3, r9
 8007b50:	eb4b 0303 	adc.w	r3, fp, r3
 8007b54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	18db      	adds	r3, r3, r3
 8007b70:	643b      	str	r3, [r7, #64]	; 0x40
 8007b72:	4613      	mov	r3, r2
 8007b74:	eb42 0303 	adc.w	r3, r2, r3
 8007b78:	647b      	str	r3, [r7, #68]	; 0x44
 8007b7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b82:	f7f9 f91b 	bl	8000dbc <__aeabi_uldivmod>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	4b3b      	ldr	r3, [pc, #236]	; (8007c7c <UART_SetConfig+0x2d4>)
 8007b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	2264      	movs	r2, #100	; 0x64
 8007b96:	fb02 f303 	mul.w	r3, r2, r3
 8007b9a:	1acb      	subs	r3, r1, r3
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ba2:	4b36      	ldr	r3, [pc, #216]	; (8007c7c <UART_SetConfig+0x2d4>)
 8007ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8007ba8:	095b      	lsrs	r3, r3, #5
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bb0:	441c      	add	r4, r3
 8007bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007bc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007bc4:	4642      	mov	r2, r8
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	1891      	adds	r1, r2, r2
 8007bca:	63b9      	str	r1, [r7, #56]	; 0x38
 8007bcc:	415b      	adcs	r3, r3
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007bd4:	4641      	mov	r1, r8
 8007bd6:	1851      	adds	r1, r2, r1
 8007bd8:	6339      	str	r1, [r7, #48]	; 0x30
 8007bda:	4649      	mov	r1, r9
 8007bdc:	414b      	adcs	r3, r1
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007bec:	4659      	mov	r1, fp
 8007bee:	00cb      	lsls	r3, r1, #3
 8007bf0:	4651      	mov	r1, sl
 8007bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bf6:	4651      	mov	r1, sl
 8007bf8:	00ca      	lsls	r2, r1, #3
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4603      	mov	r3, r0
 8007c00:	4642      	mov	r2, r8
 8007c02:	189b      	adds	r3, r3, r2
 8007c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c08:	464b      	mov	r3, r9
 8007c0a:	460a      	mov	r2, r1
 8007c0c:	eb42 0303 	adc.w	r3, r2, r3
 8007c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c28:	460b      	mov	r3, r1
 8007c2a:	18db      	adds	r3, r3, r3
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2e:	4613      	mov	r3, r2
 8007c30:	eb42 0303 	adc.w	r3, r2, r3
 8007c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007c3e:	f7f9 f8bd 	bl	8000dbc <__aeabi_uldivmod>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4b0d      	ldr	r3, [pc, #52]	; (8007c7c <UART_SetConfig+0x2d4>)
 8007c48:	fba3 1302 	umull	r1, r3, r3, r2
 8007c4c:	095b      	lsrs	r3, r3, #5
 8007c4e:	2164      	movs	r1, #100	; 0x64
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	3332      	adds	r3, #50	; 0x32
 8007c5a:	4a08      	ldr	r2, [pc, #32]	; (8007c7c <UART_SetConfig+0x2d4>)
 8007c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c60:	095b      	lsrs	r3, r3, #5
 8007c62:	f003 0207 	and.w	r2, r3, #7
 8007c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4422      	add	r2, r4
 8007c6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c70:	e105      	b.n	8007e7e <UART_SetConfig+0x4d6>
 8007c72:	bf00      	nop
 8007c74:	40011000 	.word	0x40011000
 8007c78:	40011400 	.word	0x40011400
 8007c7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c92:	4642      	mov	r2, r8
 8007c94:	464b      	mov	r3, r9
 8007c96:	1891      	adds	r1, r2, r2
 8007c98:	6239      	str	r1, [r7, #32]
 8007c9a:	415b      	adcs	r3, r3
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ca2:	4641      	mov	r1, r8
 8007ca4:	1854      	adds	r4, r2, r1
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	eb43 0501 	adc.w	r5, r3, r1
 8007cac:	f04f 0200 	mov.w	r2, #0
 8007cb0:	f04f 0300 	mov.w	r3, #0
 8007cb4:	00eb      	lsls	r3, r5, #3
 8007cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007cba:	00e2      	lsls	r2, r4, #3
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	461d      	mov	r5, r3
 8007cc0:	4643      	mov	r3, r8
 8007cc2:	18e3      	adds	r3, r4, r3
 8007cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007cc8:	464b      	mov	r3, r9
 8007cca:	eb45 0303 	adc.w	r3, r5, r3
 8007cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ce2:	f04f 0200 	mov.w	r2, #0
 8007ce6:	f04f 0300 	mov.w	r3, #0
 8007cea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007cee:	4629      	mov	r1, r5
 8007cf0:	008b      	lsls	r3, r1, #2
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	008a      	lsls	r2, r1, #2
 8007cfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d00:	f7f9 f85c 	bl	8000dbc <__aeabi_uldivmod>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4b60      	ldr	r3, [pc, #384]	; (8007e8c <UART_SetConfig+0x4e4>)
 8007d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d0e:	095b      	lsrs	r3, r3, #5
 8007d10:	011c      	lsls	r4, r3, #4
 8007d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d24:	4642      	mov	r2, r8
 8007d26:	464b      	mov	r3, r9
 8007d28:	1891      	adds	r1, r2, r2
 8007d2a:	61b9      	str	r1, [r7, #24]
 8007d2c:	415b      	adcs	r3, r3
 8007d2e:	61fb      	str	r3, [r7, #28]
 8007d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d34:	4641      	mov	r1, r8
 8007d36:	1851      	adds	r1, r2, r1
 8007d38:	6139      	str	r1, [r7, #16]
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	414b      	adcs	r3, r1
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	f04f 0200 	mov.w	r2, #0
 8007d44:	f04f 0300 	mov.w	r3, #0
 8007d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d4c:	4659      	mov	r1, fp
 8007d4e:	00cb      	lsls	r3, r1, #3
 8007d50:	4651      	mov	r1, sl
 8007d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d56:	4651      	mov	r1, sl
 8007d58:	00ca      	lsls	r2, r1, #3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4603      	mov	r3, r0
 8007d60:	4642      	mov	r2, r8
 8007d62:	189b      	adds	r3, r3, r2
 8007d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d68:	464b      	mov	r3, r9
 8007d6a:	460a      	mov	r2, r1
 8007d6c:	eb42 0303 	adc.w	r3, r2, r3
 8007d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d80:	f04f 0200 	mov.w	r2, #0
 8007d84:	f04f 0300 	mov.w	r3, #0
 8007d88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	008b      	lsls	r3, r1, #2
 8007d90:	4641      	mov	r1, r8
 8007d92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d96:	4641      	mov	r1, r8
 8007d98:	008a      	lsls	r2, r1, #2
 8007d9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d9e:	f7f9 f80d 	bl	8000dbc <__aeabi_uldivmod>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	4b39      	ldr	r3, [pc, #228]	; (8007e8c <UART_SetConfig+0x4e4>)
 8007da8:	fba3 1302 	umull	r1, r3, r3, r2
 8007dac:	095b      	lsrs	r3, r3, #5
 8007dae:	2164      	movs	r1, #100	; 0x64
 8007db0:	fb01 f303 	mul.w	r3, r1, r3
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	011b      	lsls	r3, r3, #4
 8007db8:	3332      	adds	r3, #50	; 0x32
 8007dba:	4a34      	ldr	r2, [pc, #208]	; (8007e8c <UART_SetConfig+0x4e4>)
 8007dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc0:	095b      	lsrs	r3, r3, #5
 8007dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dc6:	441c      	add	r4, r3
 8007dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dcc:	2200      	movs	r2, #0
 8007dce:	673b      	str	r3, [r7, #112]	; 0x70
 8007dd0:	677a      	str	r2, [r7, #116]	; 0x74
 8007dd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007dd6:	4642      	mov	r2, r8
 8007dd8:	464b      	mov	r3, r9
 8007dda:	1891      	adds	r1, r2, r2
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	415b      	adcs	r3, r3
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007de6:	4641      	mov	r1, r8
 8007de8:	1851      	adds	r1, r2, r1
 8007dea:	6039      	str	r1, [r7, #0]
 8007dec:	4649      	mov	r1, r9
 8007dee:	414b      	adcs	r3, r1
 8007df0:	607b      	str	r3, [r7, #4]
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	f04f 0300 	mov.w	r3, #0
 8007dfa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007dfe:	4659      	mov	r1, fp
 8007e00:	00cb      	lsls	r3, r1, #3
 8007e02:	4651      	mov	r1, sl
 8007e04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e08:	4651      	mov	r1, sl
 8007e0a:	00ca      	lsls	r2, r1, #3
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4603      	mov	r3, r0
 8007e12:	4642      	mov	r2, r8
 8007e14:	189b      	adds	r3, r3, r2
 8007e16:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e18:	464b      	mov	r3, r9
 8007e1a:	460a      	mov	r2, r1
 8007e1c:	eb42 0303 	adc.w	r3, r2, r3
 8007e20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8007e2c:	667a      	str	r2, [r7, #100]	; 0x64
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	f04f 0300 	mov.w	r3, #0
 8007e36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	008b      	lsls	r3, r1, #2
 8007e3e:	4641      	mov	r1, r8
 8007e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e44:	4641      	mov	r1, r8
 8007e46:	008a      	lsls	r2, r1, #2
 8007e48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007e4c:	f7f8 ffb6 	bl	8000dbc <__aeabi_uldivmod>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4b0d      	ldr	r3, [pc, #52]	; (8007e8c <UART_SetConfig+0x4e4>)
 8007e56:	fba3 1302 	umull	r1, r3, r3, r2
 8007e5a:	095b      	lsrs	r3, r3, #5
 8007e5c:	2164      	movs	r1, #100	; 0x64
 8007e5e:	fb01 f303 	mul.w	r3, r1, r3
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	011b      	lsls	r3, r3, #4
 8007e66:	3332      	adds	r3, #50	; 0x32
 8007e68:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <UART_SetConfig+0x4e4>)
 8007e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6e:	095b      	lsrs	r3, r3, #5
 8007e70:	f003 020f 	and.w	r2, r3, #15
 8007e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4422      	add	r2, r4
 8007e7c:	609a      	str	r2, [r3, #8]
}
 8007e7e:	bf00      	nop
 8007e80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e84:	46bd      	mov	sp, r7
 8007e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e8a:	bf00      	nop
 8007e8c:	51eb851f 	.word	0x51eb851f

08007e90 <calloc>:
 8007e90:	4b02      	ldr	r3, [pc, #8]	; (8007e9c <calloc+0xc>)
 8007e92:	460a      	mov	r2, r1
 8007e94:	4601      	mov	r1, r0
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	f000 b842 	b.w	8007f20 <_calloc_r>
 8007e9c:	20000028 	.word	0x20000028

08007ea0 <__errno>:
 8007ea0:	4b01      	ldr	r3, [pc, #4]	; (8007ea8 <__errno+0x8>)
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	20000028 	.word	0x20000028

08007eac <__libc_init_array>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	4d0d      	ldr	r5, [pc, #52]	; (8007ee4 <__libc_init_array+0x38>)
 8007eb0:	4c0d      	ldr	r4, [pc, #52]	; (8007ee8 <__libc_init_array+0x3c>)
 8007eb2:	1b64      	subs	r4, r4, r5
 8007eb4:	10a4      	asrs	r4, r4, #2
 8007eb6:	2600      	movs	r6, #0
 8007eb8:	42a6      	cmp	r6, r4
 8007eba:	d109      	bne.n	8007ed0 <__libc_init_array+0x24>
 8007ebc:	4d0b      	ldr	r5, [pc, #44]	; (8007eec <__libc_init_array+0x40>)
 8007ebe:	4c0c      	ldr	r4, [pc, #48]	; (8007ef0 <__libc_init_array+0x44>)
 8007ec0:	f000 f9d4 	bl	800826c <_init>
 8007ec4:	1b64      	subs	r4, r4, r5
 8007ec6:	10a4      	asrs	r4, r4, #2
 8007ec8:	2600      	movs	r6, #0
 8007eca:	42a6      	cmp	r6, r4
 8007ecc:	d105      	bne.n	8007eda <__libc_init_array+0x2e>
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed4:	4798      	blx	r3
 8007ed6:	3601      	adds	r6, #1
 8007ed8:	e7ee      	b.n	8007eb8 <__libc_init_array+0xc>
 8007eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ede:	4798      	blx	r3
 8007ee0:	3601      	adds	r6, #1
 8007ee2:	e7f2      	b.n	8007eca <__libc_init_array+0x1e>
 8007ee4:	080082ac 	.word	0x080082ac
 8007ee8:	080082ac 	.word	0x080082ac
 8007eec:	080082ac 	.word	0x080082ac
 8007ef0:	080082b0 	.word	0x080082b0

08007ef4 <memcpy>:
 8007ef4:	440a      	add	r2, r1
 8007ef6:	4291      	cmp	r1, r2
 8007ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007efc:	d100      	bne.n	8007f00 <memcpy+0xc>
 8007efe:	4770      	bx	lr
 8007f00:	b510      	push	{r4, lr}
 8007f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f0a:	4291      	cmp	r1, r2
 8007f0c:	d1f9      	bne.n	8007f02 <memcpy+0xe>
 8007f0e:	bd10      	pop	{r4, pc}

08007f10 <memset>:
 8007f10:	4402      	add	r2, r0
 8007f12:	4603      	mov	r3, r0
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d100      	bne.n	8007f1a <memset+0xa>
 8007f18:	4770      	bx	lr
 8007f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f1e:	e7f9      	b.n	8007f14 <memset+0x4>

08007f20 <_calloc_r>:
 8007f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f22:	fba1 2402 	umull	r2, r4, r1, r2
 8007f26:	b94c      	cbnz	r4, 8007f3c <_calloc_r+0x1c>
 8007f28:	4611      	mov	r1, r2
 8007f2a:	9201      	str	r2, [sp, #4]
 8007f2c:	f000 f82e 	bl	8007f8c <_malloc_r>
 8007f30:	9a01      	ldr	r2, [sp, #4]
 8007f32:	4605      	mov	r5, r0
 8007f34:	b930      	cbnz	r0, 8007f44 <_calloc_r+0x24>
 8007f36:	4628      	mov	r0, r5
 8007f38:	b003      	add	sp, #12
 8007f3a:	bd30      	pop	{r4, r5, pc}
 8007f3c:	220c      	movs	r2, #12
 8007f3e:	6002      	str	r2, [r0, #0]
 8007f40:	2500      	movs	r5, #0
 8007f42:	e7f8      	b.n	8007f36 <_calloc_r+0x16>
 8007f44:	4621      	mov	r1, r4
 8007f46:	f7ff ffe3 	bl	8007f10 <memset>
 8007f4a:	e7f4      	b.n	8007f36 <_calloc_r+0x16>

08007f4c <sbrk_aligned>:
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	4e0e      	ldr	r6, [pc, #56]	; (8007f88 <sbrk_aligned+0x3c>)
 8007f50:	460c      	mov	r4, r1
 8007f52:	6831      	ldr	r1, [r6, #0]
 8007f54:	4605      	mov	r5, r0
 8007f56:	b911      	cbnz	r1, 8007f5e <sbrk_aligned+0x12>
 8007f58:	f000 f88c 	bl	8008074 <_sbrk_r>
 8007f5c:	6030      	str	r0, [r6, #0]
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4628      	mov	r0, r5
 8007f62:	f000 f887 	bl	8008074 <_sbrk_r>
 8007f66:	1c43      	adds	r3, r0, #1
 8007f68:	d00a      	beq.n	8007f80 <sbrk_aligned+0x34>
 8007f6a:	1cc4      	adds	r4, r0, #3
 8007f6c:	f024 0403 	bic.w	r4, r4, #3
 8007f70:	42a0      	cmp	r0, r4
 8007f72:	d007      	beq.n	8007f84 <sbrk_aligned+0x38>
 8007f74:	1a21      	subs	r1, r4, r0
 8007f76:	4628      	mov	r0, r5
 8007f78:	f000 f87c 	bl	8008074 <_sbrk_r>
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d101      	bne.n	8007f84 <sbrk_aligned+0x38>
 8007f80:	f04f 34ff 	mov.w	r4, #4294967295
 8007f84:	4620      	mov	r0, r4
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	20000530 	.word	0x20000530

08007f8c <_malloc_r>:
 8007f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f90:	1ccd      	adds	r5, r1, #3
 8007f92:	f025 0503 	bic.w	r5, r5, #3
 8007f96:	3508      	adds	r5, #8
 8007f98:	2d0c      	cmp	r5, #12
 8007f9a:	bf38      	it	cc
 8007f9c:	250c      	movcc	r5, #12
 8007f9e:	2d00      	cmp	r5, #0
 8007fa0:	4607      	mov	r7, r0
 8007fa2:	db01      	blt.n	8007fa8 <_malloc_r+0x1c>
 8007fa4:	42a9      	cmp	r1, r5
 8007fa6:	d905      	bls.n	8007fb4 <_malloc_r+0x28>
 8007fa8:	230c      	movs	r3, #12
 8007faa:	603b      	str	r3, [r7, #0]
 8007fac:	2600      	movs	r6, #0
 8007fae:	4630      	mov	r0, r6
 8007fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb4:	4e2e      	ldr	r6, [pc, #184]	; (8008070 <_malloc_r+0xe4>)
 8007fb6:	f000 f86d 	bl	8008094 <__malloc_lock>
 8007fba:	6833      	ldr	r3, [r6, #0]
 8007fbc:	461c      	mov	r4, r3
 8007fbe:	bb34      	cbnz	r4, 800800e <_malloc_r+0x82>
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	f7ff ffc2 	bl	8007f4c <sbrk_aligned>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	4604      	mov	r4, r0
 8007fcc:	d14d      	bne.n	800806a <_malloc_r+0xde>
 8007fce:	6834      	ldr	r4, [r6, #0]
 8007fd0:	4626      	mov	r6, r4
 8007fd2:	2e00      	cmp	r6, #0
 8007fd4:	d140      	bne.n	8008058 <_malloc_r+0xcc>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4638      	mov	r0, r7
 8007fdc:	eb04 0803 	add.w	r8, r4, r3
 8007fe0:	f000 f848 	bl	8008074 <_sbrk_r>
 8007fe4:	4580      	cmp	r8, r0
 8007fe6:	d13a      	bne.n	800805e <_malloc_r+0xd2>
 8007fe8:	6821      	ldr	r1, [r4, #0]
 8007fea:	3503      	adds	r5, #3
 8007fec:	1a6d      	subs	r5, r5, r1
 8007fee:	f025 0503 	bic.w	r5, r5, #3
 8007ff2:	3508      	adds	r5, #8
 8007ff4:	2d0c      	cmp	r5, #12
 8007ff6:	bf38      	it	cc
 8007ff8:	250c      	movcc	r5, #12
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	f7ff ffa5 	bl	8007f4c <sbrk_aligned>
 8008002:	3001      	adds	r0, #1
 8008004:	d02b      	beq.n	800805e <_malloc_r+0xd2>
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	442b      	add	r3, r5
 800800a:	6023      	str	r3, [r4, #0]
 800800c:	e00e      	b.n	800802c <_malloc_r+0xa0>
 800800e:	6822      	ldr	r2, [r4, #0]
 8008010:	1b52      	subs	r2, r2, r5
 8008012:	d41e      	bmi.n	8008052 <_malloc_r+0xc6>
 8008014:	2a0b      	cmp	r2, #11
 8008016:	d916      	bls.n	8008046 <_malloc_r+0xba>
 8008018:	1961      	adds	r1, r4, r5
 800801a:	42a3      	cmp	r3, r4
 800801c:	6025      	str	r5, [r4, #0]
 800801e:	bf18      	it	ne
 8008020:	6059      	strne	r1, [r3, #4]
 8008022:	6863      	ldr	r3, [r4, #4]
 8008024:	bf08      	it	eq
 8008026:	6031      	streq	r1, [r6, #0]
 8008028:	5162      	str	r2, [r4, r5]
 800802a:	604b      	str	r3, [r1, #4]
 800802c:	4638      	mov	r0, r7
 800802e:	f104 060b 	add.w	r6, r4, #11
 8008032:	f000 f835 	bl	80080a0 <__malloc_unlock>
 8008036:	f026 0607 	bic.w	r6, r6, #7
 800803a:	1d23      	adds	r3, r4, #4
 800803c:	1af2      	subs	r2, r6, r3
 800803e:	d0b6      	beq.n	8007fae <_malloc_r+0x22>
 8008040:	1b9b      	subs	r3, r3, r6
 8008042:	50a3      	str	r3, [r4, r2]
 8008044:	e7b3      	b.n	8007fae <_malloc_r+0x22>
 8008046:	6862      	ldr	r2, [r4, #4]
 8008048:	42a3      	cmp	r3, r4
 800804a:	bf0c      	ite	eq
 800804c:	6032      	streq	r2, [r6, #0]
 800804e:	605a      	strne	r2, [r3, #4]
 8008050:	e7ec      	b.n	800802c <_malloc_r+0xa0>
 8008052:	4623      	mov	r3, r4
 8008054:	6864      	ldr	r4, [r4, #4]
 8008056:	e7b2      	b.n	8007fbe <_malloc_r+0x32>
 8008058:	4634      	mov	r4, r6
 800805a:	6876      	ldr	r6, [r6, #4]
 800805c:	e7b9      	b.n	8007fd2 <_malloc_r+0x46>
 800805e:	230c      	movs	r3, #12
 8008060:	603b      	str	r3, [r7, #0]
 8008062:	4638      	mov	r0, r7
 8008064:	f000 f81c 	bl	80080a0 <__malloc_unlock>
 8008068:	e7a1      	b.n	8007fae <_malloc_r+0x22>
 800806a:	6025      	str	r5, [r4, #0]
 800806c:	e7de      	b.n	800802c <_malloc_r+0xa0>
 800806e:	bf00      	nop
 8008070:	2000052c 	.word	0x2000052c

08008074 <_sbrk_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4d06      	ldr	r5, [pc, #24]	; (8008090 <_sbrk_r+0x1c>)
 8008078:	2300      	movs	r3, #0
 800807a:	4604      	mov	r4, r0
 800807c:	4608      	mov	r0, r1
 800807e:	602b      	str	r3, [r5, #0]
 8008080:	f7fb fc04 	bl	800388c <_sbrk>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d102      	bne.n	800808e <_sbrk_r+0x1a>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	b103      	cbz	r3, 800808e <_sbrk_r+0x1a>
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	20000534 	.word	0x20000534

08008094 <__malloc_lock>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__malloc_lock+0x8>)
 8008096:	f000 b809 	b.w	80080ac <__retarget_lock_acquire_recursive>
 800809a:	bf00      	nop
 800809c:	20000538 	.word	0x20000538

080080a0 <__malloc_unlock>:
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <__malloc_unlock+0x8>)
 80080a2:	f000 b804 	b.w	80080ae <__retarget_lock_release_recursive>
 80080a6:	bf00      	nop
 80080a8:	20000538 	.word	0x20000538

080080ac <__retarget_lock_acquire_recursive>:
 80080ac:	4770      	bx	lr

080080ae <__retarget_lock_release_recursive>:
 80080ae:	4770      	bx	lr

080080b0 <sqrt>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	ed2d 8b02 	vpush	{d8}
 80080b6:	ec55 4b10 	vmov	r4, r5, d0
 80080ba:	f000 f825 	bl	8008108 <__ieee754_sqrt>
 80080be:	4622      	mov	r2, r4
 80080c0:	462b      	mov	r3, r5
 80080c2:	4620      	mov	r0, r4
 80080c4:	4629      	mov	r1, r5
 80080c6:	eeb0 8a40 	vmov.f32	s16, s0
 80080ca:	eef0 8a60 	vmov.f32	s17, s1
 80080ce:	f7f8 fcd9 	bl	8000a84 <__aeabi_dcmpun>
 80080d2:	b990      	cbnz	r0, 80080fa <sqrt+0x4a>
 80080d4:	2200      	movs	r2, #0
 80080d6:	2300      	movs	r3, #0
 80080d8:	4620      	mov	r0, r4
 80080da:	4629      	mov	r1, r5
 80080dc:	f7f8 fcaa 	bl	8000a34 <__aeabi_dcmplt>
 80080e0:	b158      	cbz	r0, 80080fa <sqrt+0x4a>
 80080e2:	f7ff fedd 	bl	8007ea0 <__errno>
 80080e6:	2321      	movs	r3, #33	; 0x21
 80080e8:	6003      	str	r3, [r0, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	2300      	movs	r3, #0
 80080ee:	4610      	mov	r0, r2
 80080f0:	4619      	mov	r1, r3
 80080f2:	f7f8 fb57 	bl	80007a4 <__aeabi_ddiv>
 80080f6:	ec41 0b18 	vmov	d8, r0, r1
 80080fa:	eeb0 0a48 	vmov.f32	s0, s16
 80080fe:	eef0 0a68 	vmov.f32	s1, s17
 8008102:	ecbd 8b02 	vpop	{d8}
 8008106:	bd38      	pop	{r3, r4, r5, pc}

08008108 <__ieee754_sqrt>:
 8008108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810c:	ec55 4b10 	vmov	r4, r5, d0
 8008110:	4e55      	ldr	r6, [pc, #340]	; (8008268 <__ieee754_sqrt+0x160>)
 8008112:	43ae      	bics	r6, r5
 8008114:	ee10 0a10 	vmov	r0, s0
 8008118:	ee10 3a10 	vmov	r3, s0
 800811c:	462a      	mov	r2, r5
 800811e:	4629      	mov	r1, r5
 8008120:	d110      	bne.n	8008144 <__ieee754_sqrt+0x3c>
 8008122:	ee10 2a10 	vmov	r2, s0
 8008126:	462b      	mov	r3, r5
 8008128:	f7f8 fa12 	bl	8000550 <__aeabi_dmul>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	4620      	mov	r0, r4
 8008132:	4629      	mov	r1, r5
 8008134:	f7f8 f856 	bl	80001e4 <__adddf3>
 8008138:	4604      	mov	r4, r0
 800813a:	460d      	mov	r5, r1
 800813c:	ec45 4b10 	vmov	d0, r4, r5
 8008140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008144:	2d00      	cmp	r5, #0
 8008146:	dc10      	bgt.n	800816a <__ieee754_sqrt+0x62>
 8008148:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800814c:	4330      	orrs	r0, r6
 800814e:	d0f5      	beq.n	800813c <__ieee754_sqrt+0x34>
 8008150:	b15d      	cbz	r5, 800816a <__ieee754_sqrt+0x62>
 8008152:	ee10 2a10 	vmov	r2, s0
 8008156:	462b      	mov	r3, r5
 8008158:	ee10 0a10 	vmov	r0, s0
 800815c:	f7f8 f840 	bl	80001e0 <__aeabi_dsub>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	f7f8 fb1e 	bl	80007a4 <__aeabi_ddiv>
 8008168:	e7e6      	b.n	8008138 <__ieee754_sqrt+0x30>
 800816a:	1512      	asrs	r2, r2, #20
 800816c:	d074      	beq.n	8008258 <__ieee754_sqrt+0x150>
 800816e:	07d4      	lsls	r4, r2, #31
 8008170:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008174:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008178:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800817c:	bf5e      	ittt	pl
 800817e:	0fda      	lsrpl	r2, r3, #31
 8008180:	005b      	lslpl	r3, r3, #1
 8008182:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008186:	2400      	movs	r4, #0
 8008188:	0fda      	lsrs	r2, r3, #31
 800818a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800818e:	107f      	asrs	r7, r7, #1
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	2516      	movs	r5, #22
 8008194:	4620      	mov	r0, r4
 8008196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800819a:	1886      	adds	r6, r0, r2
 800819c:	428e      	cmp	r6, r1
 800819e:	bfde      	ittt	le
 80081a0:	1b89      	suble	r1, r1, r6
 80081a2:	18b0      	addle	r0, r6, r2
 80081a4:	18a4      	addle	r4, r4, r2
 80081a6:	0049      	lsls	r1, r1, #1
 80081a8:	3d01      	subs	r5, #1
 80081aa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80081ae:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80081b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80081b6:	d1f0      	bne.n	800819a <__ieee754_sqrt+0x92>
 80081b8:	462a      	mov	r2, r5
 80081ba:	f04f 0e20 	mov.w	lr, #32
 80081be:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80081c2:	4281      	cmp	r1, r0
 80081c4:	eb06 0c05 	add.w	ip, r6, r5
 80081c8:	dc02      	bgt.n	80081d0 <__ieee754_sqrt+0xc8>
 80081ca:	d113      	bne.n	80081f4 <__ieee754_sqrt+0xec>
 80081cc:	459c      	cmp	ip, r3
 80081ce:	d811      	bhi.n	80081f4 <__ieee754_sqrt+0xec>
 80081d0:	f1bc 0f00 	cmp.w	ip, #0
 80081d4:	eb0c 0506 	add.w	r5, ip, r6
 80081d8:	da43      	bge.n	8008262 <__ieee754_sqrt+0x15a>
 80081da:	2d00      	cmp	r5, #0
 80081dc:	db41      	blt.n	8008262 <__ieee754_sqrt+0x15a>
 80081de:	f100 0801 	add.w	r8, r0, #1
 80081e2:	1a09      	subs	r1, r1, r0
 80081e4:	459c      	cmp	ip, r3
 80081e6:	bf88      	it	hi
 80081e8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80081ec:	eba3 030c 	sub.w	r3, r3, ip
 80081f0:	4432      	add	r2, r6
 80081f2:	4640      	mov	r0, r8
 80081f4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80081f8:	f1be 0e01 	subs.w	lr, lr, #1
 80081fc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008200:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008204:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008208:	d1db      	bne.n	80081c2 <__ieee754_sqrt+0xba>
 800820a:	430b      	orrs	r3, r1
 800820c:	d006      	beq.n	800821c <__ieee754_sqrt+0x114>
 800820e:	1c50      	adds	r0, r2, #1
 8008210:	bf13      	iteet	ne
 8008212:	3201      	addne	r2, #1
 8008214:	3401      	addeq	r4, #1
 8008216:	4672      	moveq	r2, lr
 8008218:	f022 0201 	bicne.w	r2, r2, #1
 800821c:	1063      	asrs	r3, r4, #1
 800821e:	0852      	lsrs	r2, r2, #1
 8008220:	07e1      	lsls	r1, r4, #31
 8008222:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008226:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800822a:	bf48      	it	mi
 800822c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008230:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008234:	4614      	mov	r4, r2
 8008236:	e781      	b.n	800813c <__ieee754_sqrt+0x34>
 8008238:	0ad9      	lsrs	r1, r3, #11
 800823a:	3815      	subs	r0, #21
 800823c:	055b      	lsls	r3, r3, #21
 800823e:	2900      	cmp	r1, #0
 8008240:	d0fa      	beq.n	8008238 <__ieee754_sqrt+0x130>
 8008242:	02cd      	lsls	r5, r1, #11
 8008244:	d50a      	bpl.n	800825c <__ieee754_sqrt+0x154>
 8008246:	f1c2 0420 	rsb	r4, r2, #32
 800824a:	fa23 f404 	lsr.w	r4, r3, r4
 800824e:	1e55      	subs	r5, r2, #1
 8008250:	4093      	lsls	r3, r2
 8008252:	4321      	orrs	r1, r4
 8008254:	1b42      	subs	r2, r0, r5
 8008256:	e78a      	b.n	800816e <__ieee754_sqrt+0x66>
 8008258:	4610      	mov	r0, r2
 800825a:	e7f0      	b.n	800823e <__ieee754_sqrt+0x136>
 800825c:	0049      	lsls	r1, r1, #1
 800825e:	3201      	adds	r2, #1
 8008260:	e7ef      	b.n	8008242 <__ieee754_sqrt+0x13a>
 8008262:	4680      	mov	r8, r0
 8008264:	e7bd      	b.n	80081e2 <__ieee754_sqrt+0xda>
 8008266:	bf00      	nop
 8008268:	7ff00000 	.word	0x7ff00000

0800826c <_init>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	bf00      	nop
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr

08008278 <_fini>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	bf00      	nop
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr

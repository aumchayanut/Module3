
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088ec  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa4  08008aa4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008aa4  08008aa4  00018aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aac  08008aac  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ab0  08008ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000090  08008b40  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08008b40  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114d0  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe7  00000000  00000000  0003158c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00033578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00034538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f50  00000000  00000000  00035468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012754  00000000  00000000  0004c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009194b  00000000  00000000  0005eb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0457  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004960  00000000  00000000  000f04a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008a6c 	.word	0x08008a6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08008a6c 	.word	0x08008a6c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_uldivmod>:
 8000dbc:	b953      	cbnz	r3, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dbe:	b94a      	cbnz	r2, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	bf08      	it	eq
 8000dc4:	2800      	cmpeq	r0, #0
 8000dc6:	bf1c      	itt	ne
 8000dc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd0:	f000 b974 	b.w	80010bc <__aeabi_idiv0>
 8000dd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ddc:	f000 f806 	bl	8000dec <__udivmoddi4>
 8000de0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de8:	b004      	add	sp, #16
 8000dea:	4770      	bx	lr

08000dec <__udivmoddi4>:
 8000dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df0:	9d08      	ldr	r5, [sp, #32]
 8000df2:	4604      	mov	r4, r0
 8000df4:	468e      	mov	lr, r1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d14d      	bne.n	8000e96 <__udivmoddi4+0xaa>
 8000dfa:	428a      	cmp	r2, r1
 8000dfc:	4694      	mov	ip, r2
 8000dfe:	d969      	bls.n	8000ed4 <__udivmoddi4+0xe8>
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	b152      	cbz	r2, 8000e1c <__udivmoddi4+0x30>
 8000e06:	fa01 f302 	lsl.w	r3, r1, r2
 8000e0a:	f1c2 0120 	rsb	r1, r2, #32
 8000e0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000e12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e16:	ea41 0e03 	orr.w	lr, r1, r3
 8000e1a:	4094      	lsls	r4, r2
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	0c21      	lsrs	r1, r4, #16
 8000e22:	fbbe f6f8 	udiv	r6, lr, r8
 8000e26:	fa1f f78c 	uxth.w	r7, ip
 8000e2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e32:	fb06 f107 	mul.w	r1, r6, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d90a      	bls.n	8000e50 <__udivmoddi4+0x64>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e42:	f080 811f 	bcs.w	8001084 <__udivmoddi4+0x298>
 8000e46:	4299      	cmp	r1, r3
 8000e48:	f240 811c 	bls.w	8001084 <__udivmoddi4+0x298>
 8000e4c:	3e02      	subs	r6, #2
 8000e4e:	4463      	add	r3, ip
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e58:	fb08 3310 	mls	r3, r8, r0, r3
 8000e5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e60:	fb00 f707 	mul.w	r7, r0, r7
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x92>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e70:	f080 810a 	bcs.w	8001088 <__udivmoddi4+0x29c>
 8000e74:	42a7      	cmp	r7, r4
 8000e76:	f240 8107 	bls.w	8001088 <__udivmoddi4+0x29c>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	1be4      	subs	r4, r4, r7
 8000e84:	2600      	movs	r6, #0
 8000e86:	b11d      	cbz	r5, 8000e90 <__udivmoddi4+0xa4>
 8000e88:	40d4      	lsrs	r4, r2
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d909      	bls.n	8000eae <__udivmoddi4+0xc2>
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	f000 80ef 	beq.w	800107e <__udivmoddi4+0x292>
 8000ea0:	2600      	movs	r6, #0
 8000ea2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	fab3 f683 	clz	r6, r3
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d14a      	bne.n	8000f4c <__udivmoddi4+0x160>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xd4>
 8000eba:	4282      	cmp	r2, r0
 8000ebc:	f200 80f9 	bhi.w	80010b2 <__udivmoddi4+0x2c6>
 8000ec0:	1a84      	subs	r4, r0, r2
 8000ec2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	469e      	mov	lr, r3
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d0e0      	beq.n	8000e90 <__udivmoddi4+0xa4>
 8000ece:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ed2:	e7dd      	b.n	8000e90 <__udivmoddi4+0xa4>
 8000ed4:	b902      	cbnz	r2, 8000ed8 <__udivmoddi4+0xec>
 8000ed6:	deff      	udf	#255	; 0xff
 8000ed8:	fab2 f282 	clz	r2, r2
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	f040 8092 	bne.w	8001006 <__udivmoddi4+0x21a>
 8000ee2:	eba1 010c 	sub.w	r1, r1, ip
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2601      	movs	r6, #1
 8000ef0:	0c20      	lsrs	r0, r4, #16
 8000ef2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ef6:	fb07 1113 	mls	r1, r7, r3, r1
 8000efa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efe:	fb0e f003 	mul.w	r0, lr, r3
 8000f02:	4288      	cmp	r0, r1
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x12c>
 8000f06:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x12a>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2c0>
 8000f16:	4643      	mov	r3, r8
 8000f18:	1a09      	subs	r1, r1, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f20:	fb07 1110 	mls	r1, r7, r0, r1
 8000f24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x156>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x154>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2ca>
 8000f40:	4608      	mov	r0, r1
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f4a:	e79c      	b.n	8000e86 <__udivmoddi4+0x9a>
 8000f4c:	f1c6 0720 	rsb	r7, r6, #32
 8000f50:	40b3      	lsls	r3, r6
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f62:	431c      	orrs	r4, r3
 8000f64:	40f9      	lsrs	r1, r7
 8000f66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f72:	0c20      	lsrs	r0, r4, #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fb09 1118 	mls	r1, r9, r8, r1
 8000f7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f80:	fb08 f00e 	mul.w	r0, r8, lr
 8000f84:	4288      	cmp	r0, r1
 8000f86:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b8>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2bc>
 8000f98:	4288      	cmp	r0, r1
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2bc>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4461      	add	r1, ip
 8000fa4:	1a09      	subs	r1, r1, r0
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fac:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fb8:	458e      	cmp	lr, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1e2>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2b4>
 8000fc6:	458e      	cmp	lr, r1
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2b4>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fd6:	eba1 010e 	sub.w	r1, r1, lr
 8000fda:	42a1      	cmp	r1, r4
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46a6      	mov	lr, r4
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x2a4>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x2a0>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x212>
 8000fe6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fea:	eb61 010e 	sbc.w	r1, r1, lr
 8000fee:	fa01 f707 	lsl.w	r7, r1, r7
 8000ff2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ff6:	40f1      	lsrs	r1, r6
 8000ff8:	431f      	orrs	r7, r3
 8000ffa:	e9c5 7100 	strd	r7, r1, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	f1c2 0320 	rsb	r3, r2, #32
 800100a:	40d8      	lsrs	r0, r3
 800100c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001010:	fa21 f303 	lsr.w	r3, r1, r3
 8001014:	4091      	lsls	r1, r2
 8001016:	4301      	orrs	r1, r0
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb3 f0f7 	udiv	r0, r3, r7
 8001024:	fb07 3610 	mls	r6, r7, r0, r3
 8001028:	0c0b      	lsrs	r3, r1, #16
 800102a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800102e:	fb00 f60e 	mul.w	r6, r0, lr
 8001032:	429e      	cmp	r6, r3
 8001034:	fa04 f402 	lsl.w	r4, r4, r2
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x260>
 800103a:	eb1c 0303 	adds.w	r3, ip, r3
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b8>
 8001044:	429e      	cmp	r6, r3
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b8>
 8001048:	3802      	subs	r0, #2
 800104a:	4463      	add	r3, ip
 800104c:	1b9b      	subs	r3, r3, r6
 800104e:	b289      	uxth	r1, r1
 8001050:	fbb3 f6f7 	udiv	r6, r3, r7
 8001054:	fb07 3316 	mls	r3, r7, r6, r3
 8001058:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800105c:	fb06 f30e 	mul.w	r3, r6, lr
 8001060:	428b      	cmp	r3, r1
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x28a>
 8001064:	eb1c 0101 	adds.w	r1, ip, r1
 8001068:	f106 38ff 	add.w	r8, r6, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2b0>
 800106e:	428b      	cmp	r3, r1
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2b0>
 8001072:	3e02      	subs	r6, #2
 8001074:	4461      	add	r1, ip
 8001076:	1ac9      	subs	r1, r1, r3
 8001078:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0x104>
 800107e:	462e      	mov	r6, r5
 8001080:	4628      	mov	r0, r5
 8001082:	e705      	b.n	8000e90 <__udivmoddi4+0xa4>
 8001084:	4606      	mov	r6, r0
 8001086:	e6e3      	b.n	8000e50 <__udivmoddi4+0x64>
 8001088:	4618      	mov	r0, r3
 800108a:	e6f8      	b.n	8000e7e <__udivmoddi4+0x92>
 800108c:	454b      	cmp	r3, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f8>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001098:	3801      	subs	r0, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f8>
 800109c:	4646      	mov	r6, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x28a>
 80010a0:	4620      	mov	r0, r4
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1e2>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x260>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b8>
 80010ac:	3b02      	subs	r3, #2
 80010ae:	4461      	add	r1, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x12c>
 80010b2:	4630      	mov	r0, r6
 80010b4:	e709      	b.n	8000eca <__udivmoddi4+0xde>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x156>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010c4:	b089      	sub	sp, #36	; 0x24
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c8:	f003 f852 	bl	8004170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 fda6 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f000 ffda 	bl	8002088 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010d4:	f000 fe38 	bl	8001d48 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010d8:	f000 fee2 	bl	8001ea0 <MX_TIM2_Init>
  MX_DMA_Init();
 80010dc:	f000 ffac 	bl	8002038 <MX_DMA_Init>
  MX_I2C1_Init();
 80010e0:	f000 fe04 	bl	8001cec <MX_I2C1_Init>
  MX_TIM3_Init();
 80010e4:	f000 ff28 	bl	8001f38 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80010e8:	f000 ff7a 	bl	8001fe0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

UART2.huart = &huart2;
 80010ec:	4b90      	ldr	r3, [pc, #576]	; (8001330 <main+0x270>)
 80010ee:	4a91      	ldr	r2, [pc, #580]	; (8001334 <main+0x274>)
 80010f0:	601a      	str	r2, [r3, #0]
UART2.RxLen = 255;
 80010f2:	4a8f      	ldr	r2, [pc, #572]	; (8001330 <main+0x270>)
 80010f4:	23ff      	movs	r3, #255	; 0xff
 80010f6:	80d3      	strh	r3, [r2, #6]
UART2.TxLen = 255;
 80010f8:	4a8d      	ldr	r2, [pc, #564]	; (8001330 <main+0x270>)
 80010fa:	23ff      	movs	r3, #255	; 0xff
 80010fc:	8093      	strh	r3, [r2, #4]
UARTInit(&UART2);
 80010fe:	488c      	ldr	r0, [pc, #560]	; (8001330 <main+0x270>)
 8001100:	f001 f86e 	bl	80021e0 <UARTInit>
UARTResetStart(&UART2);
 8001104:	488a      	ldr	r0, [pc, #552]	; (8001330 <main+0x270>)
 8001106:	f001 f893 	bl	8002230 <UARTResetStart>


	PIDinit() ;
 800110a:	f002 fb0d 	bl	8003728 <PIDinit>

  // start PWM
  HAL_TIM_Base_Start(&htim1);
 800110e:	488a      	ldr	r0, [pc, #552]	; (8001338 <main+0x278>)
 8001110:	f005 f8c2 	bl	8006298 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001114:	2100      	movs	r1, #0
 8001116:	4888      	ldr	r0, [pc, #544]	; (8001338 <main+0x278>)
 8001118:	f005 f9d4 	bl	80064c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800111c:	2104      	movs	r1, #4
 800111e:	4886      	ldr	r0, [pc, #536]	; (8001338 <main+0x278>)
 8001120:	f005 f9d0 	bl	80064c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001124:	2108      	movs	r1, #8
 8001126:	4884      	ldr	r0, [pc, #528]	; (8001338 <main+0x278>)
 8001128:	f005 f9cc 	bl	80064c4 <HAL_TIM_PWM_Start>

  // start micros
  HAL_TIM_Base_Start_IT(&htim2);
 800112c:	4883      	ldr	r0, [pc, #524]	; (800133c <main+0x27c>)
 800112e:	f005 f90d 	bl	800634c <HAL_TIM_Base_Start_IT>

  // start Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001132:	213c      	movs	r1, #60	; 0x3c
 8001134:	4882      	ldr	r0, [pc, #520]	; (8001340 <main+0x280>)
 8001136:	f005 fb1b 	bl	8006770 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Station[0] = 80;
 800113a:	4a82      	ldr	r2, [pc, #520]	; (8001344 <main+0x284>)
 800113c:	2350      	movs	r3, #80	; 0x50
 800113e:	8013      	strh	r3, [r2, #0]
	  Station[1] = 85;
 8001140:	4a80      	ldr	r2, [pc, #512]	; (8001344 <main+0x284>)
 8001142:	2355      	movs	r3, #85	; 0x55
 8001144:	8053      	strh	r3, [r2, #2]
	  Station[2] = 90;
 8001146:	4a7f      	ldr	r2, [pc, #508]	; (8001344 <main+0x284>)
 8001148:	235a      	movs	r3, #90	; 0x5a
 800114a:	8093      	strh	r3, [r2, #4]
	  Station[3] = 95;
 800114c:	4a7d      	ldr	r2, [pc, #500]	; (8001344 <main+0x284>)
 800114e:	235f      	movs	r3, #95	; 0x5f
 8001150:	80d3      	strh	r3, [r2, #6]
	  Station[4] = 260;
 8001152:	4a7c      	ldr	r2, [pc, #496]	; (8001344 <main+0x284>)
 8001154:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001158:	8113      	strh	r3, [r2, #8]
	  Station[5] = 25;
 800115a:	4a7a      	ldr	r2, [pc, #488]	; (8001344 <main+0x284>)
 800115c:	2319      	movs	r3, #25
 800115e:	8153      	strh	r3, [r2, #10]
	  Station[6] = 115;
 8001160:	4a78      	ldr	r2, [pc, #480]	; (8001344 <main+0x284>)
 8001162:	2373      	movs	r3, #115	; 0x73
 8001164:	8193      	strh	r3, [r2, #12]
	  Station[7] = 205;
 8001166:	4a77      	ldr	r2, [pc, #476]	; (8001344 <main+0x284>)
 8001168:	23cd      	movs	r3, #205	; 0xcd
 800116a:	81d3      	strh	r3, [r2, #14]
	  Station[8] = 295;
 800116c:	4a75      	ldr	r2, [pc, #468]	; (8001344 <main+0x284>)
 800116e:	f240 1327 	movw	r3, #295	; 0x127
 8001172:	8213      	strh	r3, [r2, #16]
	  Station[9] = 0;
 8001174:	4a73      	ldr	r2, [pc, #460]	; (8001344 <main+0x284>)
 8001176:	2300      	movs	r3, #0
 8001178:	8253      	strh	r3, [r2, #18]

	  //*************When reach station********************
	  //Open End-eff
	  if (FinishedStation)
 800117a:	4b73      	ldr	r3, [pc, #460]	; (8001348 <main+0x288>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d061      	beq.n	8001246 <main+0x186>
	  {
		  if (micros() - effTimestamp > 5000000)
 8001182:	f002 fd3d 	bl	8003c00 <micros>
 8001186:	4b71      	ldr	r3, [pc, #452]	; (800134c <main+0x28c>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	1a84      	subs	r4, r0, r2
 800118e:	eb61 0503 	sbc.w	r5, r1, r3
 8001192:	4b6f      	ldr	r3, [pc, #444]	; (8001350 <main+0x290>)
 8001194:	429c      	cmp	r4, r3
 8001196:	f175 0300 	sbcs.w	r3, r5, #0
 800119a:	d354      	bcc.n	8001246 <main+0x186>
		  {
			  FinishedStation = 0;
 800119c:	4a6a      	ldr	r2, [pc, #424]	; (8001348 <main+0x288>)
 800119e:	2300      	movs	r3, #0
 80011a0:	7013      	strb	r3, [r2, #0]
			  if (HowMuchStation > 0)
 80011a2:	4b6c      	ldr	r3, [pc, #432]	; (8001354 <main+0x294>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d028      	beq.n	80011fc <main+0x13c>
			  {
				  NextStation++;
 80011aa:	4b6b      	ldr	r3, [pc, #428]	; (8001358 <main+0x298>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	4a69      	ldr	r2, [pc, #420]	; (8001358 <main+0x298>)
 80011b4:	7013      	strb	r3, [r2, #0]
				  StartMoving = 1;
 80011b6:	4a69      	ldr	r2, [pc, #420]	; (800135c <main+0x29c>)
 80011b8:	2301      	movs	r3, #1
 80011ba:	7013      	strb	r3, [r2, #0]
				  EndStationTime = micros();
 80011bc:	f002 fd20 	bl	8003c00 <micros>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4966      	ldr	r1, [pc, #408]	; (8001360 <main+0x2a0>)
 80011c6:	e9c1 2300 	strd	r2, r3, [r1]
				  TimePerStation = (float)(EndStationTime-StartStationTime)/1000000;
 80011ca:	4b65      	ldr	r3, [pc, #404]	; (8001360 <main+0x2a0>)
 80011cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d0:	4b64      	ldr	r3, [pc, #400]	; (8001364 <main+0x2a4>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	1a86      	subs	r6, r0, r2
 80011d8:	613e      	str	r6, [r7, #16]
 80011da:	eb61 0303 	sbc.w	r3, r1, r3
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011e4:	f7ff fda4 	bl	8000d30 <__aeabi_ul2f>
 80011e8:	ee06 0a90 	vmov	s13, r0
 80011ec:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001368 <main+0x2a8>
 80011f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f4:	4b5d      	ldr	r3, [pc, #372]	; (800136c <main+0x2ac>)
 80011f6:	edc3 7a00 	vstr	s15, [r3]
 80011fa:	e024      	b.n	8001246 <main+0x186>
			  }
			  else
			  {
				  EndStationTime = micros();
 80011fc:	f002 fd00 	bl	8003c00 <micros>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4956      	ldr	r1, [pc, #344]	; (8001360 <main+0x2a0>)
 8001206:	e9c1 2300 	strd	r2, r3, [r1]
				  TimePerStation = (float)(EndStationTime-StartStationTime)/1000000;
 800120a:	4b55      	ldr	r3, [pc, #340]	; (8001360 <main+0x2a0>)
 800120c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001210:	4b54      	ldr	r3, [pc, #336]	; (8001364 <main+0x2a4>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	1a86      	subs	r6, r0, r2
 8001218:	60be      	str	r6, [r7, #8]
 800121a:	eb61 0303 	sbc.w	r3, r1, r3
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001224:	f7ff fd84 	bl	8000d30 <__aeabi_ul2f>
 8001228:	ee06 0a90 	vmov	s13, r0
 800122c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001368 <main+0x2a8>
 8001230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001234:	4b4d      	ldr	r3, [pc, #308]	; (800136c <main+0x2ac>)
 8001236:	edc3 7a00 	vstr	s15, [r3]
				  StartMoving = 0;
 800123a:	4a48      	ldr	r2, [pc, #288]	; (800135c <main+0x29c>)
 800123c:	2300      	movs	r3, #0
 800123e:	7013      	strb	r3, [r2, #0]
				  FinishedTask = 1;
 8001240:	4a4b      	ldr	r2, [pc, #300]	; (8001370 <main+0x2b0>)
 8001242:	2301      	movs	r3, #1
 8001244:	7013      	strb	r3, [r2, #0]
			  }

		  }
	  }
	  //Get next station
	  if (HowMuchStation >=1)
 8001246:	4b43      	ldr	r3, [pc, #268]	; (8001354 <main+0x294>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00f      	beq.n	800126e <main+0x1ae>
	  {
		  FinalPos = Station[GoToStation[NextStation]];
 800124e:	4b42      	ldr	r3, [pc, #264]	; (8001358 <main+0x298>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	4b47      	ldr	r3, [pc, #284]	; (8001374 <main+0x2b4>)
 8001256:	5c9b      	ldrb	r3, [r3, r2]
 8001258:	461a      	mov	r2, r3
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <main+0x284>)
 800125c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <main+0x2b8>)
 800126a:	edc3 7a00 	vstr	s15, [r3]
	  }
	  //*****************************************************************
	  if (NextStation >= HowMuchStation && StartMoving && HowMuchStation != 0)
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <main+0x298>)
 8001270:	781a      	ldrb	r2, [r3, #0]
 8001272:	4b38      	ldr	r3, [pc, #224]	; (8001354 <main+0x294>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d30d      	bcc.n	8001296 <main+0x1d6>
 800127a:	4b38      	ldr	r3, [pc, #224]	; (800135c <main+0x29c>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d009      	beq.n	8001296 <main+0x1d6>
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <main+0x294>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <main+0x1d6>
	  {
		  FinishedTask = 1;
 800128a:	4a39      	ldr	r2, [pc, #228]	; (8001370 <main+0x2b0>)
 800128c:	2301      	movs	r3, #1
 800128e:	7013      	strb	r3, [r2, #0]
		  StartMoving = 0;
 8001290:	4a32      	ldr	r2, [pc, #200]	; (800135c <main+0x29c>)
 8001292:	2300      	movs	r3, #0
 8001294:	7013      	strb	r3, [r2, #0]
	  }
//***********General********************************
	  ButtonBuffer[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129a:	4838      	ldr	r0, [pc, #224]	; (800137c <main+0x2bc>)
 800129c:	f003 fe96 	bl	8004fcc <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a37      	ldr	r2, [pc, #220]	; (8001380 <main+0x2c0>)
 80012a4:	7013      	strb	r3, [r2, #0]
	  if (ButtonBuffer[1] == 1 && ButtonBuffer[0]== 0)
 80012a6:	4b36      	ldr	r3, [pc, #216]	; (8001380 <main+0x2c0>)
 80012a8:	785b      	ldrb	r3, [r3, #1]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d105      	bne.n	80012ba <main+0x1fa>
 80012ae:	4b34      	ldr	r3, [pc, #208]	; (8001380 <main+0x2c0>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <main+0x1fa>
	  {
		  EndEffWrite();
 80012b6:	f000 ff61 	bl	800217c <EndEffWrite>
	  }
	  ButtonBuffer[1] = ButtonBuffer[0];
 80012ba:	4b31      	ldr	r3, [pc, #196]	; (8001380 <main+0x2c0>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4a30      	ldr	r2, [pc, #192]	; (8001380 <main+0x2c0>)
 80012c0:	7053      	strb	r3, [r2, #1]
	  Degree = htim3.Instance->CNT * 360.0 / 2048.0 ; //Degree unit
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <main+0x280>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f8c7 	bl	800045c <__aeabi_ui2d>
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <main+0x2c4>)
 80012d4:	f7ff f93c 	bl	8000550 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <main+0x2c8>)
 80012e6:	f7ff fa5d 	bl	80007a4 <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fc05 	bl	8000b00 <__aeabi_d2f>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a24      	ldr	r2, [pc, #144]	; (800138c <main+0x2cc>)
 80012fa:	6013      	str	r3, [r2, #0]
	  PWMgeneration() ; //Gen PWM
 80012fc:	f002 fbaa 	bl	8003a54 <PWMgeneration>
//***************************************************
////**********Get Real Vmax****************************

	  VelocityRPM = Velocity() ; //rpm unit
 8001300:	f002 fb44 	bl	800398c <Velocity>
 8001304:	eef0 7a40 	vmov.f32	s15, s0
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <main+0x2d0>)
 800130a:	edc3 7a00 	vstr	s15, [r3]
	  if (VelocityRPM < 0)
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <main+0x2d0>)
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	d53c      	bpl.n	8001398 <main+0x2d8>
	  {
		  VmaxReal = -VelocityRPM;
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <main+0x2d0>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	eef1 7a67 	vneg.f32	s15, s15
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <main+0x2d4>)
 800132a:	edc3 7a00 	vstr	s15, [r3]
 800132e:	e037      	b.n	80013a0 <main+0x2e0>
 8001330:	200002dc 	.word	0x200002dc
 8001334:	200001d8 	.word	0x200001d8
 8001338:	20000100 	.word	0x20000100
 800133c:	20000148 	.word	0x20000148
 8001340:	20000190 	.word	0x20000190
 8001344:	200002f8 	.word	0x200002f8
 8001348:	200003c0 	.word	0x200003c0
 800134c:	200003c8 	.word	0x200003c8
 8001350:	004c4b41 	.word	0x004c4b41
 8001354:	20000018 	.word	0x20000018
 8001358:	200003c2 	.word	0x200003c2
 800135c:	20000340 	.word	0x20000340
 8001360:	200004d8 	.word	0x200004d8
 8001364:	200004d0 	.word	0x200004d0
 8001368:	49742400 	.word	0x49742400
 800136c:	200004e0 	.word	0x200004e0
 8001370:	200003c1 	.word	0x200003c1
 8001374:	200003d0 	.word	0x200003d0
 8001378:	20000010 	.word	0x20000010
 800137c:	40020800 	.word	0x40020800
 8001380:	20000510 	.word	0x20000510
 8001384:	40768000 	.word	0x40768000
 8001388:	40a00000 	.word	0x40a00000
 800138c:	20000508 	.word	0x20000508
 8001390:	20000500 	.word	0x20000500
 8001394:	20000388 	.word	0x20000388
	  }
	  else
	  {
		  VmaxReal = VelocityRPM;
 8001398:	4b7b      	ldr	r3, [pc, #492]	; (8001588 <main+0x4c8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a7b      	ldr	r2, [pc, #492]	; (800158c <main+0x4cc>)
 800139e:	6013      	str	r3, [r2, #0]
	  }
	  if (VmaxReal > VrequirementCheck)
 80013a0:	4b7a      	ldr	r3, [pc, #488]	; (800158c <main+0x4cc>)
 80013a2:	ed93 7a00 	vldr	s14, [r3]
 80013a6:	4b7a      	ldr	r3, [pc, #488]	; (8001590 <main+0x4d0>)
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b4:	dd03      	ble.n	80013be <main+0x2fe>
	  {
		  VrequirementCheck = VmaxReal;
 80013b6:	4b75      	ldr	r3, [pc, #468]	; (800158c <main+0x4cc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a75      	ldr	r2, [pc, #468]	; (8001590 <main+0x4d0>)
 80013bc:	6013      	str	r3, [r2, #0]
	  }
//	  AccelerationRad = Acceleration();
	  AccelerationRad = Acceleration();
 80013be:	f002 fa9b 	bl	80038f8 <Acceleration>
 80013c2:	eef0 7a40 	vmov.f32	s15, s0
 80013c6:	4b73      	ldr	r3, [pc, #460]	; (8001594 <main+0x4d4>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
	  if(fabs(AccelerationRad) > AccMax)
 80013cc:	4b71      	ldr	r3, [pc, #452]	; (8001594 <main+0x4d4>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	eeb0 7ae7 	vabs.f32	s14, s15
 80013d6:	4b70      	ldr	r3, [pc, #448]	; (8001598 <main+0x4d8>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd07      	ble.n	80013f6 <main+0x336>
	  {
		  AccMax = fabs(AccelerationRad);
 80013e6:	4b6b      	ldr	r3, [pc, #428]	; (8001594 <main+0x4d4>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	eef0 7ae7 	vabs.f32	s15, s15
 80013f0:	4b69      	ldr	r3, [pc, #420]	; (8001598 <main+0x4d8>)
 80013f2:	edc3 7a00 	vstr	s15, [r3]
	  }
////*****************************************************
//**********Set Home******************************
	  if (StartSetHome)
 80013f6:	4b69      	ldr	r3, [pc, #420]	; (800159c <main+0x4dc>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d025      	beq.n	800144a <main+0x38a>
	  {
		  SetHome() ;
 80013fe:	f001 fcb3 	bl	8002d68 <SetHome>
		  //**************PID******************************
		  if (micros() - TimestampPID > 1000)
 8001402:	f002 fbfd 	bl	8003c00 <micros>
 8001406:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <main+0x4e0>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	ebb0 0802 	subs.w	r8, r0, r2
 8001410:	eb61 0903 	sbc.w	r9, r1, r3
 8001414:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8001418:	4598      	cmp	r8, r3
 800141a:	f179 0300 	sbcs.w	r3, r9, #0
 800141e:	d314      	bcc.n	800144a <main+0x38a>
		  {
			  P = p;
 8001420:	4b60      	ldr	r3, [pc, #384]	; (80015a4 <main+0x4e4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a60      	ldr	r2, [pc, #384]	; (80015a8 <main+0x4e8>)
 8001426:	6013      	str	r3, [r2, #0]
			  I = i;
 8001428:	4b60      	ldr	r3, [pc, #384]	; (80015ac <main+0x4ec>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a60      	ldr	r2, [pc, #384]	; (80015b0 <main+0x4f0>)
 800142e:	6013      	str	r3, [r2, #0]
			  D = d;
 8001430:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <main+0x4f4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a60      	ldr	r2, [pc, #384]	; (80015b8 <main+0x4f8>)
 8001436:	6013      	str	r3, [r2, #0]
			  PID() ;
 8001438:	f002 f9a6 	bl	8003788 <PID>
			  TimestampPID = micros() ;
 800143c:	f002 fbe0 	bl	8003c00 <micros>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4956      	ldr	r1, [pc, #344]	; (80015a0 <main+0x4e0>)
 8001446:	e9c1 2300 	strd	r2, r3, [r1]
		  //************************************************
	  }
//***********************************************

//**************UART******************************
	  int16_t inputChar = UARTReadChar(&UART2);
 800144a:	485c      	ldr	r0, [pc, #368]	; (80015bc <main+0x4fc>)
 800144c:	f000 ff14 	bl	8002278 <UARTReadChar>
 8001450:	4603      	mov	r3, r0
 8001452:	83fb      	strh	r3, [r7, #30]
	  if (inputChar != -1)
 8001454:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d005      	beq.n	800146a <main+0x3aa>
	  {
		  Protocal(inputChar, &UART2);
 800145e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001462:	4956      	ldr	r1, [pc, #344]	; (80015bc <main+0x4fc>)
 8001464:	4618      	mov	r0, r3
 8001466:	f000 ffcb 	bl	8002400 <Protocal>
	  }
	  if (FinishedTask)
 800146a:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <main+0x500>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d004      	beq.n	800147c <main+0x3bc>
	  {
		  WriteACK2();
 8001472:	f001 fc65 	bl	8002d40 <WriteACK2>
		  FinishedTask = 0;
 8001476:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <main+0x500>)
 8001478:	2300      	movs	r3, #0
 800147a:	7013      	strb	r3, [r2, #0]
	  }
	  if (Mode == 12)
 800147c:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <main+0x504>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b0c      	cmp	r3, #12
 8001482:	d102      	bne.n	800148a <main+0x3ca>
	  {
		  enable_eff = 1;
 8001484:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <main+0x508>)
 8001486:	2301      	movs	r3, #1
 8001488:	7013      	strb	r3, [r2, #0]
	  }
	  if (Mode == 13)
 800148a:	4b4e      	ldr	r3, [pc, #312]	; (80015c4 <main+0x504>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b0d      	cmp	r3, #13
 8001490:	d102      	bne.n	8001498 <main+0x3d8>
	  {
		  enable_eff = 0;
 8001492:	4a4d      	ldr	r2, [pc, #308]	; (80015c8 <main+0x508>)
 8001494:	2300      	movs	r3, #0
 8001496:	7013      	strb	r3, [r2, #0]
	  }


//****************************************************
//*******init Traj***********************************
	  if (StartMoving == 0 && StartSetHome == 0)
 8001498:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <main+0x50c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d115      	bne.n	80014cc <main+0x40c>
 80014a0:	4b3e      	ldr	r3, [pc, #248]	; (800159c <main+0x4dc>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d111      	bne.n	80014cc <main+0x40c>
	  {
		  T = 0;
 80014a8:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <main+0x510>)
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
		  TV = 0;
 80014b0:	4b48      	ldr	r3, [pc, #288]	; (80015d4 <main+0x514>)
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
		  TA = 0;
 80014b8:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <main+0x518>)
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
		  ST = 0;
 80014c0:	4a46      	ldr	r2, [pc, #280]	; (80015dc <main+0x51c>)
 80014c2:	2300      	movs	r3, #0
 80014c4:	7013      	strb	r3, [r2, #0]
		  Direction = 2;
 80014c6:	4a46      	ldr	r2, [pc, #280]	; (80015e0 <main+0x520>)
 80014c8:	2302      	movs	r3, #2
 80014ca:	7013      	strb	r3, [r2, #0]

	  }
//**************************************************
//*******Start Generate Trajectory*******************
	  if (StartMoving == 1)
 80014cc:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <main+0x50c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	f040 8376 	bne.w	8001bc2 <main+0xb02>
	  {
		  static State Statee = InitPID;
		  switch(Statee)
 80014d6:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <main+0x524>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	3b08      	subs	r3, #8
 80014dc:	2b03      	cmp	r3, #3
 80014de:	f200 8375 	bhi.w	8001bcc <main+0xb0c>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <main+0x428>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	080015f5 	.word	0x080015f5
 80014f0:	08001aad 	.word	0x08001aad
 80014f4:	0800176d 	.word	0x0800176d
		  {
		  case InitPID:
			  if (FinalPos - Degree >= 10 || FinalPos - Degree <= -10)
 80014f8:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <main+0x528>)
 80014fa:	ed93 7a00 	vldr	s14, [r3]
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <main+0x52c>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001508:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800150c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	da0e      	bge.n	8001534 <main+0x474>
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <main+0x528>)
 8001518:	ed93 7a00 	vldr	s14, [r3]
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <main+0x52c>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001526:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	d814      	bhi.n	800155e <main+0x49e>
			  {
				  StartStationTime = micros();
 8001534:	f002 fb64 	bl	8003c00 <micros>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	492c      	ldr	r1, [pc, #176]	; (80015f0 <main+0x530>)
 800153e:	e9c1 2300 	strd	r2, r3, [r1]
				  VrequirementCheck = 0;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <main+0x4d0>)
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
				  AccMax = 0;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <main+0x4d8>)
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
				  PIDinit();
 8001552:	f002 f8e9 	bl	8003728 <PIDinit>
				  Statee = Traj;
 8001556:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <main+0x524>)
 8001558:	2309      	movs	r3, #9
 800155a:	7013      	strb	r3, [r2, #0]
				  AccMax = 0;
				  PIDinit();
				  Statee = YangMaiTrong;
			  }

			  break;
 800155c:	e336      	b.n	8001bcc <main+0xb0c>
				  StartStationTime = micros();
 800155e:	f002 fb4f 	bl	8003c00 <micros>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4922      	ldr	r1, [pc, #136]	; (80015f0 <main+0x530>)
 8001568:	e9c1 2300 	strd	r2, r3, [r1]
				  VrequirementCheck = 0;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <main+0x4d0>)
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
				  AccMax = 0;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <main+0x4d8>)
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
				  PIDinit();
 800157c:	f002 f8d4 	bl	8003728 <PIDinit>
				  Statee = YangMaiTrong;
 8001580:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <main+0x524>)
 8001582:	230b      	movs	r3, #11
 8001584:	7013      	strb	r3, [r2, #0]
			  break;
 8001586:	e321      	b.n	8001bcc <main+0xb0c>
 8001588:	20000500 	.word	0x20000500
 800158c:	20000388 	.word	0x20000388
 8001590:	200004e4 	.word	0x200004e4
 8001594:	20000504 	.word	0x20000504
 8001598:	200004e8 	.word	0x200004e8
 800159c:	20000399 	.word	0x20000399
 80015a0:	20000318 	.word	0x20000318
 80015a4:	20000004 	.word	0x20000004
 80015a8:	20000330 	.word	0x20000330
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000334 	.word	0x20000334
 80015b4:	2000000c 	.word	0x2000000c
 80015b8:	20000338 	.word	0x20000338
 80015bc:	200002dc 	.word	0x200002dc
 80015c0:	200003c1 	.word	0x200003c1
 80015c4:	200002f6 	.word	0x200002f6
 80015c8:	2000030e 	.word	0x2000030e
 80015cc:	20000340 	.word	0x20000340
 80015d0:	20000364 	.word	0x20000364
 80015d4:	20000360 	.word	0x20000360
 80015d8:	2000035c 	.word	0x2000035c
 80015dc:	20000341 	.word	0x20000341
 80015e0:	2000050c 	.word	0x2000050c
 80015e4:	20000019 	.word	0x20000019
 80015e8:	20000010 	.word	0x20000010
 80015ec:	20000508 	.word	0x20000508
 80015f0:	200004d0 	.word	0x200004d0
		  case Traj:
			  //**************PID******************************
			  if (micros() - TimestampPID > 1000)
 80015f4:	f002 fb04 	bl	8003c00 <micros>
 80015f8:	4b51      	ldr	r3, [pc, #324]	; (8001740 <main+0x680>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	ebb0 0a02 	subs.w	sl, r0, r2
 8001602:	eb61 0b03 	sbc.w	fp, r1, r3
 8001606:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800160a:	459a      	cmp	sl, r3
 800160c:	f17b 0300 	sbcs.w	r3, fp, #0
 8001610:	d314      	bcc.n	800163c <main+0x57c>
			  {
				  P = p;
 8001612:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <main+0x684>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <main+0x688>)
 8001618:	6013      	str	r3, [r2, #0]
				  I = i;
 800161a:	4b4c      	ldr	r3, [pc, #304]	; (800174c <main+0x68c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a4c      	ldr	r2, [pc, #304]	; (8001750 <main+0x690>)
 8001620:	6013      	str	r3, [r2, #0]
				  D = d;
 8001622:	4b4c      	ldr	r3, [pc, #304]	; (8001754 <main+0x694>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a4c      	ldr	r2, [pc, #304]	; (8001758 <main+0x698>)
 8001628:	6013      	str	r3, [r2, #0]
				  PID() ;
 800162a:	f002 f8ad 	bl	8003788 <PID>
				  TimestampPID = micros() ;
 800162e:	f002 fae7 	bl	8003c00 <micros>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4942      	ldr	r1, [pc, #264]	; (8001740 <main+0x680>)
 8001638:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			  //************************************************
			  Trajec();
 800163c:	f001 fc6c 	bl	8002f18 <Trajec>
			  if (FinishedTraj)
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <main+0x69c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 82be 	beq.w	8001bc6 <main+0xb06>
			  {
				  if (FinalPos - Degree > 0.4 || FinalPos - Degree < -0.4)
 800164a:	4b45      	ldr	r3, [pc, #276]	; (8001760 <main+0x6a0>)
 800164c:	ed93 7a00 	vldr	s14, [r3]
 8001650:	4b44      	ldr	r3, [pc, #272]	; (8001764 <main+0x6a4>)
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165a:	ee17 0a90 	vmov	r0, s15
 800165e:	f7fe ff1f 	bl	80004a0 <__aeabi_f2d>
 8001662:	a32f      	add	r3, pc, #188	; (adr r3, 8001720 <main+0x660>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7ff fa02 	bl	8000a70 <__aeabi_dcmpgt>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d113      	bne.n	800169a <main+0x5da>
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <main+0x6a0>)
 8001674:	ed93 7a00 	vldr	s14, [r3]
 8001678:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <main+0x6a4>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001682:	ee17 0a90 	vmov	r0, s15
 8001686:	f7fe ff0b 	bl	80004a0 <__aeabi_f2d>
 800168a:	a327      	add	r3, pc, #156	; (adr r3, 8001728 <main+0x668>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7ff f9d0 	bl	8000a34 <__aeabi_dcmplt>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d037      	beq.n	800170a <main+0x64a>
				  {
					  if (FinalPos - Degree >= 359.6 || FinalPos - Degree <= -359.6)
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <main+0x6a0>)
 800169c:	ed93 7a00 	vldr	s14, [r3]
 80016a0:	4b30      	ldr	r3, [pc, #192]	; (8001764 <main+0x6a4>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016aa:	ee17 0a90 	vmov	r0, s15
 80016ae:	f7fe fef7 	bl	80004a0 <__aeabi_f2d>
 80016b2:	a31f      	add	r3, pc, #124	; (adr r3, 8001730 <main+0x670>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7ff f9d0 	bl	8000a5c <__aeabi_dcmpge>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d113      	bne.n	80016ea <main+0x62a>
 80016c2:	4b27      	ldr	r3, [pc, #156]	; (8001760 <main+0x6a0>)
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	4b26      	ldr	r3, [pc, #152]	; (8001764 <main+0x6a4>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d2:	ee17 0a90 	vmov	r0, s15
 80016d6:	f7fe fee3 	bl	80004a0 <__aeabi_f2d>
 80016da:	a317      	add	r3, pc, #92	; (adr r3, 8001738 <main+0x678>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7ff f9b2 	bl	8000a48 <__aeabi_dcmple>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <main+0x638>
					  {
						  Statee = Trong;
 80016ea:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <main+0x6a8>)
 80016ec:	230a      	movs	r3, #10
 80016ee:	7013      	strb	r3, [r2, #0]
						  FinishedTraj = 0;
 80016f0:	4a1a      	ldr	r2, [pc, #104]	; (800175c <main+0x69c>)
 80016f2:	2300      	movs	r3, #0
 80016f4:	7013      	strb	r3, [r2, #0]
					  if (FinalPos - Degree >= 359.6 || FinalPos - Degree <= -359.6)
 80016f6:	e00f      	b.n	8001718 <main+0x658>
					  }
					  else
					  {
						  Statee = YangMaiTrong;
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <main+0x6a8>)
 80016fa:	230b      	movs	r3, #11
 80016fc:	7013      	strb	r3, [r2, #0]
						  FinishedTraj = 0;
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <main+0x69c>)
 8001700:	2300      	movs	r3, #0
 8001702:	7013      	strb	r3, [r2, #0]
						  PIDinit();
 8001704:	f002 f810 	bl	8003728 <PIDinit>
					  if (FinalPos - Degree >= 359.6 || FinalPos - Degree <= -359.6)
 8001708:	e006      	b.n	8001718 <main+0x658>
					  }

				  }
				  else
				  {
					  Statee = Trong;
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <main+0x6a8>)
 800170c:	230a      	movs	r3, #10
 800170e:	7013      	strb	r3, [r2, #0]
					  FinishedTraj = 0;
 8001710:	4a12      	ldr	r2, [pc, #72]	; (800175c <main+0x69c>)
 8001712:	2300      	movs	r3, #0
 8001714:	7013      	strb	r3, [r2, #0]
				  }
			  }
			  break;
 8001716:	e256      	b.n	8001bc6 <main+0xb06>
 8001718:	e255      	b.n	8001bc6 <main+0xb06>
 800171a:	bf00      	nop
 800171c:	f3af 8000 	nop.w
 8001720:	9999999a 	.word	0x9999999a
 8001724:	3fd99999 	.word	0x3fd99999
 8001728:	9999999a 	.word	0x9999999a
 800172c:	bfd99999 	.word	0xbfd99999
 8001730:	9999999a 	.word	0x9999999a
 8001734:	40767999 	.word	0x40767999
 8001738:	9999999a 	.word	0x9999999a
 800173c:	c0767999 	.word	0xc0767999
 8001740:	20000318 	.word	0x20000318
 8001744:	20000004 	.word	0x20000004
 8001748:	20000330 	.word	0x20000330
 800174c:	20000008 	.word	0x20000008
 8001750:	20000334 	.word	0x20000334
 8001754:	2000000c 	.word	0x2000000c
 8001758:	20000338 	.word	0x20000338
 800175c:	2000038c 	.word	0x2000038c
 8001760:	20000010 	.word	0x20000010
 8001764:	20000508 	.word	0x20000508
 8001768:	20000019 	.word	0x20000019
		  case YangMaiTrong:
			  if (FinalPos <= Degree && FinalPos - Degree <= -0.4 && FinalPos - Degree > -359.6)
 800176c:	4bc0      	ldr	r3, [pc, #768]	; (8001a70 <main+0x9b0>)
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	4bc0      	ldr	r3, [pc, #768]	; (8001a74 <main+0x9b4>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	d82e      	bhi.n	80017e0 <main+0x720>
 8001782:	4bbb      	ldr	r3, [pc, #748]	; (8001a70 <main+0x9b0>)
 8001784:	ed93 7a00 	vldr	s14, [r3]
 8001788:	4bba      	ldr	r3, [pc, #744]	; (8001a74 <main+0x9b4>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001792:	ee17 0a90 	vmov	r0, s15
 8001796:	f7fe fe83 	bl	80004a0 <__aeabi_f2d>
 800179a:	a3ad      	add	r3, pc, #692	; (adr r3, 8001a50 <main+0x990>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7ff f952 	bl	8000a48 <__aeabi_dcmple>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01a      	beq.n	80017e0 <main+0x720>
 80017aa:	4bb1      	ldr	r3, [pc, #708]	; (8001a70 <main+0x9b0>)
 80017ac:	ed93 7a00 	vldr	s14, [r3]
 80017b0:	4bb0      	ldr	r3, [pc, #704]	; (8001a74 <main+0x9b4>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ba:	ee17 0a90 	vmov	r0, s15
 80017be:	f7fe fe6f 	bl	80004a0 <__aeabi_f2d>
 80017c2:	a3a5      	add	r3, pc, #660	; (adr r3, 8001a58 <main+0x998>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7ff f952 	bl	8000a70 <__aeabi_dcmpgt>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <main+0x720>
			  {
				  request = -0.5;
 80017d2:	4ba9      	ldr	r3, [pc, #676]	; (8001a78 <main+0x9b8>)
 80017d4:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 80017d8:	601a      	str	r2, [r3, #0]
				  Direction = 1;
 80017da:	4aa8      	ldr	r2, [pc, #672]	; (8001a7c <main+0x9bc>)
 80017dc:	2301      	movs	r3, #1
 80017de:	7013      	strb	r3, [r2, #0]
			  }
			  if (FinalPos >= Degree && FinalPos - Degree >= 0.4 && FinalPos - Degree < 359.6)
 80017e0:	4ba3      	ldr	r3, [pc, #652]	; (8001a70 <main+0x9b0>)
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	4ba3      	ldr	r3, [pc, #652]	; (8001a74 <main+0x9b4>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	db2e      	blt.n	8001854 <main+0x794>
 80017f6:	4b9e      	ldr	r3, [pc, #632]	; (8001a70 <main+0x9b0>)
 80017f8:	ed93 7a00 	vldr	s14, [r3]
 80017fc:	4b9d      	ldr	r3, [pc, #628]	; (8001a74 <main+0x9b4>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001806:	ee17 0a90 	vmov	r0, s15
 800180a:	f7fe fe49 	bl	80004a0 <__aeabi_f2d>
 800180e:	a394      	add	r3, pc, #592	; (adr r3, 8001a60 <main+0x9a0>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7ff f922 	bl	8000a5c <__aeabi_dcmpge>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d01a      	beq.n	8001854 <main+0x794>
 800181e:	4b94      	ldr	r3, [pc, #592]	; (8001a70 <main+0x9b0>)
 8001820:	ed93 7a00 	vldr	s14, [r3]
 8001824:	4b93      	ldr	r3, [pc, #588]	; (8001a74 <main+0x9b4>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182e:	ee17 0a90 	vmov	r0, s15
 8001832:	f7fe fe35 	bl	80004a0 <__aeabi_f2d>
 8001836:	a38c      	add	r3, pc, #560	; (adr r3, 8001a68 <main+0x9a8>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7ff f8fa 	bl	8000a34 <__aeabi_dcmplt>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <main+0x794>
			  {
				  request = 0.5;
 8001846:	4b8c      	ldr	r3, [pc, #560]	; (8001a78 <main+0x9b8>)
 8001848:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800184c:	601a      	str	r2, [r3, #0]
				  Direction = 0;
 800184e:	4a8b      	ldr	r2, [pc, #556]	; (8001a7c <main+0x9bc>)
 8001850:	2300      	movs	r3, #0
 8001852:	7013      	strb	r3, [r2, #0]
			  }
			  if (FinalPos <= Degree && FinalPos - Degree > -359.6 && FinalPos - Degree <= -300)
 8001854:	4b86      	ldr	r3, [pc, #536]	; (8001a70 <main+0x9b0>)
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	4b86      	ldr	r3, [pc, #536]	; (8001a74 <main+0x9b4>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001868:	d829      	bhi.n	80018be <main+0x7fe>
 800186a:	4b81      	ldr	r3, [pc, #516]	; (8001a70 <main+0x9b0>)
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	4b80      	ldr	r3, [pc, #512]	; (8001a74 <main+0x9b4>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187a:	ee17 0a90 	vmov	r0, s15
 800187e:	f7fe fe0f 	bl	80004a0 <__aeabi_f2d>
 8001882:	a375      	add	r3, pc, #468	; (adr r3, 8001a58 <main+0x998>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7ff f8f2 	bl	8000a70 <__aeabi_dcmpgt>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d015      	beq.n	80018be <main+0x7fe>
 8001892:	4b77      	ldr	r3, [pc, #476]	; (8001a70 <main+0x9b0>)
 8001894:	ed93 7a00 	vldr	s14, [r3]
 8001898:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <main+0x9b4>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a2:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001a80 <main+0x9c0>
 80018a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ae:	d806      	bhi.n	80018be <main+0x7fe>
			  {
				  request = 0.5;
 80018b0:	4b71      	ldr	r3, [pc, #452]	; (8001a78 <main+0x9b8>)
 80018b2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80018b6:	601a      	str	r2, [r3, #0]
				  Direction = 0;
 80018b8:	4a70      	ldr	r2, [pc, #448]	; (8001a7c <main+0x9bc>)
 80018ba:	2300      	movs	r3, #0
 80018bc:	7013      	strb	r3, [r2, #0]
			  }
			  if (FinalPos >= Degree && FinalPos - Degree >= 300 && FinalPos - Degree < 359.6)
 80018be:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <main+0x9b0>)
 80018c0:	ed93 7a00 	vldr	s14, [r3]
 80018c4:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <main+0x9b4>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	db29      	blt.n	8001928 <main+0x868>
 80018d4:	4b66      	ldr	r3, [pc, #408]	; (8001a70 <main+0x9b0>)
 80018d6:	ed93 7a00 	vldr	s14, [r3]
 80018da:	4b66      	ldr	r3, [pc, #408]	; (8001a74 <main+0x9b4>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001a84 <main+0x9c4>
 80018e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f0:	db1a      	blt.n	8001928 <main+0x868>
 80018f2:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <main+0x9b0>)
 80018f4:	ed93 7a00 	vldr	s14, [r3]
 80018f8:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <main+0x9b4>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001902:	ee17 0a90 	vmov	r0, s15
 8001906:	f7fe fdcb 	bl	80004a0 <__aeabi_f2d>
 800190a:	a357      	add	r3, pc, #348	; (adr r3, 8001a68 <main+0x9a8>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7ff f890 	bl	8000a34 <__aeabi_dcmplt>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <main+0x868>
			  {
				  request = -0.5;
 800191a:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <main+0x9b8>)
 800191c:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001920:	601a      	str	r2, [r3, #0]
				  Direction = 1;
 8001922:	4a56      	ldr	r2, [pc, #344]	; (8001a7c <main+0x9bc>)
 8001924:	2301      	movs	r3, #1
 8001926:	7013      	strb	r3, [r2, #0]
			  }

			  if (FinalPos - Degree <= 0.4 && FinalPos - Degree >= -0.4)
 8001928:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <main+0x9b0>)
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	4b51      	ldr	r3, [pc, #324]	; (8001a74 <main+0x9b4>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001938:	ee17 0a90 	vmov	r0, s15
 800193c:	f7fe fdb0 	bl	80004a0 <__aeabi_f2d>
 8001940:	a347      	add	r3, pc, #284	; (adr r3, 8001a60 <main+0x9a0>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	f7ff f87f 	bl	8000a48 <__aeabi_dcmple>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d01d      	beq.n	800198c <main+0x8cc>
 8001950:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <main+0x9b0>)
 8001952:	ed93 7a00 	vldr	s14, [r3]
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <main+0x9b4>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001960:	ee17 0a90 	vmov	r0, s15
 8001964:	f7fe fd9c 	bl	80004a0 <__aeabi_f2d>
 8001968:	a339      	add	r3, pc, #228	; (adr r3, 8001a50 <main+0x990>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7ff f875 	bl	8000a5c <__aeabi_dcmpge>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d009      	beq.n	800198c <main+0x8cc>
			  {
				  request = 0;
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <main+0x9b8>)
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
				  Direction = 2;
 8001980:	4a3e      	ldr	r2, [pc, #248]	; (8001a7c <main+0x9bc>)
 8001982:	2302      	movs	r3, #2
 8001984:	7013      	strb	r3, [r2, #0]
				  Statee = Trong;
 8001986:	4a40      	ldr	r2, [pc, #256]	; (8001a88 <main+0x9c8>)
 8001988:	230a      	movs	r3, #10
 800198a:	7013      	strb	r3, [r2, #0]
			  }
			  if (FinalPos - Degree >= 359.6 || FinalPos - Degree <= -359.6)
 800198c:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <main+0x9b0>)
 800198e:	ed93 7a00 	vldr	s14, [r3]
 8001992:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <main+0x9b4>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199c:	ee17 0a90 	vmov	r0, s15
 80019a0:	f7fe fd7e 	bl	80004a0 <__aeabi_f2d>
 80019a4:	a330      	add	r3, pc, #192	; (adr r3, 8001a68 <main+0x9a8>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7ff f857 	bl	8000a5c <__aeabi_dcmpge>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d113      	bne.n	80019dc <main+0x91c>
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <main+0x9b0>)
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <main+0x9b4>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c4:	ee17 0a90 	vmov	r0, s15
 80019c8:	f7fe fd6a 	bl	80004a0 <__aeabi_f2d>
 80019cc:	a322      	add	r3, pc, #136	; (adr r3, 8001a58 <main+0x998>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7ff f839 	bl	8000a48 <__aeabi_dcmple>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00c      	beq.n	80019f6 <main+0x936>
			  {
				  request = 0;
 80019dc:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <main+0x9b8>)
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
				  Direction = 2;
 80019e4:	4a25      	ldr	r2, [pc, #148]	; (8001a7c <main+0x9bc>)
 80019e6:	2302      	movs	r3, #2
 80019e8:	7013      	strb	r3, [r2, #0]
				  Statee = Trong;
 80019ea:	4a27      	ldr	r2, [pc, #156]	; (8001a88 <main+0x9c8>)
 80019ec:	230a      	movs	r3, #10
 80019ee:	7013      	strb	r3, [r2, #0]
				  PWMPercent = 0;
 80019f0:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <main+0x9cc>)
 80019f2:	2300      	movs	r3, #0
 80019f4:	8013      	strh	r3, [r2, #0]
			  }
			  if (micros() - TimestampPID > 1000)
 80019f6:	f002 f903 	bl	8003c00 <micros>
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <main+0x9d0>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	1a86      	subs	r6, r0, r2
 8001a02:	603e      	str	r6, [r7, #0]
 8001a04:	eb61 0303 	sbc.w	r3, r1, r3
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8001a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a12:	4602      	mov	r2, r0
 8001a14:	429a      	cmp	r2, r3
 8001a16:	460b      	mov	r3, r1
 8001a18:	f173 0300 	sbcs.w	r3, r3, #0
 8001a1c:	f0c0 80d5 	bcc.w	8001bca <main+0xb0a>
			  {
				  P = p;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <main+0x9d4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <main+0x9d8>)
 8001a26:	6013      	str	r3, [r2, #0]
				  I = i;
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <main+0x9dc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <main+0x9e0>)
 8001a2e:	6013      	str	r3, [r2, #0]
				  D = d;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <main+0x9e4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <main+0x9e8>)
 8001a36:	6013      	str	r3, [r2, #0]
				  PID() ;
 8001a38:	f001 fea6 	bl	8003788 <PID>
				  TimestampPID = micros() ;
 8001a3c:	f002 f8e0 	bl	8003c00 <micros>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4912      	ldr	r1, [pc, #72]	; (8001a90 <main+0x9d0>)
 8001a46:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			  break;
 8001a4a:	e0be      	b.n	8001bca <main+0xb0a>
 8001a4c:	f3af 8000 	nop.w
 8001a50:	9999999a 	.word	0x9999999a
 8001a54:	bfd99999 	.word	0xbfd99999
 8001a58:	9999999a 	.word	0x9999999a
 8001a5c:	c0767999 	.word	0xc0767999
 8001a60:	9999999a 	.word	0x9999999a
 8001a64:	3fd99999 	.word	0x3fd99999
 8001a68:	9999999a 	.word	0x9999999a
 8001a6c:	40767999 	.word	0x40767999
 8001a70:	20000010 	.word	0x20000010
 8001a74:	20000508 	.word	0x20000508
 8001a78:	200004ec 	.word	0x200004ec
 8001a7c:	2000050c 	.word	0x2000050c
 8001a80:	c3960000 	.word	0xc3960000
 8001a84:	43960000 	.word	0x43960000
 8001a88:	20000019 	.word	0x20000019
 8001a8c:	200004f0 	.word	0x200004f0
 8001a90:	20000318 	.word	0x20000318
 8001a94:	20000004 	.word	0x20000004
 8001a98:	20000330 	.word	0x20000330
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000334 	.word	0x20000334
 8001aa4:	2000000c 	.word	0x2000000c
 8001aa8:	20000338 	.word	0x20000338
		  case Trong:
			  if (FinalPos - Degree <= 0.4 && FinalPos - Degree >= -0.4)
 8001aac:	4b52      	ldr	r3, [pc, #328]	; (8001bf8 <main+0xb38>)
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	4b52      	ldr	r3, [pc, #328]	; (8001bfc <main+0xb3c>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abc:	ee17 0a90 	vmov	r0, s15
 8001ac0:	f7fe fcee 	bl	80004a0 <__aeabi_f2d>
 8001ac4:	a344      	add	r3, pc, #272	; (adr r3, 8001bd8 <main+0xb18>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe ffbd 	bl	8000a48 <__aeabi_dcmple>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d02d      	beq.n	8001b30 <main+0xa70>
 8001ad4:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <main+0xb38>)
 8001ad6:	ed93 7a00 	vldr	s14, [r3]
 8001ada:	4b48      	ldr	r3, [pc, #288]	; (8001bfc <main+0xb3c>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae4:	ee17 0a90 	vmov	r0, s15
 8001ae8:	f7fe fcda 	bl	80004a0 <__aeabi_f2d>
 8001aec:	a33c      	add	r3, pc, #240	; (adr r3, 8001be0 <main+0xb20>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe ffb3 	bl	8000a5c <__aeabi_dcmpge>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d019      	beq.n	8001b30 <main+0xa70>
			  {
				  request = 0;
 8001afc:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <main+0xb40>)
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
				  PWMPercent = 0;
 8001b04:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <main+0xb44>)
 8001b06:	2300      	movs	r3, #0
 8001b08:	8013      	strh	r3, [r2, #0]
				  FinishedStation = 1;
 8001b0a:	4a3f      	ldr	r2, [pc, #252]	; (8001c08 <main+0xb48>)
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	7013      	strb	r3, [r2, #0]
				  StartMoving = 0;
 8001b10:	4a3e      	ldr	r2, [pc, #248]	; (8001c0c <main+0xb4c>)
 8001b12:	2300      	movs	r3, #0
 8001b14:	7013      	strb	r3, [r2, #0]
				  Statee = InitPID;
 8001b16:	4a3e      	ldr	r2, [pc, #248]	; (8001c10 <main+0xb50>)
 8001b18:	2308      	movs	r3, #8
 8001b1a:	7013      	strb	r3, [r2, #0]
				  effTimestamp = micros();
 8001b1c:	f002 f870 	bl	8003c00 <micros>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	493b      	ldr	r1, [pc, #236]	; (8001c14 <main+0xb54>)
 8001b26:	e9c1 2300 	strd	r2, r3, [r1]
				  EndEffWrite();
 8001b2a:	f000 fb27 	bl	800217c <EndEffWrite>
 8001b2e:	e047      	b.n	8001bc0 <main+0xb00>
			  }
			  else if (FinalPos - Degree >= 359.6 || FinalPos - Degree <= -359.6)
 8001b30:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <main+0xb38>)
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <main+0xb3c>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b40:	ee17 0a90 	vmov	r0, s15
 8001b44:	f7fe fcac 	bl	80004a0 <__aeabi_f2d>
 8001b48:	a327      	add	r3, pc, #156	; (adr r3, 8001be8 <main+0xb28>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f7fe ff85 	bl	8000a5c <__aeabi_dcmpge>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d113      	bne.n	8001b80 <main+0xac0>
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <main+0xb38>)
 8001b5a:	ed93 7a00 	vldr	s14, [r3]
 8001b5e:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <main+0xb3c>)
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b68:	ee17 0a90 	vmov	r0, s15
 8001b6c:	f7fe fc98 	bl	80004a0 <__aeabi_f2d>
 8001b70:	a31f      	add	r3, pc, #124	; (adr r3, 8001bf0 <main+0xb30>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	f7fe ff67 	bl	8000a48 <__aeabi_dcmple>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d019      	beq.n	8001bb4 <main+0xaf4>
			  {
				  request = 0;
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <main+0xb40>)
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
				  PWMPercent = 0;
 8001b88:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <main+0xb44>)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	8013      	strh	r3, [r2, #0]
				  FinishedStation = 1;
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <main+0xb48>)
 8001b90:	2301      	movs	r3, #1
 8001b92:	7013      	strb	r3, [r2, #0]
				  StartMoving = 0;
 8001b94:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <main+0xb4c>)
 8001b96:	2300      	movs	r3, #0
 8001b98:	7013      	strb	r3, [r2, #0]
				  Statee = InitPID;
 8001b9a:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <main+0xb50>)
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	7013      	strb	r3, [r2, #0]
				  effTimestamp = micros();
 8001ba0:	f002 f82e 	bl	8003c00 <micros>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	491a      	ldr	r1, [pc, #104]	; (8001c14 <main+0xb54>)
 8001baa:	e9c1 2300 	strd	r2, r3, [r1]
				  EndEffWrite();
 8001bae:	f000 fae5 	bl	800217c <EndEffWrite>
 8001bb2:	e005      	b.n	8001bc0 <main+0xb00>
			  }
			  else
			  {
				  PIDinit();
 8001bb4:	f001 fdb8 	bl	8003728 <PIDinit>
				  Statee = YangMaiTrong;
 8001bb8:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <main+0xb50>)
 8001bba:	230b      	movs	r3, #11
 8001bbc:	7013      	strb	r3, [r2, #0]
			  }

			  break;
 8001bbe:	e005      	b.n	8001bcc <main+0xb0c>
 8001bc0:	e004      	b.n	8001bcc <main+0xb0c>
		  }

	  }
 8001bc2:	bf00      	nop
 8001bc4:	e002      	b.n	8001bcc <main+0xb0c>
			  break;
 8001bc6:	bf00      	nop
 8001bc8:	e000      	b.n	8001bcc <main+0xb0c>
			  break;
 8001bca:	bf00      	nop

//***************************************************
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UARTTxDumpBuffer(&UART2);
 8001bcc:	4812      	ldr	r0, [pc, #72]	; (8001c18 <main+0xb58>)
 8001bce:	f000 fb7d 	bl	80022cc <UARTTxDumpBuffer>
  {
 8001bd2:	f7ff bab2 	b.w	800113a <main+0x7a>
 8001bd6:	bf00      	nop
 8001bd8:	9999999a 	.word	0x9999999a
 8001bdc:	3fd99999 	.word	0x3fd99999
 8001be0:	9999999a 	.word	0x9999999a
 8001be4:	bfd99999 	.word	0xbfd99999
 8001be8:	9999999a 	.word	0x9999999a
 8001bec:	40767999 	.word	0x40767999
 8001bf0:	9999999a 	.word	0x9999999a
 8001bf4:	c0767999 	.word	0xc0767999
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	20000508 	.word	0x20000508
 8001c00:	200004ec 	.word	0x200004ec
 8001c04:	200004f0 	.word	0x200004f0
 8001c08:	200003c0 	.word	0x200003c0
 8001c0c:	20000340 	.word	0x20000340
 8001c10:	20000019 	.word	0x20000019
 8001c14:	200003c8 	.word	0x200003c8
 8001c18:	200002dc 	.word	0x200002dc

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	; 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	2230      	movs	r2, #48	; 0x30
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f006 fd70 	bl	8008710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <SystemClock_Config+0xc8>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <SystemClock_Config+0xc8>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <SystemClock_Config+0xc8>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <SystemClock_Config+0xcc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <SystemClock_Config+0xcc>)
 8001c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <SystemClock_Config+0xcc>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c80:	2310      	movs	r3, #16
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c84:	2302      	movs	r3, #2
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c90:	2364      	movs	r3, #100	; 0x64
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 fe11 	bl	80058c8 <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cac:	f001 ffc2 	bl	8003c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	2103      	movs	r1, #3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f004 f873 	bl	8005db8 <HAL_RCC_ClockConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cd8:	f001 ffac 	bl	8003c34 <Error_Handler>
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3750      	adds	r7, #80	; 0x50
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40007000 	.word	0x40007000

08001cec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <MX_I2C1_Init+0x54>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cf8:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <MX_I2C1_Init+0x58>)
 8001cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d2a:	f003 f981 	bl	8005030 <HAL_I2C_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d34:	f001 ff7e 	bl	8003c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200000ac 	.word	0x200000ac
 8001d40:	40005400 	.word	0x40005400
 8001d44:	000186a0 	.word	0x000186a0

08001d48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b096      	sub	sp, #88	; 0x58
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	611a      	str	r2, [r3, #16]
 8001d76:	615a      	str	r2, [r3, #20]
 8001d78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f006 fcc5 	bl	8008710 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001d88:	4a44      	ldr	r2, [pc, #272]	; (8001e9c <MX_TIM1_Init+0x154>)
 8001d8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d92:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8001d98:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001d9a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da0:	4b3d      	ldr	r3, [pc, #244]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001da6:	4b3c      	ldr	r3, [pc, #240]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dac:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001db2:	4839      	ldr	r0, [pc, #228]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001db4:	f004 fa20 	bl	80061f8 <HAL_TIM_Base_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001dbe:	f001 ff39 	bl	8003c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4832      	ldr	r0, [pc, #200]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001dd0:	f004 fe1e 	bl	8006a10 <HAL_TIM_ConfigClockSource>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dda:	f001 ff2b 	bl	8003c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dde:	482e      	ldr	r0, [pc, #184]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001de0:	f004 fb16 	bl	8006410 <HAL_TIM_PWM_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001dea:	f001 ff23 	bl	8003c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4826      	ldr	r0, [pc, #152]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001dfe:	f005 f99b 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e08:	f001 ff14 	bl	8003c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0c:	2360      	movs	r3, #96	; 0x60
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4819      	ldr	r0, [pc, #100]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001e32:	f004 fd2b 	bl	800688c <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001e3c:	f001 fefa 	bl	8003c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e44:	2204      	movs	r2, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4813      	ldr	r0, [pc, #76]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001e4a:	f004 fd1f 	bl	800688c <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001e54:	f001 feee 	bl	8003c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4807      	ldr	r0, [pc, #28]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001e7c:	f005 f9ca 	bl	8007214 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001e86:	f001 fed5 	bl	8003c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e8a:	4803      	ldr	r0, [pc, #12]	; (8001e98 <MX_TIM1_Init+0x150>)
 8001e8c:	f001 ffc6 	bl	8003e1c <HAL_TIM_MspPostInit>

}
 8001e90:	bf00      	nop
 8001e92:	3758      	adds	r7, #88	; 0x58
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000100 	.word	0x20000100
 8001e9c:	40010000 	.word	0x40010000

08001ea0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <MX_TIM2_Init+0x94>)
 8001ebe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ec2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <MX_TIM2_Init+0x94>)
 8001ec6:	2263      	movs	r2, #99	; 0x63
 8001ec8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eca:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <MX_TIM2_Init+0x94>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <MX_TIM2_Init+0x94>)
 8001ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_TIM2_Init+0x94>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <MX_TIM2_Init+0x94>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ee4:	4813      	ldr	r0, [pc, #76]	; (8001f34 <MX_TIM2_Init+0x94>)
 8001ee6:	f004 f987 	bl	80061f8 <HAL_TIM_Base_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ef0:	f001 fea0 	bl	8003c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	4619      	mov	r1, r3
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <MX_TIM2_Init+0x94>)
 8001f02:	f004 fd85 	bl	8006a10 <HAL_TIM_ConfigClockSource>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f0c:	f001 fe92 	bl	8003c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f18:	463b      	mov	r3, r7
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <MX_TIM2_Init+0x94>)
 8001f1e:	f005 f90b 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f28:	f001 fe84 	bl	8003c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000148 	.word	0x20000148

08001f38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	; 0x30
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	2224      	movs	r2, #36	; 0x24
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f006 fbe2 	bl	8008710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f54:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <MX_TIM3_Init+0xa0>)
 8001f56:	4a21      	ldr	r2, [pc, #132]	; (8001fdc <MX_TIM3_Init+0xa4>)
 8001f58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <MX_TIM3_Init+0xa0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <MX_TIM3_Init+0xa0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <MX_TIM3_Init+0xa0>)
 8001f68:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <MX_TIM3_Init+0xa0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <MX_TIM3_Init+0xa0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f82:	2301      	movs	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f92:	2301      	movs	r3, #1
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <MX_TIM3_Init+0xa0>)
 8001fa6:	f004 fb3d 	bl	8006624 <HAL_TIM_Encoder_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001fb0:	f001 fe40 	bl	8003c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_TIM3_Init+0xa0>)
 8001fc2:	f005 f8b9 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001fcc:	f001 fe32 	bl	8003c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	3730      	adds	r7, #48	; 0x30
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000190 	.word	0x20000190
 8001fdc:	40000400 	.word	0x40000400

08001fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_USART2_UART_Init+0x50>)
 8001fe6:	4a13      	ldr	r2, [pc, #76]	; (8002034 <MX_USART2_UART_Init+0x54>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <MX_USART2_UART_Init+0x50>)
 8001fec:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_USART2_UART_Init+0x50>)
 8001ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <MX_USART2_UART_Init+0x50>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <MX_USART2_UART_Init+0x50>)
 8002002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002006:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_USART2_UART_Init+0x50>)
 800200a:	220c      	movs	r2, #12
 800200c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <MX_USART2_UART_Init+0x50>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <MX_USART2_UART_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <MX_USART2_UART_Init+0x50>)
 800201c:	f005 f94c 	bl	80072b8 <HAL_UART_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002026:	f001 fe05 	bl	8003c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200001d8 	.word	0x200001d8
 8002034:	40004400 	.word	0x40004400

08002038 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <MX_DMA_Init+0x4c>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <MX_DMA_Init+0x4c>)
 8002048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <MX_DMA_Init+0x4c>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	2010      	movs	r0, #16
 8002060:	f002 f9f7 	bl	8004452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002064:	2010      	movs	r0, #16
 8002066:	f002 fa10 	bl	800448a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	2011      	movs	r0, #17
 8002070:	f002 f9ef 	bl	8004452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002074:	2011      	movs	r0, #17
 8002076:	f002 fa08 	bl	800448a <HAL_NVIC_EnableIRQ>

}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800

08002088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <MX_GPIO_Init+0xe8>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a32      	ldr	r2, [pc, #200]	; (8002170 <MX_GPIO_Init+0xe8>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b30      	ldr	r3, [pc, #192]	; (8002170 <MX_GPIO_Init+0xe8>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <MX_GPIO_Init+0xe8>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <MX_GPIO_Init+0xe8>)
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b29      	ldr	r3, [pc, #164]	; (8002170 <MX_GPIO_Init+0xe8>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <MX_GPIO_Init+0xe8>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a24      	ldr	r2, [pc, #144]	; (8002170 <MX_GPIO_Init+0xe8>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <MX_GPIO_Init+0xe8>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <MX_GPIO_Init+0xe8>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <MX_GPIO_Init+0xe8>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <MX_GPIO_Init+0xe8>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	2120      	movs	r1, #32
 8002112:	4818      	ldr	r0, [pc, #96]	; (8002174 <MX_GPIO_Init+0xec>)
 8002114:	f002 ff72 	bl	8004ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800211e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	4812      	ldr	r0, [pc, #72]	; (8002178 <MX_GPIO_Init+0xf0>)
 8002130:	f002 fdc8 	bl	8004cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Home_Pin */
  GPIO_InitStruct.Pin = Home_Pin;
 8002134:	2301      	movs	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002138:	2300      	movs	r3, #0
 800213a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Home_GPIO_Port, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	480c      	ldr	r0, [pc, #48]	; (8002178 <MX_GPIO_Init+0xf0>)
 8002148:	f002 fdbc 	bl	8004cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800214c:	2320      	movs	r3, #32
 800214e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002150:	2301      	movs	r3, #1
 8002152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <MX_GPIO_Init+0xec>)
 8002164:	f002 fdae 	bl	8004cc4 <HAL_GPIO_Init>

}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020800 	.word	0x40020800

0800217c <EndEffWrite>:

/* USER CODE BEGIN 4 */
void EndEffWrite()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY && enable_eff)
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <EndEffWrite+0x58>)
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b20      	cmp	r3, #32
 800218c:	d11d      	bne.n	80021ca <EndEffWrite+0x4e>
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <EndEffWrite+0x5c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d019      	beq.n	80021ca <EndEffWrite+0x4e>
//	if (hi2c1.State == HAL_I2C_STATE_READY)
	{
		test ++;
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <EndEffWrite+0x60>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <EndEffWrite+0x60>)
 80021a0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 80021a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021a6:	f002 f855 	bl	8004254 <HAL_Delay>
		uint8_t temp = 0x45;
 80021aa:	2345      	movs	r3, #69	; 0x45
 80021ac:	71bb      	strb	r3, [r7, #6]
		uint8_t add = 0x23;
 80021ae:	2323      	movs	r3, #35	; 0x23
 80021b0:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Master_Transmit(&hi2c1, add << 1, &temp, 1, 1000); //Write eff
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	b299      	uxth	r1, r3
 80021ba:	1dba      	adds	r2, r7, #6
 80021bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2301      	movs	r3, #1
 80021c4:	4803      	ldr	r0, [pc, #12]	; (80021d4 <EndEffWrite+0x58>)
 80021c6:	f003 f877 	bl	80052b8 <HAL_I2C_Master_Transmit>
	}

}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200000ac 	.word	0x200000ac
 80021d8:	2000030e 	.word	0x2000030e
 80021dc:	20000512 	.word	0x20000512

080021e0 <UARTInit>:

void UARTInit(UARTStucrture *uart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <UARTInit+0x4c>)
 80021ea:	88db      	ldrh	r3, [r3, #6]
 80021ec:	4619      	mov	r1, r3
 80021ee:	2001      	movs	r0, #1
 80021f0:	f006 fa4e 	bl	8008690 <calloc>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <UARTInit+0x4c>)
 80021fe:	889b      	ldrh	r3, [r3, #4]
 8002200:	4619      	mov	r1, r3
 8002202:	2001      	movs	r0, #1
 8002204:	f006 fa44 	bl	8008690 <calloc>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	81da      	strh	r2, [r3, #14]

}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200002dc 	.word	0x200002dc

08002230 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6919      	ldr	r1, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	88db      	ldrh	r3, [r3, #6]
 8002244:	461a      	mov	r2, r3
 8002246:	f005 f903 	bl	8007450 <HAL_UART_Receive_DMA>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	88db      	ldrh	r3, [r3, #6]
 800225e:	461a      	mov	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	1ad3      	subs	r3, r2, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	uint16_t Result = -1; // -1 Mean no new data
 8002280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002284:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8a9b      	ldrh	r3, [r3, #20]
 800228a:	461c      	mov	r4, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffe0 	bl	8002252 <UARTGetRxHead>
 8002292:	4603      	mov	r3, r0
 8002294:	429c      	cmp	r4, r3
 8002296:	d013      	beq.n	80022c0 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	8a92      	ldrh	r2, [r2, #20]
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	8a9b      	ldrh	r3, [r3, #20]
 80022aa:	3301      	adds	r3, #1
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	88d2      	ldrh	r2, [r2, #6]
 80022b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80022b4:	fb01 f202 	mul.w	r2, r1, r2
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80022c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd90      	pop	{r4, r7, pc}

080022cc <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d13d      	bne.n	800235e <UARTTxDumpBuffer+0x92>
 80022e2:	4b21      	ldr	r3, [pc, #132]	; (8002368 <UARTTxDumpBuffer+0x9c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d139      	bne.n	800235e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80022ea:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <UARTTxDumpBuffer+0x9c>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	89da      	ldrh	r2, [r3, #14]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	899b      	ldrh	r3, [r3, #12]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d02d      	beq.n	8002358 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	89da      	ldrh	r2, [r3, #14]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002304:	429a      	cmp	r2, r3
 8002306:	d906      	bls.n	8002316 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	89da      	ldrh	r2, [r3, #14]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	b29b      	uxth	r3, r3
 8002314:	e005      	b.n	8002322 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	889a      	ldrh	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	b29b      	uxth	r3, r3
 8002322:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	8992      	ldrh	r2, [r2, #12]
 8002330:	4413      	add	r3, r2
 8002332:	89fa      	ldrh	r2, [r7, #14]
 8002334:	4619      	mov	r1, r3
 8002336:	f005 f80d 	bl	8007354 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	899b      	ldrh	r3, [r3, #12]
 800233e:	461a      	mov	r2, r3
 8002340:	89fb      	ldrh	r3, [r7, #14]
 8002342:	4413      	add	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	8892      	ldrh	r2, [r2, #4]
 8002348:	fb93 f1f2 	sdiv	r1, r3, r2
 800234c:	fb01 f202 	mul.w	r2, r1, r2
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	b29a      	uxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <UARTTxDumpBuffer+0x9c>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
	}

}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000051a 	.word	0x2000051a

0800236c <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	80fb      	strh	r3, [r7, #6]

	//check data len is more than buffer?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	889b      	ldrh	r3, [r3, #4]
 800237e:	88fa      	ldrh	r2, [r7, #6]
 8002380:	4293      	cmp	r3, r2
 8002382:	bf28      	it	cs
 8002384:	4613      	movcs	r3, r2
 8002386:	82fb      	strh	r3, [r7, #22]

	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002388:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	889b      	ldrh	r3, [r3, #4]
 800238e:	4619      	mov	r1, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	89db      	ldrh	r3, [r3, #14]
 8002394:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002396:	4293      	cmp	r3, r2
 8002398:	bfa8      	it	ge
 800239a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800239c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	89d2      	ldrh	r2, [r2, #14]
 80023a6:	4413      	add	r3, r2
 80023a8:	8aba      	ldrh	r2, [r7, #20]
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f006 f9a1 	bl	80086f4 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	89db      	ldrh	r3, [r3, #14]
 80023b6:	461a      	mov	r2, r3
 80023b8:	8afb      	ldrh	r3, [r7, #22]
 80023ba:	4413      	add	r3, r2
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	8892      	ldrh	r2, [r2, #4]
 80023c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80023c4:	fb01 f202 	mul.w	r2, r1, r2
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80023d0:	8afa      	ldrh	r2, [r7, #22]
 80023d2:	8abb      	ldrh	r3, [r7, #20]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d00a      	beq.n	80023ee <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6898      	ldr	r0, [r3, #8]
 80023dc:	8abb      	ldrh	r3, [r7, #20]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80023e2:	8afa      	ldrh	r2, [r7, #22]
 80023e4:	8abb      	ldrh	r3, [r7, #20]
 80023e6:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80023e8:	461a      	mov	r2, r3
 80023ea:	f006 f983 	bl	80086f4 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f7ff ff6c 	bl	80022cc <UARTTxDumpBuffer>
}
 80023f4:	bf00      	nop
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	0000      	movs	r0, r0
	...

08002400 <Protocal>:

void Protocal(int16_t dataIn,UARTStucrture *uart)
{
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	81fb      	strh	r3, [r7, #14]
	static uint16_t CollectedData = 0;
	static uint16_t CollectedData2 = 0;
	static uint8_t CurrentAngle1 = 0;
	static uint8_t CurrentAngle2 = 0;
	static uint16_t xxx = 0;
	DataInTest = dataIn & 0xf0;
 800240c:	89fb      	ldrh	r3, [r7, #14]
 800240e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002412:	b29a      	uxth	r2, r3
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <Protocal+0x48>)
 8002416:	801a      	strh	r2, [r3, #0]

//	//State Machine
	switch (State)
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <Protocal+0x4c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b07      	cmp	r3, #7
 800241e:	f200 8413 	bhi.w	8002c48 <Protocal+0x848>
 8002422:	a201      	add	r2, pc, #4	; (adr r2, 8002428 <Protocal+0x28>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	08002451 	.word	0x08002451
 800242c:	08002735 	.word	0x08002735
 8002430:	0800296f 	.word	0x0800296f
 8002434:	08002983 	.word	0x08002983
 8002438:	08002b73 	.word	0x08002b73
 800243c:	08002b9d 	.word	0x08002b9d
 8002440:	08002a0d 	.word	0x08002a0d
 8002444:	08002c0d 	.word	0x08002c0d
 8002448:	20000516 	.word	0x20000516
 800244c:	2000051b 	.word	0x2000051b
	{
	case Idle:
		stateeee = 1;
 8002450:	4ba1      	ldr	r3, [pc, #644]	; (80026d8 <Protocal+0x2d8>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
		UARTsuccess = 0;
 8002456:	4ba1      	ldr	r3, [pc, #644]	; (80026dc <Protocal+0x2dc>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
		UARTerror = 0;
 800245c:	4ba0      	ldr	r3, [pc, #640]	; (80026e0 <Protocal+0x2e0>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
		if (DataInTest == 0b10010000)
 8002462:	4ba0      	ldr	r3, [pc, #640]	; (80026e4 <Protocal+0x2e4>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	2b90      	cmp	r3, #144	; 0x90
 8002468:	f040 8160 	bne.w	800272c <Protocal+0x32c>
		{
			ModeIN = dataIn&0xf;
 800246c:	89fb      	ldrh	r3, [r7, #14]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b9c      	ldr	r3, [pc, #624]	; (80026e8 <Protocal+0x2e8>)
 8002478:	701a      	strb	r2, [r3, #0]
			if (ModeIN == 0b0001)
 800247a:	4b9b      	ldr	r3, [pc, #620]	; (80026e8 <Protocal+0x2e8>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d112      	bne.n	80024a8 <Protocal+0xa8>
			{
				Mode = 1;
 8002482:	4b9a      	ldr	r3, [pc, #616]	; (80026ec <Protocal+0x2ec>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1;
 8002488:	4b99      	ldr	r3, [pc, #612]	; (80026f0 <Protocal+0x2f0>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	b25b      	sxtb	r3, r3
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	b25b      	sxtb	r3, r3
 8002496:	b2da      	uxtb	r2, r3
 8002498:	4b96      	ldr	r3, [pc, #600]	; (80026f4 <Protocal+0x2f4>)
 800249a:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 800249c:	4b96      	ldr	r3, [pc, #600]	; (80026f8 <Protocal+0x2f8>)
 800249e:	2202      	movs	r2, #2
 80024a0:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 80024a2:	4b96      	ldr	r3, [pc, #600]	; (80026fc <Protocal+0x2fc>)
 80024a4:	2202      	movs	r2, #2
 80024a6:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0010)
 80024a8:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <Protocal+0x2e8>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d112      	bne.n	80024d6 <Protocal+0xd6>
			{
				Mode = 2;
 80024b0:	4b8e      	ldr	r3, [pc, #568]	; (80026ec <Protocal+0x2ec>)
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 80024b6:	4b91      	ldr	r3, [pc, #580]	; (80026fc <Protocal+0x2fc>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 80024bc:	4b8e      	ldr	r3, [pc, #568]	; (80026f8 <Protocal+0x2f8>)
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b10;
 80024c2:	4b8b      	ldr	r3, [pc, #556]	; (80026f0 <Protocal+0x2f0>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	b25b      	sxtb	r3, r3
 80024ca:	f043 0302 	orr.w	r3, r3, #2
 80024ce:	b25b      	sxtb	r3, r3
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <Protocal+0x2f4>)
 80024d4:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0011)
 80024d6:	4b84      	ldr	r3, [pc, #528]	; (80026e8 <Protocal+0x2e8>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d112      	bne.n	8002504 <Protocal+0x104>
			{
				Mode = 3;
 80024de:	4b83      	ldr	r3, [pc, #524]	; (80026ec <Protocal+0x2ec>)
 80024e0:	2203      	movs	r2, #3
 80024e2:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 80024e4:	4b85      	ldr	r3, [pc, #532]	; (80026fc <Protocal+0x2fc>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 80024ea:	4b83      	ldr	r3, [pc, #524]	; (80026f8 <Protocal+0x2f8>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b11;
 80024f0:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <Protocal+0x2f0>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	f043 0303 	orr.w	r3, r3, #3
 80024fc:	b25b      	sxtb	r3, r3
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b7c      	ldr	r3, [pc, #496]	; (80026f4 <Protocal+0x2f4>)
 8002502:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0100)
 8002504:	4b78      	ldr	r3, [pc, #480]	; (80026e8 <Protocal+0x2e8>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d112      	bne.n	8002532 <Protocal+0x132>
			{
				Mode = 4;
 800250c:	4b77      	ldr	r3, [pc, #476]	; (80026ec <Protocal+0x2ec>)
 800250e:	2204      	movs	r2, #4
 8002510:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 8002512:	4b7a      	ldr	r3, [pc, #488]	; (80026fc <Protocal+0x2fc>)
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 8002518:	4b77      	ldr	r3, [pc, #476]	; (80026f8 <Protocal+0x2f8>)
 800251a:	2202      	movs	r2, #2
 800251c:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b100;
 800251e:	4b74      	ldr	r3, [pc, #464]	; (80026f0 <Protocal+0x2f0>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	b25b      	sxtb	r3, r3
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	b25b      	sxtb	r3, r3
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b71      	ldr	r3, [pc, #452]	; (80026f4 <Protocal+0x2f4>)
 8002530:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0101)
 8002532:	4b6d      	ldr	r3, [pc, #436]	; (80026e8 <Protocal+0x2e8>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b05      	cmp	r3, #5
 8002538:	d112      	bne.n	8002560 <Protocal+0x160>
			{
				Mode = 5;
 800253a:	4b6c      	ldr	r3, [pc, #432]	; (80026ec <Protocal+0x2ec>)
 800253c:	2205      	movs	r2, #5
 800253e:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 8002540:	4b6e      	ldr	r3, [pc, #440]	; (80026fc <Protocal+0x2fc>)
 8002542:	2202      	movs	r2, #2
 8002544:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 8002546:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <Protocal+0x2f8>)
 8002548:	2202      	movs	r2, #2
 800254a:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b101;
 800254c:	4b68      	ldr	r3, [pc, #416]	; (80026f0 <Protocal+0x2f0>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	b25b      	sxtb	r3, r3
 8002554:	f043 0305 	orr.w	r3, r3, #5
 8002558:	b25b      	sxtb	r3, r3
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b65      	ldr	r3, [pc, #404]	; (80026f4 <Protocal+0x2f4>)
 800255e:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0110)
 8002560:	4b61      	ldr	r3, [pc, #388]	; (80026e8 <Protocal+0x2e8>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b06      	cmp	r3, #6
 8002566:	d112      	bne.n	800258e <Protocal+0x18e>
			{
				Mode = 6;
 8002568:	4b60      	ldr	r3, [pc, #384]	; (80026ec <Protocal+0x2ec>)
 800256a:	2206      	movs	r2, #6
 800256c:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 800256e:	4b63      	ldr	r3, [pc, #396]	; (80026fc <Protocal+0x2fc>)
 8002570:	2202      	movs	r2, #2
 8002572:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 8002574:	4b60      	ldr	r3, [pc, #384]	; (80026f8 <Protocal+0x2f8>)
 8002576:	2202      	movs	r2, #2
 8002578:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b110;
 800257a:	4b5d      	ldr	r3, [pc, #372]	; (80026f0 <Protocal+0x2f0>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	b25b      	sxtb	r3, r3
 8002582:	f043 0306 	orr.w	r3, r3, #6
 8002586:	b25b      	sxtb	r3, r3
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <Protocal+0x2f4>)
 800258c:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0111)
 800258e:	4b56      	ldr	r3, [pc, #344]	; (80026e8 <Protocal+0x2e8>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b07      	cmp	r3, #7
 8002594:	d112      	bne.n	80025bc <Protocal+0x1bc>
			{
				Mode = 7;
 8002596:	4b55      	ldr	r3, [pc, #340]	; (80026ec <Protocal+0x2ec>)
 8002598:	2207      	movs	r2, #7
 800259a:	701a      	strb	r2, [r3, #0]
				State = Frame3_n;
 800259c:	4b57      	ldr	r3, [pc, #348]	; (80026fc <Protocal+0x2fc>)
 800259e:	2204      	movs	r2, #4
 80025a0:	701a      	strb	r2, [r3, #0]
				Frame = 3;
 80025a2:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <Protocal+0x2f8>)
 80025a4:	2203      	movs	r2, #3
 80025a6:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b111;
 80025a8:	4b51      	ldr	r3, [pc, #324]	; (80026f0 <Protocal+0x2f0>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	f043 0307 	orr.w	r3, r3, #7
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <Protocal+0x2f4>)
 80025ba:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1000)
 80025bc:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <Protocal+0x2e8>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d112      	bne.n	80025ea <Protocal+0x1ea>
			{
				Mode = 8;
 80025c4:	4b49      	ldr	r3, [pc, #292]	; (80026ec <Protocal+0x2ec>)
 80025c6:	2208      	movs	r2, #8
 80025c8:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 80025ca:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <Protocal+0x2fc>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 80025d0:	4b49      	ldr	r3, [pc, #292]	; (80026f8 <Protocal+0x2f8>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1000;
 80025d6:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <Protocal+0x2f0>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	b25b      	sxtb	r3, r3
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <Protocal+0x2f4>)
 80025e8:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1001)
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <Protocal+0x2e8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b09      	cmp	r3, #9
 80025f0:	d112      	bne.n	8002618 <Protocal+0x218>
			{
				Mode = 9;
 80025f2:	4b3e      	ldr	r3, [pc, #248]	; (80026ec <Protocal+0x2ec>)
 80025f4:	2209      	movs	r2, #9
 80025f6:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 80025f8:	4b40      	ldr	r3, [pc, #256]	; (80026fc <Protocal+0x2fc>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 80025fe:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <Protocal+0x2f8>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1001;
 8002604:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <Protocal+0x2f0>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	b25b      	sxtb	r3, r3
 800260c:	f043 0309 	orr.w	r3, r3, #9
 8002610:	b25b      	sxtb	r3, r3
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b37      	ldr	r3, [pc, #220]	; (80026f4 <Protocal+0x2f4>)
 8002616:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1010)
 8002618:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <Protocal+0x2e8>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b0a      	cmp	r3, #10
 800261e:	d112      	bne.n	8002646 <Protocal+0x246>
			{
				Mode = 10;
 8002620:	4b32      	ldr	r3, [pc, #200]	; (80026ec <Protocal+0x2ec>)
 8002622:	220a      	movs	r2, #10
 8002624:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002626:	4b35      	ldr	r3, [pc, #212]	; (80026fc <Protocal+0x2fc>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 800262c:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <Protocal+0x2f8>)
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1010;
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <Protocal+0x2f0>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	b25b      	sxtb	r3, r3
 800263a:	f043 030a 	orr.w	r3, r3, #10
 800263e:	b25b      	sxtb	r3, r3
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <Protocal+0x2f4>)
 8002644:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1011)
 8002646:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <Protocal+0x2e8>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b0b      	cmp	r3, #11
 800264c:	d112      	bne.n	8002674 <Protocal+0x274>
			{
				Mode = 11;
 800264e:	4b27      	ldr	r3, [pc, #156]	; (80026ec <Protocal+0x2ec>)
 8002650:	220b      	movs	r2, #11
 8002652:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002654:	4b29      	ldr	r3, [pc, #164]	; (80026fc <Protocal+0x2fc>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 800265a:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <Protocal+0x2f8>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1011;
 8002660:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <Protocal+0x2f0>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	b25b      	sxtb	r3, r3
 8002668:	f043 030b 	orr.w	r3, r3, #11
 800266c:	b25b      	sxtb	r3, r3
 800266e:	b2da      	uxtb	r2, r3
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <Protocal+0x2f4>)
 8002672:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1100)
 8002674:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <Protocal+0x2e8>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d112      	bne.n	80026a2 <Protocal+0x2a2>
			{
				Mode = 12;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <Protocal+0x2ec>)
 800267e:	220c      	movs	r2, #12
 8002680:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <Protocal+0x2fc>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <Protocal+0x2f8>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1100;
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <Protocal+0x2f0>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	b25b      	sxtb	r3, r3
 8002696:	f043 030c 	orr.w	r3, r3, #12
 800269a:	b25b      	sxtb	r3, r3
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <Protocal+0x2f4>)
 80026a0:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1101)
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <Protocal+0x2e8>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b0d      	cmp	r3, #13
 80026a8:	d112      	bne.n	80026d0 <Protocal+0x2d0>
			{
				Mode = 13;
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <Protocal+0x2ec>)
 80026ac:	220d      	movs	r2, #13
 80026ae:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <Protocal+0x2fc>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <Protocal+0x2f8>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1101;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <Protocal+0x2f0>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	f043 030d 	orr.w	r3, r3, #13
 80026c8:	b25b      	sxtb	r3, r3
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <Protocal+0x2f4>)
 80026ce:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1110)
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <Protocal+0x2e8>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b0e      	cmp	r3, #14
 80026d6:	e013      	b.n	8002700 <Protocal+0x300>
 80026d8:	20000519 	.word	0x20000519
 80026dc:	2000030c 	.word	0x2000030c
 80026e0:	2000030d 	.word	0x2000030d
 80026e4:	20000516 	.word	0x20000516
 80026e8:	2000051c 	.word	0x2000051c
 80026ec:	200002f6 	.word	0x200002f6
 80026f0:	2000001a 	.word	0x2000001a
 80026f4:	2000051d 	.word	0x2000051d
 80026f8:	200002f7 	.word	0x200002f7
 80026fc:	2000051b 	.word	0x2000051b
 8002700:	f040 82a1 	bne.w	8002c46 <Protocal+0x846>
			{
				Mode = 14;
 8002704:	4ba6      	ldr	r3, [pc, #664]	; (80029a0 <Protocal+0x5a0>)
 8002706:	220e      	movs	r2, #14
 8002708:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 800270a:	4ba6      	ldr	r3, [pc, #664]	; (80029a4 <Protocal+0x5a4>)
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8002710:	4ba5      	ldr	r3, [pc, #660]	; (80029a8 <Protocal+0x5a8>)
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1110;
 8002716:	4ba5      	ldr	r3, [pc, #660]	; (80029ac <Protocal+0x5ac>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	b25b      	sxtb	r3, r3
 800271e:	f043 030e 	orr.w	r3, r3, #14
 8002722:	b25b      	sxtb	r3, r3
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4ba2      	ldr	r3, [pc, #648]	; (80029b0 <Protocal+0x5b0>)
 8002728:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			State = Idle;
		}
		break;
 800272a:	e28c      	b.n	8002c46 <Protocal+0x846>
			State = Idle;
 800272c:	4b9d      	ldr	r3, [pc, #628]	; (80029a4 <Protocal+0x5a4>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
		break;
 8002732:	e288      	b.n	8002c46 <Protocal+0x846>
	case Frame1:
		stateeee = 2;
 8002734:	4b9f      	ldr	r3, [pc, #636]	; (80029b4 <Protocal+0x5b4>)
 8002736:	2202      	movs	r2, #2
 8002738:	701a      	strb	r2, [r3, #0]
		frame1 = dataIn;
 800273a:	89fb      	ldrh	r3, [r7, #14]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4b9e      	ldr	r3, [pc, #632]	; (80029b8 <Protocal+0x5b8>)
 8002740:	701a      	strb	r2, [r3, #0]
		checksumtest = CheckSumFunction(CheckSum, Frame, CollectedData);
 8002742:	4b9b      	ldr	r3, [pc, #620]	; (80029b0 <Protocal+0x5b0>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	4a98      	ldr	r2, [pc, #608]	; (80029a8 <Protocal+0x5a8>)
 8002748:	7811      	ldrb	r1, [r2, #0]
 800274a:	4a9c      	ldr	r2, [pc, #624]	; (80029bc <Protocal+0x5bc>)
 800274c:	8812      	ldrh	r2, [r2, #0]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fab5 	bl	8002cc0 <CheckSumFunction>
 8002756:	4603      	mov	r3, r0
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b99      	ldr	r3, [pc, #612]	; (80029c0 <Protocal+0x5c0>)
 800275c:	701a      	strb	r2, [r3, #0]
			if (frame1 == checksumtest)
 800275e:	4b96      	ldr	r3, [pc, #600]	; (80029b8 <Protocal+0x5b8>)
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	4b97      	ldr	r3, [pc, #604]	; (80029c0 <Protocal+0x5c0>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	f040 80f4 	bne.w	8002954 <Protocal+0x554>
			{
				UARTsuccess += 1;
 800276c:	4b95      	ldr	r3, [pc, #596]	; (80029c4 <Protocal+0x5c4>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	4b93      	ldr	r3, [pc, #588]	; (80029c4 <Protocal+0x5c4>)
 8002776:	701a      	strb	r2, [r3, #0]
				if (Mode == 2 || Mode == 3 || Mode == 12 || Mode == 13)
 8002778:	4b89      	ldr	r3, [pc, #548]	; (80029a0 <Protocal+0x5a0>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d00b      	beq.n	8002798 <Protocal+0x398>
 8002780:	4b87      	ldr	r3, [pc, #540]	; (80029a0 <Protocal+0x5a0>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d007      	beq.n	8002798 <Protocal+0x398>
 8002788:	4b85      	ldr	r3, [pc, #532]	; (80029a0 <Protocal+0x5a0>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b0c      	cmp	r3, #12
 800278e:	d003      	beq.n	8002798 <Protocal+0x398>
 8002790:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <Protocal+0x5a0>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b0d      	cmp	r3, #13
 8002796:	d101      	bne.n	800279c <Protocal+0x39c>
				{
					WriteACK1();
 8002798:	f000 fac0 	bl	8002d1c <WriteACK1>
				}
				if (Mode == 8) // Go to Station N
 800279c:	4b80      	ldr	r3, [pc, #512]	; (80029a0 <Protocal+0x5a0>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d10a      	bne.n	80027ba <Protocal+0x3ba>
				{
					WriteACK1();
 80027a4:	f000 faba 	bl	8002d1c <WriteACK1>
					StartMoving = 1;
 80027a8:	4b87      	ldr	r3, [pc, #540]	; (80029c8 <Protocal+0x5c8>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
					NextStation = 0;
 80027ae:	4b87      	ldr	r3, [pc, #540]	; (80029cc <Protocal+0x5cc>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
					FinishedTask = 0;
 80027b4:	4b86      	ldr	r3, [pc, #536]	; (80029d0 <Protocal+0x5d0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
				}
				if (Mode == 9)
 80027ba:	4b79      	ldr	r3, [pc, #484]	; (80029a0 <Protocal+0x5a0>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b09      	cmp	r3, #9
 80027c0:	d11f      	bne.n	8002802 <Protocal+0x402>
				{
					//send current station**************************************************************************
					WriteACK1();
 80027c2:	f000 faab 	bl	8002d1c <WriteACK1>
					uint8_t temp[] = {153,0,GoToStation[NextStation],CheckSumFunction(153, 2, GoToStation[NextStation])};
 80027c6:	2399      	movs	r3, #153	; 0x99
 80027c8:	763b      	strb	r3, [r7, #24]
 80027ca:	2300      	movs	r3, #0
 80027cc:	767b      	strb	r3, [r7, #25]
 80027ce:	4b7f      	ldr	r3, [pc, #508]	; (80029cc <Protocal+0x5cc>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b7f      	ldr	r3, [pc, #508]	; (80029d4 <Protocal+0x5d4>)
 80027d6:	5c9b      	ldrb	r3, [r3, r2]
 80027d8:	76bb      	strb	r3, [r7, #26]
 80027da:	4b7c      	ldr	r3, [pc, #496]	; (80029cc <Protocal+0x5cc>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b7c      	ldr	r3, [pc, #496]	; (80029d4 <Protocal+0x5d4>)
 80027e2:	5c9b      	ldrb	r3, [r3, r2]
 80027e4:	461a      	mov	r2, r3
 80027e6:	2102      	movs	r1, #2
 80027e8:	2099      	movs	r0, #153	; 0x99
 80027ea:	f000 fa69 	bl	8002cc0 <CheckSumFunction>
 80027ee:	4603      	mov	r3, r0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	76fb      	strb	r3, [r7, #27]
					UARTTxWrite(&UART2, temp, 4) ;
 80027f4:	f107 0318 	add.w	r3, r7, #24
 80027f8:	2204      	movs	r2, #4
 80027fa:	4619      	mov	r1, r3
 80027fc:	4876      	ldr	r0, [pc, #472]	; (80029d8 <Protocal+0x5d8>)
 80027fe:	f7ff fdb5 	bl	800236c <UARTTxWrite>
				}
				if (Mode == 10) //Decimal 4 degree
 8002802:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <Protocal+0x5a0>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b0a      	cmp	r3, #10
 8002808:	d153      	bne.n	80028b2 <Protocal+0x4b2>
				{
					WriteACK1();
 800280a:	f000 fa87 	bl	8002d1c <WriteACK1>
					int radThousand = (int)(Degree*10000*3.14159265/180);
 800280e:	4b73      	ldr	r3, [pc, #460]	; (80029dc <Protocal+0x5dc>)
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80029e0 <Protocal+0x5e0>
 8002818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800281c:	ee17 0a90 	vmov	r0, s15
 8002820:	f7fd fe3e 	bl	80004a0 <__aeabi_f2d>
 8002824:	a35c      	add	r3, pc, #368	; (adr r3, 8002998 <Protocal+0x598>)
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	f7fd fe91 	bl	8000550 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	4b6a      	ldr	r3, [pc, #424]	; (80029e4 <Protocal+0x5e4>)
 800283c:	f7fd ffb2 	bl	80007a4 <__aeabi_ddiv>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f7fe f932 	bl	8000ab0 <__aeabi_d2iz>
 800284c:	4603      	mov	r3, r0
 800284e:	61fb      	str	r3, [r7, #28]
					CurrentAngle1 = (int8_t)(radThousand/256) ;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b00      	cmp	r3, #0
 8002854:	da00      	bge.n	8002858 <Protocal+0x458>
 8002856:	33ff      	adds	r3, #255	; 0xff
 8002858:	121b      	asrs	r3, r3, #8
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b62      	ldr	r3, [pc, #392]	; (80029e8 <Protocal+0x5e8>)
 800285e:	701a      	strb	r2, [r3, #0]
					CurrentAngle2 = (int8_t)(radThousand%256) ;
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	425a      	negs	r2, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	bf58      	it	pl
 800286a:	4253      	negpl	r3, r2
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <Protocal+0x5ec>)
 8002870:	701a      	strb	r2, [r3, #0]
					uint8_t temp[] = {154,CurrentAngle1, CurrentAngle2,CheckSumFunction(154, 2, CurrentAngle1+CurrentAngle2)};
 8002872:	239a      	movs	r3, #154	; 0x9a
 8002874:	753b      	strb	r3, [r7, #20]
 8002876:	4b5c      	ldr	r3, [pc, #368]	; (80029e8 <Protocal+0x5e8>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	757b      	strb	r3, [r7, #21]
 800287c:	4b5b      	ldr	r3, [pc, #364]	; (80029ec <Protocal+0x5ec>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	75bb      	strb	r3, [r7, #22]
 8002882:	4b59      	ldr	r3, [pc, #356]	; (80029e8 <Protocal+0x5e8>)
 8002884:	781a      	ldrb	r2, [r3, #0]
 8002886:	4b59      	ldr	r3, [pc, #356]	; (80029ec <Protocal+0x5ec>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	2102      	movs	r1, #2
 8002892:	209a      	movs	r0, #154	; 0x9a
 8002894:	f000 fa14 	bl	8002cc0 <CheckSumFunction>
 8002898:	4603      	mov	r3, r0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	75fb      	strb	r3, [r7, #23]
					UARTTxWrite(&UART2, temp, 4);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	2204      	movs	r2, #4
 80028a4:	4619      	mov	r1, r3
 80028a6:	484c      	ldr	r0, [pc, #304]	; (80029d8 <Protocal+0x5d8>)
 80028a8:	f7ff fd60 	bl	800236c <UARTTxWrite>
					n = 0;
 80028ac:	4b50      	ldr	r3, [pc, #320]	; (80029f0 <Protocal+0x5f0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	801a      	strh	r2, [r3, #0]
				}
				if (Mode == 11) //error; send now speed and top speed
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <Protocal+0x5a0>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b0b      	cmp	r3, #11
 80028b8:	d13c      	bne.n	8002934 <Protocal+0x534>
				{
					WriteACK1();
 80028ba:	f000 fa2f 	bl	8002d1c <WriteACK1>
					uint8_t temp[] = {155,0,(int8_t)(VmaxReal * 255 / 10),CheckSumFunction(155, 2, (int8_t)(VmaxReal * 255 / 10))};
 80028be:	239b      	movs	r3, #155	; 0x9b
 80028c0:	743b      	strb	r3, [r7, #16]
 80028c2:	2300      	movs	r3, #0
 80028c4:	747b      	strb	r3, [r7, #17]
 80028c6:	4b4b      	ldr	r3, [pc, #300]	; (80029f4 <Protocal+0x5f4>)
 80028c8:	edd3 7a00 	vldr	s15, [r3]
 80028cc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80029f8 <Protocal+0x5f8>
 80028d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028d4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80028e4:	793b      	ldrb	r3, [r7, #4]
 80028e6:	b25b      	sxtb	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	74bb      	strb	r3, [r7, #18]
 80028ec:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <Protocal+0x5f4>)
 80028ee:	edd3 7a00 	vldr	s15, [r3]
 80028f2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80029f8 <Protocal+0x5f8>
 80028f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002906:	edc7 7a01 	vstr	s15, [r7, #4]
 800290a:	793b      	ldrb	r3, [r7, #4]
 800290c:	b25b      	sxtb	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	2102      	movs	r1, #2
 8002914:	209b      	movs	r0, #155	; 0x9b
 8002916:	f000 f9d3 	bl	8002cc0 <CheckSumFunction>
 800291a:	4603      	mov	r3, r0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	74fb      	strb	r3, [r7, #19]
					UARTTxWrite(&UART2, temp, 4) ;
 8002920:	f107 0310 	add.w	r3, r7, #16
 8002924:	2204      	movs	r2, #4
 8002926:	4619      	mov	r1, r3
 8002928:	482b      	ldr	r0, [pc, #172]	; (80029d8 <Protocal+0x5d8>)
 800292a:	f7ff fd1f 	bl	800236c <UARTTxWrite>
					//send Vmax
					n = 0;
 800292e:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <Protocal+0x5f0>)
 8002930:	2200      	movs	r2, #0
 8002932:	801a      	strh	r2, [r3, #0]
					//read Ack in while loop

				}
				if (Mode == 14)
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <Protocal+0x5a0>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b0e      	cmp	r3, #14
 800293a:	d107      	bne.n	800294c <Protocal+0x54c>
				{
					StartSetHome = 1;
 800293c:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <Protocal+0x5fc>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
					SetHomeFlag = 0;
 8002942:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <Protocal+0x600>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
					WriteACK1();
 8002948:	f000 f9e8 	bl	8002d1c <WriteACK1>
				}
				State = Idle;
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <Protocal+0x5a4>)
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
			{
				Mode = 0;
				UARTerror += 1;
				State = Idle;
			}
		break;
 8002952:	e179      	b.n	8002c48 <Protocal+0x848>
				Mode = 0;
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <Protocal+0x5a0>)
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
				UARTerror += 1;
 800295a:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <Protocal+0x604>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <Protocal+0x604>)
 8002964:	701a      	strb	r2, [r3, #0]
				State = Idle;
 8002966:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <Protocal+0x5a4>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
		break;
 800296c:	e16c      	b.n	8002c48 <Protocal+0x848>

	case Frame2_1:
		stateeee = 21;
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <Protocal+0x5b4>)
 8002970:	2215      	movs	r2, #21
 8002972:	701a      	strb	r2, [r3, #0]
		CollectedData = dataIn;
 8002974:	89fa      	ldrh	r2, [r7, #14]
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <Protocal+0x5bc>)
 8002978:	801a      	strh	r2, [r3, #0]
		State = Frame2_2;
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <Protocal+0x5a4>)
 800297c:	2203      	movs	r2, #3
 800297e:	701a      	strb	r2, [r3, #0]
		break;
 8002980:	e162      	b.n	8002c48 <Protocal+0x848>
	case Frame2_2:
		stateeee = 22;
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <Protocal+0x5b4>)
 8002984:	2216      	movs	r2, #22
 8002986:	701a      	strb	r2, [r3, #0]
		CollectedData2 = dataIn;
 8002988:	89fa      	ldrh	r2, [r7, #14]
 800298a:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <Protocal+0x608>)
 800298c:	801a      	strh	r2, [r3, #0]
		State = CheckSum2;
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <Protocal+0x5a4>)
 8002990:	2206      	movs	r2, #6
 8002992:	701a      	strb	r2, [r3, #0]
		break;
 8002994:	e158      	b.n	8002c48 <Protocal+0x848>
 8002996:	bf00      	nop
 8002998:	53c8d4f1 	.word	0x53c8d4f1
 800299c:	400921fb 	.word	0x400921fb
 80029a0:	200002f6 	.word	0x200002f6
 80029a4:	2000051b 	.word	0x2000051b
 80029a8:	200002f7 	.word	0x200002f7
 80029ac:	2000001a 	.word	0x2000001a
 80029b0:	2000051d 	.word	0x2000051d
 80029b4:	20000519 	.word	0x20000519
 80029b8:	20000513 	.word	0x20000513
 80029bc:	2000051e 	.word	0x2000051e
 80029c0:	20000518 	.word	0x20000518
 80029c4:	2000030c 	.word	0x2000030c
 80029c8:	20000340 	.word	0x20000340
 80029cc:	200003c2 	.word	0x200003c2
 80029d0:	200003c1 	.word	0x200003c1
 80029d4:	200003d0 	.word	0x200003d0
 80029d8:	200002dc 	.word	0x200002dc
 80029dc:	20000508 	.word	0x20000508
 80029e0:	461c4000 	.word	0x461c4000
 80029e4:	40668000 	.word	0x40668000
 80029e8:	20000520 	.word	0x20000520
 80029ec:	20000521 	.word	0x20000521
 80029f0:	200002f4 	.word	0x200002f4
 80029f4:	20000388 	.word	0x20000388
 80029f8:	437f0000 	.word	0x437f0000
 80029fc:	20000399 	.word	0x20000399
 8002a00:	20000398 	.word	0x20000398
 8002a04:	2000030d 	.word	0x2000030d
 8002a08:	20000522 	.word	0x20000522
	case CheckSum2:
		stateeee = 23;
 8002a0c:	4b96      	ldr	r3, [pc, #600]	; (8002c68 <Protocal+0x868>)
 8002a0e:	2217      	movs	r2, #23
 8002a10:	701a      	strb	r2, [r3, #0]
		frame2 = dataIn;
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4b95      	ldr	r3, [pc, #596]	; (8002c6c <Protocal+0x86c>)
 8002a18:	701a      	strb	r2, [r3, #0]
		checksumtest = CheckSumFunction(CheckSum, Frame, CollectedData + CollectedData2);
 8002a1a:	4b95      	ldr	r3, [pc, #596]	; (8002c70 <Protocal+0x870>)
 8002a1c:	7818      	ldrb	r0, [r3, #0]
 8002a1e:	4b95      	ldr	r3, [pc, #596]	; (8002c74 <Protocal+0x874>)
 8002a20:	7819      	ldrb	r1, [r3, #0]
 8002a22:	4b95      	ldr	r3, [pc, #596]	; (8002c78 <Protocal+0x878>)
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	4b94      	ldr	r3, [pc, #592]	; (8002c7c <Protocal+0x87c>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	f000 f944 	bl	8002cc0 <CheckSumFunction>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b90      	ldr	r3, [pc, #576]	; (8002c80 <Protocal+0x880>)
 8002a3e:	701a      	strb	r2, [r3, #0]
		if (frame2 == checksumtest)
 8002a40:	4b8a      	ldr	r3, [pc, #552]	; (8002c6c <Protocal+0x86c>)
 8002a42:	781a      	ldrb	r2, [r3, #0]
 8002a44:	4b8e      	ldr	r3, [pc, #568]	; (8002c80 <Protocal+0x880>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	f040 8088 	bne.w	8002b5e <Protocal+0x75e>
		{
			UARTsuccess += 1;
 8002a4e:	4b8d      	ldr	r3, [pc, #564]	; (8002c84 <Protocal+0x884>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b8b      	ldr	r3, [pc, #556]	; (8002c84 <Protocal+0x884>)
 8002a58:	701a      	strb	r2, [r3, #0]
			if (Mode == 4)
 8002a5a:	4b8b      	ldr	r3, [pc, #556]	; (8002c88 <Protocal+0x888>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d11d      	bne.n	8002a9e <Protocal+0x69e>
			{
				VmaxRPM = (double)CollectedData2/255*10 ;
 8002a62:	4b86      	ldr	r3, [pc, #536]	; (8002c7c <Protocal+0x87c>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fcf8 	bl	800045c <__aeabi_ui2d>
 8002a6c:	a378      	add	r3, pc, #480	; (adr r3, 8002c50 <Protocal+0x850>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fd fe97 	bl	80007a4 <__aeabi_ddiv>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	4b82      	ldr	r3, [pc, #520]	; (8002c8c <Protocal+0x88c>)
 8002a84:	f7fd fd64 	bl	8000550 <__aeabi_dmul>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7fe f836 	bl	8000b00 <__aeabi_d2f>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4a7e      	ldr	r2, [pc, #504]	; (8002c90 <Protocal+0x890>)
 8002a98:	6013      	str	r3, [r2, #0]
				WriteACK1();
 8002a9a:	f000 f93f 	bl	8002d1c <WriteACK1>
			}
			if (Mode == 5)
 8002a9e:	4b7a      	ldr	r3, [pc, #488]	; (8002c88 <Protocal+0x888>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d144      	bne.n	8002b30 <Protocal+0x730>
			{
				FinalPos = (((double)CollectedData * 256) + ((double)CollectedData2))/10000/3.14159265*180;
 8002aa6:	4b74      	ldr	r3, [pc, #464]	; (8002c78 <Protocal+0x878>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fcd6 	bl	800045c <__aeabi_ui2d>
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	4b77      	ldr	r3, [pc, #476]	; (8002c94 <Protocal+0x894>)
 8002ab6:	f7fd fd4b 	bl	8000550 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	4b6e      	ldr	r3, [pc, #440]	; (8002c7c <Protocal+0x87c>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fcc8 	bl	800045c <__aeabi_ui2d>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f7fd fb86 	bl	80001e4 <__adddf3>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	a35d      	add	r3, pc, #372	; (adr r3, 8002c58 <Protocal+0x858>)
 8002ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae6:	f7fd fe5d 	bl	80007a4 <__aeabi_ddiv>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	a35b      	add	r3, pc, #364	; (adr r3, 8002c60 <Protocal+0x860>)
 8002af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af8:	f7fd fe54 	bl	80007a4 <__aeabi_ddiv>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <Protocal+0x898>)
 8002b0a:	f7fd fd21 	bl	8000550 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f7fd fff3 	bl	8000b00 <__aeabi_d2f>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4a5f      	ldr	r2, [pc, #380]	; (8002c9c <Protocal+0x89c>)
 8002b1e:	6013      	str	r3, [r2, #0]
				HowMuchStation = 0;
 8002b20:	4b5f      	ldr	r3, [pc, #380]	; (8002ca0 <Protocal+0x8a0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
				NextStation = 0;
 8002b26:	4b5f      	ldr	r3, [pc, #380]	; (8002ca4 <Protocal+0x8a4>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
				WriteACK1();
 8002b2c:	f000 f8f6 	bl	8002d1c <WriteACK1>
			}
			if (Mode == 6)
 8002b30:	4b55      	ldr	r3, [pc, #340]	; (8002c88 <Protocal+0x888>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b06      	cmp	r3, #6
 8002b36:	d10e      	bne.n	8002b56 <Protocal+0x756>
			{
				GoToStation[0] = CollectedData2 - 1;
 8002b38:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <Protocal+0x87c>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <Protocal+0x8a8>)
 8002b44:	701a      	strb	r2, [r3, #0]
				HowMuchStation = 1;
 8002b46:	4b56      	ldr	r3, [pc, #344]	; (8002ca0 <Protocal+0x8a0>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	701a      	strb	r2, [r3, #0]
				NextStation = 0;
 8002b4c:	4b55      	ldr	r3, [pc, #340]	; (8002ca4 <Protocal+0x8a4>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
				WriteACK1();
 8002b52:	f000 f8e3 	bl	8002d1c <WriteACK1>
			}

			State = Idle;
 8002b56:	4b55      	ldr	r3, [pc, #340]	; (8002cac <Protocal+0x8ac>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
		{
			UARTerror += 1;
			State = Idle;
		}

		break;
 8002b5c:	e074      	b.n	8002c48 <Protocal+0x848>
			UARTerror += 1;
 8002b5e:	4b54      	ldr	r3, [pc, #336]	; (8002cb0 <Protocal+0x8b0>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b52      	ldr	r3, [pc, #328]	; (8002cb0 <Protocal+0x8b0>)
 8002b68:	701a      	strb	r2, [r3, #0]
			State = Idle;
 8002b6a:	4b50      	ldr	r3, [pc, #320]	; (8002cac <Protocal+0x8ac>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
		break;
 8002b70:	e06a      	b.n	8002c48 <Protocal+0x848>
	case Frame3_n:
		stateeee = 30;
 8002b72:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <Protocal+0x868>)
 8002b74:	221e      	movs	r2, #30
 8002b76:	701a      	strb	r2, [r3, #0]
		HowMuchStation = dataIn;
 8002b78:	89fb      	ldrh	r3, [r7, #14]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b48      	ldr	r3, [pc, #288]	; (8002ca0 <Protocal+0x8a0>)
 8002b7e:	701a      	strb	r2, [r3, #0]
		xxx = 0;
 8002b80:	4b4c      	ldr	r3, [pc, #304]	; (8002cb4 <Protocal+0x8b4>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	801a      	strh	r2, [r3, #0]
		NextStation = 0;
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <Protocal+0x8a4>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
		frame3 = dataIn;
 8002b8c:	89fb      	ldrh	r3, [r7, #14]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <Protocal+0x8b8>)
 8002b92:	701a      	strb	r2, [r3, #0]
		State = Frame3_station;
 8002b94:	4b45      	ldr	r3, [pc, #276]	; (8002cac <Protocal+0x8ac>)
 8002b96:	2205      	movs	r2, #5
 8002b98:	701a      	strb	r2, [r3, #0]
		break;
 8002b9a:	e055      	b.n	8002c48 <Protocal+0x848>
	case Frame3_station:
		stateeee = 31;
 8002b9c:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <Protocal+0x868>)
 8002b9e:	221f      	movs	r2, #31
 8002ba0:	701a      	strb	r2, [r3, #0]
		GoToStation[xxx] = (dataIn & 0b1111)-1;
 8002ba2:	89fb      	ldrh	r3, [r7, #14]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <Protocal+0x8b4>)
 8002bae:	8812      	ldrh	r2, [r2, #0]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b2d9      	uxtb	r1, r3
 8002bb4:	4b3c      	ldr	r3, [pc, #240]	; (8002ca8 <Protocal+0x8a8>)
 8002bb6:	5499      	strb	r1, [r3, r2]
		GoToStation[xxx+1] = ((dataIn & 0b11110000)>>4)-1;
 8002bb8:	89fb      	ldrh	r3, [r7, #14]
 8002bba:	111b      	asrs	r3, r3, #4
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <Protocal+0x8b4>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	3a01      	subs	r2, #1
 8002bcc:	b2d1      	uxtb	r1, r2
 8002bce:	4a36      	ldr	r2, [pc, #216]	; (8002ca8 <Protocal+0x8a8>)
 8002bd0:	54d1      	strb	r1, [r2, r3]
		frame3 = frame3 + dataIn;
 8002bd2:	89fb      	ldrh	r3, [r7, #14]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <Protocal+0x8b8>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <Protocal+0x8b8>)
 8002be0:	701a      	strb	r2, [r3, #0]
		xxx = xxx + 2;
 8002be2:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <Protocal+0x8b4>)
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	3302      	adds	r3, #2
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <Protocal+0x8b4>)
 8002bec:	801a      	strh	r2, [r3, #0]
		if (xxx < HowMuchStation)
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <Protocal+0x8a0>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <Protocal+0x8b4>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d903      	bls.n	8002c04 <Protocal+0x804>
		{
			State = Frame3_station;
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <Protocal+0x8ac>)
 8002bfe:	2205      	movs	r2, #5
 8002c00:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			State = CheckSum3;
		}
		break;
 8002c02:	e021      	b.n	8002c48 <Protocal+0x848>
			State = CheckSum3;
 8002c04:	4b29      	ldr	r3, [pc, #164]	; (8002cac <Protocal+0x8ac>)
 8002c06:	2207      	movs	r2, #7
 8002c08:	701a      	strb	r2, [r3, #0]
		break;
 8002c0a:	e01d      	b.n	8002c48 <Protocal+0x848>
	case CheckSum3:
		ChecksumFrame3 = dataIn;
 8002c0c:	89fa      	ldrh	r2, [r7, #14]
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <Protocal+0x8bc>)
 8002c10:	801a      	strh	r2, [r3, #0]
		checksumtest = CheckSumFunction(CheckSum, Frame, frame3);
 8002c12:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <Protocal+0x870>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <Protocal+0x874>)
 8002c18:	7811      	ldrb	r1, [r2, #0]
 8002c1a:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <Protocal+0x8b8>)
 8002c1c:	7812      	ldrb	r2, [r2, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f84e 	bl	8002cc0 <CheckSumFunction>
 8002c24:	4603      	mov	r3, r0
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <Protocal+0x880>)
 8002c2a:	701a      	strb	r2, [r3, #0]
		if (ChecksumFrame3 == checksumtest)
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <Protocal+0x880>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <Protocal+0x8bc>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d101      	bne.n	8002c3e <Protocal+0x83e>
		{
			WriteACK1();
 8002c3a:	f000 f86f 	bl	8002d1c <WriteACK1>
		}
		State = Idle;
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <Protocal+0x8ac>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
		break;
 8002c44:	e000      	b.n	8002c48 <Protocal+0x848>
		break;
 8002c46:	bf00      	nop
	}
}
 8002c48:	bf00      	nop
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c50:	00000000 	.word	0x00000000
 8002c54:	406fe000 	.word	0x406fe000
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	40c38800 	.word	0x40c38800
 8002c60:	53c8d4f1 	.word	0x53c8d4f1
 8002c64:	400921fb 	.word	0x400921fb
 8002c68:	20000519 	.word	0x20000519
 8002c6c:	20000514 	.word	0x20000514
 8002c70:	2000051d 	.word	0x2000051d
 8002c74:	200002f7 	.word	0x200002f7
 8002c78:	2000051e 	.word	0x2000051e
 8002c7c:	20000522 	.word	0x20000522
 8002c80:	20000518 	.word	0x20000518
 8002c84:	2000030c 	.word	0x2000030c
 8002c88:	200002f6 	.word	0x200002f6
 8002c8c:	40240000 	.word	0x40240000
 8002c90:	20000014 	.word	0x20000014
 8002c94:	40700000 	.word	0x40700000
 8002c98:	40668000 	.word	0x40668000
 8002c9c:	20000010 	.word	0x20000010
 8002ca0:	20000018 	.word	0x20000018
 8002ca4:	200003c2 	.word	0x200003c2
 8002ca8:	200003d0 	.word	0x200003d0
 8002cac:	2000051b 	.word	0x2000051b
 8002cb0:	2000030d 	.word	0x2000030d
 8002cb4:	20000524 	.word	0x20000524
 8002cb8:	20000515 	.word	0x20000515
 8002cbc:	20000310 	.word	0x20000310

08002cc0 <CheckSumFunction>:

int16_t CheckSumFunction(uint8_t CheckSum, uint8_t Frame, uint8_t Data)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	71bb      	strb	r3, [r7, #6]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	717b      	strb	r3, [r7, #5]
	uint16_t result = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	81fb      	strh	r3, [r7, #14]
	if (Frame == 1)
 8002cd6:	79bb      	ldrb	r3, [r7, #6]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d103      	bne.n	8002ce4 <CheckSumFunction+0x24>
	{
		result = ~(CheckSum);
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	81fb      	strh	r3, [r7, #14]
	}
	if (Frame == 2)
 8002ce4:	79bb      	ldrb	r3, [r7, #6]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d106      	bne.n	8002cf8 <CheckSumFunction+0x38>
	{
		result = ~(((CheckSum)+Data)&0xff);
 8002cea:	79fa      	ldrb	r2, [r7, #7]
 8002cec:	797b      	ldrb	r3, [r7, #5]
 8002cee:	4413      	add	r3, r2
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	81fb      	strh	r3, [r7, #14]
	}
	if (Frame == 3)
 8002cf8:	79bb      	ldrb	r3, [r7, #6]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d106      	bne.n	8002d0c <CheckSumFunction+0x4c>
	{
		result = ~(((CheckSum)+Data)&0xff);
 8002cfe:	79fa      	ldrb	r2, [r7, #7]
 8002d00:	797b      	ldrb	r3, [r7, #5]
 8002d02:	4413      	add	r3, r2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	81fb      	strh	r3, [r7, #14]
	}
	return result;
 8002d0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <WriteACK1>:

void WriteACK1()
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
	//*********write ACK1*****************
	uint8_t temp[] = {0x58, 0b01110101};
 8002d22:	f247 5358 	movw	r3, #30040	; 0x7558
 8002d26:	80bb      	strh	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 2);
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4803      	ldr	r0, [pc, #12]	; (8002d3c <WriteACK1+0x20>)
 8002d30:	f7ff fb1c 	bl	800236c <UARTTxWrite>
	//************************************
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200002dc 	.word	0x200002dc

08002d40 <WriteACK2>:
void WriteACK2()
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
	//*********write ACK2*****************
	uint8_t temp[] = {70, 0x6e};
 8002d46:	f646 6346 	movw	r3, #28230	; 0x6e46
 8002d4a:	80bb      	strh	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 2);
 8002d4c:	1d3b      	adds	r3, r7, #4
 8002d4e:	2202      	movs	r2, #2
 8002d50:	4619      	mov	r1, r3
 8002d52:	4803      	ldr	r0, [pc, #12]	; (8002d60 <WriteACK2+0x20>)
 8002d54:	f7ff fb0a 	bl	800236c <UARTTxWrite>
	//************************************
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	200002dc 	.word	0x200002dc
 8002d64:	00000000 	.word	0x00000000

08002d68 <SetHome>:
void SetHome()
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
	HomeSignal[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) ; //Read set home
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	4860      	ldr	r0, [pc, #384]	; (8002ef0 <SetHome+0x188>)
 8002d70:	f002 f92c 	bl	8004fcc <HAL_GPIO_ReadPin>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <SetHome+0x18c>)
 8002d7a:	701a      	strb	r2, [r3, #0]
	sum = HomeSignal[0] + HomeSignal[1]+ HomeSignal[2]+ HomeSignal[3]+ HomeSignal[4]+ HomeSignal[5]+ HomeSignal[6]+ HomeSignal[7];
 8002d7c:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <SetHome+0x18c>)
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	4b5c      	ldr	r3, [pc, #368]	; (8002ef4 <SetHome+0x18c>)
 8002d82:	785b      	ldrb	r3, [r3, #1]
 8002d84:	4413      	add	r3, r2
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <SetHome+0x18c>)
 8002d8a:	789b      	ldrb	r3, [r3, #2]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	4b58      	ldr	r3, [pc, #352]	; (8002ef4 <SetHome+0x18c>)
 8002d92:	78db      	ldrb	r3, [r3, #3]
 8002d94:	4413      	add	r3, r2
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <SetHome+0x18c>)
 8002d9a:	791b      	ldrb	r3, [r3, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b54      	ldr	r3, [pc, #336]	; (8002ef4 <SetHome+0x18c>)
 8002da2:	795b      	ldrb	r3, [r3, #5]
 8002da4:	4413      	add	r3, r2
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	4b52      	ldr	r3, [pc, #328]	; (8002ef4 <SetHome+0x18c>)
 8002daa:	799b      	ldrb	r3, [r3, #6]
 8002dac:	4413      	add	r3, r2
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	4b50      	ldr	r3, [pc, #320]	; (8002ef4 <SetHome+0x18c>)
 8002db2:	79db      	ldrb	r3, [r3, #7]
 8002db4:	4413      	add	r3, r2
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b4f      	ldr	r3, [pc, #316]	; (8002ef8 <SetHome+0x190>)
 8002dba:	701a      	strb	r2, [r3, #0]

	if (SetHomeFlag == 0)
 8002dbc:	4b4f      	ldr	r3, [pc, #316]	; (8002efc <SetHome+0x194>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d12a      	bne.n	8002e1a <SetHome+0xb2>
	{
		request = request+0.00005;
 8002dc4:	4b4e      	ldr	r3, [pc, #312]	; (8002f00 <SetHome+0x198>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fb69 	bl	80004a0 <__aeabi_f2d>
 8002dce:	a346      	add	r3, pc, #280	; (adr r3, 8002ee8 <SetHome+0x180>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fa06 	bl	80001e4 <__adddf3>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	f7fd fe8e 	bl	8000b00 <__aeabi_d2f>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4a46      	ldr	r2, [pc, #280]	; (8002f00 <SetHome+0x198>)
 8002de8:	6013      	str	r3, [r2, #0]
		if (request >= 4)
 8002dea:	4b45      	ldr	r3, [pc, #276]	; (8002f00 <SetHome+0x198>)
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfc:	db03      	blt.n	8002e06 <SetHome+0x9e>
		{
			request = 4;
 8002dfe:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <SetHome+0x198>)
 8002e00:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002e04:	601a      	str	r2, [r3, #0]
		}
		Direction = 0;
 8002e06:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <SetHome+0x19c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
		if (sum > 0)
 8002e0c:	4b3a      	ldr	r3, [pc, #232]	; (8002ef8 <SetHome+0x190>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <SetHome+0xb2>
		{
			SetHomeFlag = 3;
 8002e14:	4b39      	ldr	r3, [pc, #228]	; (8002efc <SetHome+0x194>)
 8002e16:	2203      	movs	r2, #3
 8002e18:	701a      	strb	r2, [r3, #0]
		}
	}
	if (SetHomeFlag == 3)
 8002e1a:	4b38      	ldr	r3, [pc, #224]	; (8002efc <SetHome+0x194>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d128      	bne.n	8002e74 <SetHome+0x10c>
	{
		request = request - 0.00005;
 8002e22:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <SetHome+0x198>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fb3a 	bl	80004a0 <__aeabi_f2d>
 8002e2c:	a32e      	add	r3, pc, #184	; (adr r3, 8002ee8 <SetHome+0x180>)
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	f7fd f9d5 	bl	80001e0 <__aeabi_dsub>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f7fd fe5f 	bl	8000b00 <__aeabi_d2f>
 8002e42:	4603      	mov	r3, r0
 8002e44:	4a2e      	ldr	r2, [pc, #184]	; (8002f00 <SetHome+0x198>)
 8002e46:	6013      	str	r3, [r2, #0]
		if(request <= 0)
 8002e48:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <SetHome+0x198>)
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	d80d      	bhi.n	8002e74 <SetHome+0x10c>
		{
			request = 0;
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <SetHome+0x198>)
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
			SetHomeFlag = 1;
 8002e60:	4b26      	ldr	r3, [pc, #152]	; (8002efc <SetHome+0x194>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
			SetHomeTimeStamp = micros();
 8002e66:	f000 fecb 	bl	8003c00 <micros>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4926      	ldr	r1, [pc, #152]	; (8002f08 <SetHome+0x1a0>)
 8002e70:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}
	if (SetHomeFlag == 1)
 8002e74:	4b21      	ldr	r3, [pc, #132]	; (8002efc <SetHome+0x194>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d116      	bne.n	8002eaa <SetHome+0x142>
	{
		request = 0;
 8002e7c:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <SetHome+0x198>)
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
		Direction = 2;
 8002e84:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <SetHome+0x19c>)
 8002e86:	2202      	movs	r2, #2
 8002e88:	701a      	strb	r2, [r3, #0]
		if (micros()-SetHomeTimeStamp > 1000000)
 8002e8a:	f000 feb9 	bl	8003c00 <micros>
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <SetHome+0x1a0>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	1a84      	subs	r4, r0, r2
 8002e96:	eb61 0503 	sbc.w	r5, r1, r3
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <SetHome+0x1a4>)
 8002e9c:	429c      	cmp	r4, r3
 8002e9e:	f175 0300 	sbcs.w	r3, r5, #0
 8002ea2:	d302      	bcc.n	8002eaa <SetHome+0x142>
		{
			SetHomeFlag = 2;
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <SetHome+0x194>)
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (SetHomeFlag == 2)
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <SetHome+0x194>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d118      	bne.n	8002ee4 <SetHome+0x17c>
	{
		request = -0.5;
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <SetHome+0x198>)
 8002eb4:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8002eb8:	601a      	str	r2, [r3, #0]
		Direction = 1;
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <SetHome+0x19c>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	701a      	strb	r2, [r3, #0]
		if (sum > 0)
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <SetHome+0x190>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <SetHome+0x17c>
		{
			request = 0;
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <SetHome+0x198>)
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
			htim3.Instance->CNT = 1;
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <SetHome+0x1a8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
			SetHomeFlag = 0;
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <SetHome+0x194>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
			StartSetHome = 0;
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <SetHome+0x1ac>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002ee4:	bf00      	nop
 8002ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee8:	eb1c432d 	.word	0xeb1c432d
 8002eec:	3f0a36e2 	.word	0x3f0a36e2
 8002ef0:	40020800 	.word	0x40020800
 8002ef4:	20000390 	.word	0x20000390
 8002ef8:	2000039a 	.word	0x2000039a
 8002efc:	20000398 	.word	0x20000398
 8002f00:	200004ec 	.word	0x200004ec
 8002f04:	2000050c 	.word	0x2000050c
 8002f08:	200003a0 	.word	0x200003a0
 8002f0c:	000f4241 	.word	0x000f4241
 8002f10:	20000190 	.word	0x20000190
 8002f14:	20000399 	.word	0x20000399

08002f18 <Trajec>:


void Trajec()
{
 8002f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f1c:	b088      	sub	sp, #32
 8002f1e:	af00      	add	r7, sp, #0
	float Vmax;
	Vmax = VmaxRPM * 0.10472 ; //rad per sec
 8002f20:	4bbb      	ldr	r3, [pc, #748]	; (8003210 <Trajec+0x2f8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fabb 	bl	80004a0 <__aeabi_f2d>
 8002f2a:	a3ad      	add	r3, pc, #692	; (adr r3, 80031e0 <Trajec+0x2c8>)
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	f7fd fb0e 	bl	8000550 <__aeabi_dmul>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f7fd fde0 	bl	8000b00 <__aeabi_d2f>
 8002f40:	4603      	mov	r3, r0
 8002f42:	61fb      	str	r3, [r7, #28]
//	Vmax = 11*0.10472;
	float Amax = 0.5 ;  //rad per sec square
 8002f44:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002f48:	61bb      	str	r3, [r7, #24]
	if (ST == 0)
 8002f4a:	4bb2      	ldr	r3, [pc, #712]	; (8003214 <Trajec+0x2fc>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d129      	bne.n	8002fa6 <Trajec+0x8e>
	{
		StartTime = micros() ;
 8002f52:	f000 fe55 	bl	8003c00 <micros>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7fd fee7 	bl	8000d30 <__aeabi_ul2f>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4aac      	ldr	r2, [pc, #688]	; (8003218 <Trajec+0x300>)
 8002f66:	6013      	str	r3, [r2, #0]
		ST = 1 ;
 8002f68:	4baa      	ldr	r3, [pc, #680]	; (8003214 <Trajec+0x2fc>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
		StartPos = Degree * 3.14159 / 180.0 ; //rad
 8002f6e:	4bab      	ldr	r3, [pc, #684]	; (800321c <Trajec+0x304>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd fa94 	bl	80004a0 <__aeabi_f2d>
 8002f78:	a39b      	add	r3, pc, #620	; (adr r3, 80031e8 <Trajec+0x2d0>)
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f7fd fae7 	bl	8000550 <__aeabi_dmul>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	4ba4      	ldr	r3, [pc, #656]	; (8003220 <Trajec+0x308>)
 8002f90:	f7fd fc08 	bl	80007a4 <__aeabi_ddiv>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f7fd fdb0 	bl	8000b00 <__aeabi_d2f>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4aa0      	ldr	r2, [pc, #640]	; (8003224 <Trajec+0x30c>)
 8002fa4:	6013      	str	r3, [r2, #0]
	}
	tau = (float)(micros() - StartTime) / 1000000 ; //sec
 8002fa6:	f000 fe2b 	bl	8003c00 <micros>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f7fd febd 	bl	8000d30 <__aeabi_ul2f>
 8002fb6:	ee07 0a10 	vmov	s14, r0
 8002fba:	4b97      	ldr	r3, [pc, #604]	; (8003218 <Trajec+0x300>)
 8002fbc:	edd3 7a00 	vldr	s15, [r3]
 8002fc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fc4:	eddf 6a98 	vldr	s13, [pc, #608]	; 8003228 <Trajec+0x310>
 8002fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fcc:	4b97      	ldr	r3, [pc, #604]	; (800322c <Trajec+0x314>)
 8002fce:	edc3 7a00 	vstr	s15, [r3]

	Qi = StartPos ;
 8002fd2:	4b94      	ldr	r3, [pc, #592]	; (8003224 <Trajec+0x30c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a96      	ldr	r2, [pc, #600]	; (8003230 <Trajec+0x318>)
 8002fd8:	6013      	str	r3, [r2, #0]
	Qf = FinalPos * 3.14159 / 180.0 ;
 8002fda:	4b96      	ldr	r3, [pc, #600]	; (8003234 <Trajec+0x31c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fa5e 	bl	80004a0 <__aeabi_f2d>
 8002fe4:	a380      	add	r3, pc, #512	; (adr r3, 80031e8 <Trajec+0x2d0>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f7fd fab1 	bl	8000550 <__aeabi_dmul>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	4b89      	ldr	r3, [pc, #548]	; (8003220 <Trajec+0x308>)
 8002ffc:	f7fd fbd2 	bl	80007a4 <__aeabi_ddiv>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	f7fd fd7a 	bl	8000b00 <__aeabi_d2f>
 800300c:	4603      	mov	r3, r0
 800300e:	4a8a      	ldr	r2, [pc, #552]	; (8003238 <Trajec+0x320>)
 8003010:	6013      	str	r3, [r2, #0]

	if (Qf - Qi > 3.14159265)
 8003012:	4b89      	ldr	r3, [pc, #548]	; (8003238 <Trajec+0x320>)
 8003014:	ed93 7a00 	vldr	s14, [r3]
 8003018:	4b85      	ldr	r3, [pc, #532]	; (8003230 <Trajec+0x318>)
 800301a:	edd3 7a00 	vldr	s15, [r3]
 800301e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003022:	ee17 0a90 	vmov	r0, s15
 8003026:	f7fd fa3b 	bl	80004a0 <__aeabi_f2d>
 800302a:	a371      	add	r3, pc, #452	; (adr r3, 80031f0 <Trajec+0x2d8>)
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	f7fd fd1e 	bl	8000a70 <__aeabi_dcmpgt>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d012      	beq.n	8003060 <Trajec+0x148>
	{
		Qi += 2*3.14159265;
 800303a:	4b7d      	ldr	r3, [pc, #500]	; (8003230 <Trajec+0x318>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fa2e 	bl	80004a0 <__aeabi_f2d>
 8003044:	a36c      	add	r3, pc, #432	; (adr r3, 80031f8 <Trajec+0x2e0>)
 8003046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304a:	f7fd f8cb 	bl	80001e4 <__adddf3>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	f7fd fd53 	bl	8000b00 <__aeabi_d2f>
 800305a:	4603      	mov	r3, r0
 800305c:	4a74      	ldr	r2, [pc, #464]	; (8003230 <Trajec+0x318>)
 800305e:	6013      	str	r3, [r2, #0]
	}
	if (Qf - Qi < -3.14159265)
 8003060:	4b75      	ldr	r3, [pc, #468]	; (8003238 <Trajec+0x320>)
 8003062:	ed93 7a00 	vldr	s14, [r3]
 8003066:	4b72      	ldr	r3, [pc, #456]	; (8003230 <Trajec+0x318>)
 8003068:	edd3 7a00 	vldr	s15, [r3]
 800306c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003070:	ee17 0a90 	vmov	r0, s15
 8003074:	f7fd fa14 	bl	80004a0 <__aeabi_f2d>
 8003078:	a361      	add	r3, pc, #388	; (adr r3, 8003200 <Trajec+0x2e8>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f7fd fcd9 	bl	8000a34 <__aeabi_dcmplt>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d012      	beq.n	80030ae <Trajec+0x196>
	{
		Qf += 2*3.14159265;
 8003088:	4b6b      	ldr	r3, [pc, #428]	; (8003238 <Trajec+0x320>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fa07 	bl	80004a0 <__aeabi_f2d>
 8003092:	a359      	add	r3, pc, #356	; (adr r3, 80031f8 <Trajec+0x2e0>)
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f7fd f8a4 	bl	80001e4 <__adddf3>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7fd fd2c 	bl	8000b00 <__aeabi_d2f>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4a63      	ldr	r2, [pc, #396]	; (8003238 <Trajec+0x320>)
 80030ac:	6013      	str	r3, [r2, #0]
	}
	TA1= (40.0 * sqrt(3.0))*(Qf - Qi);
 80030ae:	4b62      	ldr	r3, [pc, #392]	; (8003238 <Trajec+0x320>)
 80030b0:	ed93 7a00 	vldr	s14, [r3]
 80030b4:	4b5e      	ldr	r3, [pc, #376]	; (8003230 <Trajec+0x318>)
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030be:	ee17 0a90 	vmov	r0, s15
 80030c2:	f7fd f9ed 	bl	80004a0 <__aeabi_f2d>
 80030c6:	a350      	add	r3, pc, #320	; (adr r3, 8003208 <Trajec+0x2f0>)
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f7fd fa40 	bl	8000550 <__aeabi_dmul>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	f7fd fd12 	bl	8000b00 <__aeabi_d2f>
 80030dc:	4603      	mov	r3, r0
 80030de:	4a57      	ldr	r2, [pc, #348]	; (800323c <Trajec+0x324>)
 80030e0:	6013      	str	r3, [r2, #0]
	TA2 = TA1/(3.0*Amax) ;
 80030e2:	4b56      	ldr	r3, [pc, #344]	; (800323c <Trajec+0x324>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd f9da 	bl	80004a0 <__aeabi_f2d>
 80030ec:	4680      	mov	r8, r0
 80030ee:	4689      	mov	r9, r1
 80030f0:	69b8      	ldr	r0, [r7, #24]
 80030f2:	f7fd f9d5 	bl	80004a0 <__aeabi_f2d>
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	4b51      	ldr	r3, [pc, #324]	; (8003240 <Trajec+0x328>)
 80030fc:	f7fd fa28 	bl	8000550 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4640      	mov	r0, r8
 8003106:	4649      	mov	r1, r9
 8003108:	f7fd fb4c 	bl	80007a4 <__aeabi_ddiv>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	f7fd fcf4 	bl	8000b00 <__aeabi_d2f>
 8003118:	4603      	mov	r3, r0
 800311a:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <Trajec+0x32c>)
 800311c:	6013      	str	r3, [r2, #0]
	if (TA2 >= 0)
 800311e:	4b49      	ldr	r3, [pc, #292]	; (8003244 <Trajec+0x32c>)
 8003120:	edd3 7a00 	vldr	s15, [r3]
 8003124:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312c:	db04      	blt.n	8003138 <Trajec+0x220>
	{
		TA3 = TA2;
 800312e:	4b45      	ldr	r3, [pc, #276]	; (8003244 <Trajec+0x32c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a45      	ldr	r2, [pc, #276]	; (8003248 <Trajec+0x330>)
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00c      	b.n	8003152 <Trajec+0x23a>
	}
	else
	{
		TA3 = TA2 - (2*TA2);
 8003138:	4b42      	ldr	r3, [pc, #264]	; (8003244 <Trajec+0x32c>)
 800313a:	ed93 7a00 	vldr	s14, [r3]
 800313e:	4b41      	ldr	r3, [pc, #260]	; (8003244 <Trajec+0x32c>)
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800314c:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <Trajec+0x330>)
 800314e:	edc3 7a00 	vstr	s15, [r3]
	}
	TA = sqrt(TA3) / 2.0 ;
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <Trajec+0x330>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd f9a2 	bl	80004a0 <__aeabi_f2d>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	ec43 2b10 	vmov	d0, r2, r3
 8003164:	f005 fba4 	bl	80088b0 <sqrt>
 8003168:	ec51 0b10 	vmov	r0, r1, d0
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003174:	f7fd fb16 	bl	80007a4 <__aeabi_ddiv>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4610      	mov	r0, r2
 800317e:	4619      	mov	r1, r3
 8003180:	f7fd fcbe 	bl	8000b00 <__aeabi_d2f>
 8003184:	4603      	mov	r3, r0
 8003186:	4a31      	ldr	r2, [pc, #196]	; (800324c <Trajec+0x334>)
 8003188:	6013      	str	r3, [r2, #0]

	TV1 = (15*Qf - 15*Qi)/(8*Vmax);
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <Trajec+0x320>)
 800318c:	edd3 7a00 	vldr	s15, [r3]
 8003190:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003194:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <Trajec+0x318>)
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80031a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80031aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80031ae:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80031b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <Trajec+0x338>)
 80031bc:	edc3 7a00 	vstr	s15, [r3]
	if (TV1 >= 0)
 80031c0:	4b23      	ldr	r3, [pc, #140]	; (8003250 <Trajec+0x338>)
 80031c2:	edd3 7a00 	vldr	s15, [r3]
 80031c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ce:	db43      	blt.n	8003258 <Trajec+0x340>
	{
		TV = TV1;
 80031d0:	4b1f      	ldr	r3, [pc, #124]	; (8003250 <Trajec+0x338>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <Trajec+0x33c>)
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	e04b      	b.n	8003272 <Trajec+0x35a>
 80031da:	bf00      	nop
 80031dc:	f3af 8000 	nop.w
 80031e0:	0f3cb3e5 	.word	0x0f3cb3e5
 80031e4:	3fbaceee 	.word	0x3fbaceee
 80031e8:	f01b866e 	.word	0xf01b866e
 80031ec:	400921f9 	.word	0x400921f9
 80031f0:	53c8d4f1 	.word	0x53c8d4f1
 80031f4:	400921fb 	.word	0x400921fb
 80031f8:	53c8d4f1 	.word	0x53c8d4f1
 80031fc:	401921fb 	.word	0x401921fb
 8003200:	53c8d4f1 	.word	0x53c8d4f1
 8003204:	c00921fb 	.word	0xc00921fb
 8003208:	d1372fea 	.word	0xd1372fea
 800320c:	4051520c 	.word	0x4051520c
 8003210:	20000014 	.word	0x20000014
 8003214:	20000341 	.word	0x20000341
 8003218:	2000033c 	.word	0x2000033c
 800321c:	20000508 	.word	0x20000508
 8003220:	40668000 	.word	0x40668000
 8003224:	20000350 	.word	0x20000350
 8003228:	49742400 	.word	0x49742400
 800322c:	20000368 	.word	0x20000368
 8003230:	20000354 	.word	0x20000354
 8003234:	20000010 	.word	0x20000010
 8003238:	20000358 	.word	0x20000358
 800323c:	2000036c 	.word	0x2000036c
 8003240:	40080000 	.word	0x40080000
 8003244:	20000370 	.word	0x20000370
 8003248:	20000374 	.word	0x20000374
 800324c:	2000035c 	.word	0x2000035c
 8003250:	20000378 	.word	0x20000378
 8003254:	20000360 	.word	0x20000360
	}
	else
	{
		TV = TV1 - (2*TV1);
 8003258:	4bd6      	ldr	r3, [pc, #856]	; (80035b4 <Trajec+0x69c>)
 800325a:	ed93 7a00 	vldr	s14, [r3]
 800325e:	4bd5      	ldr	r3, [pc, #852]	; (80035b4 <Trajec+0x69c>)
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326c:	4bd2      	ldr	r3, [pc, #840]	; (80035b8 <Trajec+0x6a0>)
 800326e:	edc3 7a00 	vstr	s15, [r3]
	}

	if (TV > TA)
 8003272:	4bd1      	ldr	r3, [pc, #836]	; (80035b8 <Trajec+0x6a0>)
 8003274:	ed93 7a00 	vldr	s14, [r3]
 8003278:	4bd0      	ldr	r3, [pc, #832]	; (80035bc <Trajec+0x6a4>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003286:	dd03      	ble.n	8003290 <Trajec+0x378>
	{
		T = TV ;
 8003288:	4bcb      	ldr	r3, [pc, #812]	; (80035b8 <Trajec+0x6a0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4acc      	ldr	r2, [pc, #816]	; (80035c0 <Trajec+0x6a8>)
 800328e:	6013      	str	r3, [r2, #0]
	}
	if (TV <= TA)
 8003290:	4bc9      	ldr	r3, [pc, #804]	; (80035b8 <Trajec+0x6a0>)
 8003292:	ed93 7a00 	vldr	s14, [r3]
 8003296:	4bc9      	ldr	r3, [pc, #804]	; (80035bc <Trajec+0x6a4>)
 8003298:	edd3 7a00 	vldr	s15, [r3]
 800329c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a4:	d803      	bhi.n	80032ae <Trajec+0x396>
	{
		T = TA ;
 80032a6:	4bc5      	ldr	r3, [pc, #788]	; (80035bc <Trajec+0x6a4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4ac5      	ldr	r2, [pc, #788]	; (80035c0 <Trajec+0x6a8>)
 80032ac:	6013      	str	r3, [r2, #0]
	}
	float a0 = Qi ;
 80032ae:	4bc5      	ldr	r3, [pc, #788]	; (80035c4 <Trajec+0x6ac>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	617b      	str	r3, [r7, #20]
	float a1 = 0 ;
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
	float a2 = 0 ;
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
	float a3 = (1 / (2 * (T*T*T))) * (20 * (Qf-Qi)) ;
 80032c0:	4bbf      	ldr	r3, [pc, #764]	; (80035c0 <Trajec+0x6a8>)
 80032c2:	ed93 7a00 	vldr	s14, [r3]
 80032c6:	4bbe      	ldr	r3, [pc, #760]	; (80035c0 <Trajec+0x6a8>)
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d0:	4bbb      	ldr	r3, [pc, #748]	; (80035c0 <Trajec+0x6a8>)
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e6:	4bb8      	ldr	r3, [pc, #736]	; (80035c8 <Trajec+0x6b0>)
 80032e8:	edd3 6a00 	vldr	s13, [r3]
 80032ec:	4bb5      	ldr	r3, [pc, #724]	; (80035c4 <Trajec+0x6ac>)
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032f6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80032fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003302:	edc7 7a02 	vstr	s15, [r7, #8]
	float a4 = (1 / (2 * (T*T*T*T))) * (30 * (Qi-Qf)) ;
 8003306:	4bae      	ldr	r3, [pc, #696]	; (80035c0 <Trajec+0x6a8>)
 8003308:	ed93 7a00 	vldr	s14, [r3]
 800330c:	4bac      	ldr	r3, [pc, #688]	; (80035c0 <Trajec+0x6a8>)
 800330e:	edd3 7a00 	vldr	s15, [r3]
 8003312:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003316:	4baa      	ldr	r3, [pc, #680]	; (80035c0 <Trajec+0x6a8>)
 8003318:	edd3 7a00 	vldr	s15, [r3]
 800331c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003320:	4ba7      	ldr	r3, [pc, #668]	; (80035c0 <Trajec+0x6a8>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800332e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003336:	4ba3      	ldr	r3, [pc, #652]	; (80035c4 <Trajec+0x6ac>)
 8003338:	edd3 6a00 	vldr	s13, [r3]
 800333c:	4ba2      	ldr	r3, [pc, #648]	; (80035c8 <Trajec+0x6b0>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003346:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800334a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800334e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003352:	edc7 7a01 	vstr	s15, [r7, #4]
	float a5 = (1 / (2 * (T*T*T*T*T))) * (12 * (Qf-Qi)) ;
 8003356:	4b9a      	ldr	r3, [pc, #616]	; (80035c0 <Trajec+0x6a8>)
 8003358:	ed93 7a00 	vldr	s14, [r3]
 800335c:	4b98      	ldr	r3, [pc, #608]	; (80035c0 <Trajec+0x6a8>)
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003366:	4b96      	ldr	r3, [pc, #600]	; (80035c0 <Trajec+0x6a8>)
 8003368:	edd3 7a00 	vldr	s15, [r3]
 800336c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003370:	4b93      	ldr	r3, [pc, #588]	; (80035c0 <Trajec+0x6a8>)
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800337a:	4b91      	ldr	r3, [pc, #580]	; (80035c0 <Trajec+0x6a8>)
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003384:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800338c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003390:	4b8d      	ldr	r3, [pc, #564]	; (80035c8 <Trajec+0x6b0>)
 8003392:	edd3 6a00 	vldr	s13, [r3]
 8003396:	4b8b      	ldr	r3, [pc, #556]	; (80035c4 <Trajec+0x6ac>)
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033a0:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80033a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ac:	edc7 7a00 	vstr	s15, [r7]

	if (micros() - StartTime < T*1000000)
 80033b0:	f000 fc26 	bl	8003c00 <micros>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	f7fd fcb8 	bl	8000d30 <__aeabi_ul2f>
 80033c0:	ee07 0a10 	vmov	s14, r0
 80033c4:	4b81      	ldr	r3, [pc, #516]	; (80035cc <Trajec+0x6b4>)
 80033c6:	edd3 7a00 	vldr	s15, [r3]
 80033ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033ce:	4b7c      	ldr	r3, [pc, #496]	; (80035c0 <Trajec+0x6a8>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80035d0 <Trajec+0x6b8>
 80033d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e4:	f140 8156 	bpl.w	8003694 <Trajec+0x77c>
	{
		if (micros() - Trajtimestamp > 1500)
 80033e8:	f000 fc0a 	bl	8003c00 <micros>
 80033ec:	4b79      	ldr	r3, [pc, #484]	; (80035d4 <Trajec+0x6bc>)
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	1a84      	subs	r4, r0, r2
 80033f4:	eb61 0503 	sbc.w	r5, r1, r3
 80033f8:	f240 53dd 	movw	r3, #1501	; 0x5dd
 80033fc:	429c      	cmp	r4, r3
 80033fe:	f175 0300 	sbcs.w	r3, r5, #0
 8003402:	f0c0 8147 	bcc.w	8003694 <Trajec+0x77c>
		{
			position = a0 + a1*tau + a2*tau*tau + a3*tau*tau*tau + a4*tau*tau*tau*tau + a5*tau*tau*tau*tau*tau; //rad
 8003406:	4b74      	ldr	r3, [pc, #464]	; (80035d8 <Trajec+0x6c0>)
 8003408:	ed93 7a00 	vldr	s14, [r3]
 800340c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003414:	edd7 7a05 	vldr	s15, [r7, #20]
 8003418:	ee37 7a27 	vadd.f32	s14, s14, s15
 800341c:	4b6e      	ldr	r3, [pc, #440]	; (80035d8 <Trajec+0x6c0>)
 800341e:	edd3 6a00 	vldr	s13, [r3]
 8003422:	edd7 7a03 	vldr	s15, [r7, #12]
 8003426:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800342a:	4b6b      	ldr	r3, [pc, #428]	; (80035d8 <Trajec+0x6c0>)
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003438:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <Trajec+0x6c0>)
 800343a:	edd3 6a00 	vldr	s13, [r3]
 800343e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003442:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003446:	4b64      	ldr	r3, [pc, #400]	; (80035d8 <Trajec+0x6c0>)
 8003448:	edd3 7a00 	vldr	s15, [r3]
 800344c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003450:	4b61      	ldr	r3, [pc, #388]	; (80035d8 <Trajec+0x6c0>)
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800345a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800345e:	4b5e      	ldr	r3, [pc, #376]	; (80035d8 <Trajec+0x6c0>)
 8003460:	edd3 6a00 	vldr	s13, [r3]
 8003464:	edd7 7a01 	vldr	s15, [r7, #4]
 8003468:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800346c:	4b5a      	ldr	r3, [pc, #360]	; (80035d8 <Trajec+0x6c0>)
 800346e:	edd3 7a00 	vldr	s15, [r3]
 8003472:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003476:	4b58      	ldr	r3, [pc, #352]	; (80035d8 <Trajec+0x6c0>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003480:	4b55      	ldr	r3, [pc, #340]	; (80035d8 <Trajec+0x6c0>)
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800348a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348e:	4b52      	ldr	r3, [pc, #328]	; (80035d8 <Trajec+0x6c0>)
 8003490:	edd3 6a00 	vldr	s13, [r3]
 8003494:	edd7 7a00 	vldr	s15, [r7]
 8003498:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800349c:	4b4e      	ldr	r3, [pc, #312]	; (80035d8 <Trajec+0x6c0>)
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034a6:	4b4c      	ldr	r3, [pc, #304]	; (80035d8 <Trajec+0x6c0>)
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034b0:	4b49      	ldr	r3, [pc, #292]	; (80035d8 <Trajec+0x6c0>)
 80034b2:	edd3 7a00 	vldr	s15, [r3]
 80034b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <Trajec+0x6c0>)
 80034bc:	edd3 7a00 	vldr	s15, [r3]
 80034c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c8:	4b44      	ldr	r3, [pc, #272]	; (80035dc <Trajec+0x6c4>)
 80034ca:	edc3 7a00 	vstr	s15, [r3]
			velocity = a1 + 2*a2*tau + 3*a3*tau*tau + 4*a4*tau*tau*tau + 5*a5*tau*tau*tau*tau; //rad/s
 80034ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80034d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80034d6:	4b40      	ldr	r3, [pc, #256]	; (80035d8 <Trajec+0x6c0>)
 80034d8:	edd3 7a00 	vldr	s15, [r3]
 80034dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80034e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ec:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80034f0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80034f4:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <Trajec+0x6c0>)
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034fe:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <Trajec+0x6c0>)
 8003500:	edd3 7a00 	vldr	s15, [r3]
 8003504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800350c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003510:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003514:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003518:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <Trajec+0x6c0>)
 800351a:	edd3 7a00 	vldr	s15, [r3]
 800351e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <Trajec+0x6c0>)
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800352c:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <Trajec+0x6c0>)
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003536:	ee37 7a27 	vadd.f32	s14, s14, s15
 800353a:	edd7 7a00 	vldr	s15, [r7]
 800353e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003542:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <Trajec+0x6c0>)
 8003548:	edd3 7a00 	vldr	s15, [r3]
 800354c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003550:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <Trajec+0x6c0>)
 8003552:	edd3 7a00 	vldr	s15, [r3]
 8003556:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800355a:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <Trajec+0x6c0>)
 800355c:	edd3 7a00 	vldr	s15, [r3]
 8003560:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003564:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <Trajec+0x6c0>)
 8003566:	edd3 7a00 	vldr	s15, [r3]
 800356a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800356e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <Trajec+0x6c8>)
 8003574:	edc3 7a00 	vstr	s15, [r3]
			acceleration = 2*a2 + 6*a3*tau + 12*a4*tau*tau + 20*a5*tau*tau*tau; //rad per secsquare
 8003578:	edd7 7a03 	vldr	s15, [r7, #12]
 800357c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003580:	edd7 7a02 	vldr	s15, [r7, #8]
 8003584:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8003588:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <Trajec+0x6c0>)
 800358e:	edd3 7a00 	vldr	s15, [r3]
 8003592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003596:	ee37 7a27 	vadd.f32	s14, s14, s15
 800359a:	edd7 7a01 	vldr	s15, [r7, #4]
 800359e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80035a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <Trajec+0x6c0>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035b0:	e018      	b.n	80035e4 <Trajec+0x6cc>
 80035b2:	bf00      	nop
 80035b4:	20000378 	.word	0x20000378
 80035b8:	20000360 	.word	0x20000360
 80035bc:	2000035c 	.word	0x2000035c
 80035c0:	20000364 	.word	0x20000364
 80035c4:	20000354 	.word	0x20000354
 80035c8:	20000358 	.word	0x20000358
 80035cc:	2000033c 	.word	0x2000033c
 80035d0:	49742400 	.word	0x49742400
 80035d4:	20000380 	.word	0x20000380
 80035d8:	20000368 	.word	0x20000368
 80035dc:	20000348 	.word	0x20000348
 80035e0:	20000344 	.word	0x20000344
 80035e4:	4b44      	ldr	r3, [pc, #272]	; (80036f8 <Trajec+0x7e0>)
 80035e6:	edd3 7a00 	vldr	s15, [r3]
 80035ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035f2:	edd7 7a00 	vldr	s15, [r7]
 80035f6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80035fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80035fe:	4b3e      	ldr	r3, [pc, #248]	; (80036f8 <Trajec+0x7e0>)
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <Trajec+0x7e0>)
 800360a:	edd3 7a00 	vldr	s15, [r3]
 800360e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003612:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <Trajec+0x7e0>)
 8003614:	edd3 7a00 	vldr	s15, [r3]
 8003618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800361c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003620:	4b36      	ldr	r3, [pc, #216]	; (80036fc <Trajec+0x7e4>)
 8003622:	edc3 7a00 	vstr	s15, [r3]

			position = position * 180 / 3.1415 ; //degree
 8003626:	4b36      	ldr	r3, [pc, #216]	; (8003700 <Trajec+0x7e8>)
 8003628:	edd3 7a00 	vldr	s15, [r3]
 800362c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003704 <Trajec+0x7ec>
 8003630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003634:	ee17 0a90 	vmov	r0, s15
 8003638:	f7fc ff32 	bl	80004a0 <__aeabi_f2d>
 800363c:	a32a      	add	r3, pc, #168	; (adr r3, 80036e8 <Trajec+0x7d0>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	f7fd f8af 	bl	80007a4 <__aeabi_ddiv>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	f7fd fa57 	bl	8000b00 <__aeabi_d2f>
 8003652:	4603      	mov	r3, r0
 8003654:	4a2a      	ldr	r2, [pc, #168]	; (8003700 <Trajec+0x7e8>)
 8003656:	6013      	str	r3, [r2, #0]
			velocity = velocity * 9.549297; //rpm
 8003658:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <Trajec+0x7f0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fc ff1f 	bl	80004a0 <__aeabi_f2d>
 8003662:	a323      	add	r3, pc, #140	; (adr r3, 80036f0 <Trajec+0x7d8>)
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	f7fc ff72 	bl	8000550 <__aeabi_dmul>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	f7fd fa44 	bl	8000b00 <__aeabi_d2f>
 8003678:	4603      	mov	r3, r0
 800367a:	4a23      	ldr	r2, [pc, #140]	; (8003708 <Trajec+0x7f0>)
 800367c:	6013      	str	r3, [r2, #0]
			Trajtimestamp = micros() ;
 800367e:	f000 fabf 	bl	8003c00 <micros>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4921      	ldr	r1, [pc, #132]	; (800370c <Trajec+0x7f4>)
 8003688:	e9c1 2300 	strd	r2, r3, [r1]
			request = velocity ;
 800368c:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <Trajec+0x7f0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <Trajec+0x7f8>)
 8003692:	6013      	str	r3, [r2, #0]
		}
	}
	if (micros() - StartTime > (T*1000000)+500000)
 8003694:	f000 fab4 	bl	8003c00 <micros>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	f7fd fb46 	bl	8000d30 <__aeabi_ul2f>
 80036a4:	ee07 0a10 	vmov	s14, r0
 80036a8:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <Trajec+0x7fc>)
 80036aa:	edd3 7a00 	vldr	s15, [r3]
 80036ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <Trajec+0x800>)
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	eddf 6a18 	vldr	s13, [pc, #96]	; 800371c <Trajec+0x804>
 80036bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003720 <Trajec+0x808>
 80036c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d0:	dc00      	bgt.n	80036d4 <Trajec+0x7bc>
	{
		FinishedTraj = 1;
	}

}
 80036d2:	e002      	b.n	80036da <Trajec+0x7c2>
		FinishedTraj = 1;
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <Trajec+0x80c>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
}
 80036da:	bf00      	nop
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036e4:	f3af 8000 	nop.w
 80036e8:	c083126f 	.word	0xc083126f
 80036ec:	400921ca 	.word	0x400921ca
 80036f0:	74d594f2 	.word	0x74d594f2
 80036f4:	4023193d 	.word	0x4023193d
 80036f8:	20000368 	.word	0x20000368
 80036fc:	2000034c 	.word	0x2000034c
 8003700:	20000348 	.word	0x20000348
 8003704:	43340000 	.word	0x43340000
 8003708:	20000344 	.word	0x20000344
 800370c:	20000380 	.word	0x20000380
 8003710:	200004ec 	.word	0x200004ec
 8003714:	2000033c 	.word	0x2000033c
 8003718:	20000364 	.word	0x20000364
 800371c:	49742400 	.word	0x49742400
 8003720:	48f42400 	.word	0x48f42400
 8003724:	2000038c 	.word	0x2000038c

08003728 <PIDinit>:

void PIDinit()
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
	preErr1 = 0 ;
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <PIDinit+0x44>)
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
	preErr2 = 0 ;
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <PIDinit+0x48>)
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
	PreviousPWM = 0 ;
 800373c:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <PIDinit+0x4c>)
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
	PWMPercent = 0 ;
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <PIDinit+0x50>)
 8003746:	2200      	movs	r2, #0
 8003748:	801a      	strh	r2, [r3, #0]
	P = 0 ;
 800374a:	4b0c      	ldr	r3, [pc, #48]	; (800377c <PIDinit+0x54>)
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
	I = 0 ;
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <PIDinit+0x58>)
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
	D = 0 ;
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <PIDinit+0x5c>)
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	20000324 	.word	0x20000324
 8003770:	20000328 	.word	0x20000328
 8003774:	20000320 	.word	0x20000320
 8003778:	200004f0 	.word	0x200004f0
 800377c:	20000330 	.word	0x20000330
 8003780:	20000334 	.word	0x20000334
 8003784:	20000338 	.word	0x20000338

08003788 <PID>:

void PID()
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
	float req,Vel ;
	if (request < 0)
 800378e:	4b4e      	ldr	r3, [pc, #312]	; (80038c8 <PID+0x140>)
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379c:	d510      	bpl.n	80037c0 <PID+0x38>
	{
		req = - request ;
 800379e:	4b4a      	ldr	r3, [pc, #296]	; (80038c8 <PID+0x140>)
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	eef1 7a67 	vneg.f32	s15, s15
 80037a8:	edc7 7a03 	vstr	s15, [r7, #12]
		Vel = - VelocityRPM ;
 80037ac:	4b47      	ldr	r3, [pc, #284]	; (80038cc <PID+0x144>)
 80037ae:	edd3 7a00 	vldr	s15, [r3]
 80037b2:	eef1 7a67 	vneg.f32	s15, s15
 80037b6:	edc7 7a02 	vstr	s15, [r7, #8]
		Direction = 1 ;
 80037ba:	4b45      	ldr	r3, [pc, #276]	; (80038d0 <PID+0x148>)
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
	}
	if (request > 0)
 80037c0:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <PID+0x140>)
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ce:	dd08      	ble.n	80037e2 <PID+0x5a>
	{
		req = request ;
 80037d0:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <PID+0x140>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]
		Vel = VelocityRPM ;
 80037d6:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <PID+0x144>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60bb      	str	r3, [r7, #8]
		Direction = 0 ;
 80037dc:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <PID+0x148>)
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
	}
	float error = req - Vel;
 80037e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80037e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ee:	edc7 7a01 	vstr	s15, [r7, #4]
	DeltaU = ((P+I+D)*error) - ((P+(2*D))*preErr1) + (D*preErr2) ;
 80037f2:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <PID+0x14c>)
 80037f4:	ed93 7a00 	vldr	s14, [r3]
 80037f8:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <PID+0x150>)
 80037fa:	edd3 7a00 	vldr	s15, [r3]
 80037fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003802:	4b36      	ldr	r3, [pc, #216]	; (80038dc <PID+0x154>)
 8003804:	edd3 7a00 	vldr	s15, [r3]
 8003808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800380c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003814:	4b31      	ldr	r3, [pc, #196]	; (80038dc <PID+0x154>)
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800381e:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <PID+0x14c>)
 8003820:	edd3 7a00 	vldr	s15, [r3]
 8003824:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003828:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <PID+0x158>)
 800382a:	edd3 7a00 	vldr	s15, [r3]
 800382e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003832:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003836:	4b29      	ldr	r3, [pc, #164]	; (80038dc <PID+0x154>)
 8003838:	edd3 6a00 	vldr	s13, [r3]
 800383c:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <PID+0x15c>)
 800383e:	edd3 7a00 	vldr	s15, [r3]
 8003842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384a:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <PID+0x160>)
 800384c:	edc3 7a00 	vstr	s15, [r3]
	PWMPercent = PreviousPWM + DeltaU + InitialPWM ;
 8003850:	4b26      	ldr	r3, [pc, #152]	; (80038ec <PID+0x164>)
 8003852:	ed93 7a00 	vldr	s14, [r3]
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <PID+0x160>)
 8003858:	edd3 7a00 	vldr	s15, [r3]
 800385c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003860:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <PID+0x168>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800386c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003874:	ee17 3a90 	vmov	r3, s15
 8003878:	b29a      	uxth	r2, r3
 800387a:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <PID+0x16c>)
 800387c:	801a      	strh	r2, [r3, #0]
	if (PWMPercent > 50000)
 800387e:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <PID+0x16c>)
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003886:	4293      	cmp	r3, r2
 8003888:	d903      	bls.n	8003892 <PID+0x10a>
	{
		PWMPercent = 50000;
 800388a:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <PID+0x16c>)
 800388c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003890:	801a      	strh	r2, [r3, #0]
	}
	if (PWMPercent < 0)
	{
		PWMPercent = 0 ;
	}
	PreviousPWM = PWMPercent - InitialPWM ;
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <PID+0x16c>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <PID+0x168>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <PID+0x164>)
 80038a8:	edc3 7a00 	vstr	s15, [r3]
	preErr2 = preErr1 ;
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <PID+0x158>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <PID+0x15c>)
 80038b2:	6013      	str	r3, [r2, #0]
	preErr1 = error ;
 80038b4:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <PID+0x158>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6013      	str	r3, [r2, #0]

}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	200004ec 	.word	0x200004ec
 80038cc:	20000500 	.word	0x20000500
 80038d0:	2000050c 	.word	0x2000050c
 80038d4:	20000330 	.word	0x20000330
 80038d8:	20000334 	.word	0x20000334
 80038dc:	20000338 	.word	0x20000338
 80038e0:	20000324 	.word	0x20000324
 80038e4:	20000328 	.word	0x20000328
 80038e8:	2000032c 	.word	0x2000032c
 80038ec:	20000320 	.word	0x20000320
 80038f0:	20000000 	.word	0x20000000
 80038f4:	200004f0 	.word	0x200004f0

080038f8 <Acceleration>:
	PWMPercent = (PP*error) + (II*SUM) + (DD*(error - PPreerror)) ;
	PPreerror = error;
}

float Acceleration()
{
 80038f8:	b5b0      	push	{r4, r5, r7, lr}
 80038fa:	ed2d 8b02 	vpush	{d8}
 80038fe:	af00      	add	r7, sp, #0
	if (micros() - TimestampVelocity >= 1000)
 8003900:	f000 f97e 	bl	8003c00 <micros>
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <Acceleration+0x84>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	1a84      	subs	r4, r0, r2
 800390c:	eb61 0503 	sbc.w	r5, r1, r3
 8003910:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8003914:	f175 0300 	sbcs.w	r3, r5, #0
 8003918:	d325      	bcc.n	8003966 <Acceleration+0x6e>
	{
		TimestampVelocity = micros();
 800391a:	f000 f971 	bl	8003c00 <micros>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4916      	ldr	r1, [pc, #88]	; (800397c <Acceleration+0x84>)
 8003924:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderAcc = (EncoderAcc * 499 + EncoderAcceleration_Update()) / 500.0 ;
 8003928:	4b15      	ldr	r3, [pc, #84]	; (8003980 <Acceleration+0x88>)
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003984 <Acceleration+0x8c>
 8003932:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003936:	f000 f8b7 	bl	8003aa8 <EncoderAcceleration_Update>
 800393a:	eef0 7a40 	vmov.f32	s15, s0
 800393e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003942:	ee17 0a90 	vmov	r0, s15
 8003946:	f7fc fdab 	bl	80004a0 <__aeabi_f2d>
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <Acceleration+0x90>)
 8003950:	f7fc ff28 	bl	80007a4 <__aeabi_ddiv>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	f7fd f8d0 	bl	8000b00 <__aeabi_d2f>
 8003960:	4603      	mov	r3, r0
 8003962:	4a07      	ldr	r2, [pc, #28]	; (8003980 <Acceleration+0x88>)
 8003964:	6013      	str	r3, [r2, #0]
	}
	return EncoderAcc;
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <Acceleration+0x88>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	ee07 3a90 	vmov	s15, r3
}
 800396e:	eeb0 0a67 	vmov.f32	s0, s15
 8003972:	46bd      	mov	sp, r7
 8003974:	ecbd 8b02 	vpop	{d8}
 8003978:	bdb0      	pop	{r4, r5, r7, pc}
 800397a:	bf00      	nop
 800397c:	200003b0 	.word	0x200003b0
 8003980:	200003bc 	.word	0x200003bc
 8003984:	43f98000 	.word	0x43f98000
 8003988:	407f4000 	.word	0x407f4000

0800398c <Velocity>:
float Velocity()
{
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	ed2d 8b02 	vpush	{d8}
 8003992:	af00      	add	r7, sp, #0
	  if (micros() - TimestampEncoder >= 100)
 8003994:	f000 f934 	bl	8003c00 <micros>
 8003998:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <Velocity+0xb0>)
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	1a84      	subs	r4, r0, r2
 80039a0:	eb61 0503 	sbc.w	r5, r1, r3
 80039a4:	2c64      	cmp	r4, #100	; 0x64
 80039a6:	f175 0300 	sbcs.w	r3, r5, #0
 80039aa:	d325      	bcc.n	80039f8 <Velocity+0x6c>
	  {
		  TimestampEncoder = micros();
 80039ac:	f000 f928 	bl	8003c00 <micros>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4921      	ldr	r1, [pc, #132]	; (8003a3c <Velocity+0xb0>)
 80039b6:	e9c1 2300 	strd	r2, r3, [r1]
		  EncoderVel = (EncoderVel * 499 + EncoderVelocity_Update()) / 500.0;
 80039ba:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <Velocity+0xb4>)
 80039bc:	edd3 7a00 	vldr	s15, [r3]
 80039c0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003a44 <Velocity+0xb8>
 80039c4:	ee27 8a87 	vmul.f32	s16, s15, s14
 80039c8:	f000 f8c6 	bl	8003b58 <EncoderVelocity_Update>
 80039cc:	eef0 7a40 	vmov.f32	s15, s0
 80039d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80039d4:	ee17 0a90 	vmov	r0, s15
 80039d8:	f7fc fd62 	bl	80004a0 <__aeabi_f2d>
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <Velocity+0xbc>)
 80039e2:	f7fc fedf 	bl	80007a4 <__aeabi_ddiv>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fd f887 	bl	8000b00 <__aeabi_d2f>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <Velocity+0xb4>)
 80039f6:	6013      	str	r3, [r2, #0]
	  }
	  return EncoderVel * 60.0 / 2048.0; //pulse per sec to rpm
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <Velocity+0xb4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fc fd4f 	bl	80004a0 <__aeabi_f2d>
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <Velocity+0xc0>)
 8003a08:	f7fc fda2 	bl	8000550 <__aeabi_dmul>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <Velocity+0xc4>)
 8003a1a:	f7fc fec3 	bl	80007a4 <__aeabi_ddiv>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	f7fd f86b 	bl	8000b00 <__aeabi_d2f>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	ee07 3a90 	vmov	s15, r3
}
 8003a30:	eeb0 0a67 	vmov.f32	s0, s15
 8003a34:	46bd      	mov	sp, r7
 8003a36:	ecbd 8b02 	vpop	{d8}
 8003a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a3c:	200003a8 	.word	0x200003a8
 8003a40:	200003b8 	.word	0x200003b8
 8003a44:	43f98000 	.word	0x43f98000
 8003a48:	407f4000 	.word	0x407f4000
 8003a4c:	404e0000 	.word	0x404e0000
 8003a50:	40a00000 	.word	0x40a00000

08003a54 <PWMgeneration>:
void PWMgeneration()
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
	  if (Direction == 0)
 8003a58:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <PWMgeneration+0x48>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <PWMgeneration+0x16>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50000);
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <PWMgeneration+0x4c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003a68:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 1)
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <PWMgeneration+0x48>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d103      	bne.n	8003a7a <PWMgeneration+0x26>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <PWMgeneration+0x4c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 2)
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <PWMgeneration+0x48>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d104      	bne.n	8003a8c <PWMgeneration+0x38>
	  {
		  PIDinit() ;
 8003a82:	f7ff fe51 	bl	8003728 <PIDinit>
		  PWMPercent = 0 ;
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <PWMgeneration+0x50>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	801a      	strh	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMPercent);
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <PWMgeneration+0x50>)
 8003a8e:	881a      	ldrh	r2, [r3, #0]
 8003a90:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <PWMgeneration+0x4c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000050c 	.word	0x2000050c
 8003aa0:	20000100 	.word	0x20000100
 8003aa4:	200004f0 	.word	0x200004f0

08003aa8 <EncoderAcceleration_Update>:
#define  HTIM_ENCODER htim3
#define  MAX_SUBPOSITION_OVERFLOW 1024
#define  MAX_ENCODER_PERIOD 2048

float EncoderAcceleration_Update()
{
 8003aa8:	b5b0      	push	{r4, r5, r7, lr}
 8003aaa:	ed2d 8b02 	vpush	{d8}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
	//Save Last state
	static float EncoderLastVelocity = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	float EncoderNowVelocity = VelocityRPM*	0.10472;
 8003ab2:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <EncoderAcceleration_Update+0xa0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fc fcf2 	bl	80004a0 <__aeabi_f2d>
 8003abc:	a320      	add	r3, pc, #128	; (adr r3, 8003b40 <EncoderAcceleration_Update+0x98>)
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	f7fc fd45 	bl	8000550 <__aeabi_dmul>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	f7fd f817 	bl	8000b00 <__aeabi_d2f>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	61fb      	str	r3, [r7, #28]
	uint64_t EncoderNowTimestamp = micros();
 8003ad6:	f000 f893 	bl	8003c00 <micros>
 8003ada:	e9c7 0104 	strd	r0, r1, [r7, #16]

	float EncoderVelocityDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8003ade:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <EncoderAcceleration_Update+0xa4>)
 8003ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ae8:	1a84      	subs	r4, r0, r2
 8003aea:	eb61 0503 	sbc.w	r5, r1, r3
 8003aee:	e9c7 4502 	strd	r4, r5, [r7, #8]
	EncoderVelocityDiff = EncoderNowVelocity - EncoderLastVelocity;
 8003af2:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <EncoderAcceleration_Update+0xa8>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b00:	edc7 7a01 	vstr	s15, [r7, #4]

	//Update Position and time
	EncoderLastVelocity = EncoderNowVelocity;
 8003b04:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <EncoderAcceleration_Update+0xa8>)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8003b0a:	4910      	ldr	r1, [pc, #64]	; (8003b4c <EncoderAcceleration_Update+0xa4>)
 8003b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b10:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderVelocityDiff * 1000000) / (float) EncoderTimeDiff;
 8003b14:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b18:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003b54 <EncoderAcceleration_Update+0xac>
 8003b1c:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003b20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b24:	f7fd f904 	bl	8000d30 <__aeabi_ul2f>
 8003b28:	ee07 0a10 	vmov	s14, r0
 8003b2c:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 8003b30:	eeb0 0a67 	vmov.f32	s0, s15
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	ecbd 8b02 	vpop	{d8}
 8003b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	0f3cb3e5 	.word	0x0f3cb3e5
 8003b44:	3fbaceee 	.word	0x3fbaceee
 8003b48:	20000500 	.word	0x20000500
 8003b4c:	20000528 	.word	0x20000528
 8003b50:	20000530 	.word	0x20000530
 8003b54:	49742400 	.word	0x49742400

08003b58 <EncoderVelocity_Update>:

float EncoderVelocity_Update()
{
 8003b58:	b5b0      	push	{r4, r5, r7, lr}
 8003b5a:	ed2d 8b02 	vpush	{d8}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8003b62:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <EncoderVelocity_Update+0x98>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8003b6a:	f000 f849 	bl	8003c00 <micros>
 8003b6e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <EncoderVelocity_Update+0x9c>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b7c:	1a84      	subs	r4, r0, r2
 8003b7e:	eb61 0503 	sbc.w	r5, r1, r3
 8003b82:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8003b86:	4b1c      	ldr	r3, [pc, #112]	; (8003bf8 <EncoderVelocity_Update+0xa0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b96:	db04      	blt.n	8003ba2 <EncoderVelocity_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e007      	b.n	8003bb2 <EncoderVelocity_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003ba8:	dc03      	bgt.n	8003bb2 <EncoderVelocity_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb0:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8003bb2:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <EncoderVelocity_Update+0xa0>)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8003bb8:	490e      	ldr	r1, [pc, #56]	; (8003bf4 <EncoderVelocity_Update+0x9c>)
 8003bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bbe:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	4a0d      	ldr	r2, [pc, #52]	; (8003bfc <EncoderVelocity_Update+0xa4>)
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bd6:	f7fd f8ab 	bl	8000d30 <__aeabi_ul2f>
 8003bda:	ee07 0a10 	vmov	s14, r0
 8003bde:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 8003be2:	eeb0 0a67 	vmov.f32	s0, s15
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	ecbd 8b02 	vpop	{d8}
 8003bee:	bdb0      	pop	{r4, r5, r7, pc}
 8003bf0:	20000190 	.word	0x20000190
 8003bf4:	20000538 	.word	0x20000538
 8003bf8:	20000540 	.word	0x20000540
 8003bfc:	000f4240 	.word	0x000f4240

08003c00 <micros>:
	{
		_micros += 4294967295;
	}
}
uint64_t micros()
{
 8003c00:	b4b0      	push	{r4, r5, r7}
 8003c02:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <micros+0x2c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <micros+0x30>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	1884      	adds	r4, r0, r2
 8003c18:	eb41 0503 	adc.w	r5, r1, r3
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	462b      	mov	r3, r5
}
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bcb0      	pop	{r4, r5, r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000148 	.word	0x20000148
 8003c30:	200004f8 	.word	0x200004f8

08003c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c38:	b672      	cpsid	i
}
 8003c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c3c:	e7fe      	b.n	8003c3c <Error_Handler+0x8>
	...

08003c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	4a0f      	ldr	r2, [pc, #60]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c54:	6453      	str	r3, [r2, #68]	; 0x44
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	603b      	str	r3, [r7, #0]
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <HAL_MspInit+0x4c>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003c7e:	2007      	movs	r0, #7
 8003c80:	f000 fbdc 	bl	800443c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800

08003c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <HAL_I2C_MspInit+0x84>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d12b      	bne.n	8003d0a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <HAL_I2C_MspInit+0x88>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a17      	ldr	r2, [pc, #92]	; (8003d18 <HAL_I2C_MspInit+0x88>)
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <HAL_I2C_MspInit+0x88>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cce:	23c0      	movs	r3, #192	; 0xc0
 8003cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cd2:	2312      	movs	r3, #18
 8003cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cde:	2304      	movs	r3, #4
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce2:	f107 0314 	add.w	r3, r7, #20
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	480c      	ldr	r0, [pc, #48]	; (8003d1c <HAL_I2C_MspInit+0x8c>)
 8003cea:	f000 ffeb 	bl	8004cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_I2C_MspInit+0x88>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <HAL_I2C_MspInit+0x88>)
 8003cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_I2C_MspInit+0x88>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d0a:	bf00      	nop
 8003d0c:	3728      	adds	r7, #40	; 0x28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40005400 	.word	0x40005400
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40020400 	.word	0x40020400

08003d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <HAL_TIM_Base_MspInit+0x64>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <HAL_TIM_Base_MspInit+0x68>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <HAL_TIM_Base_MspInit+0x68>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6453      	str	r3, [r2, #68]	; 0x44
 8003d42:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <HAL_TIM_Base_MspInit+0x68>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d4e:	e012      	b.n	8003d76 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d58:	d10d      	bne.n	8003d76 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <HAL_TIM_Base_MspInit+0x68>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <HAL_TIM_Base_MspInit+0x68>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6a:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <HAL_TIM_Base_MspInit+0x68>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40023800 	.word	0x40023800

08003d8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_TIM_Encoder_MspInit+0x84>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d12b      	bne.n	8003e06 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_TIM_Encoder_MspInit+0x88>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <HAL_TIM_Encoder_MspInit+0x88>)
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_TIM_Encoder_MspInit+0x88>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <HAL_TIM_Encoder_MspInit+0x88>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	4a10      	ldr	r2, [pc, #64]	; (8003e14 <HAL_TIM_Encoder_MspInit+0x88>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dda:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <HAL_TIM_Encoder_MspInit+0x88>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003de6:	23c0      	movs	r3, #192	; 0xc0
 8003de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dea:	2302      	movs	r3, #2
 8003dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df2:	2300      	movs	r3, #0
 8003df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003df6:	2302      	movs	r3, #2
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfa:	f107 0314 	add.w	r3, r7, #20
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4805      	ldr	r0, [pc, #20]	; (8003e18 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003e02:	f000 ff5f 	bl	8004cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003e06:	bf00      	nop
 8003e08:	3728      	adds	r7, #40	; 0x28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020000 	.word	0x40020000

08003e1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e24:	f107 030c 	add.w	r3, r7, #12
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <HAL_TIM_MspPostInit+0x68>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d11e      	bne.n	8003e7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <HAL_TIM_MspPostInit+0x6c>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a10      	ldr	r2, [pc, #64]	; (8003e88 <HAL_TIM_MspPostInit+0x6c>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <HAL_TIM_MspPostInit+0x6c>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e60:	2302      	movs	r3, #2
 8003e62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e70:	f107 030c 	add.w	r3, r7, #12
 8003e74:	4619      	mov	r1, r3
 8003e76:	4805      	ldr	r0, [pc, #20]	; (8003e8c <HAL_TIM_MspPostInit+0x70>)
 8003e78:	f000 ff24 	bl	8004cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e7c:	bf00      	nop
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40020000 	.word	0x40020000

08003e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e98:	f107 0314 	add.w	r3, r7, #20
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a4c      	ldr	r2, [pc, #304]	; (8003fe0 <HAL_UART_MspInit+0x150>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	f040 8091 	bne.w	8003fd6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	4b4a      	ldr	r3, [pc, #296]	; (8003fe4 <HAL_UART_MspInit+0x154>)
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	4a49      	ldr	r2, [pc, #292]	; (8003fe4 <HAL_UART_MspInit+0x154>)
 8003ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec4:	4b47      	ldr	r3, [pc, #284]	; (8003fe4 <HAL_UART_MspInit+0x154>)
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_UART_MspInit+0x154>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	4a42      	ldr	r2, [pc, #264]	; (8003fe4 <HAL_UART_MspInit+0x154>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee0:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <HAL_UART_MspInit+0x154>)
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003eec:	230c      	movs	r3, #12
 8003eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003efc:	2307      	movs	r3, #7
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4619      	mov	r1, r3
 8003f06:	4838      	ldr	r0, [pc, #224]	; (8003fe8 <HAL_UART_MspInit+0x158>)
 8003f08:	f000 fedc 	bl	8004cc4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003f0c:	4b37      	ldr	r3, [pc, #220]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f0e:	4a38      	ldr	r2, [pc, #224]	; (8003ff0 <HAL_UART_MspInit+0x160>)
 8003f10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f18:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f1a:	4b34      	ldr	r3, [pc, #208]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f20:	4b32      	ldr	r3, [pc, #200]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f26:	4b31      	ldr	r3, [pc, #196]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f2e:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f34:	4b2d      	ldr	r3, [pc, #180]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003f3a:	4b2c      	ldr	r3, [pc, #176]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f40:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f42:	4b2a      	ldr	r3, [pc, #168]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f48:	4b28      	ldr	r3, [pc, #160]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f4e:	4827      	ldr	r0, [pc, #156]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f50:	f000 fab6 	bl	80044c0 <HAL_DMA_Init>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003f5a:	f7ff fe6b 	bl	8003c34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a22      	ldr	r2, [pc, #136]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
 8003f64:	4a21      	ldr	r2, [pc, #132]	; (8003fec <HAL_UART_MspInit+0x15c>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003f6c:	4a22      	ldr	r2, [pc, #136]	; (8003ff8 <HAL_UART_MspInit+0x168>)
 8003f6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003f70:	4b20      	ldr	r3, [pc, #128]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003f72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f76:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f78:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003f7a:	2240      	movs	r2, #64	; 0x40
 8003f7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003f98:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003faa:	4812      	ldr	r0, [pc, #72]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003fac:	f000 fa88 	bl	80044c0 <HAL_DMA_Init>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003fb6:	f7ff fe3d 	bl	8003c34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a0d      	ldr	r2, [pc, #52]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003fbe:	635a      	str	r2, [r3, #52]	; 0x34
 8003fc0:	4a0c      	ldr	r2, [pc, #48]	; (8003ff4 <HAL_UART_MspInit+0x164>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2100      	movs	r1, #0
 8003fca:	2026      	movs	r0, #38	; 0x26
 8003fcc:	f000 fa41 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003fd0:	2026      	movs	r0, #38	; 0x26
 8003fd2:	f000 fa5a 	bl	800448a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fd6:	bf00      	nop
 8003fd8:	3728      	adds	r7, #40	; 0x28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40004400 	.word	0x40004400
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40020000 	.word	0x40020000
 8003fec:	2000021c 	.word	0x2000021c
 8003ff0:	40026088 	.word	0x40026088
 8003ff4:	2000027c 	.word	0x2000027c
 8003ff8:	400260a0 	.word	0x400260a0

08003ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004000:	e7fe      	b.n	8004000 <NMI_Handler+0x4>

08004002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004006:	e7fe      	b.n	8004006 <HardFault_Handler+0x4>

08004008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800400c:	e7fe      	b.n	800400c <MemManage_Handler+0x4>

0800400e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004012:	e7fe      	b.n	8004012 <BusFault_Handler+0x4>

08004014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004018:	e7fe      	b.n	8004018 <UsageFault_Handler+0x4>

0800401a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004048:	f000 f8e4 	bl	8004214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800404c:	bf00      	nop
 800404e:	bd80      	pop	{r7, pc}

08004050 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004054:	4802      	ldr	r0, [pc, #8]	; (8004060 <DMA1_Stream5_IRQHandler+0x10>)
 8004056:	f000 fbcb 	bl	80047f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	2000021c 	.word	0x2000021c

08004064 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004068:	4802      	ldr	r0, [pc, #8]	; (8004074 <DMA1_Stream6_IRQHandler+0x10>)
 800406a:	f000 fbc1 	bl	80047f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	2000027c 	.word	0x2000027c

08004078 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800407c:	4802      	ldr	r0, [pc, #8]	; (8004088 <USART2_IRQHandler+0x10>)
 800407e:	f003 fa17 	bl	80074b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200001d8 	.word	0x200001d8

0800408c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004094:	4a14      	ldr	r2, [pc, #80]	; (80040e8 <_sbrk+0x5c>)
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <_sbrk+0x60>)
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040a0:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <_sbrk+0x64>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <_sbrk+0x64>)
 80040aa:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <_sbrk+0x68>)
 80040ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040ae:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <_sbrk+0x64>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d207      	bcs.n	80040cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040bc:	f004 faf0 	bl	80086a0 <__errno>
 80040c0:	4603      	mov	r3, r0
 80040c2:	220c      	movs	r2, #12
 80040c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	e009      	b.n	80040e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <_sbrk+0x64>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <_sbrk+0x64>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	4a05      	ldr	r2, [pc, #20]	; (80040f0 <_sbrk+0x64>)
 80040dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040de:	68fb      	ldr	r3, [r7, #12]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20020000 	.word	0x20020000
 80040ec:	00000400 	.word	0x00000400
 80040f0:	20000544 	.word	0x20000544
 80040f4:	20000560 	.word	0x20000560

080040f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <SystemInit+0x20>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	4a05      	ldr	r2, [pc, #20]	; (8004118 <SystemInit+0x20>)
 8004104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	e000ed00 	.word	0xe000ed00

0800411c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800411c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004154 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004120:	480d      	ldr	r0, [pc, #52]	; (8004158 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004122:	490e      	ldr	r1, [pc, #56]	; (800415c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004124:	4a0e      	ldr	r2, [pc, #56]	; (8004160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004128:	e002      	b.n	8004130 <LoopCopyDataInit>

0800412a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800412a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800412c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800412e:	3304      	adds	r3, #4

08004130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004134:	d3f9      	bcc.n	800412a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004136:	4a0b      	ldr	r2, [pc, #44]	; (8004164 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004138:	4c0b      	ldr	r4, [pc, #44]	; (8004168 <LoopFillZerobss+0x26>)
  movs r3, #0
 800413a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800413c:	e001      	b.n	8004142 <LoopFillZerobss>

0800413e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800413e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004140:	3204      	adds	r2, #4

08004142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004144:	d3fb      	bcc.n	800413e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004146:	f7ff ffd7 	bl	80040f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800414a:	f004 faaf 	bl	80086ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800414e:	f7fc ffb7 	bl	80010c0 <main>
  bx  lr    
 8004152:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004154:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800415c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8004160:	08008ab4 	.word	0x08008ab4
  ldr r2, =_sbss
 8004164:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8004168:	2000055c 	.word	0x2000055c

0800416c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800416c:	e7fe      	b.n	800416c <ADC_IRQHandler>
	...

08004170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004174:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <HAL_Init+0x40>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <HAL_Init+0x40>)
 800417a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800417e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_Init+0x40>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <HAL_Init+0x40>)
 8004186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800418a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800418c:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <HAL_Init+0x40>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a07      	ldr	r2, [pc, #28]	; (80041b0 <HAL_Init+0x40>)
 8004192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004198:	2003      	movs	r0, #3
 800419a:	f000 f94f 	bl	800443c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800419e:	2000      	movs	r0, #0
 80041a0:	f000 f808 	bl	80041b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041a4:	f7ff fd4c 	bl	8003c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023c00 	.word	0x40023c00

080041b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041bc:	4b12      	ldr	r3, [pc, #72]	; (8004208 <HAL_InitTick+0x54>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b12      	ldr	r3, [pc, #72]	; (800420c <HAL_InitTick+0x58>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	4619      	mov	r1, r3
 80041c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f967 	bl	80044a6 <HAL_SYSTICK_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e00e      	b.n	8004200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b0f      	cmp	r3, #15
 80041e6:	d80a      	bhi.n	80041fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041e8:	2200      	movs	r2, #0
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	f000 f92f 	bl	8004452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041f4:	4a06      	ldr	r2, [pc, #24]	; (8004210 <HAL_InitTick+0x5c>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	2000001c 	.word	0x2000001c
 800420c:	20000024 	.word	0x20000024
 8004210:	20000020 	.word	0x20000020

08004214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_IncTick+0x20>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <HAL_IncTick+0x24>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4413      	add	r3, r2
 8004224:	4a04      	ldr	r2, [pc, #16]	; (8004238 <HAL_IncTick+0x24>)
 8004226:	6013      	str	r3, [r2, #0]
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000024 	.word	0x20000024
 8004238:	20000548 	.word	0x20000548

0800423c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  return uwTick;
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <HAL_GetTick+0x14>)
 8004242:	681b      	ldr	r3, [r3, #0]
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000548 	.word	0x20000548

08004254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800425c:	f7ff ffee 	bl	800423c <HAL_GetTick>
 8004260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d005      	beq.n	800427a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <HAL_Delay+0x44>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800427a:	bf00      	nop
 800427c:	f7ff ffde 	bl	800423c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	429a      	cmp	r2, r3
 800428a:	d8f7      	bhi.n	800427c <HAL_Delay+0x28>
  {
  }
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000024 	.word	0x20000024

0800429c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <__NVIC_SetPriorityGrouping+0x44>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042b8:	4013      	ands	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ce:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <__NVIC_SetPriorityGrouping+0x44>)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	60d3      	str	r3, [r2, #12]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	e000ed00 	.word	0xe000ed00

080042e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042e8:	4b04      	ldr	r3, [pc, #16]	; (80042fc <__NVIC_GetPriorityGrouping+0x18>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	0a1b      	lsrs	r3, r3, #8
 80042ee:	f003 0307 	and.w	r3, r3, #7
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	e000ed00 	.word	0xe000ed00

08004300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	2b00      	cmp	r3, #0
 8004310:	db0b      	blt.n	800432a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	f003 021f 	and.w	r2, r3, #31
 8004318:	4907      	ldr	r1, [pc, #28]	; (8004338 <__NVIC_EnableIRQ+0x38>)
 800431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2001      	movs	r0, #1
 8004322:	fa00 f202 	lsl.w	r2, r0, r2
 8004326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	e000e100 	.word	0xe000e100

0800433c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	6039      	str	r1, [r7, #0]
 8004346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434c:	2b00      	cmp	r3, #0
 800434e:	db0a      	blt.n	8004366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	b2da      	uxtb	r2, r3
 8004354:	490c      	ldr	r1, [pc, #48]	; (8004388 <__NVIC_SetPriority+0x4c>)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	0112      	lsls	r2, r2, #4
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	440b      	add	r3, r1
 8004360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004364:	e00a      	b.n	800437c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	4908      	ldr	r1, [pc, #32]	; (800438c <__NVIC_SetPriority+0x50>)
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	3b04      	subs	r3, #4
 8004374:	0112      	lsls	r2, r2, #4
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	440b      	add	r3, r1
 800437a:	761a      	strb	r2, [r3, #24]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	e000e100 	.word	0xe000e100
 800438c:	e000ed00 	.word	0xe000ed00

08004390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004390:	b480      	push	{r7}
 8004392:	b089      	sub	sp, #36	; 0x24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f1c3 0307 	rsb	r3, r3, #7
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	bf28      	it	cs
 80043ae:	2304      	movcs	r3, #4
 80043b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3304      	adds	r3, #4
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d902      	bls.n	80043c0 <NVIC_EncodePriority+0x30>
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3b03      	subs	r3, #3
 80043be:	e000      	b.n	80043c2 <NVIC_EncodePriority+0x32>
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43da      	mvns	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	401a      	ands	r2, r3
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043d8:	f04f 31ff 	mov.w	r1, #4294967295
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	fa01 f303 	lsl.w	r3, r1, r3
 80043e2:	43d9      	mvns	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e8:	4313      	orrs	r3, r2
         );
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3724      	adds	r7, #36	; 0x24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3b01      	subs	r3, #1
 8004404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004408:	d301      	bcc.n	800440e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800440a:	2301      	movs	r3, #1
 800440c:	e00f      	b.n	800442e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <SysTick_Config+0x40>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3b01      	subs	r3, #1
 8004414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004416:	210f      	movs	r1, #15
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	f7ff ff8e 	bl	800433c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <SysTick_Config+0x40>)
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004426:	4b04      	ldr	r3, [pc, #16]	; (8004438 <SysTick_Config+0x40>)
 8004428:	2207      	movs	r2, #7
 800442a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	e000e010 	.word	0xe000e010

0800443c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ff29 	bl	800429c <__NVIC_SetPriorityGrouping>
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004464:	f7ff ff3e 	bl	80042e4 <__NVIC_GetPriorityGrouping>
 8004468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	6978      	ldr	r0, [r7, #20]
 8004470:	f7ff ff8e 	bl	8004390 <NVIC_EncodePriority>
 8004474:	4602      	mov	r2, r0
 8004476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff5d 	bl	800433c <__NVIC_SetPriority>
}
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	4603      	mov	r3, r0
 8004492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff ff31 	bl	8004300 <__NVIC_EnableIRQ>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff ffa2 	bl	80043f8 <SysTick_Config>
 80044b4:	4603      	mov	r3, r0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044cc:	f7ff feb6 	bl	800423c <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e099      	b.n	8004610 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044fc:	e00f      	b.n	800451e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044fe:	f7ff fe9d 	bl	800423c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b05      	cmp	r3, #5
 800450a:	d908      	bls.n	800451e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2203      	movs	r2, #3
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e078      	b.n	8004610 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e8      	bne.n	80044fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4b38      	ldr	r3, [pc, #224]	; (8004618 <HAL_DMA_Init+0x158>)
 8004538:	4013      	ands	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800454a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2b04      	cmp	r3, #4
 8004576:	d107      	bne.n	8004588 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	4313      	orrs	r3, r2
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f023 0307 	bic.w	r3, r3, #7
 800459e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d117      	bne.n	80045e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00e      	beq.n	80045e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fb01 	bl	8004bcc <DMA_CheckFifoParam>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2240      	movs	r2, #64	; 0x40
 80045d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045de:	2301      	movs	r3, #1
 80045e0:	e016      	b.n	8004610 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fab8 	bl	8004b60 <DMA_CalcBaseAndBitshift>
 80045f0:	4603      	mov	r3, r0
 80045f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f8:	223f      	movs	r2, #63	; 0x3f
 80045fa:	409a      	lsls	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	f010803f 	.word	0xf010803f

0800461c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_DMA_Start_IT+0x26>
 800463e:	2302      	movs	r3, #2
 8004640:	e040      	b.n	80046c4 <HAL_DMA_Start_IT+0xa8>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d12f      	bne.n	80046b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2202      	movs	r2, #2
 800465a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fa4a 	bl	8004b04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	223f      	movs	r2, #63	; 0x3f
 8004676:	409a      	lsls	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0216 	orr.w	r2, r2, #22
 800468a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0208 	orr.w	r2, r2, #8
 80046a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e005      	b.n	80046c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046be:	2302      	movs	r3, #2
 80046c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046da:	f7ff fdaf 	bl	800423c <HAL_GetTick>
 80046de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d008      	beq.n	80046fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2280      	movs	r2, #128	; 0x80
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e052      	b.n	80047a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0216 	bic.w	r2, r2, #22
 800470c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800471c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <HAL_DMA_Abort+0x62>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0208 	bic.w	r2, r2, #8
 800473c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800474e:	e013      	b.n	8004778 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004750:	f7ff fd74 	bl	800423c <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b05      	cmp	r3, #5
 800475c:	d90c      	bls.n	8004778 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2203      	movs	r2, #3
 8004768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e015      	b.n	80047a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e4      	bne.n	8004750 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478a:	223f      	movs	r2, #63	; 0x3f
 800478c:	409a      	lsls	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d004      	beq.n	80047ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2280      	movs	r2, #128	; 0x80
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e00c      	b.n	80047e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2205      	movs	r2, #5
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047fc:	4b8e      	ldr	r3, [pc, #568]	; (8004a38 <HAL_DMA_IRQHandler+0x248>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a8e      	ldr	r2, [pc, #568]	; (8004a3c <HAL_DMA_IRQHandler+0x24c>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	0a9b      	lsrs	r3, r3, #10
 8004808:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	2208      	movs	r2, #8
 800481c:	409a      	lsls	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01a      	beq.n	800485c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0204 	bic.w	r2, r2, #4
 8004842:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	2208      	movs	r2, #8
 800484a:	409a      	lsls	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	f043 0201 	orr.w	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	2201      	movs	r2, #1
 8004862:	409a      	lsls	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d012      	beq.n	8004892 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487e:	2201      	movs	r2, #1
 8004880:	409a      	lsls	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	f043 0202 	orr.w	r2, r3, #2
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	2204      	movs	r2, #4
 8004898:	409a      	lsls	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4013      	ands	r3, r2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d012      	beq.n	80048c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	2204      	movs	r2, #4
 80048b6:	409a      	lsls	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f043 0204 	orr.w	r2, r3, #4
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048cc:	2210      	movs	r2, #16
 80048ce:	409a      	lsls	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d043      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d03c      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	2210      	movs	r2, #16
 80048ec:	409a      	lsls	r2, r3
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d018      	beq.n	8004932 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d024      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	4798      	blx	r3
 800491e:	e01f      	b.n	8004960 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01b      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
 8004930:	e016      	b.n	8004960 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d107      	bne.n	8004950 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0208 	bic.w	r2, r2, #8
 800494e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	2220      	movs	r2, #32
 8004966:	409a      	lsls	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 808f 	beq.w	8004a90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8087 	beq.w	8004a90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004986:	2220      	movs	r2, #32
 8004988:	409a      	lsls	r2, r3
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b05      	cmp	r3, #5
 8004998:	d136      	bne.n	8004a08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0216 	bic.w	r2, r2, #22
 80049a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <HAL_DMA_IRQHandler+0x1da>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0208 	bic.w	r2, r2, #8
 80049d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	223f      	movs	r2, #63	; 0x3f
 80049e0:	409a      	lsls	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d07e      	beq.n	8004afc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
        }
        return;
 8004a06:	e079      	b.n	8004afc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01d      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d031      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
 8004a34:	e02c      	b.n	8004a90 <HAL_DMA_IRQHandler+0x2a0>
 8004a36:	bf00      	nop
 8004a38:	2000001c 	.word	0x2000001c
 8004a3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d023      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	4798      	blx	r3
 8004a50:	e01e      	b.n	8004a90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10f      	bne.n	8004a80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0210 	bic.w	r2, r2, #16
 8004a6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d032      	beq.n	8004afe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d022      	beq.n	8004aea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2205      	movs	r2, #5
 8004aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d307      	bcc.n	8004ad8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f2      	bne.n	8004abc <HAL_DMA_IRQHandler+0x2cc>
 8004ad6:	e000      	b.n	8004ada <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ad8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
 8004afa:	e000      	b.n	8004afe <HAL_DMA_IRQHandler+0x30e>
        return;
 8004afc:	bf00      	nop
    }
  }
}
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d108      	bne.n	8004b44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b42:	e007      	b.n	8004b54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	60da      	str	r2, [r3, #12]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	3b10      	subs	r3, #16
 8004b70:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <DMA_CalcBaseAndBitshift+0x64>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b7a:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <DMA_CalcBaseAndBitshift+0x68>)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d909      	bls.n	8004ba2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b96:	f023 0303 	bic.w	r3, r3, #3
 8004b9a:	1d1a      	adds	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	659a      	str	r2, [r3, #88]	; 0x58
 8004ba0:	e007      	b.n	8004bb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004baa:	f023 0303 	bic.w	r3, r3, #3
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	aaaaaaab 	.word	0xaaaaaaab
 8004bc8:	08008a9c 	.word	0x08008a9c

08004bcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11f      	bne.n	8004c26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d856      	bhi.n	8004c9a <DMA_CheckFifoParam+0xce>
 8004bec:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <DMA_CheckFifoParam+0x28>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c05 	.word	0x08004c05
 8004bf8:	08004c17 	.word	0x08004c17
 8004bfc:	08004c05 	.word	0x08004c05
 8004c00:	08004c9b 	.word	0x08004c9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d046      	beq.n	8004c9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c14:	e043      	b.n	8004c9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c1e:	d140      	bne.n	8004ca2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c24:	e03d      	b.n	8004ca2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2e:	d121      	bne.n	8004c74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d837      	bhi.n	8004ca6 <DMA_CheckFifoParam+0xda>
 8004c36:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <DMA_CheckFifoParam+0x70>)
 8004c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004c53 	.word	0x08004c53
 8004c44:	08004c4d 	.word	0x08004c4d
 8004c48:	08004c65 	.word	0x08004c65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c50:	e030      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d025      	beq.n	8004caa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c62:	e022      	b.n	8004caa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c6c:	d11f      	bne.n	8004cae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c72:	e01c      	b.n	8004cae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d903      	bls.n	8004c82 <DMA_CheckFifoParam+0xb6>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d003      	beq.n	8004c88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c80:	e018      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
      break;
 8004c86:	e015      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00e      	beq.n	8004cb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
      break;
 8004c98:	e00b      	b.n	8004cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e00a      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8004c9e:	bf00      	nop
 8004ca0:	e008      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e006      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e004      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8004caa:	bf00      	nop
 8004cac:	e002      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cae:	bf00      	nop
 8004cb0:	e000      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cb2:	bf00      	nop
    }
  } 
  
  return status; 
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop

08004cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b089      	sub	sp, #36	; 0x24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	e159      	b.n	8004f94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	f040 8148 	bne.w	8004f8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d005      	beq.n	8004d16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d130      	bne.n	8004d78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	2203      	movs	r2, #3
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43db      	mvns	r3, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	43db      	mvns	r3, r3
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 0201 	and.w	r2, r3, #1
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d017      	beq.n	8004db4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	2203      	movs	r2, #3
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d123      	bne.n	8004e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	08da      	lsrs	r2, r3, #3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3208      	adds	r2, #8
 8004dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	220f      	movs	r2, #15
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	08da      	lsrs	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3208      	adds	r2, #8
 8004e02:	69b9      	ldr	r1, [r7, #24]
 8004e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2203      	movs	r2, #3
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 0203 	and.w	r2, r3, #3
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80a2 	beq.w	8004f8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	4b57      	ldr	r3, [pc, #348]	; (8004fac <HAL_GPIO_Init+0x2e8>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	4a56      	ldr	r2, [pc, #344]	; (8004fac <HAL_GPIO_Init+0x2e8>)
 8004e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e58:	6453      	str	r3, [r2, #68]	; 0x44
 8004e5a:	4b54      	ldr	r3, [pc, #336]	; (8004fac <HAL_GPIO_Init+0x2e8>)
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e66:	4a52      	ldr	r2, [pc, #328]	; (8004fb0 <HAL_GPIO_Init+0x2ec>)
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	220f      	movs	r2, #15
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a49      	ldr	r2, [pc, #292]	; (8004fb4 <HAL_GPIO_Init+0x2f0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d019      	beq.n	8004ec6 <HAL_GPIO_Init+0x202>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a48      	ldr	r2, [pc, #288]	; (8004fb8 <HAL_GPIO_Init+0x2f4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_GPIO_Init+0x1fe>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a47      	ldr	r2, [pc, #284]	; (8004fbc <HAL_GPIO_Init+0x2f8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00d      	beq.n	8004ebe <HAL_GPIO_Init+0x1fa>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a46      	ldr	r2, [pc, #280]	; (8004fc0 <HAL_GPIO_Init+0x2fc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <HAL_GPIO_Init+0x1f6>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a45      	ldr	r2, [pc, #276]	; (8004fc4 <HAL_GPIO_Init+0x300>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <HAL_GPIO_Init+0x1f2>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	e008      	b.n	8004ec8 <HAL_GPIO_Init+0x204>
 8004eb6:	2307      	movs	r3, #7
 8004eb8:	e006      	b.n	8004ec8 <HAL_GPIO_Init+0x204>
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e004      	b.n	8004ec8 <HAL_GPIO_Init+0x204>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e002      	b.n	8004ec8 <HAL_GPIO_Init+0x204>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <HAL_GPIO_Init+0x204>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	f002 0203 	and.w	r2, r2, #3
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	4093      	lsls	r3, r2
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ed8:	4935      	ldr	r1, [pc, #212]	; (8004fb0 <HAL_GPIO_Init+0x2ec>)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	089b      	lsrs	r3, r3, #2
 8004ede:	3302      	adds	r3, #2
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ee6:	4b38      	ldr	r3, [pc, #224]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f0a:	4a2f      	ldr	r2, [pc, #188]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f10:	4b2d      	ldr	r3, [pc, #180]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f34:	4a24      	ldr	r2, [pc, #144]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f3a:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f5e:	4a1a      	ldr	r2, [pc, #104]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f64:	4b18      	ldr	r3, [pc, #96]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f88:	4a0f      	ldr	r2, [pc, #60]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	f67f aea2 	bls.w	8004ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	3724      	adds	r7, #36	; 0x24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40013800 	.word	0x40013800
 8004fb4:	40020000 	.word	0x40020000
 8004fb8:	40020400 	.word	0x40020400
 8004fbc:	40020800 	.word	0x40020800
 8004fc0:	40020c00 	.word	0x40020c00
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40013c00 	.word	0x40013c00

08004fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	887b      	ldrh	r3, [r7, #2]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
 8004fe8:	e001      	b.n	8004fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
 8005008:	4613      	mov	r3, r2
 800500a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800500c:	787b      	ldrb	r3, [r7, #1]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005018:	e003      	b.n	8005022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	041a      	lsls	r2, r3, #16
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	619a      	str	r2, [r3, #24]
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e12b      	b.n	800529a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fe fe1a 	bl	8003c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2224      	movs	r2, #36	; 0x24
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005094:	f001 f888 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8005098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4a81      	ldr	r2, [pc, #516]	; (80052a4 <HAL_I2C_Init+0x274>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d807      	bhi.n	80050b4 <HAL_I2C_Init+0x84>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a80      	ldr	r2, [pc, #512]	; (80052a8 <HAL_I2C_Init+0x278>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	bf94      	ite	ls
 80050ac:	2301      	movls	r3, #1
 80050ae:	2300      	movhi	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e006      	b.n	80050c2 <HAL_I2C_Init+0x92>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a7d      	ldr	r2, [pc, #500]	; (80052ac <HAL_I2C_Init+0x27c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	bf94      	ite	ls
 80050bc:	2301      	movls	r3, #1
 80050be:	2300      	movhi	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e0e7      	b.n	800529a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4a78      	ldr	r2, [pc, #480]	; (80052b0 <HAL_I2C_Init+0x280>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	0c9b      	lsrs	r3, r3, #18
 80050d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	4a6a      	ldr	r2, [pc, #424]	; (80052a4 <HAL_I2C_Init+0x274>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d802      	bhi.n	8005104 <HAL_I2C_Init+0xd4>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	3301      	adds	r3, #1
 8005102:	e009      	b.n	8005118 <HAL_I2C_Init+0xe8>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	4a69      	ldr	r2, [pc, #420]	; (80052b4 <HAL_I2C_Init+0x284>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	099b      	lsrs	r3, r3, #6
 8005116:	3301      	adds	r3, #1
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	430b      	orrs	r3, r1
 800511e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800512a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	495c      	ldr	r1, [pc, #368]	; (80052a4 <HAL_I2C_Init+0x274>)
 8005134:	428b      	cmp	r3, r1
 8005136:	d819      	bhi.n	800516c <HAL_I2C_Init+0x13c>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	1e59      	subs	r1, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	fbb1 f3f3 	udiv	r3, r1, r3
 8005146:	1c59      	adds	r1, r3, #1
 8005148:	f640 73fc 	movw	r3, #4092	; 0xffc
 800514c:	400b      	ands	r3, r1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_I2C_Init+0x138>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1e59      	subs	r1, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005160:	3301      	adds	r3, #1
 8005162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005166:	e051      	b.n	800520c <HAL_I2C_Init+0x1dc>
 8005168:	2304      	movs	r3, #4
 800516a:	e04f      	b.n	800520c <HAL_I2C_Init+0x1dc>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d111      	bne.n	8005198 <HAL_I2C_Init+0x168>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1e58      	subs	r0, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6859      	ldr	r1, [r3, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	440b      	add	r3, r1
 8005182:	fbb0 f3f3 	udiv	r3, r0, r3
 8005186:	3301      	adds	r3, #1
 8005188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518c:	2b00      	cmp	r3, #0
 800518e:	bf0c      	ite	eq
 8005190:	2301      	moveq	r3, #1
 8005192:	2300      	movne	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	e012      	b.n	80051be <HAL_I2C_Init+0x18e>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	1e58      	subs	r0, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6859      	ldr	r1, [r3, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	0099      	lsls	r1, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ae:	3301      	adds	r3, #1
 80051b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_I2C_Init+0x196>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e022      	b.n	800520c <HAL_I2C_Init+0x1dc>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10e      	bne.n	80051ec <HAL_I2C_Init+0x1bc>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	1e58      	subs	r0, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6859      	ldr	r1, [r3, #4]
 80051d6:	460b      	mov	r3, r1
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	440b      	add	r3, r1
 80051dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80051e0:	3301      	adds	r3, #1
 80051e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ea:	e00f      	b.n	800520c <HAL_I2C_Init+0x1dc>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1e58      	subs	r0, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6859      	ldr	r1, [r3, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	0099      	lsls	r1, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005202:	3301      	adds	r3, #1
 8005204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	6809      	ldr	r1, [r1, #0]
 8005210:	4313      	orrs	r3, r2
 8005212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800523a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6911      	ldr	r1, [r2, #16]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	68d2      	ldr	r2, [r2, #12]
 8005246:	4311      	orrs	r1, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6812      	ldr	r2, [r2, #0]
 800524c:	430b      	orrs	r3, r1
 800524e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	000186a0 	.word	0x000186a0
 80052a8:	001e847f 	.word	0x001e847f
 80052ac:	003d08ff 	.word	0x003d08ff
 80052b0:	431bde83 	.word	0x431bde83
 80052b4:	10624dd3 	.word	0x10624dd3

080052b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af02      	add	r7, sp, #8
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	461a      	mov	r2, r3
 80052c4:	460b      	mov	r3, r1
 80052c6:	817b      	strh	r3, [r7, #10]
 80052c8:	4613      	mov	r3, r2
 80052ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052cc:	f7fe ffb6 	bl	800423c <HAL_GetTick>
 80052d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b20      	cmp	r3, #32
 80052dc:	f040 80e0 	bne.w	80054a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2319      	movs	r3, #25
 80052e6:	2201      	movs	r2, #1
 80052e8:	4970      	ldr	r1, [pc, #448]	; (80054ac <HAL_I2C_Master_Transmit+0x1f4>)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f964 	bl	80055b8 <I2C_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052f6:	2302      	movs	r3, #2
 80052f8:	e0d3      	b.n	80054a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_I2C_Master_Transmit+0x50>
 8005304:	2302      	movs	r3, #2
 8005306:	e0cc      	b.n	80054a2 <HAL_I2C_Master_Transmit+0x1ea>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d007      	beq.n	800532e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800533c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2221      	movs	r2, #33	; 0x21
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2210      	movs	r2, #16
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	893a      	ldrh	r2, [r7, #8]
 800535e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a50      	ldr	r2, [pc, #320]	; (80054b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800536e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005370:	8979      	ldrh	r1, [r7, #10]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	6a3a      	ldr	r2, [r7, #32]
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f89c 	bl	80054b4 <I2C_MasterRequestWrite>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e08d      	b.n	80054a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800539c:	e066      	b.n	800546c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	6a39      	ldr	r1, [r7, #32]
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 f9de 	bl	8005764 <I2C_WaitOnTXEFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00d      	beq.n	80053ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d107      	bne.n	80053c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e06b      	b.n	80054a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b04      	cmp	r3, #4
 8005406:	d11b      	bne.n	8005440 <HAL_I2C_Master_Transmit+0x188>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540c:	2b00      	cmp	r3, #0
 800540e:	d017      	beq.n	8005440 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	6a39      	ldr	r1, [r7, #32]
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f9ce 	bl	80057e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00d      	beq.n	800546c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	2b04      	cmp	r3, #4
 8005456:	d107      	bne.n	8005468 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005466:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e01a      	b.n	80054a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	d194      	bne.n	800539e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	e000      	b.n	80054a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80054a0:	2302      	movs	r3, #2
  }
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	00100002 	.word	0x00100002
 80054b0:	ffff0000 	.word	0xffff0000

080054b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	460b      	mov	r3, r1
 80054c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d006      	beq.n	80054de <I2C_MasterRequestWrite+0x2a>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d003      	beq.n	80054de <I2C_MasterRequestWrite+0x2a>
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054dc:	d108      	bne.n	80054f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e00b      	b.n	8005508 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	2b12      	cmp	r3, #18
 80054f6:	d107      	bne.n	8005508 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005506:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f84f 	bl	80055b8 <I2C_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00d      	beq.n	800553c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552e:	d103      	bne.n	8005538 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005536:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e035      	b.n	80055a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005544:	d108      	bne.n	8005558 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005546:	897b      	ldrh	r3, [r7, #10]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005554:	611a      	str	r2, [r3, #16]
 8005556:	e01b      	b.n	8005590 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005558:	897b      	ldrh	r3, [r7, #10]
 800555a:	11db      	asrs	r3, r3, #7
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0306 	and.w	r3, r3, #6
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f063 030f 	orn	r3, r3, #15
 8005568:	b2da      	uxtb	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	490e      	ldr	r1, [pc, #56]	; (80055b0 <I2C_MasterRequestWrite+0xfc>)
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f875 	bl	8005666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e010      	b.n	80055a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4907      	ldr	r1, [pc, #28]	; (80055b4 <I2C_MasterRequestWrite+0x100>)
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f865 	bl	8005666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	00010008 	.word	0x00010008
 80055b4:	00010002 	.word	0x00010002

080055b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055c8:	e025      	b.n	8005616 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d021      	beq.n	8005616 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d2:	f7fe fe33 	bl	800423c <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d116      	bne.n	8005616 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e023      	b.n	800565e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	d10d      	bne.n	800563c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	43da      	mvns	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4013      	ands	r3, r2
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	bf0c      	ite	eq
 8005632:	2301      	moveq	r3, #1
 8005634:	2300      	movne	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	e00c      	b.n	8005656 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	43da      	mvns	r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4013      	ands	r3, r2
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	429a      	cmp	r2, r3
 800565a:	d0b6      	beq.n	80055ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]
 8005672:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005674:	e051      	b.n	800571a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005684:	d123      	bne.n	80056ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005694:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800569e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f043 0204 	orr.w	r2, r3, #4
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e046      	b.n	800575c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d021      	beq.n	800571a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d6:	f7fe fdb1 	bl	800423c <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d302      	bcc.n	80056ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d116      	bne.n	800571a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f043 0220 	orr.w	r2, r3, #32
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e020      	b.n	800575c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d10c      	bne.n	800573e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	43da      	mvns	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4013      	ands	r3, r2
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	bf14      	ite	ne
 8005736:	2301      	movne	r3, #1
 8005738:	2300      	moveq	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	e00b      	b.n	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	43da      	mvns	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d18d      	bne.n	8005676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005770:	e02d      	b.n	80057ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f878 	bl	8005868 <I2C_IsAcknowledgeFailed>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e02d      	b.n	80057de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d021      	beq.n	80057ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578a:	f7fe fd57 	bl	800423c <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	d302      	bcc.n	80057a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d116      	bne.n	80057ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f043 0220 	orr.w	r2, r3, #32
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e007      	b.n	80057de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d8:	2b80      	cmp	r3, #128	; 0x80
 80057da:	d1ca      	bne.n	8005772 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057f2:	e02d      	b.n	8005850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f837 	bl	8005868 <I2C_IsAcknowledgeFailed>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e02d      	b.n	8005860 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d021      	beq.n	8005850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580c:	f7fe fd16 	bl	800423c <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	429a      	cmp	r2, r3
 800581a:	d302      	bcc.n	8005822 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d116      	bne.n	8005850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	f043 0220 	orr.w	r2, r3, #32
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e007      	b.n	8005860 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b04      	cmp	r3, #4
 800585c:	d1ca      	bne.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587e:	d11b      	bne.n	80058b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005888:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	f043 0204 	orr.w	r2, r3, #4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e267      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d075      	beq.n	80059d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058e6:	4b88      	ldr	r3, [pc, #544]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d00c      	beq.n	800590c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058f2:	4b85      	ldr	r3, [pc, #532]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058fa:	2b08      	cmp	r3, #8
 80058fc:	d112      	bne.n	8005924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058fe:	4b82      	ldr	r3, [pc, #520]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800590a:	d10b      	bne.n	8005924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800590c:	4b7e      	ldr	r3, [pc, #504]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d05b      	beq.n	80059d0 <HAL_RCC_OscConfig+0x108>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d157      	bne.n	80059d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e242      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d106      	bne.n	800593c <HAL_RCC_OscConfig+0x74>
 800592e:	4b76      	ldr	r3, [pc, #472]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a75      	ldr	r2, [pc, #468]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	e01d      	b.n	8005978 <HAL_RCC_OscConfig+0xb0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005944:	d10c      	bne.n	8005960 <HAL_RCC_OscConfig+0x98>
 8005946:	4b70      	ldr	r3, [pc, #448]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a6f      	ldr	r2, [pc, #444]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 800594c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	4b6d      	ldr	r3, [pc, #436]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a6c      	ldr	r2, [pc, #432]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e00b      	b.n	8005978 <HAL_RCC_OscConfig+0xb0>
 8005960:	4b69      	ldr	r3, [pc, #420]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a68      	ldr	r2, [pc, #416]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	4b66      	ldr	r3, [pc, #408]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a65      	ldr	r2, [pc, #404]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d013      	beq.n	80059a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005980:	f7fe fc5c 	bl	800423c <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005988:	f7fe fc58 	bl	800423c <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	; 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e207      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599a:	4b5b      	ldr	r3, [pc, #364]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0xc0>
 80059a6:	e014      	b.n	80059d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a8:	f7fe fc48 	bl	800423c <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059b0:	f7fe fc44 	bl	800423c <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b64      	cmp	r3, #100	; 0x64
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e1f3      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059c2:	4b51      	ldr	r3, [pc, #324]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0xe8>
 80059ce:	e000      	b.n	80059d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d063      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059de:	4b4a      	ldr	r3, [pc, #296]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ea:	4b47      	ldr	r3, [pc, #284]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d11c      	bne.n	8005a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059f6:	4b44      	ldr	r3, [pc, #272]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d116      	bne.n	8005a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a02:	4b41      	ldr	r3, [pc, #260]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <HAL_RCC_OscConfig+0x152>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d001      	beq.n	8005a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e1c7      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a1a:	4b3b      	ldr	r3, [pc, #236]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4937      	ldr	r1, [pc, #220]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a2e:	e03a      	b.n	8005aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d020      	beq.n	8005a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a38:	4b34      	ldr	r3, [pc, #208]	; (8005b0c <HAL_RCC_OscConfig+0x244>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3e:	f7fe fbfd 	bl	800423c <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a46:	f7fe fbf9 	bl	800423c <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e1a8      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a58:	4b2b      	ldr	r3, [pc, #172]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a64:	4b28      	ldr	r3, [pc, #160]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	4925      	ldr	r1, [pc, #148]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	600b      	str	r3, [r1, #0]
 8005a78:	e015      	b.n	8005aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a7a:	4b24      	ldr	r3, [pc, #144]	; (8005b0c <HAL_RCC_OscConfig+0x244>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a80:	f7fe fbdc 	bl	800423c <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a88:	f7fe fbd8 	bl	800423c <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e187      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f0      	bne.n	8005a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d036      	beq.n	8005b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d016      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aba:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <HAL_RCC_OscConfig+0x248>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac0:	f7fe fbbc 	bl	800423c <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ac8:	f7fe fbb8 	bl	800423c <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e167      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ada:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0f0      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x200>
 8005ae6:	e01b      	b.n	8005b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae8:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <HAL_RCC_OscConfig+0x248>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aee:	f7fe fba5 	bl	800423c <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af4:	e00e      	b.n	8005b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005af6:	f7fe fba1 	bl	800423c <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d907      	bls.n	8005b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e150      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	42470000 	.word	0x42470000
 8005b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b14:	4b88      	ldr	r3, [pc, #544]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ea      	bne.n	8005af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8097 	beq.w	8005c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b32:	4b81      	ldr	r3, [pc, #516]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10f      	bne.n	8005b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	4b7d      	ldr	r3, [pc, #500]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	4a7c      	ldr	r2, [pc, #496]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b4e:	4b7a      	ldr	r3, [pc, #488]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b56:	60bb      	str	r3, [r7, #8]
 8005b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5e:	4b77      	ldr	r3, [pc, #476]	; (8005d3c <HAL_RCC_OscConfig+0x474>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d118      	bne.n	8005b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b6a:	4b74      	ldr	r3, [pc, #464]	; (8005d3c <HAL_RCC_OscConfig+0x474>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a73      	ldr	r2, [pc, #460]	; (8005d3c <HAL_RCC_OscConfig+0x474>)
 8005b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b76:	f7fe fb61 	bl	800423c <HAL_GetTick>
 8005b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b7e:	f7fe fb5d 	bl	800423c <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e10c      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b90:	4b6a      	ldr	r3, [pc, #424]	; (8005d3c <HAL_RCC_OscConfig+0x474>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f0      	beq.n	8005b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x2ea>
 8005ba4:	4b64      	ldr	r3, [pc, #400]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	4a63      	ldr	r2, [pc, #396]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb0:	e01c      	b.n	8005bec <HAL_RCC_OscConfig+0x324>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b05      	cmp	r3, #5
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x30c>
 8005bba:	4b5f      	ldr	r3, [pc, #380]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	4a5e      	ldr	r2, [pc, #376]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bc0:	f043 0304 	orr.w	r3, r3, #4
 8005bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc6:	4b5c      	ldr	r3, [pc, #368]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a5b      	ldr	r2, [pc, #364]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd2:	e00b      	b.n	8005bec <HAL_RCC_OscConfig+0x324>
 8005bd4:	4b58      	ldr	r3, [pc, #352]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	4a57      	ldr	r2, [pc, #348]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	6713      	str	r3, [r2, #112]	; 0x70
 8005be0:	4b55      	ldr	r3, [pc, #340]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be4:	4a54      	ldr	r2, [pc, #336]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005be6:	f023 0304 	bic.w	r3, r3, #4
 8005bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d015      	beq.n	8005c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf4:	f7fe fb22 	bl	800423c <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bfc:	f7fe fb1e 	bl	800423c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e0cb      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c12:	4b49      	ldr	r3, [pc, #292]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0ee      	beq.n	8005bfc <HAL_RCC_OscConfig+0x334>
 8005c1e:	e014      	b.n	8005c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c20:	f7fe fb0c 	bl	800423c <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c26:	e00a      	b.n	8005c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c28:	f7fe fb08 	bl	800423c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0b5      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3e:	4b3e      	ldr	r3, [pc, #248]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1ee      	bne.n	8005c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c50:	4b39      	ldr	r3, [pc, #228]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	4a38      	ldr	r2, [pc, #224]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80a1 	beq.w	8005da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c66:	4b34      	ldr	r3, [pc, #208]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 030c 	and.w	r3, r3, #12
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d05c      	beq.n	8005d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d141      	bne.n	8005cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c7a:	4b31      	ldr	r3, [pc, #196]	; (8005d40 <HAL_RCC_OscConfig+0x478>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c80:	f7fe fadc 	bl	800423c <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c88:	f7fe fad8 	bl	800423c <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e087      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9a:	4b27      	ldr	r3, [pc, #156]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f0      	bne.n	8005c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	019b      	lsls	r3, r3, #6
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	061b      	lsls	r3, r3, #24
 8005cca:	491b      	ldr	r1, [pc, #108]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cd0:	4b1b      	ldr	r3, [pc, #108]	; (8005d40 <HAL_RCC_OscConfig+0x478>)
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd6:	f7fe fab1 	bl	800423c <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cde:	f7fe faad 	bl	800423c <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e05c      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cf0:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0f0      	beq.n	8005cde <HAL_RCC_OscConfig+0x416>
 8005cfc:	e054      	b.n	8005da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <HAL_RCC_OscConfig+0x478>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d04:	f7fe fa9a 	bl	800423c <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d0c:	f7fe fa96 	bl	800423c <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e045      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1e:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x444>
 8005d2a:	e03d      	b.n	8005da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d107      	bne.n	8005d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e038      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d44:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <HAL_RCC_OscConfig+0x4ec>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d028      	beq.n	8005da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d121      	bne.n	8005da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d11a      	bne.n	8005da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d74:	4013      	ands	r3, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d111      	bne.n	8005da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d107      	bne.n	8005da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d001      	beq.n	8005da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40023800 	.word	0x40023800

08005db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0cc      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dcc:	4b68      	ldr	r3, [pc, #416]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d90c      	bls.n	8005df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dda:	4b65      	ldr	r3, [pc, #404]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de2:	4b63      	ldr	r3, [pc, #396]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e0b8      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d020      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e0c:	4b59      	ldr	r3, [pc, #356]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	4a58      	ldr	r2, [pc, #352]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e24:	4b53      	ldr	r3, [pc, #332]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	4a52      	ldr	r2, [pc, #328]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e30:	4b50      	ldr	r3, [pc, #320]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	494d      	ldr	r1, [pc, #308]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d044      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d107      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e56:	4b47      	ldr	r3, [pc, #284]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d119      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e07f      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d107      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e76:	4b3f      	ldr	r3, [pc, #252]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d109      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e06f      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e86:	4b3b      	ldr	r3, [pc, #236]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e067      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e96:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f023 0203 	bic.w	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	4934      	ldr	r1, [pc, #208]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ea8:	f7fe f9c8 	bl	800423c <HAL_GetTick>
 8005eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eae:	e00a      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb0:	f7fe f9c4 	bl	800423c <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e04f      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec6:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 020c 	and.w	r2, r3, #12
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d1eb      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ed8:	4b25      	ldr	r3, [pc, #148]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d20c      	bcs.n	8005f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee6:	4b22      	ldr	r3, [pc, #136]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eee:	4b20      	ldr	r3, [pc, #128]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d001      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e032      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d008      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f0c:	4b19      	ldr	r3, [pc, #100]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	4916      	ldr	r1, [pc, #88]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f2a:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	490e      	ldr	r1, [pc, #56]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f3e:	f000 f821 	bl	8005f84 <HAL_RCC_GetSysClockFreq>
 8005f42:	4602      	mov	r2, r0
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	091b      	lsrs	r3, r3, #4
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	490a      	ldr	r1, [pc, #40]	; (8005f78 <HAL_RCC_ClockConfig+0x1c0>)
 8005f50:	5ccb      	ldrb	r3, [r1, r3]
 8005f52:	fa22 f303 	lsr.w	r3, r2, r3
 8005f56:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f5a:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <HAL_RCC_ClockConfig+0x1c8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fe f928 	bl	80041b4 <HAL_InitTick>

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40023c00 	.word	0x40023c00
 8005f74:	40023800 	.word	0x40023800
 8005f78:	08008a84 	.word	0x08008a84
 8005f7c:	2000001c 	.word	0x2000001c
 8005f80:	20000020 	.word	0x20000020

08005f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f88:	b094      	sub	sp, #80	; 0x50
 8005f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f90:	2300      	movs	r3, #0
 8005f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f94:	2300      	movs	r3, #0
 8005f96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f9c:	4b79      	ldr	r3, [pc, #484]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 030c 	and.w	r3, r3, #12
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d00d      	beq.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	f200 80e1 	bhi.w	8006170 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d003      	beq.n	8005fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8005fb6:	e0db      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fb8:	4b73      	ldr	r3, [pc, #460]	; (8006188 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005fbc:	e0db      	b.n	8006176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fbe:	4b73      	ldr	r3, [pc, #460]	; (800618c <HAL_RCC_GetSysClockFreq+0x208>)
 8005fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fc2:	e0d8      	b.n	8006176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fc4:	4b6f      	ldr	r3, [pc, #444]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fce:	4b6d      	ldr	r3, [pc, #436]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d063      	beq.n	80060a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fda:	4b6a      	ldr	r3, [pc, #424]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	099b      	lsrs	r3, r3, #6
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fec:	633b      	str	r3, [r7, #48]	; 0x30
 8005fee:	2300      	movs	r3, #0
 8005ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	f04f 0000 	mov.w	r0, #0
 8005ffe:	f04f 0100 	mov.w	r1, #0
 8006002:	0159      	lsls	r1, r3, #5
 8006004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006008:	0150      	lsls	r0, r2, #5
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4621      	mov	r1, r4
 8006010:	1a51      	subs	r1, r2, r1
 8006012:	6139      	str	r1, [r7, #16]
 8006014:	4629      	mov	r1, r5
 8006016:	eb63 0301 	sbc.w	r3, r3, r1
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006028:	4659      	mov	r1, fp
 800602a:	018b      	lsls	r3, r1, #6
 800602c:	4651      	mov	r1, sl
 800602e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006032:	4651      	mov	r1, sl
 8006034:	018a      	lsls	r2, r1, #6
 8006036:	4651      	mov	r1, sl
 8006038:	ebb2 0801 	subs.w	r8, r2, r1
 800603c:	4659      	mov	r1, fp
 800603e:	eb63 0901 	sbc.w	r9, r3, r1
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800604e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006056:	4690      	mov	r8, r2
 8006058:	4699      	mov	r9, r3
 800605a:	4623      	mov	r3, r4
 800605c:	eb18 0303 	adds.w	r3, r8, r3
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	462b      	mov	r3, r5
 8006064:	eb49 0303 	adc.w	r3, r9, r3
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	f04f 0300 	mov.w	r3, #0
 8006072:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006076:	4629      	mov	r1, r5
 8006078:	024b      	lsls	r3, r1, #9
 800607a:	4621      	mov	r1, r4
 800607c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006080:	4621      	mov	r1, r4
 8006082:	024a      	lsls	r2, r1, #9
 8006084:	4610      	mov	r0, r2
 8006086:	4619      	mov	r1, r3
 8006088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608a:	2200      	movs	r2, #0
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
 800608e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006090:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006094:	f7fa fe92 	bl	8000dbc <__aeabi_uldivmod>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4613      	mov	r3, r2
 800609e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a0:	e058      	b.n	8006154 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060a2:	4b38      	ldr	r3, [pc, #224]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	099b      	lsrs	r3, r3, #6
 80060a8:	2200      	movs	r2, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	4611      	mov	r1, r2
 80060ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060b2:	623b      	str	r3, [r7, #32]
 80060b4:	2300      	movs	r3, #0
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
 80060b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060bc:	4642      	mov	r2, r8
 80060be:	464b      	mov	r3, r9
 80060c0:	f04f 0000 	mov.w	r0, #0
 80060c4:	f04f 0100 	mov.w	r1, #0
 80060c8:	0159      	lsls	r1, r3, #5
 80060ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060ce:	0150      	lsls	r0, r2, #5
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4641      	mov	r1, r8
 80060d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80060da:	4649      	mov	r1, r9
 80060dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060f4:	ebb2 040a 	subs.w	r4, r2, sl
 80060f8:	eb63 050b 	sbc.w	r5, r3, fp
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	f04f 0300 	mov.w	r3, #0
 8006104:	00eb      	lsls	r3, r5, #3
 8006106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800610a:	00e2      	lsls	r2, r4, #3
 800610c:	4614      	mov	r4, r2
 800610e:	461d      	mov	r5, r3
 8006110:	4643      	mov	r3, r8
 8006112:	18e3      	adds	r3, r4, r3
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	464b      	mov	r3, r9
 8006118:	eb45 0303 	adc.w	r3, r5, r3
 800611c:	607b      	str	r3, [r7, #4]
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800612a:	4629      	mov	r1, r5
 800612c:	028b      	lsls	r3, r1, #10
 800612e:	4621      	mov	r1, r4
 8006130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006134:	4621      	mov	r1, r4
 8006136:	028a      	lsls	r2, r1, #10
 8006138:	4610      	mov	r0, r2
 800613a:	4619      	mov	r1, r3
 800613c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800613e:	2200      	movs	r2, #0
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	61fa      	str	r2, [r7, #28]
 8006144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006148:	f7fa fe38 	bl	8000dbc <__aeabi_uldivmod>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4613      	mov	r3, r2
 8006152:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	0c1b      	lsrs	r3, r3, #16
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	3301      	adds	r3, #1
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006168:	fbb2 f3f3 	udiv	r3, r2, r3
 800616c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800616e:	e002      	b.n	8006176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006170:	4b05      	ldr	r3, [pc, #20]	; (8006188 <HAL_RCC_GetSysClockFreq+0x204>)
 8006172:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006178:	4618      	mov	r0, r3
 800617a:	3750      	adds	r7, #80	; 0x50
 800617c:	46bd      	mov	sp, r7
 800617e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006182:	bf00      	nop
 8006184:	40023800 	.word	0x40023800
 8006188:	00f42400 	.word	0x00f42400
 800618c:	007a1200 	.word	0x007a1200

08006190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006194:	4b03      	ldr	r3, [pc, #12]	; (80061a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006196:	681b      	ldr	r3, [r3, #0]
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000001c 	.word	0x2000001c

080061a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061ac:	f7ff fff0 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	0a9b      	lsrs	r3, r3, #10
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4903      	ldr	r1, [pc, #12]	; (80061cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40023800 	.word	0x40023800
 80061cc:	08008a94 	.word	0x08008a94

080061d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061d4:	f7ff ffdc 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 80061d8:	4602      	mov	r2, r0
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	0b5b      	lsrs	r3, r3, #13
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	4903      	ldr	r1, [pc, #12]	; (80061f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061e6:	5ccb      	ldrb	r3, [r1, r3]
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40023800 	.word	0x40023800
 80061f4:	08008a94 	.word	0x08008a94

080061f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e041      	b.n	800628e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fd fd7e 	bl	8003d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3304      	adds	r3, #4
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f000 fcb2 	bl	8006ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d001      	beq.n	80062b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e03c      	b.n	800632a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1e      	ldr	r2, [pc, #120]	; (8006338 <HAL_TIM_Base_Start+0xa0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d018      	beq.n	80062f4 <HAL_TIM_Base_Start+0x5c>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ca:	d013      	beq.n	80062f4 <HAL_TIM_Base_Start+0x5c>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1a      	ldr	r2, [pc, #104]	; (800633c <HAL_TIM_Base_Start+0xa4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00e      	beq.n	80062f4 <HAL_TIM_Base_Start+0x5c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a19      	ldr	r2, [pc, #100]	; (8006340 <HAL_TIM_Base_Start+0xa8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d009      	beq.n	80062f4 <HAL_TIM_Base_Start+0x5c>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a17      	ldr	r2, [pc, #92]	; (8006344 <HAL_TIM_Base_Start+0xac>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d004      	beq.n	80062f4 <HAL_TIM_Base_Start+0x5c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a16      	ldr	r2, [pc, #88]	; (8006348 <HAL_TIM_Base_Start+0xb0>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d111      	bne.n	8006318 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b06      	cmp	r3, #6
 8006304:	d010      	beq.n	8006328 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0201 	orr.w	r2, r2, #1
 8006314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006316:	e007      	b.n	8006328 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40010000 	.word	0x40010000
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	40000c00 	.word	0x40000c00
 8006348:	40014000 	.word	0x40014000

0800634c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d001      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e044      	b.n	80063ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0201 	orr.w	r2, r2, #1
 800637a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <HAL_TIM_Base_Start_IT+0xb0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d018      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x6c>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d013      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x6c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1a      	ldr	r2, [pc, #104]	; (8006400 <HAL_TIM_Base_Start_IT+0xb4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00e      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x6c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a19      	ldr	r2, [pc, #100]	; (8006404 <HAL_TIM_Base_Start_IT+0xb8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d009      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x6c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a17      	ldr	r2, [pc, #92]	; (8006408 <HAL_TIM_Base_Start_IT+0xbc>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d004      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x6c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a16      	ldr	r2, [pc, #88]	; (800640c <HAL_TIM_Base_Start_IT+0xc0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d111      	bne.n	80063dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b06      	cmp	r3, #6
 80063c8:	d010      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0201 	orr.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063da:	e007      	b.n	80063ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40014000 	.word	0x40014000

08006410 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e041      	b.n	80064a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f839 	bl	80064ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f000 fba6 	bl	8006ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
	...

080064c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d109      	bne.n	80064e8 <HAL_TIM_PWM_Start+0x24>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	bf14      	ite	ne
 80064e0:	2301      	movne	r3, #1
 80064e2:	2300      	moveq	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	e022      	b.n	800652e <HAL_TIM_PWM_Start+0x6a>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d109      	bne.n	8006502 <HAL_TIM_PWM_Start+0x3e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	bf14      	ite	ne
 80064fa:	2301      	movne	r3, #1
 80064fc:	2300      	moveq	r3, #0
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	e015      	b.n	800652e <HAL_TIM_PWM_Start+0x6a>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d109      	bne.n	800651c <HAL_TIM_PWM_Start+0x58>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	bf14      	ite	ne
 8006514:	2301      	movne	r3, #1
 8006516:	2300      	moveq	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	e008      	b.n	800652e <HAL_TIM_PWM_Start+0x6a>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b01      	cmp	r3, #1
 8006526:	bf14      	ite	ne
 8006528:	2301      	movne	r3, #1
 800652a:	2300      	moveq	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e068      	b.n	8006608 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <HAL_TIM_PWM_Start+0x82>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006544:	e013      	b.n	800656e <HAL_TIM_PWM_Start+0xaa>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b04      	cmp	r3, #4
 800654a:	d104      	bne.n	8006556 <HAL_TIM_PWM_Start+0x92>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006554:	e00b      	b.n	800656e <HAL_TIM_PWM_Start+0xaa>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b08      	cmp	r3, #8
 800655a:	d104      	bne.n	8006566 <HAL_TIM_PWM_Start+0xa2>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006564:	e003      	b.n	800656e <HAL_TIM_PWM_Start+0xaa>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2201      	movs	r2, #1
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fdb8 	bl	80070ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a23      	ldr	r2, [pc, #140]	; (8006610 <HAL_TIM_PWM_Start+0x14c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d107      	bne.n	8006596 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1d      	ldr	r2, [pc, #116]	; (8006610 <HAL_TIM_PWM_Start+0x14c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d018      	beq.n	80065d2 <HAL_TIM_PWM_Start+0x10e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a8:	d013      	beq.n	80065d2 <HAL_TIM_PWM_Start+0x10e>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a19      	ldr	r2, [pc, #100]	; (8006614 <HAL_TIM_PWM_Start+0x150>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00e      	beq.n	80065d2 <HAL_TIM_PWM_Start+0x10e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a17      	ldr	r2, [pc, #92]	; (8006618 <HAL_TIM_PWM_Start+0x154>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d009      	beq.n	80065d2 <HAL_TIM_PWM_Start+0x10e>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a16      	ldr	r2, [pc, #88]	; (800661c <HAL_TIM_PWM_Start+0x158>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_TIM_PWM_Start+0x10e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a14      	ldr	r2, [pc, #80]	; (8006620 <HAL_TIM_PWM_Start+0x15c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d111      	bne.n	80065f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b06      	cmp	r3, #6
 80065e2:	d010      	beq.n	8006606 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f4:	e007      	b.n	8006606 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0201 	orr.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40010000 	.word	0x40010000
 8006614:	40000400 	.word	0x40000400
 8006618:	40000800 	.word	0x40000800
 800661c:	40000c00 	.word	0x40000c00
 8006620:	40014000 	.word	0x40014000

08006624 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e097      	b.n	8006768 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d106      	bne.n	8006652 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7fd fb9d 	bl	8003d8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006668:	f023 0307 	bic.w	r3, r3, #7
 800666c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f000 fa91 	bl	8006ba0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	4313      	orrs	r3, r2
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80066c4:	f023 030c 	bic.w	r3, r3, #12
 80066c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	4313      	orrs	r3, r2
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	011a      	lsls	r2, r3, #4
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	031b      	lsls	r3, r3, #12
 80066f4:	4313      	orrs	r3, r2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006702:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800670a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	4313      	orrs	r3, r2
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006780:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006788:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006790:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006798:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d110      	bne.n	80067c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d102      	bne.n	80067ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067a6:	7b7b      	ldrb	r3, [r7, #13]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d001      	beq.n	80067b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e069      	b.n	8006884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067c0:	e031      	b.n	8006826 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d110      	bne.n	80067ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d102      	bne.n	80067d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067ce:	7b3b      	ldrb	r3, [r7, #12]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d001      	beq.n	80067d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e055      	b.n	8006884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067e8:	e01d      	b.n	8006826 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d108      	bne.n	8006802 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d105      	bne.n	8006802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067f6:	7b7b      	ldrb	r3, [r7, #13]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d102      	bne.n	8006802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067fc:	7b3b      	ldrb	r3, [r7, #12]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d001      	beq.n	8006806 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e03e      	b.n	8006884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2202      	movs	r2, #2
 800680a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_TIM_Encoder_Start+0xc4>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b04      	cmp	r3, #4
 8006830:	d008      	beq.n	8006844 <HAL_TIM_Encoder_Start+0xd4>
 8006832:	e00f      	b.n	8006854 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2201      	movs	r2, #1
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fc55 	bl	80070ec <TIM_CCxChannelCmd>
      break;
 8006842:	e016      	b.n	8006872 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2201      	movs	r2, #1
 800684a:	2104      	movs	r1, #4
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fc4d 	bl	80070ec <TIM_CCxChannelCmd>
      break;
 8006852:	e00e      	b.n	8006872 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2201      	movs	r2, #1
 800685a:	2100      	movs	r1, #0
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fc45 	bl	80070ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2201      	movs	r2, #1
 8006868:	2104      	movs	r1, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fc3e 	bl	80070ec <TIM_CCxChannelCmd>
      break;
 8006870:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0201 	orr.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e0ae      	b.n	8006a08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b0c      	cmp	r3, #12
 80068b6:	f200 809f 	bhi.w	80069f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068ba:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c0:	080068f5 	.word	0x080068f5
 80068c4:	080069f9 	.word	0x080069f9
 80068c8:	080069f9 	.word	0x080069f9
 80068cc:	080069f9 	.word	0x080069f9
 80068d0:	08006935 	.word	0x08006935
 80068d4:	080069f9 	.word	0x080069f9
 80068d8:	080069f9 	.word	0x080069f9
 80068dc:	080069f9 	.word	0x080069f9
 80068e0:	08006977 	.word	0x08006977
 80068e4:	080069f9 	.word	0x080069f9
 80068e8:	080069f9 	.word	0x080069f9
 80068ec:	080069f9 	.word	0x080069f9
 80068f0:	080069b7 	.word	0x080069b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68b9      	ldr	r1, [r7, #8]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 f9d0 	bl	8006ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0208 	orr.w	r2, r2, #8
 800690e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0204 	bic.w	r2, r2, #4
 800691e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6999      	ldr	r1, [r3, #24]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	691a      	ldr	r2, [r3, #16]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	619a      	str	r2, [r3, #24]
      break;
 8006932:	e064      	b.n	80069fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fa16 	bl	8006d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800694e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6999      	ldr	r1, [r3, #24]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	021a      	lsls	r2, r3, #8
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	619a      	str	r2, [r3, #24]
      break;
 8006974:	e043      	b.n	80069fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68b9      	ldr	r1, [r7, #8]
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fa61 	bl	8006e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69da      	ldr	r2, [r3, #28]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0208 	orr.w	r2, r2, #8
 8006990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69da      	ldr	r2, [r3, #28]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0204 	bic.w	r2, r2, #4
 80069a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69d9      	ldr	r1, [r3, #28]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	61da      	str	r2, [r3, #28]
      break;
 80069b4:	e023      	b.n	80069fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 faab 	bl	8006f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69da      	ldr	r2, [r3, #28]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69d9      	ldr	r1, [r3, #28]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	021a      	lsls	r2, r3, #8
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	61da      	str	r2, [r3, #28]
      break;
 80069f6:	e002      	b.n	80069fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	75fb      	strb	r3, [r7, #23]
      break;
 80069fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_TIM_ConfigClockSource+0x1c>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e0b4      	b.n	8006b96 <HAL_TIM_ConfigClockSource+0x186>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a64:	d03e      	beq.n	8006ae4 <HAL_TIM_ConfigClockSource+0xd4>
 8006a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a6a:	f200 8087 	bhi.w	8006b7c <HAL_TIM_ConfigClockSource+0x16c>
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a72:	f000 8086 	beq.w	8006b82 <HAL_TIM_ConfigClockSource+0x172>
 8006a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7a:	d87f      	bhi.n	8006b7c <HAL_TIM_ConfigClockSource+0x16c>
 8006a7c:	2b70      	cmp	r3, #112	; 0x70
 8006a7e:	d01a      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0xa6>
 8006a80:	2b70      	cmp	r3, #112	; 0x70
 8006a82:	d87b      	bhi.n	8006b7c <HAL_TIM_ConfigClockSource+0x16c>
 8006a84:	2b60      	cmp	r3, #96	; 0x60
 8006a86:	d050      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x11a>
 8006a88:	2b60      	cmp	r3, #96	; 0x60
 8006a8a:	d877      	bhi.n	8006b7c <HAL_TIM_ConfigClockSource+0x16c>
 8006a8c:	2b50      	cmp	r3, #80	; 0x50
 8006a8e:	d03c      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0xfa>
 8006a90:	2b50      	cmp	r3, #80	; 0x50
 8006a92:	d873      	bhi.n	8006b7c <HAL_TIM_ConfigClockSource+0x16c>
 8006a94:	2b40      	cmp	r3, #64	; 0x40
 8006a96:	d058      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x13a>
 8006a98:	2b40      	cmp	r3, #64	; 0x40
 8006a9a:	d86f      	bhi.n	8006b7c <HAL_TIM_ConfigClockSource+0x16c>
 8006a9c:	2b30      	cmp	r3, #48	; 0x30
 8006a9e:	d064      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x15a>
 8006aa0:	2b30      	cmp	r3, #48	; 0x30
 8006aa2:	d86b      	bhi.n	8006b7c <HAL_TIM_ConfigClockSource+0x16c>
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	d060      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x15a>
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	d867      	bhi.n	8006b7c <HAL_TIM_ConfigClockSource+0x16c>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d05c      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x15a>
 8006ab0:	2b10      	cmp	r3, #16
 8006ab2:	d05a      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x15a>
 8006ab4:	e062      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6899      	ldr	r1, [r3, #8]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f000 faf1 	bl	80070ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	609a      	str	r2, [r3, #8]
      break;
 8006ae2:	e04f      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	6899      	ldr	r1, [r3, #8]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f000 fada 	bl	80070ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b06:	609a      	str	r2, [r3, #8]
      break;
 8006b08:	e03c      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6818      	ldr	r0, [r3, #0]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	6859      	ldr	r1, [r3, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f000 fa4e 	bl	8006fb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2150      	movs	r1, #80	; 0x50
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 faa7 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006b28:	e02c      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6859      	ldr	r1, [r3, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	461a      	mov	r2, r3
 8006b38:	f000 fa6d 	bl	8007016 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2160      	movs	r1, #96	; 0x60
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fa97 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006b48:	e01c      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f000 fa2e 	bl	8006fb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2140      	movs	r1, #64	; 0x40
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fa87 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006b68:	e00c      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4619      	mov	r1, r3
 8006b74:	4610      	mov	r0, r2
 8006b76:	f000 fa7e 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006b7a:	e003      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b80:	e000      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a34      	ldr	r2, [pc, #208]	; (8006c84 <TIM_Base_SetConfig+0xe4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00f      	beq.n	8006bd8 <TIM_Base_SetConfig+0x38>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbe:	d00b      	beq.n	8006bd8 <TIM_Base_SetConfig+0x38>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a31      	ldr	r2, [pc, #196]	; (8006c88 <TIM_Base_SetConfig+0xe8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d007      	beq.n	8006bd8 <TIM_Base_SetConfig+0x38>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a30      	ldr	r2, [pc, #192]	; (8006c8c <TIM_Base_SetConfig+0xec>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d003      	beq.n	8006bd8 <TIM_Base_SetConfig+0x38>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a2f      	ldr	r2, [pc, #188]	; (8006c90 <TIM_Base_SetConfig+0xf0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d108      	bne.n	8006bea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a25      	ldr	r2, [pc, #148]	; (8006c84 <TIM_Base_SetConfig+0xe4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01b      	beq.n	8006c2a <TIM_Base_SetConfig+0x8a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf8:	d017      	beq.n	8006c2a <TIM_Base_SetConfig+0x8a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a22      	ldr	r2, [pc, #136]	; (8006c88 <TIM_Base_SetConfig+0xe8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <TIM_Base_SetConfig+0x8a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a21      	ldr	r2, [pc, #132]	; (8006c8c <TIM_Base_SetConfig+0xec>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00f      	beq.n	8006c2a <TIM_Base_SetConfig+0x8a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a20      	ldr	r2, [pc, #128]	; (8006c90 <TIM_Base_SetConfig+0xf0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_Base_SetConfig+0x8a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a1f      	ldr	r2, [pc, #124]	; (8006c94 <TIM_Base_SetConfig+0xf4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_Base_SetConfig+0x8a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a1e      	ldr	r2, [pc, #120]	; (8006c98 <TIM_Base_SetConfig+0xf8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_Base_SetConfig+0x8a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a1d      	ldr	r2, [pc, #116]	; (8006c9c <TIM_Base_SetConfig+0xfc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d108      	bne.n	8006c3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a08      	ldr	r2, [pc, #32]	; (8006c84 <TIM_Base_SetConfig+0xe4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d103      	bne.n	8006c70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	615a      	str	r2, [r3, #20]
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	40000800 	.word	0x40000800
 8006c90:	40000c00 	.word	0x40000c00
 8006c94:	40014000 	.word	0x40014000
 8006c98:	40014400 	.word	0x40014400
 8006c9c:	40014800 	.word	0x40014800

08006ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f023 0201 	bic.w	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0303 	bic.w	r3, r3, #3
 8006cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f023 0302 	bic.w	r3, r3, #2
 8006ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a1c      	ldr	r2, [pc, #112]	; (8006d68 <TIM_OC1_SetConfig+0xc8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d10c      	bne.n	8006d16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f023 0308 	bic.w	r3, r3, #8
 8006d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f023 0304 	bic.w	r3, r3, #4
 8006d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a13      	ldr	r2, [pc, #76]	; (8006d68 <TIM_OC1_SetConfig+0xc8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d111      	bne.n	8006d42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	621a      	str	r2, [r3, #32]
}
 8006d5c:	bf00      	nop
 8006d5e:	371c      	adds	r7, #28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	40010000 	.word	0x40010000

08006d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	f023 0210 	bic.w	r2, r3, #16
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f023 0320 	bic.w	r3, r3, #32
 8006db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a1e      	ldr	r2, [pc, #120]	; (8006e40 <TIM_OC2_SetConfig+0xd4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d10d      	bne.n	8006de8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <TIM_OC2_SetConfig+0xd4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d113      	bne.n	8006e18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40010000 	.word	0x40010000

08006e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0303 	bic.w	r3, r3, #3
 8006e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	021b      	lsls	r3, r3, #8
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <TIM_OC3_SetConfig+0xd0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d10d      	bne.n	8006ebe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a14      	ldr	r2, [pc, #80]	; (8006f14 <TIM_OC3_SetConfig+0xd0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d113      	bne.n	8006eee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	621a      	str	r2, [r3, #32]
}
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	40010000 	.word	0x40010000

08006f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	031b      	lsls	r3, r3, #12
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a10      	ldr	r2, [pc, #64]	; (8006fb4 <TIM_OC4_SetConfig+0x9c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d109      	bne.n	8006f8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	019b      	lsls	r3, r3, #6
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	621a      	str	r2, [r3, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40010000 	.word	0x40010000

08006fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f023 0201 	bic.w	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f023 030a 	bic.w	r3, r3, #10
 8006ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	621a      	str	r2, [r3, #32]
}
 800700a:	bf00      	nop
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007016:	b480      	push	{r7}
 8007018:	b087      	sub	sp, #28
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f023 0210 	bic.w	r2, r3, #16
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007040:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	031b      	lsls	r3, r3, #12
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007052:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	f043 0307 	orr.w	r3, r3, #7
 8007098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	021a      	lsls	r2, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 031f 	and.w	r3, r3, #31
 80070fe:	2201      	movs	r2, #1
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1a      	ldr	r2, [r3, #32]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	43db      	mvns	r3, r3
 800710e:	401a      	ands	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a1a      	ldr	r2, [r3, #32]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f003 031f 	and.w	r3, r3, #31
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	fa01 f303 	lsl.w	r3, r1, r3
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800714c:	2302      	movs	r3, #2
 800714e:	e050      	b.n	80071f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a1c      	ldr	r2, [pc, #112]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d018      	beq.n	80071c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719c:	d013      	beq.n	80071c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a18      	ldr	r2, [pc, #96]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00e      	beq.n	80071c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a16      	ldr	r2, [pc, #88]	; (8007208 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d009      	beq.n	80071c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a15      	ldr	r2, [pc, #84]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d004      	beq.n	80071c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a13      	ldr	r2, [pc, #76]	; (8007210 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d10c      	bne.n	80071e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	40010000 	.word	0x40010000
 8007204:	40000400 	.word	0x40000400
 8007208:	40000800 	.word	0x40000800
 800720c:	40000c00 	.word	0x40000c00
 8007210:	40014000 	.word	0x40014000

08007214 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800722c:	2302      	movs	r3, #2
 800722e:	e03d      	b.n	80072ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e03f      	b.n	800734a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fc fdd6 	bl	8003e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2224      	movs	r2, #36	; 0x24
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 ff53 	bl	80081a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695a      	ldr	r2, [r3, #20]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08c      	sub	sp, #48	; 0x30
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	4613      	mov	r3, r2
 8007360:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b20      	cmp	r3, #32
 800736c:	d165      	bne.n	800743a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <HAL_UART_Transmit_DMA+0x26>
 8007374:	88fb      	ldrh	r3, [r7, #6]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e05e      	b.n	800743c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_UART_Transmit_DMA+0x38>
 8007388:	2302      	movs	r3, #2
 800738a:	e057      	b.n	800743c <HAL_UART_Transmit_DMA+0xe8>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	88fa      	ldrh	r2, [r7, #6]
 800739e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	88fa      	ldrh	r2, [r7, #6]
 80073a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2221      	movs	r2, #33	; 0x21
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b8:	4a22      	ldr	r2, [pc, #136]	; (8007444 <HAL_UART_Transmit_DMA+0xf0>)
 80073ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c0:	4a21      	ldr	r2, [pc, #132]	; (8007448 <HAL_UART_Transmit_DMA+0xf4>)
 80073c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	4a20      	ldr	r2, [pc, #128]	; (800744c <HAL_UART_Transmit_DMA+0xf8>)
 80073ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	2200      	movs	r2, #0
 80073d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80073d4:	f107 0308 	add.w	r3, r7, #8
 80073d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	6819      	ldr	r1, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3304      	adds	r3, #4
 80073e8:	461a      	mov	r2, r3
 80073ea:	88fb      	ldrh	r3, [r7, #6]
 80073ec:	f7fd f916 	bl	800461c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3314      	adds	r3, #20
 8007408:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	617b      	str	r3, [r7, #20]
   return(result);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3314      	adds	r3, #20
 8007420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007422:	627a      	str	r2, [r7, #36]	; 0x24
 8007424:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6a39      	ldr	r1, [r7, #32]
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e5      	bne.n	8007402 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e000      	b.n	800743c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800743a:	2302      	movs	r3, #2
  }
}
 800743c:	4618      	mov	r0, r3
 800743e:	3730      	adds	r7, #48	; 0x30
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	08007a49 	.word	0x08007a49
 8007448:	08007ae3 	.word	0x08007ae3
 800744c:	08007c5b 	.word	0x08007c5b

08007450 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b20      	cmp	r3, #32
 8007468:	d11d      	bne.n	80074a6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <HAL_UART_Receive_DMA+0x26>
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e016      	b.n	80074a8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_UART_Receive_DMA+0x38>
 8007484:	2302      	movs	r3, #2
 8007486:	e00f      	b.n	80074a8 <HAL_UART_Receive_DMA+0x58>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	461a      	mov	r2, r3
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 fc27 	bl	8007cf0 <UART_Start_Receive_DMA>
 80074a2:	4603      	mov	r3, r0
 80074a4:	e000      	b.n	80074a8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80074a6:	2302      	movs	r3, #2
  }
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b0ba      	sub	sp, #232	; 0xe8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80074dc:	2300      	movs	r3, #0
 80074de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80074ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10f      	bne.n	8007516 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fa:	f003 0320 	and.w	r3, r3, #32
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d009      	beq.n	8007516 <HAL_UART_IRQHandler+0x66>
 8007502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fd8f 	bl	8008032 <UART_Receive_IT>
      return;
 8007514:	e256      	b.n	80079c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 80de 	beq.w	80076dc <HAL_UART_IRQHandler+0x22c>
 8007520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d106      	bne.n	800753a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800752c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007530:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 80d1 	beq.w	80076dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800753a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <HAL_UART_IRQHandler+0xae>
 8007546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f043 0201 	orr.w	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007562:	f003 0304 	and.w	r3, r3, #4
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <HAL_UART_IRQHandler+0xd2>
 800756a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d005      	beq.n	8007582 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	f043 0202 	orr.w	r2, r3, #2
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00b      	beq.n	80075a6 <HAL_UART_IRQHandler+0xf6>
 800758e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d005      	beq.n	80075a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	f043 0204 	orr.w	r2, r3, #4
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075aa:	f003 0308 	and.w	r3, r3, #8
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d011      	beq.n	80075d6 <HAL_UART_IRQHandler+0x126>
 80075b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d105      	bne.n	80075ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f043 0208 	orr.w	r2, r3, #8
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 81ed 	beq.w	80079ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <HAL_UART_IRQHandler+0x14e>
 80075ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fd1a 	bl	8008032 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	bf0c      	ite	eq
 800760c:	2301      	moveq	r3, #1
 800760e:	2300      	movne	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d103      	bne.n	800762a <HAL_UART_IRQHandler+0x17a>
 8007622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007626:	2b00      	cmp	r3, #0
 8007628:	d04f      	beq.n	80076ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fc22 	bl	8007e74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763a:	2b40      	cmp	r3, #64	; 0x40
 800763c:	d141      	bne.n	80076c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3314      	adds	r3, #20
 8007644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800765c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3314      	adds	r3, #20
 8007666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800766a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800766e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1d9      	bne.n	800763e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768e:	2b00      	cmp	r3, #0
 8007690:	d013      	beq.n	80076ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	4a7d      	ldr	r2, [pc, #500]	; (800788c <HAL_UART_IRQHandler+0x3dc>)
 8007698:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fd f884 	bl	80047ac <HAL_DMA_Abort_IT>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d016      	beq.n	80076d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076b4:	4610      	mov	r0, r2
 80076b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b8:	e00e      	b.n	80076d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f9ae 	bl	8007a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c0:	e00a      	b.n	80076d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f9aa 	bl	8007a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c8:	e006      	b.n	80076d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f9a6 	bl	8007a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80076d6:	e170      	b.n	80079ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d8:	bf00      	nop
    return;
 80076da:	e16e      	b.n	80079ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	f040 814a 	bne.w	800797a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8143 	beq.w	800797a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 813c 	beq.w	800797a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007702:	2300      	movs	r3, #0
 8007704:	60bb      	str	r3, [r7, #8]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	60bb      	str	r3, [r7, #8]
 8007716:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	f040 80b4 	bne.w	8007890 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007734:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8140 	beq.w	80079be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007746:	429a      	cmp	r2, r3
 8007748:	f080 8139 	bcs.w	80079be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007752:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800775e:	f000 8088 	beq.w	8007872 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	330c      	adds	r3, #12
 8007768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800777c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	330c      	adds	r3, #12
 800778a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800778e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800779a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1d9      	bne.n	8007762 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3314      	adds	r3, #20
 80077b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077c0:	f023 0301 	bic.w	r3, r3, #1
 80077c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3314      	adds	r3, #20
 80077ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e1      	bne.n	80077ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3314      	adds	r3, #20
 80077f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3314      	adds	r3, #20
 800780a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800780e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007810:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007812:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007814:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800781c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1e3      	bne.n	80077ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2220      	movs	r2, #32
 8007826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	330c      	adds	r3, #12
 8007836:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007842:	f023 0310 	bic.w	r3, r3, #16
 8007846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	330c      	adds	r3, #12
 8007850:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007854:	65ba      	str	r2, [r7, #88]	; 0x58
 8007856:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800785a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e3      	bne.n	8007830 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	4618      	mov	r0, r3
 800786e:	f7fc ff2d 	bl	80046cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800787a:	b29b      	uxth	r3, r3
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	b29b      	uxth	r3, r3
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f8d4 	bl	8007a30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007888:	e099      	b.n	80079be <HAL_UART_IRQHandler+0x50e>
 800788a:	bf00      	nop
 800788c:	08007f3b 	.word	0x08007f3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007898:	b29b      	uxth	r3, r3
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 808b 	beq.w	80079c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80078ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8086 	beq.w	80079c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	330c      	adds	r3, #12
 80078bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80078da:	647a      	str	r2, [r7, #68]	; 0x44
 80078dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e3      	bne.n	80078b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3314      	adds	r3, #20
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	623b      	str	r3, [r7, #32]
   return(result);
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	f023 0301 	bic.w	r3, r3, #1
 8007904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3314      	adds	r3, #20
 800790e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007912:	633a      	str	r2, [r7, #48]	; 0x30
 8007914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e3      	bne.n	80078ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	330c      	adds	r3, #12
 800793a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	60fb      	str	r3, [r7, #12]
   return(result);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0310 	bic.w	r3, r3, #16
 800794a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	330c      	adds	r3, #12
 8007954:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007958:	61fa      	str	r2, [r7, #28]
 800795a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	69b9      	ldr	r1, [r7, #24]
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	617b      	str	r3, [r7, #20]
   return(result);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e3      	bne.n	8007934 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800796c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f85c 	bl	8007a30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007978:	e023      	b.n	80079c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800797a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007982:	2b00      	cmp	r3, #0
 8007984:	d009      	beq.n	800799a <HAL_UART_IRQHandler+0x4ea>
 8007986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800798a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fae5 	bl	8007f62 <UART_Transmit_IT>
    return;
 8007998:	e014      	b.n	80079c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800799a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <HAL_UART_IRQHandler+0x514>
 80079a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d008      	beq.n	80079c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fb25 	bl	8008002 <UART_EndTransmit_IT>
    return;
 80079b8:	e004      	b.n	80079c4 <HAL_UART_IRQHandler+0x514>
    return;
 80079ba:	bf00      	nop
 80079bc:	e002      	b.n	80079c4 <HAL_UART_IRQHandler+0x514>
      return;
 80079be:	bf00      	nop
 80079c0:	e000      	b.n	80079c4 <HAL_UART_IRQHandler+0x514>
      return;
 80079c2:	bf00      	nop
  }
}
 80079c4:	37e8      	adds	r7, #232	; 0xe8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop

080079cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b090      	sub	sp, #64	; 0x40
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d137      	bne.n	8007ad4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a66:	2200      	movs	r2, #0
 8007a68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3314      	adds	r3, #20
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	623b      	str	r3, [r7, #32]
   return(result);
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3314      	adds	r3, #20
 8007a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e5      	bne.n	8007a6a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	330c      	adds	r3, #12
 8007aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	330c      	adds	r3, #12
 8007abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007abe:	61fa      	str	r2, [r7, #28]
 8007ac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	69b9      	ldr	r1, [r7, #24]
 8007ac4:	69fa      	ldr	r2, [r7, #28]
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	617b      	str	r3, [r7, #20]
   return(result);
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e5      	bne.n	8007a9e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ad2:	e002      	b.n	8007ada <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007ad4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007ad6:	f7ff ff79 	bl	80079cc <HAL_UART_TxCpltCallback>
}
 8007ada:	bf00      	nop
 8007adc:	3740      	adds	r7, #64	; 0x40
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f7ff ff75 	bl	80079e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007af6:	bf00      	nop
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b09c      	sub	sp, #112	; 0x70
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d172      	bne.n	8007c00 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	330c      	adds	r3, #12
 8007b3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b40:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3314      	adds	r3, #20
 8007b5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	f023 0301 	bic.w	r3, r3, #1
 8007b6a:	667b      	str	r3, [r7, #100]	; 0x64
 8007b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3314      	adds	r3, #20
 8007b72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b74:	647a      	str	r2, [r7, #68]	; 0x44
 8007b76:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e5      	bne.n	8007b54 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3314      	adds	r3, #20
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	623b      	str	r3, [r7, #32]
   return(result);
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b9e:	663b      	str	r3, [r7, #96]	; 0x60
 8007ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ba8:	633a      	str	r2, [r7, #48]	; 0x30
 8007baa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e5      	bne.n	8007b88 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d119      	bne.n	8007c00 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0310 	bic.w	r3, r3, #16
 8007be2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	330c      	adds	r3, #12
 8007bea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bec:	61fa      	str	r2, [r7, #28]
 8007bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	69b9      	ldr	r1, [r7, #24]
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e5      	bne.n	8007bcc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d106      	bne.n	8007c16 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c10:	f7ff ff0e 	bl	8007a30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c14:	e002      	b.n	8007c1c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007c16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c18:	f7ff feec 	bl	80079f4 <HAL_UART_RxCpltCallback>
}
 8007c1c:	bf00      	nop
 8007c1e:	3770      	adds	r7, #112	; 0x70
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d108      	bne.n	8007c4c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c3e:	085b      	lsrs	r3, r3, #1
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	4619      	mov	r1, r3
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7ff fef3 	bl	8007a30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c4a:	e002      	b.n	8007c52 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff fedb 	bl	8007a08 <HAL_UART_RxHalfCpltCallback>
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c76:	2b80      	cmp	r3, #128	; 0x80
 8007c78:	bf0c      	ite	eq
 8007c7a:	2301      	moveq	r3, #1
 8007c7c:	2300      	movne	r3, #0
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b21      	cmp	r3, #33	; 0x21
 8007c8c:	d108      	bne.n	8007ca0 <UART_DMAError+0x46>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2200      	movs	r2, #0
 8007c98:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007c9a:	68b8      	ldr	r0, [r7, #8]
 8007c9c:	f000 f8c2 	bl	8007e24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007caa:	2b40      	cmp	r3, #64	; 0x40
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b22      	cmp	r3, #34	; 0x22
 8007cc0:	d108      	bne.n	8007cd4 <UART_DMAError+0x7a>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007cce:	68b8      	ldr	r0, [r7, #8]
 8007cd0:	f000 f8d0 	bl	8007e74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd8:	f043 0210 	orr.w	r2, r3, #16
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ce0:	68b8      	ldr	r0, [r7, #8]
 8007ce2:	f7ff fe9b 	bl	8007a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b098      	sub	sp, #96	; 0x60
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2222      	movs	r2, #34	; 0x22
 8007d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	4a3e      	ldr	r2, [pc, #248]	; (8007e18 <UART_Start_Receive_DMA+0x128>)
 8007d1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d24:	4a3d      	ldr	r2, [pc, #244]	; (8007e1c <UART_Start_Receive_DMA+0x12c>)
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	4a3c      	ldr	r2, [pc, #240]	; (8007e20 <UART_Start_Receive_DMA+0x130>)
 8007d2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d34:	2200      	movs	r2, #0
 8007d36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007d38:	f107 0308 	add.w	r3, r7, #8
 8007d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	88fb      	ldrh	r3, [r7, #6]
 8007d50:	f7fc fc64 	bl	800461c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007d54:	2300      	movs	r3, #0
 8007d56:	613b      	str	r3, [r7, #16]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	613b      	str	r3, [r7, #16]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	330c      	adds	r3, #12
 8007d78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d88:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	330c      	adds	r3, #12
 8007d90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d92:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007d94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e5      	bne.n	8007d72 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3314      	adds	r3, #20
 8007dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db8:	f043 0301 	orr.w	r3, r3, #1
 8007dbc:	657b      	str	r3, [r7, #84]	; 0x54
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3314      	adds	r3, #20
 8007dc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007dc6:	63ba      	str	r2, [r7, #56]	; 0x38
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e5      	bne.n	8007da6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3314      	adds	r3, #20
 8007de0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	617b      	str	r3, [r7, #20]
   return(result);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df0:	653b      	str	r3, [r7, #80]	; 0x50
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3314      	adds	r3, #20
 8007df8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dfa:	627a      	str	r2, [r7, #36]	; 0x24
 8007dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6a39      	ldr	r1, [r7, #32]
 8007e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e5      	bne.n	8007dda <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3760      	adds	r7, #96	; 0x60
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	08007aff 	.word	0x08007aff
 8007e1c:	08007c25 	.word	0x08007c25
 8007e20:	08007c5b 	.word	0x08007c5b

08007e24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b089      	sub	sp, #36	; 0x24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	330c      	adds	r3, #12
 8007e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e42:	61fb      	str	r3, [r7, #28]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	330c      	adds	r3, #12
 8007e4a:	69fa      	ldr	r2, [r7, #28]
 8007e4c:	61ba      	str	r2, [r7, #24]
 8007e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	6979      	ldr	r1, [r7, #20]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e5      	bne.n	8007e2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007e68:	bf00      	nop
 8007e6a:	3724      	adds	r7, #36	; 0x24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b095      	sub	sp, #84	; 0x54
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	330c      	adds	r3, #12
 8007e82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	330c      	adds	r3, #12
 8007e9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e9c:	643a      	str	r2, [r7, #64]	; 0x40
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ea2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ea4:	e841 2300 	strex	r3, r2, [r1]
 8007ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e5      	bne.n	8007e7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3314      	adds	r3, #20
 8007eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	e853 3f00 	ldrex	r3, [r3]
 8007ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f023 0301 	bic.w	r3, r3, #1
 8007ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3314      	adds	r3, #20
 8007ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e5      	bne.n	8007eb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d119      	bne.n	8007f20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	330c      	adds	r3, #12
 8007ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	f023 0310 	bic.w	r3, r3, #16
 8007f02:	647b      	str	r3, [r7, #68]	; 0x44
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	330c      	adds	r3, #12
 8007f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f0c:	61ba      	str	r2, [r7, #24]
 8007f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6979      	ldr	r1, [r7, #20]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	613b      	str	r3, [r7, #16]
   return(result);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e5      	bne.n	8007eec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f2e:	bf00      	nop
 8007f30:	3754      	adds	r7, #84	; 0x54
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f7ff fd61 	bl	8007a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b085      	sub	sp, #20
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b21      	cmp	r3, #33	; 0x21
 8007f74:	d13e      	bne.n	8007ff4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7e:	d114      	bne.n	8007faa <UART_Transmit_IT+0x48>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d110      	bne.n	8007faa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	1c9a      	adds	r2, r3, #2
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	621a      	str	r2, [r3, #32]
 8007fa8:	e008      	b.n	8007fbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	1c59      	adds	r1, r3, #1
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6211      	str	r1, [r2, #32]
 8007fb4:	781a      	ldrb	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10f      	bne.n	8007ff0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e000      	b.n	8007ff6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ff4:	2302      	movs	r3, #2
  }
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008018:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2220      	movs	r2, #32
 800801e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff fcd2 	bl	80079cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b08c      	sub	sp, #48	; 0x30
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b22      	cmp	r3, #34	; 0x22
 8008044:	f040 80ab 	bne.w	800819e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008050:	d117      	bne.n	8008082 <UART_Receive_IT+0x50>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d113      	bne.n	8008082 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008062:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	b29b      	uxth	r3, r3
 800806c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008070:	b29a      	uxth	r2, r3
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807a:	1c9a      	adds	r2, r3, #2
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	629a      	str	r2, [r3, #40]	; 0x28
 8008080:	e026      	b.n	80080d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008086:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008088:	2300      	movs	r3, #0
 800808a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008094:	d007      	beq.n	80080a6 <UART_Receive_IT+0x74>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <UART_Receive_IT+0x82>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b0:	701a      	strb	r2, [r3, #0]
 80080b2:	e008      	b.n	80080c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29b      	uxth	r3, r3
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	4619      	mov	r1, r3
 80080de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d15a      	bne.n	800819a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0220 	bic.w	r2, r2, #32
 80080f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008102:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	695a      	ldr	r2, [r3, #20]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0201 	bic.w	r2, r2, #1
 8008112:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008120:	2b01      	cmp	r3, #1
 8008122:	d135      	bne.n	8008190 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	330c      	adds	r3, #12
 8008130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	613b      	str	r3, [r7, #16]
   return(result);
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f023 0310 	bic.w	r3, r3, #16
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	330c      	adds	r3, #12
 8008148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814a:	623a      	str	r2, [r7, #32]
 800814c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814e:	69f9      	ldr	r1, [r7, #28]
 8008150:	6a3a      	ldr	r2, [r7, #32]
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	61bb      	str	r3, [r7, #24]
   return(result);
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e5      	bne.n	800812a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0310 	and.w	r3, r3, #16
 8008168:	2b10      	cmp	r3, #16
 800816a:	d10a      	bne.n	8008182 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff fc51 	bl	8007a30 <HAL_UARTEx_RxEventCallback>
 800818e:	e002      	b.n	8008196 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff fc2f 	bl	80079f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	e002      	b.n	80081a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	e000      	b.n	80081a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800819e:	2302      	movs	r3, #2
  }
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3730      	adds	r7, #48	; 0x30
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081ac:	b0c0      	sub	sp, #256	; 0x100
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c4:	68d9      	ldr	r1, [r3, #12]
 80081c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	ea40 0301 	orr.w	r3, r0, r1
 80081d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	431a      	orrs	r2, r3
 80081e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	431a      	orrs	r2, r3
 80081e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008200:	f021 010c 	bic.w	r1, r1, #12
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800820e:	430b      	orrs	r3, r1
 8008210:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800821e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008222:	6999      	ldr	r1, [r3, #24]
 8008224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	ea40 0301 	orr.w	r3, r0, r1
 800822e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b8f      	ldr	r3, [pc, #572]	; (8008474 <UART_SetConfig+0x2cc>)
 8008238:	429a      	cmp	r2, r3
 800823a:	d005      	beq.n	8008248 <UART_SetConfig+0xa0>
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	4b8d      	ldr	r3, [pc, #564]	; (8008478 <UART_SetConfig+0x2d0>)
 8008244:	429a      	cmp	r2, r3
 8008246:	d104      	bne.n	8008252 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008248:	f7fd ffc2 	bl	80061d0 <HAL_RCC_GetPCLK2Freq>
 800824c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008250:	e003      	b.n	800825a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008252:	f7fd ffa9 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8008256:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800825a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008264:	f040 810c 	bne.w	8008480 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800826c:	2200      	movs	r2, #0
 800826e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008272:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008276:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800827a:	4622      	mov	r2, r4
 800827c:	462b      	mov	r3, r5
 800827e:	1891      	adds	r1, r2, r2
 8008280:	65b9      	str	r1, [r7, #88]	; 0x58
 8008282:	415b      	adcs	r3, r3
 8008284:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008286:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800828a:	4621      	mov	r1, r4
 800828c:	eb12 0801 	adds.w	r8, r2, r1
 8008290:	4629      	mov	r1, r5
 8008292:	eb43 0901 	adc.w	r9, r3, r1
 8008296:	f04f 0200 	mov.w	r2, #0
 800829a:	f04f 0300 	mov.w	r3, #0
 800829e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082aa:	4690      	mov	r8, r2
 80082ac:	4699      	mov	r9, r3
 80082ae:	4623      	mov	r3, r4
 80082b0:	eb18 0303 	adds.w	r3, r8, r3
 80082b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082b8:	462b      	mov	r3, r5
 80082ba:	eb49 0303 	adc.w	r3, r9, r3
 80082be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80082d6:	460b      	mov	r3, r1
 80082d8:	18db      	adds	r3, r3, r3
 80082da:	653b      	str	r3, [r7, #80]	; 0x50
 80082dc:	4613      	mov	r3, r2
 80082de:	eb42 0303 	adc.w	r3, r2, r3
 80082e2:	657b      	str	r3, [r7, #84]	; 0x54
 80082e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80082ec:	f7f8 fd66 	bl	8000dbc <__aeabi_uldivmod>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4b61      	ldr	r3, [pc, #388]	; (800847c <UART_SetConfig+0x2d4>)
 80082f6:	fba3 2302 	umull	r2, r3, r3, r2
 80082fa:	095b      	lsrs	r3, r3, #5
 80082fc:	011c      	lsls	r4, r3, #4
 80082fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008302:	2200      	movs	r2, #0
 8008304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008308:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800830c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008310:	4642      	mov	r2, r8
 8008312:	464b      	mov	r3, r9
 8008314:	1891      	adds	r1, r2, r2
 8008316:	64b9      	str	r1, [r7, #72]	; 0x48
 8008318:	415b      	adcs	r3, r3
 800831a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800831c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008320:	4641      	mov	r1, r8
 8008322:	eb12 0a01 	adds.w	sl, r2, r1
 8008326:	4649      	mov	r1, r9
 8008328:	eb43 0b01 	adc.w	fp, r3, r1
 800832c:	f04f 0200 	mov.w	r2, #0
 8008330:	f04f 0300 	mov.w	r3, #0
 8008334:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008338:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800833c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008340:	4692      	mov	sl, r2
 8008342:	469b      	mov	fp, r3
 8008344:	4643      	mov	r3, r8
 8008346:	eb1a 0303 	adds.w	r3, sl, r3
 800834a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800834e:	464b      	mov	r3, r9
 8008350:	eb4b 0303 	adc.w	r3, fp, r3
 8008354:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008364:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008368:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800836c:	460b      	mov	r3, r1
 800836e:	18db      	adds	r3, r3, r3
 8008370:	643b      	str	r3, [r7, #64]	; 0x40
 8008372:	4613      	mov	r3, r2
 8008374:	eb42 0303 	adc.w	r3, r2, r3
 8008378:	647b      	str	r3, [r7, #68]	; 0x44
 800837a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800837e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008382:	f7f8 fd1b 	bl	8000dbc <__aeabi_uldivmod>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4611      	mov	r1, r2
 800838c:	4b3b      	ldr	r3, [pc, #236]	; (800847c <UART_SetConfig+0x2d4>)
 800838e:	fba3 2301 	umull	r2, r3, r3, r1
 8008392:	095b      	lsrs	r3, r3, #5
 8008394:	2264      	movs	r2, #100	; 0x64
 8008396:	fb02 f303 	mul.w	r3, r2, r3
 800839a:	1acb      	subs	r3, r1, r3
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083a2:	4b36      	ldr	r3, [pc, #216]	; (800847c <UART_SetConfig+0x2d4>)
 80083a4:	fba3 2302 	umull	r2, r3, r3, r2
 80083a8:	095b      	lsrs	r3, r3, #5
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083b0:	441c      	add	r4, r3
 80083b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083c4:	4642      	mov	r2, r8
 80083c6:	464b      	mov	r3, r9
 80083c8:	1891      	adds	r1, r2, r2
 80083ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80083cc:	415b      	adcs	r3, r3
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083d4:	4641      	mov	r1, r8
 80083d6:	1851      	adds	r1, r2, r1
 80083d8:	6339      	str	r1, [r7, #48]	; 0x30
 80083da:	4649      	mov	r1, r9
 80083dc:	414b      	adcs	r3, r1
 80083de:	637b      	str	r3, [r7, #52]	; 0x34
 80083e0:	f04f 0200 	mov.w	r2, #0
 80083e4:	f04f 0300 	mov.w	r3, #0
 80083e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80083ec:	4659      	mov	r1, fp
 80083ee:	00cb      	lsls	r3, r1, #3
 80083f0:	4651      	mov	r1, sl
 80083f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083f6:	4651      	mov	r1, sl
 80083f8:	00ca      	lsls	r2, r1, #3
 80083fa:	4610      	mov	r0, r2
 80083fc:	4619      	mov	r1, r3
 80083fe:	4603      	mov	r3, r0
 8008400:	4642      	mov	r2, r8
 8008402:	189b      	adds	r3, r3, r2
 8008404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008408:	464b      	mov	r3, r9
 800840a:	460a      	mov	r2, r1
 800840c:	eb42 0303 	adc.w	r3, r2, r3
 8008410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008420:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008424:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008428:	460b      	mov	r3, r1
 800842a:	18db      	adds	r3, r3, r3
 800842c:	62bb      	str	r3, [r7, #40]	; 0x28
 800842e:	4613      	mov	r3, r2
 8008430:	eb42 0303 	adc.w	r3, r2, r3
 8008434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800843a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800843e:	f7f8 fcbd 	bl	8000dbc <__aeabi_uldivmod>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4b0d      	ldr	r3, [pc, #52]	; (800847c <UART_SetConfig+0x2d4>)
 8008448:	fba3 1302 	umull	r1, r3, r3, r2
 800844c:	095b      	lsrs	r3, r3, #5
 800844e:	2164      	movs	r1, #100	; 0x64
 8008450:	fb01 f303 	mul.w	r3, r1, r3
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	3332      	adds	r3, #50	; 0x32
 800845a:	4a08      	ldr	r2, [pc, #32]	; (800847c <UART_SetConfig+0x2d4>)
 800845c:	fba2 2303 	umull	r2, r3, r2, r3
 8008460:	095b      	lsrs	r3, r3, #5
 8008462:	f003 0207 	and.w	r2, r3, #7
 8008466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4422      	add	r2, r4
 800846e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008470:	e105      	b.n	800867e <UART_SetConfig+0x4d6>
 8008472:	bf00      	nop
 8008474:	40011000 	.word	0x40011000
 8008478:	40011400 	.word	0x40011400
 800847c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008484:	2200      	movs	r2, #0
 8008486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800848a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800848e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008492:	4642      	mov	r2, r8
 8008494:	464b      	mov	r3, r9
 8008496:	1891      	adds	r1, r2, r2
 8008498:	6239      	str	r1, [r7, #32]
 800849a:	415b      	adcs	r3, r3
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
 800849e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084a2:	4641      	mov	r1, r8
 80084a4:	1854      	adds	r4, r2, r1
 80084a6:	4649      	mov	r1, r9
 80084a8:	eb43 0501 	adc.w	r5, r3, r1
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	00eb      	lsls	r3, r5, #3
 80084b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084ba:	00e2      	lsls	r2, r4, #3
 80084bc:	4614      	mov	r4, r2
 80084be:	461d      	mov	r5, r3
 80084c0:	4643      	mov	r3, r8
 80084c2:	18e3      	adds	r3, r4, r3
 80084c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084c8:	464b      	mov	r3, r9
 80084ca:	eb45 0303 	adc.w	r3, r5, r3
 80084ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084e2:	f04f 0200 	mov.w	r2, #0
 80084e6:	f04f 0300 	mov.w	r3, #0
 80084ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80084ee:	4629      	mov	r1, r5
 80084f0:	008b      	lsls	r3, r1, #2
 80084f2:	4621      	mov	r1, r4
 80084f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084f8:	4621      	mov	r1, r4
 80084fa:	008a      	lsls	r2, r1, #2
 80084fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008500:	f7f8 fc5c 	bl	8000dbc <__aeabi_uldivmod>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4b60      	ldr	r3, [pc, #384]	; (800868c <UART_SetConfig+0x4e4>)
 800850a:	fba3 2302 	umull	r2, r3, r3, r2
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	011c      	lsls	r4, r3, #4
 8008512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008516:	2200      	movs	r2, #0
 8008518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800851c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008520:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008524:	4642      	mov	r2, r8
 8008526:	464b      	mov	r3, r9
 8008528:	1891      	adds	r1, r2, r2
 800852a:	61b9      	str	r1, [r7, #24]
 800852c:	415b      	adcs	r3, r3
 800852e:	61fb      	str	r3, [r7, #28]
 8008530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008534:	4641      	mov	r1, r8
 8008536:	1851      	adds	r1, r2, r1
 8008538:	6139      	str	r1, [r7, #16]
 800853a:	4649      	mov	r1, r9
 800853c:	414b      	adcs	r3, r1
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800854c:	4659      	mov	r1, fp
 800854e:	00cb      	lsls	r3, r1, #3
 8008550:	4651      	mov	r1, sl
 8008552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008556:	4651      	mov	r1, sl
 8008558:	00ca      	lsls	r2, r1, #3
 800855a:	4610      	mov	r0, r2
 800855c:	4619      	mov	r1, r3
 800855e:	4603      	mov	r3, r0
 8008560:	4642      	mov	r2, r8
 8008562:	189b      	adds	r3, r3, r2
 8008564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008568:	464b      	mov	r3, r9
 800856a:	460a      	mov	r2, r1
 800856c:	eb42 0303 	adc.w	r3, r2, r3
 8008570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	67bb      	str	r3, [r7, #120]	; 0x78
 800857e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008580:	f04f 0200 	mov.w	r2, #0
 8008584:	f04f 0300 	mov.w	r3, #0
 8008588:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800858c:	4649      	mov	r1, r9
 800858e:	008b      	lsls	r3, r1, #2
 8008590:	4641      	mov	r1, r8
 8008592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008596:	4641      	mov	r1, r8
 8008598:	008a      	lsls	r2, r1, #2
 800859a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800859e:	f7f8 fc0d 	bl	8000dbc <__aeabi_uldivmod>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4b39      	ldr	r3, [pc, #228]	; (800868c <UART_SetConfig+0x4e4>)
 80085a8:	fba3 1302 	umull	r1, r3, r3, r2
 80085ac:	095b      	lsrs	r3, r3, #5
 80085ae:	2164      	movs	r1, #100	; 0x64
 80085b0:	fb01 f303 	mul.w	r3, r1, r3
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	011b      	lsls	r3, r3, #4
 80085b8:	3332      	adds	r3, #50	; 0x32
 80085ba:	4a34      	ldr	r2, [pc, #208]	; (800868c <UART_SetConfig+0x4e4>)
 80085bc:	fba2 2303 	umull	r2, r3, r2, r3
 80085c0:	095b      	lsrs	r3, r3, #5
 80085c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085c6:	441c      	add	r4, r3
 80085c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085cc:	2200      	movs	r2, #0
 80085ce:	673b      	str	r3, [r7, #112]	; 0x70
 80085d0:	677a      	str	r2, [r7, #116]	; 0x74
 80085d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80085d6:	4642      	mov	r2, r8
 80085d8:	464b      	mov	r3, r9
 80085da:	1891      	adds	r1, r2, r2
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	415b      	adcs	r3, r3
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085e6:	4641      	mov	r1, r8
 80085e8:	1851      	adds	r1, r2, r1
 80085ea:	6039      	str	r1, [r7, #0]
 80085ec:	4649      	mov	r1, r9
 80085ee:	414b      	adcs	r3, r1
 80085f0:	607b      	str	r3, [r7, #4]
 80085f2:	f04f 0200 	mov.w	r2, #0
 80085f6:	f04f 0300 	mov.w	r3, #0
 80085fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085fe:	4659      	mov	r1, fp
 8008600:	00cb      	lsls	r3, r1, #3
 8008602:	4651      	mov	r1, sl
 8008604:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008608:	4651      	mov	r1, sl
 800860a:	00ca      	lsls	r2, r1, #3
 800860c:	4610      	mov	r0, r2
 800860e:	4619      	mov	r1, r3
 8008610:	4603      	mov	r3, r0
 8008612:	4642      	mov	r2, r8
 8008614:	189b      	adds	r3, r3, r2
 8008616:	66bb      	str	r3, [r7, #104]	; 0x68
 8008618:	464b      	mov	r3, r9
 800861a:	460a      	mov	r2, r1
 800861c:	eb42 0303 	adc.w	r3, r2, r3
 8008620:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	663b      	str	r3, [r7, #96]	; 0x60
 800862c:	667a      	str	r2, [r7, #100]	; 0x64
 800862e:	f04f 0200 	mov.w	r2, #0
 8008632:	f04f 0300 	mov.w	r3, #0
 8008636:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800863a:	4649      	mov	r1, r9
 800863c:	008b      	lsls	r3, r1, #2
 800863e:	4641      	mov	r1, r8
 8008640:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008644:	4641      	mov	r1, r8
 8008646:	008a      	lsls	r2, r1, #2
 8008648:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800864c:	f7f8 fbb6 	bl	8000dbc <__aeabi_uldivmod>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4b0d      	ldr	r3, [pc, #52]	; (800868c <UART_SetConfig+0x4e4>)
 8008656:	fba3 1302 	umull	r1, r3, r3, r2
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	2164      	movs	r1, #100	; 0x64
 800865e:	fb01 f303 	mul.w	r3, r1, r3
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	011b      	lsls	r3, r3, #4
 8008666:	3332      	adds	r3, #50	; 0x32
 8008668:	4a08      	ldr	r2, [pc, #32]	; (800868c <UART_SetConfig+0x4e4>)
 800866a:	fba2 2303 	umull	r2, r3, r2, r3
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	f003 020f 	and.w	r2, r3, #15
 8008674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4422      	add	r2, r4
 800867c:	609a      	str	r2, [r3, #8]
}
 800867e:	bf00      	nop
 8008680:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008684:	46bd      	mov	sp, r7
 8008686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800868a:	bf00      	nop
 800868c:	51eb851f 	.word	0x51eb851f

08008690 <calloc>:
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <calloc+0xc>)
 8008692:	460a      	mov	r2, r1
 8008694:	4601      	mov	r1, r0
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	f000 b842 	b.w	8008720 <_calloc_r>
 800869c:	20000028 	.word	0x20000028

080086a0 <__errno>:
 80086a0:	4b01      	ldr	r3, [pc, #4]	; (80086a8 <__errno+0x8>)
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000028 	.word	0x20000028

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4d0d      	ldr	r5, [pc, #52]	; (80086e4 <__libc_init_array+0x38>)
 80086b0:	4c0d      	ldr	r4, [pc, #52]	; (80086e8 <__libc_init_array+0x3c>)
 80086b2:	1b64      	subs	r4, r4, r5
 80086b4:	10a4      	asrs	r4, r4, #2
 80086b6:	2600      	movs	r6, #0
 80086b8:	42a6      	cmp	r6, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	4d0b      	ldr	r5, [pc, #44]	; (80086ec <__libc_init_array+0x40>)
 80086be:	4c0c      	ldr	r4, [pc, #48]	; (80086f0 <__libc_init_array+0x44>)
 80086c0:	f000 f9d4 	bl	8008a6c <_init>
 80086c4:	1b64      	subs	r4, r4, r5
 80086c6:	10a4      	asrs	r4, r4, #2
 80086c8:	2600      	movs	r6, #0
 80086ca:	42a6      	cmp	r6, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d4:	4798      	blx	r3
 80086d6:	3601      	adds	r6, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	f855 3b04 	ldr.w	r3, [r5], #4
 80086de:	4798      	blx	r3
 80086e0:	3601      	adds	r6, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	08008aac 	.word	0x08008aac
 80086e8:	08008aac 	.word	0x08008aac
 80086ec:	08008aac 	.word	0x08008aac
 80086f0:	08008ab0 	.word	0x08008ab0

080086f4 <memcpy>:
 80086f4:	440a      	add	r2, r1
 80086f6:	4291      	cmp	r1, r2
 80086f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80086fc:	d100      	bne.n	8008700 <memcpy+0xc>
 80086fe:	4770      	bx	lr
 8008700:	b510      	push	{r4, lr}
 8008702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800870a:	4291      	cmp	r1, r2
 800870c:	d1f9      	bne.n	8008702 <memcpy+0xe>
 800870e:	bd10      	pop	{r4, pc}

08008710 <memset>:
 8008710:	4402      	add	r2, r0
 8008712:	4603      	mov	r3, r0
 8008714:	4293      	cmp	r3, r2
 8008716:	d100      	bne.n	800871a <memset+0xa>
 8008718:	4770      	bx	lr
 800871a:	f803 1b01 	strb.w	r1, [r3], #1
 800871e:	e7f9      	b.n	8008714 <memset+0x4>

08008720 <_calloc_r>:
 8008720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008722:	fba1 2402 	umull	r2, r4, r1, r2
 8008726:	b94c      	cbnz	r4, 800873c <_calloc_r+0x1c>
 8008728:	4611      	mov	r1, r2
 800872a:	9201      	str	r2, [sp, #4]
 800872c:	f000 f82e 	bl	800878c <_malloc_r>
 8008730:	9a01      	ldr	r2, [sp, #4]
 8008732:	4605      	mov	r5, r0
 8008734:	b930      	cbnz	r0, 8008744 <_calloc_r+0x24>
 8008736:	4628      	mov	r0, r5
 8008738:	b003      	add	sp, #12
 800873a:	bd30      	pop	{r4, r5, pc}
 800873c:	220c      	movs	r2, #12
 800873e:	6002      	str	r2, [r0, #0]
 8008740:	2500      	movs	r5, #0
 8008742:	e7f8      	b.n	8008736 <_calloc_r+0x16>
 8008744:	4621      	mov	r1, r4
 8008746:	f7ff ffe3 	bl	8008710 <memset>
 800874a:	e7f4      	b.n	8008736 <_calloc_r+0x16>

0800874c <sbrk_aligned>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	4e0e      	ldr	r6, [pc, #56]	; (8008788 <sbrk_aligned+0x3c>)
 8008750:	460c      	mov	r4, r1
 8008752:	6831      	ldr	r1, [r6, #0]
 8008754:	4605      	mov	r5, r0
 8008756:	b911      	cbnz	r1, 800875e <sbrk_aligned+0x12>
 8008758:	f000 f88c 	bl	8008874 <_sbrk_r>
 800875c:	6030      	str	r0, [r6, #0]
 800875e:	4621      	mov	r1, r4
 8008760:	4628      	mov	r0, r5
 8008762:	f000 f887 	bl	8008874 <_sbrk_r>
 8008766:	1c43      	adds	r3, r0, #1
 8008768:	d00a      	beq.n	8008780 <sbrk_aligned+0x34>
 800876a:	1cc4      	adds	r4, r0, #3
 800876c:	f024 0403 	bic.w	r4, r4, #3
 8008770:	42a0      	cmp	r0, r4
 8008772:	d007      	beq.n	8008784 <sbrk_aligned+0x38>
 8008774:	1a21      	subs	r1, r4, r0
 8008776:	4628      	mov	r0, r5
 8008778:	f000 f87c 	bl	8008874 <_sbrk_r>
 800877c:	3001      	adds	r0, #1
 800877e:	d101      	bne.n	8008784 <sbrk_aligned+0x38>
 8008780:	f04f 34ff 	mov.w	r4, #4294967295
 8008784:	4620      	mov	r0, r4
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	20000550 	.word	0x20000550

0800878c <_malloc_r>:
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	1ccd      	adds	r5, r1, #3
 8008792:	f025 0503 	bic.w	r5, r5, #3
 8008796:	3508      	adds	r5, #8
 8008798:	2d0c      	cmp	r5, #12
 800879a:	bf38      	it	cc
 800879c:	250c      	movcc	r5, #12
 800879e:	2d00      	cmp	r5, #0
 80087a0:	4607      	mov	r7, r0
 80087a2:	db01      	blt.n	80087a8 <_malloc_r+0x1c>
 80087a4:	42a9      	cmp	r1, r5
 80087a6:	d905      	bls.n	80087b4 <_malloc_r+0x28>
 80087a8:	230c      	movs	r3, #12
 80087aa:	603b      	str	r3, [r7, #0]
 80087ac:	2600      	movs	r6, #0
 80087ae:	4630      	mov	r0, r6
 80087b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b4:	4e2e      	ldr	r6, [pc, #184]	; (8008870 <_malloc_r+0xe4>)
 80087b6:	f000 f86d 	bl	8008894 <__malloc_lock>
 80087ba:	6833      	ldr	r3, [r6, #0]
 80087bc:	461c      	mov	r4, r3
 80087be:	bb34      	cbnz	r4, 800880e <_malloc_r+0x82>
 80087c0:	4629      	mov	r1, r5
 80087c2:	4638      	mov	r0, r7
 80087c4:	f7ff ffc2 	bl	800874c <sbrk_aligned>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	4604      	mov	r4, r0
 80087cc:	d14d      	bne.n	800886a <_malloc_r+0xde>
 80087ce:	6834      	ldr	r4, [r6, #0]
 80087d0:	4626      	mov	r6, r4
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	d140      	bne.n	8008858 <_malloc_r+0xcc>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	4631      	mov	r1, r6
 80087da:	4638      	mov	r0, r7
 80087dc:	eb04 0803 	add.w	r8, r4, r3
 80087e0:	f000 f848 	bl	8008874 <_sbrk_r>
 80087e4:	4580      	cmp	r8, r0
 80087e6:	d13a      	bne.n	800885e <_malloc_r+0xd2>
 80087e8:	6821      	ldr	r1, [r4, #0]
 80087ea:	3503      	adds	r5, #3
 80087ec:	1a6d      	subs	r5, r5, r1
 80087ee:	f025 0503 	bic.w	r5, r5, #3
 80087f2:	3508      	adds	r5, #8
 80087f4:	2d0c      	cmp	r5, #12
 80087f6:	bf38      	it	cc
 80087f8:	250c      	movcc	r5, #12
 80087fa:	4629      	mov	r1, r5
 80087fc:	4638      	mov	r0, r7
 80087fe:	f7ff ffa5 	bl	800874c <sbrk_aligned>
 8008802:	3001      	adds	r0, #1
 8008804:	d02b      	beq.n	800885e <_malloc_r+0xd2>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	442b      	add	r3, r5
 800880a:	6023      	str	r3, [r4, #0]
 800880c:	e00e      	b.n	800882c <_malloc_r+0xa0>
 800880e:	6822      	ldr	r2, [r4, #0]
 8008810:	1b52      	subs	r2, r2, r5
 8008812:	d41e      	bmi.n	8008852 <_malloc_r+0xc6>
 8008814:	2a0b      	cmp	r2, #11
 8008816:	d916      	bls.n	8008846 <_malloc_r+0xba>
 8008818:	1961      	adds	r1, r4, r5
 800881a:	42a3      	cmp	r3, r4
 800881c:	6025      	str	r5, [r4, #0]
 800881e:	bf18      	it	ne
 8008820:	6059      	strne	r1, [r3, #4]
 8008822:	6863      	ldr	r3, [r4, #4]
 8008824:	bf08      	it	eq
 8008826:	6031      	streq	r1, [r6, #0]
 8008828:	5162      	str	r2, [r4, r5]
 800882a:	604b      	str	r3, [r1, #4]
 800882c:	4638      	mov	r0, r7
 800882e:	f104 060b 	add.w	r6, r4, #11
 8008832:	f000 f835 	bl	80088a0 <__malloc_unlock>
 8008836:	f026 0607 	bic.w	r6, r6, #7
 800883a:	1d23      	adds	r3, r4, #4
 800883c:	1af2      	subs	r2, r6, r3
 800883e:	d0b6      	beq.n	80087ae <_malloc_r+0x22>
 8008840:	1b9b      	subs	r3, r3, r6
 8008842:	50a3      	str	r3, [r4, r2]
 8008844:	e7b3      	b.n	80087ae <_malloc_r+0x22>
 8008846:	6862      	ldr	r2, [r4, #4]
 8008848:	42a3      	cmp	r3, r4
 800884a:	bf0c      	ite	eq
 800884c:	6032      	streq	r2, [r6, #0]
 800884e:	605a      	strne	r2, [r3, #4]
 8008850:	e7ec      	b.n	800882c <_malloc_r+0xa0>
 8008852:	4623      	mov	r3, r4
 8008854:	6864      	ldr	r4, [r4, #4]
 8008856:	e7b2      	b.n	80087be <_malloc_r+0x32>
 8008858:	4634      	mov	r4, r6
 800885a:	6876      	ldr	r6, [r6, #4]
 800885c:	e7b9      	b.n	80087d2 <_malloc_r+0x46>
 800885e:	230c      	movs	r3, #12
 8008860:	603b      	str	r3, [r7, #0]
 8008862:	4638      	mov	r0, r7
 8008864:	f000 f81c 	bl	80088a0 <__malloc_unlock>
 8008868:	e7a1      	b.n	80087ae <_malloc_r+0x22>
 800886a:	6025      	str	r5, [r4, #0]
 800886c:	e7de      	b.n	800882c <_malloc_r+0xa0>
 800886e:	bf00      	nop
 8008870:	2000054c 	.word	0x2000054c

08008874 <_sbrk_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d06      	ldr	r5, [pc, #24]	; (8008890 <_sbrk_r+0x1c>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	f7fb fc04 	bl	800408c <_sbrk>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_sbrk_r+0x1a>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_sbrk_r+0x1a>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	20000554 	.word	0x20000554

08008894 <__malloc_lock>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__malloc_lock+0x8>)
 8008896:	f000 b809 	b.w	80088ac <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	20000558 	.word	0x20000558

080088a0 <__malloc_unlock>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__malloc_unlock+0x8>)
 80088a2:	f000 b804 	b.w	80088ae <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	20000558 	.word	0x20000558

080088ac <__retarget_lock_acquire_recursive>:
 80088ac:	4770      	bx	lr

080088ae <__retarget_lock_release_recursive>:
 80088ae:	4770      	bx	lr

080088b0 <sqrt>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	ed2d 8b02 	vpush	{d8}
 80088b6:	ec55 4b10 	vmov	r4, r5, d0
 80088ba:	f000 f825 	bl	8008908 <__ieee754_sqrt>
 80088be:	4622      	mov	r2, r4
 80088c0:	462b      	mov	r3, r5
 80088c2:	4620      	mov	r0, r4
 80088c4:	4629      	mov	r1, r5
 80088c6:	eeb0 8a40 	vmov.f32	s16, s0
 80088ca:	eef0 8a60 	vmov.f32	s17, s1
 80088ce:	f7f8 f8d9 	bl	8000a84 <__aeabi_dcmpun>
 80088d2:	b990      	cbnz	r0, 80088fa <sqrt+0x4a>
 80088d4:	2200      	movs	r2, #0
 80088d6:	2300      	movs	r3, #0
 80088d8:	4620      	mov	r0, r4
 80088da:	4629      	mov	r1, r5
 80088dc:	f7f8 f8aa 	bl	8000a34 <__aeabi_dcmplt>
 80088e0:	b158      	cbz	r0, 80088fa <sqrt+0x4a>
 80088e2:	f7ff fedd 	bl	80086a0 <__errno>
 80088e6:	2321      	movs	r3, #33	; 0x21
 80088e8:	6003      	str	r3, [r0, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	2300      	movs	r3, #0
 80088ee:	4610      	mov	r0, r2
 80088f0:	4619      	mov	r1, r3
 80088f2:	f7f7 ff57 	bl	80007a4 <__aeabi_ddiv>
 80088f6:	ec41 0b18 	vmov	d8, r0, r1
 80088fa:	eeb0 0a48 	vmov.f32	s0, s16
 80088fe:	eef0 0a68 	vmov.f32	s1, s17
 8008902:	ecbd 8b02 	vpop	{d8}
 8008906:	bd38      	pop	{r3, r4, r5, pc}

08008908 <__ieee754_sqrt>:
 8008908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800890c:	ec55 4b10 	vmov	r4, r5, d0
 8008910:	4e55      	ldr	r6, [pc, #340]	; (8008a68 <__ieee754_sqrt+0x160>)
 8008912:	43ae      	bics	r6, r5
 8008914:	ee10 0a10 	vmov	r0, s0
 8008918:	ee10 3a10 	vmov	r3, s0
 800891c:	462a      	mov	r2, r5
 800891e:	4629      	mov	r1, r5
 8008920:	d110      	bne.n	8008944 <__ieee754_sqrt+0x3c>
 8008922:	ee10 2a10 	vmov	r2, s0
 8008926:	462b      	mov	r3, r5
 8008928:	f7f7 fe12 	bl	8000550 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4620      	mov	r0, r4
 8008932:	4629      	mov	r1, r5
 8008934:	f7f7 fc56 	bl	80001e4 <__adddf3>
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	ec45 4b10 	vmov	d0, r4, r5
 8008940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008944:	2d00      	cmp	r5, #0
 8008946:	dc10      	bgt.n	800896a <__ieee754_sqrt+0x62>
 8008948:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800894c:	4330      	orrs	r0, r6
 800894e:	d0f5      	beq.n	800893c <__ieee754_sqrt+0x34>
 8008950:	b15d      	cbz	r5, 800896a <__ieee754_sqrt+0x62>
 8008952:	ee10 2a10 	vmov	r2, s0
 8008956:	462b      	mov	r3, r5
 8008958:	ee10 0a10 	vmov	r0, s0
 800895c:	f7f7 fc40 	bl	80001e0 <__aeabi_dsub>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	f7f7 ff1e 	bl	80007a4 <__aeabi_ddiv>
 8008968:	e7e6      	b.n	8008938 <__ieee754_sqrt+0x30>
 800896a:	1512      	asrs	r2, r2, #20
 800896c:	d074      	beq.n	8008a58 <__ieee754_sqrt+0x150>
 800896e:	07d4      	lsls	r4, r2, #31
 8008970:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008974:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800897c:	bf5e      	ittt	pl
 800897e:	0fda      	lsrpl	r2, r3, #31
 8008980:	005b      	lslpl	r3, r3, #1
 8008982:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008986:	2400      	movs	r4, #0
 8008988:	0fda      	lsrs	r2, r3, #31
 800898a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800898e:	107f      	asrs	r7, r7, #1
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	2516      	movs	r5, #22
 8008994:	4620      	mov	r0, r4
 8008996:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800899a:	1886      	adds	r6, r0, r2
 800899c:	428e      	cmp	r6, r1
 800899e:	bfde      	ittt	le
 80089a0:	1b89      	suble	r1, r1, r6
 80089a2:	18b0      	addle	r0, r6, r2
 80089a4:	18a4      	addle	r4, r4, r2
 80089a6:	0049      	lsls	r1, r1, #1
 80089a8:	3d01      	subs	r5, #1
 80089aa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80089ae:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80089b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089b6:	d1f0      	bne.n	800899a <__ieee754_sqrt+0x92>
 80089b8:	462a      	mov	r2, r5
 80089ba:	f04f 0e20 	mov.w	lr, #32
 80089be:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80089c2:	4281      	cmp	r1, r0
 80089c4:	eb06 0c05 	add.w	ip, r6, r5
 80089c8:	dc02      	bgt.n	80089d0 <__ieee754_sqrt+0xc8>
 80089ca:	d113      	bne.n	80089f4 <__ieee754_sqrt+0xec>
 80089cc:	459c      	cmp	ip, r3
 80089ce:	d811      	bhi.n	80089f4 <__ieee754_sqrt+0xec>
 80089d0:	f1bc 0f00 	cmp.w	ip, #0
 80089d4:	eb0c 0506 	add.w	r5, ip, r6
 80089d8:	da43      	bge.n	8008a62 <__ieee754_sqrt+0x15a>
 80089da:	2d00      	cmp	r5, #0
 80089dc:	db41      	blt.n	8008a62 <__ieee754_sqrt+0x15a>
 80089de:	f100 0801 	add.w	r8, r0, #1
 80089e2:	1a09      	subs	r1, r1, r0
 80089e4:	459c      	cmp	ip, r3
 80089e6:	bf88      	it	hi
 80089e8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80089ec:	eba3 030c 	sub.w	r3, r3, ip
 80089f0:	4432      	add	r2, r6
 80089f2:	4640      	mov	r0, r8
 80089f4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80089f8:	f1be 0e01 	subs.w	lr, lr, #1
 80089fc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a04:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008a08:	d1db      	bne.n	80089c2 <__ieee754_sqrt+0xba>
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	d006      	beq.n	8008a1c <__ieee754_sqrt+0x114>
 8008a0e:	1c50      	adds	r0, r2, #1
 8008a10:	bf13      	iteet	ne
 8008a12:	3201      	addne	r2, #1
 8008a14:	3401      	addeq	r4, #1
 8008a16:	4672      	moveq	r2, lr
 8008a18:	f022 0201 	bicne.w	r2, r2, #1
 8008a1c:	1063      	asrs	r3, r4, #1
 8008a1e:	0852      	lsrs	r2, r2, #1
 8008a20:	07e1      	lsls	r1, r4, #31
 8008a22:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008a26:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008a2a:	bf48      	it	mi
 8008a2c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008a30:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008a34:	4614      	mov	r4, r2
 8008a36:	e781      	b.n	800893c <__ieee754_sqrt+0x34>
 8008a38:	0ad9      	lsrs	r1, r3, #11
 8008a3a:	3815      	subs	r0, #21
 8008a3c:	055b      	lsls	r3, r3, #21
 8008a3e:	2900      	cmp	r1, #0
 8008a40:	d0fa      	beq.n	8008a38 <__ieee754_sqrt+0x130>
 8008a42:	02cd      	lsls	r5, r1, #11
 8008a44:	d50a      	bpl.n	8008a5c <__ieee754_sqrt+0x154>
 8008a46:	f1c2 0420 	rsb	r4, r2, #32
 8008a4a:	fa23 f404 	lsr.w	r4, r3, r4
 8008a4e:	1e55      	subs	r5, r2, #1
 8008a50:	4093      	lsls	r3, r2
 8008a52:	4321      	orrs	r1, r4
 8008a54:	1b42      	subs	r2, r0, r5
 8008a56:	e78a      	b.n	800896e <__ieee754_sqrt+0x66>
 8008a58:	4610      	mov	r0, r2
 8008a5a:	e7f0      	b.n	8008a3e <__ieee754_sqrt+0x136>
 8008a5c:	0049      	lsls	r1, r1, #1
 8008a5e:	3201      	adds	r2, #1
 8008a60:	e7ef      	b.n	8008a42 <__ieee754_sqrt+0x13a>
 8008a62:	4680      	mov	r8, r0
 8008a64:	e7bd      	b.n	80089e2 <__ieee754_sqrt+0xda>
 8008a66:	bf00      	nop
 8008a68:	7ff00000 	.word	0x7ff00000

08008a6c <_init>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	bf00      	nop
 8008a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a72:	bc08      	pop	{r3}
 8008a74:	469e      	mov	lr, r3
 8008a76:	4770      	bx	lr

08008a78 <_fini>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr

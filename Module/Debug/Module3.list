
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008350  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080084e8  080084e8  000184e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008510  08008510  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008518  08008518  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000098  080085b8  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  080085b8  00020544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113cc  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002005  00000000  00000000  00031494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  000334a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00034450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f50  00000000  00000000  00035370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012532  00000000  00000000  0004c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091866  00000000  00000000  0005e7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f4  00000000  00000000  000f00a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080084d0 	.word	0x080084d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	080084d0 	.word	0x080084d0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_uldivmod>:
 8000dbc:	b953      	cbnz	r3, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dbe:	b94a      	cbnz	r2, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	bf08      	it	eq
 8000dc4:	2800      	cmpeq	r0, #0
 8000dc6:	bf1c      	itt	ne
 8000dc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd0:	f000 b974 	b.w	80010bc <__aeabi_idiv0>
 8000dd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ddc:	f000 f806 	bl	8000dec <__udivmoddi4>
 8000de0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de8:	b004      	add	sp, #16
 8000dea:	4770      	bx	lr

08000dec <__udivmoddi4>:
 8000dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df0:	9d08      	ldr	r5, [sp, #32]
 8000df2:	4604      	mov	r4, r0
 8000df4:	468e      	mov	lr, r1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d14d      	bne.n	8000e96 <__udivmoddi4+0xaa>
 8000dfa:	428a      	cmp	r2, r1
 8000dfc:	4694      	mov	ip, r2
 8000dfe:	d969      	bls.n	8000ed4 <__udivmoddi4+0xe8>
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	b152      	cbz	r2, 8000e1c <__udivmoddi4+0x30>
 8000e06:	fa01 f302 	lsl.w	r3, r1, r2
 8000e0a:	f1c2 0120 	rsb	r1, r2, #32
 8000e0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000e12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e16:	ea41 0e03 	orr.w	lr, r1, r3
 8000e1a:	4094      	lsls	r4, r2
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	0c21      	lsrs	r1, r4, #16
 8000e22:	fbbe f6f8 	udiv	r6, lr, r8
 8000e26:	fa1f f78c 	uxth.w	r7, ip
 8000e2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e32:	fb06 f107 	mul.w	r1, r6, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d90a      	bls.n	8000e50 <__udivmoddi4+0x64>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e42:	f080 811f 	bcs.w	8001084 <__udivmoddi4+0x298>
 8000e46:	4299      	cmp	r1, r3
 8000e48:	f240 811c 	bls.w	8001084 <__udivmoddi4+0x298>
 8000e4c:	3e02      	subs	r6, #2
 8000e4e:	4463      	add	r3, ip
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e58:	fb08 3310 	mls	r3, r8, r0, r3
 8000e5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e60:	fb00 f707 	mul.w	r7, r0, r7
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x92>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e70:	f080 810a 	bcs.w	8001088 <__udivmoddi4+0x29c>
 8000e74:	42a7      	cmp	r7, r4
 8000e76:	f240 8107 	bls.w	8001088 <__udivmoddi4+0x29c>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	1be4      	subs	r4, r4, r7
 8000e84:	2600      	movs	r6, #0
 8000e86:	b11d      	cbz	r5, 8000e90 <__udivmoddi4+0xa4>
 8000e88:	40d4      	lsrs	r4, r2
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d909      	bls.n	8000eae <__udivmoddi4+0xc2>
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	f000 80ef 	beq.w	800107e <__udivmoddi4+0x292>
 8000ea0:	2600      	movs	r6, #0
 8000ea2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	fab3 f683 	clz	r6, r3
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d14a      	bne.n	8000f4c <__udivmoddi4+0x160>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xd4>
 8000eba:	4282      	cmp	r2, r0
 8000ebc:	f200 80f9 	bhi.w	80010b2 <__udivmoddi4+0x2c6>
 8000ec0:	1a84      	subs	r4, r0, r2
 8000ec2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	469e      	mov	lr, r3
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d0e0      	beq.n	8000e90 <__udivmoddi4+0xa4>
 8000ece:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ed2:	e7dd      	b.n	8000e90 <__udivmoddi4+0xa4>
 8000ed4:	b902      	cbnz	r2, 8000ed8 <__udivmoddi4+0xec>
 8000ed6:	deff      	udf	#255	; 0xff
 8000ed8:	fab2 f282 	clz	r2, r2
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	f040 8092 	bne.w	8001006 <__udivmoddi4+0x21a>
 8000ee2:	eba1 010c 	sub.w	r1, r1, ip
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2601      	movs	r6, #1
 8000ef0:	0c20      	lsrs	r0, r4, #16
 8000ef2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ef6:	fb07 1113 	mls	r1, r7, r3, r1
 8000efa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efe:	fb0e f003 	mul.w	r0, lr, r3
 8000f02:	4288      	cmp	r0, r1
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x12c>
 8000f06:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x12a>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2c0>
 8000f16:	4643      	mov	r3, r8
 8000f18:	1a09      	subs	r1, r1, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f20:	fb07 1110 	mls	r1, r7, r0, r1
 8000f24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x156>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x154>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2ca>
 8000f40:	4608      	mov	r0, r1
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f4a:	e79c      	b.n	8000e86 <__udivmoddi4+0x9a>
 8000f4c:	f1c6 0720 	rsb	r7, r6, #32
 8000f50:	40b3      	lsls	r3, r6
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f62:	431c      	orrs	r4, r3
 8000f64:	40f9      	lsrs	r1, r7
 8000f66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f72:	0c20      	lsrs	r0, r4, #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fb09 1118 	mls	r1, r9, r8, r1
 8000f7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f80:	fb08 f00e 	mul.w	r0, r8, lr
 8000f84:	4288      	cmp	r0, r1
 8000f86:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b8>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2bc>
 8000f98:	4288      	cmp	r0, r1
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2bc>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4461      	add	r1, ip
 8000fa4:	1a09      	subs	r1, r1, r0
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fac:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fb8:	458e      	cmp	lr, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1e2>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2b4>
 8000fc6:	458e      	cmp	lr, r1
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2b4>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fd6:	eba1 010e 	sub.w	r1, r1, lr
 8000fda:	42a1      	cmp	r1, r4
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46a6      	mov	lr, r4
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x2a4>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x2a0>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x212>
 8000fe6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fea:	eb61 010e 	sbc.w	r1, r1, lr
 8000fee:	fa01 f707 	lsl.w	r7, r1, r7
 8000ff2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ff6:	40f1      	lsrs	r1, r6
 8000ff8:	431f      	orrs	r7, r3
 8000ffa:	e9c5 7100 	strd	r7, r1, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	f1c2 0320 	rsb	r3, r2, #32
 800100a:	40d8      	lsrs	r0, r3
 800100c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001010:	fa21 f303 	lsr.w	r3, r1, r3
 8001014:	4091      	lsls	r1, r2
 8001016:	4301      	orrs	r1, r0
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb3 f0f7 	udiv	r0, r3, r7
 8001024:	fb07 3610 	mls	r6, r7, r0, r3
 8001028:	0c0b      	lsrs	r3, r1, #16
 800102a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800102e:	fb00 f60e 	mul.w	r6, r0, lr
 8001032:	429e      	cmp	r6, r3
 8001034:	fa04 f402 	lsl.w	r4, r4, r2
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x260>
 800103a:	eb1c 0303 	adds.w	r3, ip, r3
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b8>
 8001044:	429e      	cmp	r6, r3
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b8>
 8001048:	3802      	subs	r0, #2
 800104a:	4463      	add	r3, ip
 800104c:	1b9b      	subs	r3, r3, r6
 800104e:	b289      	uxth	r1, r1
 8001050:	fbb3 f6f7 	udiv	r6, r3, r7
 8001054:	fb07 3316 	mls	r3, r7, r6, r3
 8001058:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800105c:	fb06 f30e 	mul.w	r3, r6, lr
 8001060:	428b      	cmp	r3, r1
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x28a>
 8001064:	eb1c 0101 	adds.w	r1, ip, r1
 8001068:	f106 38ff 	add.w	r8, r6, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2b0>
 800106e:	428b      	cmp	r3, r1
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2b0>
 8001072:	3e02      	subs	r6, #2
 8001074:	4461      	add	r1, ip
 8001076:	1ac9      	subs	r1, r1, r3
 8001078:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0x104>
 800107e:	462e      	mov	r6, r5
 8001080:	4628      	mov	r0, r5
 8001082:	e705      	b.n	8000e90 <__udivmoddi4+0xa4>
 8001084:	4606      	mov	r6, r0
 8001086:	e6e3      	b.n	8000e50 <__udivmoddi4+0x64>
 8001088:	4618      	mov	r0, r3
 800108a:	e6f8      	b.n	8000e7e <__udivmoddi4+0x92>
 800108c:	454b      	cmp	r3, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f8>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001098:	3801      	subs	r0, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f8>
 800109c:	4646      	mov	r6, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x28a>
 80010a0:	4620      	mov	r0, r4
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1e2>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x260>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b8>
 80010ac:	3b02      	subs	r3, #2
 80010ae:	4461      	add	r1, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x12c>
 80010b2:	4630      	mov	r0, r6
 80010b4:	e709      	b.n	8000eca <__udivmoddi4+0xde>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x156>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010c4:	b087      	sub	sp, #28
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c8:	f002 fd84 	bl	8003bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 fb64 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f000 fd98 	bl	8001c04 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010d4:	f000 fbf6 	bl	80018c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010d8:	f000 fca0 	bl	8001a1c <MX_TIM2_Init>
  MX_DMA_Init();
 80010dc:	f000 fd6a 	bl	8001bb4 <MX_DMA_Init>
  MX_I2C1_Init();
 80010e0:	f000 fbc2 	bl	8001868 <MX_I2C1_Init>
  MX_TIM3_Init();
 80010e4:	f000 fce6 	bl	8001ab4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80010e8:	f000 fd38 	bl	8001b5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

UART2.huart = &huart2;
 80010ec:	4b79      	ldr	r3, [pc, #484]	; (80012d4 <main+0x214>)
 80010ee:	4a7a      	ldr	r2, [pc, #488]	; (80012d8 <main+0x218>)
 80010f0:	601a      	str	r2, [r3, #0]
UART2.RxLen = 255;
 80010f2:	4b78      	ldr	r3, [pc, #480]	; (80012d4 <main+0x214>)
 80010f4:	22ff      	movs	r2, #255	; 0xff
 80010f6:	80da      	strh	r2, [r3, #6]
UART2.TxLen = 255;
 80010f8:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <main+0x214>)
 80010fa:	22ff      	movs	r2, #255	; 0xff
 80010fc:	809a      	strh	r2, [r3, #4]
UARTInit(&UART2);
 80010fe:	4875      	ldr	r0, [pc, #468]	; (80012d4 <main+0x214>)
 8001100:	f000 fe2c 	bl	8001d5c <UARTInit>
UARTResetStart(&UART2);
 8001104:	4873      	ldr	r0, [pc, #460]	; (80012d4 <main+0x214>)
 8001106:	f000 fe51 	bl	8001dac <UARTResetStart>


	PIDinit() ;
 800110a:	f001 fffd 	bl	8003108 <PIDinit>

  // start PWM
  HAL_TIM_Base_Start(&htim1);
 800110e:	4873      	ldr	r0, [pc, #460]	; (80012dc <main+0x21c>)
 8001110:	f004 fdf4 	bl	8005cfc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001114:	2100      	movs	r1, #0
 8001116:	4871      	ldr	r0, [pc, #452]	; (80012dc <main+0x21c>)
 8001118:	f004 ff06 	bl	8005f28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800111c:	2104      	movs	r1, #4
 800111e:	486f      	ldr	r0, [pc, #444]	; (80012dc <main+0x21c>)
 8001120:	f004 ff02 	bl	8005f28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001124:	2108      	movs	r1, #8
 8001126:	486d      	ldr	r0, [pc, #436]	; (80012dc <main+0x21c>)
 8001128:	f004 fefe 	bl	8005f28 <HAL_TIM_PWM_Start>

  // start micros
  HAL_TIM_Base_Start_IT(&htim2);
 800112c:	486c      	ldr	r0, [pc, #432]	; (80012e0 <main+0x220>)
 800112e:	f004 fe3f 	bl	8005db0 <HAL_TIM_Base_Start_IT>

  // start Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001132:	213c      	movs	r1, #60	; 0x3c
 8001134:	486b      	ldr	r0, [pc, #428]	; (80012e4 <main+0x224>)
 8001136:	f005 f84d 	bl	80061d4 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Station[0] = 45;
 800113a:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <main+0x228>)
 800113c:	222d      	movs	r2, #45	; 0x2d
 800113e:	801a      	strh	r2, [r3, #0]
	  Station[1] = 360;
 8001140:	4b69      	ldr	r3, [pc, #420]	; (80012e8 <main+0x228>)
 8001142:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001146:	805a      	strh	r2, [r3, #2]
	  Station[2] = 25;
 8001148:	4b67      	ldr	r3, [pc, #412]	; (80012e8 <main+0x228>)
 800114a:	2219      	movs	r2, #25
 800114c:	809a      	strh	r2, [r3, #4]
	  Station[3] = 30;
 800114e:	4b66      	ldr	r3, [pc, #408]	; (80012e8 <main+0x228>)
 8001150:	221e      	movs	r2, #30
 8001152:	80da      	strh	r2, [r3, #6]
	  Station[4] = 45;
 8001154:	4b64      	ldr	r3, [pc, #400]	; (80012e8 <main+0x228>)
 8001156:	222d      	movs	r2, #45	; 0x2d
 8001158:	811a      	strh	r2, [r3, #8]
	  Station[5] = 270;
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <main+0x228>)
 800115c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001160:	815a      	strh	r2, [r3, #10]
	  Station[6] = 45;
 8001162:	4b61      	ldr	r3, [pc, #388]	; (80012e8 <main+0x228>)
 8001164:	222d      	movs	r2, #45	; 0x2d
 8001166:	819a      	strh	r2, [r3, #12]
	  Station[7] = 90;
 8001168:	4b5f      	ldr	r3, [pc, #380]	; (80012e8 <main+0x228>)
 800116a:	225a      	movs	r2, #90	; 0x5a
 800116c:	81da      	strh	r2, [r3, #14]
	  Station[8] = 270;
 800116e:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <main+0x228>)
 8001170:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001174:	821a      	strh	r2, [r3, #16]
	  Station[9] = 0;
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <main+0x228>)
 8001178:	2200      	movs	r2, #0
 800117a:	825a      	strh	r2, [r3, #18]
	  uint8_t GoToStation[] = {7,1,4,5,9};
 800117c:	4a5b      	ldr	r2, [pc, #364]	; (80012ec <main+0x22c>)
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001186:	6018      	str	r0, [r3, #0]
 8001188:	3304      	adds	r3, #4
 800118a:	7019      	strb	r1, [r3, #0]
	  if (FinishedStation)
 800118c:	4b58      	ldr	r3, [pc, #352]	; (80012f0 <main+0x230>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d018      	beq.n	80011c6 <main+0x106>
	  {
		  if (micros() - effTimestamp > 5000000)
 8001194:	f002 fa66 	bl	8003664 <micros>
 8001198:	4b56      	ldr	r3, [pc, #344]	; (80012f4 <main+0x234>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	1a84      	subs	r4, r0, r2
 80011a0:	eb61 0503 	sbc.w	r5, r1, r3
 80011a4:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <main+0x238>)
 80011a6:	429c      	cmp	r4, r3
 80011a8:	f175 0300 	sbcs.w	r3, r5, #0
 80011ac:	d30b      	bcc.n	80011c6 <main+0x106>
		  {
			  NextStation++;
 80011ae:	4b53      	ldr	r3, [pc, #332]	; (80012fc <main+0x23c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b51      	ldr	r3, [pc, #324]	; (80012fc <main+0x23c>)
 80011b8:	701a      	strb	r2, [r3, #0]
			  FinishedStation = 0;
 80011ba:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <main+0x230>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
			  StartMoving = 1;
 80011c0:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <main+0x240>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  FinalPos = Station[GoToStation[NextStation]];
 80011c6:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <main+0x23c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	3310      	adds	r3, #16
 80011cc:	f107 0208 	add.w	r2, r7, #8
 80011d0:	4413      	add	r3, r2
 80011d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <main+0x228>)
 80011da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e6:	4b47      	ldr	r3, [pc, #284]	; (8001304 <main+0x244>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
	  MovingState = *(&GoToStation + 1) - GoToStation;
 80011ec:	4b46      	ldr	r3, [pc, #280]	; (8001308 <main+0x248>)
 80011ee:	2205      	movs	r2, #5
 80011f0:	701a      	strb	r2, [r3, #0]
	  if (NextStation >= MovingState)
 80011f2:	4b42      	ldr	r3, [pc, #264]	; (80012fc <main+0x23c>)
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	4b44      	ldr	r3, [pc, #272]	; (8001308 <main+0x248>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d308      	bcc.n	8001210 <main+0x150>
	  {
		  FinishedTask = 1;
 80011fe:	4b43      	ldr	r3, [pc, #268]	; (800130c <main+0x24c>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
		  NextStation = 0;
 8001204:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <main+0x23c>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
		  StartMoving = 0;
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <main+0x240>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
	  }

//***********General********************************
	  ButtonBuffer[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001214:	483e      	ldr	r0, [pc, #248]	; (8001310 <main+0x250>)
 8001216:	f003 fc0b 	bl	8004a30 <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <main+0x254>)
 8001220:	701a      	strb	r2, [r3, #0]
	  if (ButtonBuffer[1] == 1 && ButtonBuffer[0]== 0)
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <main+0x254>)
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d10b      	bne.n	8001242 <main+0x182>
 800122a:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <main+0x254>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d107      	bne.n	8001242 <main+0x182>
	  {
		  test ++;
 8001232:	4b39      	ldr	r3, [pc, #228]	; (8001318 <main+0x258>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <main+0x258>)
 800123c:	701a      	strb	r2, [r3, #0]
		  EndEffWrite();
 800123e:	f000 fd5b 	bl	8001cf8 <EndEffWrite>
	  }
	  ButtonBuffer[1] = ButtonBuffer[0];
 8001242:	4b34      	ldr	r3, [pc, #208]	; (8001314 <main+0x254>)
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	4b33      	ldr	r3, [pc, #204]	; (8001314 <main+0x254>)
 8001248:	705a      	strb	r2, [r3, #1]
	  Degree = htim3.Instance->CNT * 360.0 / 2048.0 ; //Degree unit
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <main+0x224>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f903 	bl	800045c <__aeabi_ui2d>
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <main+0x25c>)
 800125c:	f7ff f978 	bl	8000550 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <main+0x260>)
 800126e:	f7ff fa99 	bl	80007a4 <__aeabi_ddiv>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fc41 	bl	8000b00 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <main+0x264>)
 8001282:	6013      	str	r3, [r2, #0]
	  PWMgeneration() ; //Gen PWM
 8001284:	f002 f970 	bl	8003568 <PWMgeneration>
//***************************************************
//**********Get Real Vmax****************************
	  float V;
	  VelocityRPM = Velocity() ; //rpm unit
 8001288:	f002 f90a 	bl	80034a0 <Velocity>
 800128c:	eef0 7a40 	vmov.f32	s15, s0
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <main+0x268>)
 8001292:	edc3 7a00 	vstr	s15, [r3]
	  if (VelocityRPM < 0)
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <main+0x268>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	d544      	bpl.n	8001330 <main+0x270>
	  {
		  V = (-1) * VelocityRPM;
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <main+0x268>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	eef1 7a67 	vneg.f32	s15, s15
 80012b0:	edc7 7a05 	vstr	s15, [r7, #20]
		  if (V > VmaxReal)
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <main+0x26c>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80012be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c6:	dd44      	ble.n	8001352 <main+0x292>
		  {
			  VmaxReal = VelocityRPM;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <main+0x268>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a17      	ldr	r2, [pc, #92]	; (800132c <main+0x26c>)
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e03f      	b.n	8001352 <main+0x292>
 80012d2:	bf00      	nop
 80012d4:	200002e4 	.word	0x200002e4
 80012d8:	200001e0 	.word	0x200001e0
 80012dc:	20000108 	.word	0x20000108
 80012e0:	20000150 	.word	0x20000150
 80012e4:	20000198 	.word	0x20000198
 80012e8:	20000404 	.word	0x20000404
 80012ec:	080084e8 	.word	0x080084e8
 80012f0:	200004e4 	.word	0x200004e4
 80012f4:	200004e8 	.word	0x200004e8
 80012f8:	004c4b41 	.word	0x004c4b41
 80012fc:	200004e6 	.word	0x200004e6
 8001300:	20000460 	.word	0x20000460
 8001304:	2000001c 	.word	0x2000001c
 8001308:	200004e7 	.word	0x200004e7
 800130c:	200004e5 	.word	0x200004e5
 8001310:	40020800 	.word	0x40020800
 8001314:	2000050c 	.word	0x2000050c
 8001318:	2000050e 	.word	0x2000050e
 800131c:	40768000 	.word	0x40768000
 8001320:	40a00000 	.word	0x40a00000
 8001324:	20000504 	.word	0x20000504
 8001328:	20000500 	.word	0x20000500
 800132c:	200004ac 	.word	0x200004ac
		  }
	  }
	  else
	  {
		  V = VelocityRPM;
 8001330:	4ba8      	ldr	r3, [pc, #672]	; (80015d4 <main+0x514>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	617b      	str	r3, [r7, #20]
		  if (V > VmaxReal)
 8001336:	4ba8      	ldr	r3, [pc, #672]	; (80015d8 <main+0x518>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	dd03      	ble.n	8001352 <main+0x292>
		  {
			  VmaxReal = VelocityRPM;
 800134a:	4ba2      	ldr	r3, [pc, #648]	; (80015d4 <main+0x514>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4aa2      	ldr	r2, [pc, #648]	; (80015d8 <main+0x518>)
 8001350:	6013      	str	r3, [r2, #0]
		  }
	  }
//*****************************************************
//**********Set Home******************************
	  if (StartSetHome)
 8001352:	4ba2      	ldr	r3, [pc, #648]	; (80015dc <main+0x51c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d025      	beq.n	80013a6 <main+0x2e6>
	  {
		  SetHome() ;
 800135a:	f001 fa39 	bl	80027d0 <SetHome>
		  //**************PID******************************
		  if (micros() - TimestampPID > 1000)
 800135e:	f002 f981 	bl	8003664 <micros>
 8001362:	4b9f      	ldr	r3, [pc, #636]	; (80015e0 <main+0x520>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	ebb0 0802 	subs.w	r8, r0, r2
 800136c:	eb61 0903 	sbc.w	r9, r1, r3
 8001370:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8001374:	4598      	cmp	r8, r3
 8001376:	f179 0300 	sbcs.w	r3, r9, #0
 800137a:	d314      	bcc.n	80013a6 <main+0x2e6>
		  {
			  P = p;
 800137c:	4b99      	ldr	r3, [pc, #612]	; (80015e4 <main+0x524>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a99      	ldr	r2, [pc, #612]	; (80015e8 <main+0x528>)
 8001382:	6013      	str	r3, [r2, #0]
			  I = i;
 8001384:	4b99      	ldr	r3, [pc, #612]	; (80015ec <main+0x52c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a99      	ldr	r2, [pc, #612]	; (80015f0 <main+0x530>)
 800138a:	6013      	str	r3, [r2, #0]
			  D = d;
 800138c:	4b99      	ldr	r3, [pc, #612]	; (80015f4 <main+0x534>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a99      	ldr	r2, [pc, #612]	; (80015f8 <main+0x538>)
 8001392:	6013      	str	r3, [r2, #0]
			  PID() ;
 8001394:	f001 ff00 	bl	8003198 <PID>
			  TimestampPID = micros() ;
 8001398:	f002 f964 	bl	8003664 <micros>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	498f      	ldr	r1, [pc, #572]	; (80015e0 <main+0x520>)
 80013a2:	e9c1 2300 	strd	r2, r3, [r1]
		  //************************************************
	  }
//***********************************************

//**************UART******************************
	  int16_t inputChar = UARTReadChar(&UART2);
 80013a6:	4895      	ldr	r0, [pc, #596]	; (80015fc <main+0x53c>)
 80013a8:	f000 fd24 	bl	8001df4 <UARTReadChar>
 80013ac:	4603      	mov	r3, r0
 80013ae:	827b      	strh	r3, [r7, #18]
	  if (inputChar != -1)
 80013b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b8:	d005      	beq.n	80013c6 <main+0x306>
	  {
		  Protocal(inputChar, &UART2);
 80013ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013be:	498f      	ldr	r1, [pc, #572]	; (80015fc <main+0x53c>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fdd9 	bl	8001f78 <Protocal>
	  }

	  if (Mode == 8)
 80013c6:	4b8e      	ldr	r3, [pc, #568]	; (8001600 <main+0x540>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d105      	bne.n	80013da <main+0x31a>
	  {
		  if (FinishedTask)
 80013ce:	4b8d      	ldr	r3, [pc, #564]	; (8001604 <main+0x544>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <main+0x31a>
		  {
			  WriteACK2();
 80013d6:	f001 f9e9 	bl	80027ac <WriteACK2>
		  }
	  }
	  if (Mode == 10) //Read ACK
 80013da:	4b89      	ldr	r3, [pc, #548]	; (8001600 <main+0x540>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b0a      	cmp	r3, #10
 80013e0:	d116      	bne.n	8001410 <main+0x350>
	  {
		  int16_t inputChar = UARTReadChar(&UART2);
 80013e2:	4886      	ldr	r0, [pc, #536]	; (80015fc <main+0x53c>)
 80013e4:	f000 fd06 	bl	8001df4 <UARTReadChar>
 80013e8:	4603      	mov	r3, r0
 80013ea:	823b      	strh	r3, [r7, #16]
		  if (inputChar != -1)
 80013ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d00c      	beq.n	8001410 <main+0x350>
		  {
			  MainMemory[n] = inputChar ;
 80013f6:	4b84      	ldr	r3, [pc, #528]	; (8001608 <main+0x548>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	8a3b      	ldrh	r3, [r7, #16]
 80013fe:	b2d9      	uxtb	r1, r3
 8001400:	4b82      	ldr	r3, [pc, #520]	; (800160c <main+0x54c>)
 8001402:	5499      	strb	r1, [r3, r2]
			  n++ ;
 8001404:	4b80      	ldr	r3, [pc, #512]	; (8001608 <main+0x548>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	4b7e      	ldr	r3, [pc, #504]	; (8001608 <main+0x548>)
 800140e:	801a      	strh	r2, [r3, #0]
		  }
	  }
	  if (Mode == 11) //Read ACK
 8001410:	4b7b      	ldr	r3, [pc, #492]	; (8001600 <main+0x540>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b0b      	cmp	r3, #11
 8001416:	d116      	bne.n	8001446 <main+0x386>
	  {
		  int16_t inputChar = UARTReadChar(&UART2);
 8001418:	4878      	ldr	r0, [pc, #480]	; (80015fc <main+0x53c>)
 800141a:	f000 fceb 	bl	8001df4 <UARTReadChar>
 800141e:	4603      	mov	r3, r0
 8001420:	81fb      	strh	r3, [r7, #14]
		  if (inputChar != -1)
 8001422:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142a:	d00c      	beq.n	8001446 <main+0x386>
		  {
			  MainMemory[n] = inputChar ;
 800142c:	4b76      	ldr	r3, [pc, #472]	; (8001608 <main+0x548>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	89fb      	ldrh	r3, [r7, #14]
 8001434:	b2d9      	uxtb	r1, r3
 8001436:	4b75      	ldr	r3, [pc, #468]	; (800160c <main+0x54c>)
 8001438:	5499      	strb	r1, [r3, r2]
			  n++ ;
 800143a:	4b73      	ldr	r3, [pc, #460]	; (8001608 <main+0x548>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	3301      	adds	r3, #1
 8001440:	b29a      	uxth	r2, r3
 8001442:	4b71      	ldr	r3, [pc, #452]	; (8001608 <main+0x548>)
 8001444:	801a      	strh	r2, [r3, #0]
		  }
	  }
	  if (Mode == 12)
 8001446:	4b6e      	ldr	r3, [pc, #440]	; (8001600 <main+0x540>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b0c      	cmp	r3, #12
 800144c:	d102      	bne.n	8001454 <main+0x394>
	  {
		  enable_eff = 1;
 800144e:	4b70      	ldr	r3, [pc, #448]	; (8001610 <main+0x550>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
	  }
	  if (Mode == 13)
 8001454:	4b6a      	ldr	r3, [pc, #424]	; (8001600 <main+0x540>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b0d      	cmp	r3, #13
 800145a:	d102      	bne.n	8001462 <main+0x3a2>
	  {
		  enable_eff = 0;
 800145c:	4b6c      	ldr	r3, [pc, #432]	; (8001610 <main+0x550>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
//	  }


//****************************************************
//*******init Traj***********************************
	  if (StartMoving == 0 && StartSetHome == 0)
 8001462:	4b6c      	ldr	r3, [pc, #432]	; (8001614 <main+0x554>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d115      	bne.n	8001496 <main+0x3d6>
 800146a:	4b5c      	ldr	r3, [pc, #368]	; (80015dc <main+0x51c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d111      	bne.n	8001496 <main+0x3d6>
	  {
		  T = 0;
 8001472:	4b69      	ldr	r3, [pc, #420]	; (8001618 <main+0x558>)
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
		  TV = 0;
 800147a:	4b68      	ldr	r3, [pc, #416]	; (800161c <main+0x55c>)
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
		  TA = 0;
 8001482:	4b67      	ldr	r3, [pc, #412]	; (8001620 <main+0x560>)
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
		  ST = 0;
 800148a:	4b66      	ldr	r3, [pc, #408]	; (8001624 <main+0x564>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
		  Direction = 2;
 8001490:	4b65      	ldr	r3, [pc, #404]	; (8001628 <main+0x568>)
 8001492:	2202      	movs	r2, #2
 8001494:	701a      	strb	r2, [r3, #0]

	  }
//**************************************************
//*******Start Generate Trajectory*******************

	  if (StartMoving == 1)
 8001496:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <main+0x554>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	f040 8158 	bne.w	8001750 <main+0x690>
	  {
		  static State Statee = InitPID;
		  switch(Statee)
 80014a0:	4b62      	ldr	r3, [pc, #392]	; (800162c <main+0x56c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	3b08      	subs	r3, #8
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	f200 8157 	bhi.w	800175a <main+0x69a>
 80014ac:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <main+0x3f4>)
 80014ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b2:	bf00      	nop
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	080014d1 	.word	0x080014d1
 80014bc:	0800171d 	.word	0x0800171d
 80014c0:	08001649 	.word	0x08001649
		  {
		  case InitPID:
			  PIDinit();
 80014c4:	f001 fe20 	bl	8003108 <PIDinit>
			  Statee = Traj;
 80014c8:	4b58      	ldr	r3, [pc, #352]	; (800162c <main+0x56c>)
 80014ca:	2209      	movs	r2, #9
 80014cc:	701a      	strb	r2, [r3, #0]
			  break;
 80014ce:	e144      	b.n	800175a <main+0x69a>
		  case Traj:
			  //**************PID******************************
			  if (micros() - TimestampPID > 1000)
 80014d0:	f002 f8c8 	bl	8003664 <micros>
 80014d4:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <main+0x520>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	ebb0 0a02 	subs.w	sl, r0, r2
 80014de:	eb61 0b03 	sbc.w	fp, r1, r3
 80014e2:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80014e6:	459a      	cmp	sl, r3
 80014e8:	f17b 0300 	sbcs.w	r3, fp, #0
 80014ec:	d314      	bcc.n	8001518 <main+0x458>
			  {
				  P = p;
 80014ee:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <main+0x524>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a3d      	ldr	r2, [pc, #244]	; (80015e8 <main+0x528>)
 80014f4:	6013      	str	r3, [r2, #0]
				  I = i;
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <main+0x52c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a3d      	ldr	r2, [pc, #244]	; (80015f0 <main+0x530>)
 80014fc:	6013      	str	r3, [r2, #0]
				  D = d;
 80014fe:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <main+0x534>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a3d      	ldr	r2, [pc, #244]	; (80015f8 <main+0x538>)
 8001504:	6013      	str	r3, [r2, #0]
				  PID() ;
 8001506:	f001 fe47 	bl	8003198 <PID>
				  TimestampPID = micros() ;
 800150a:	f002 f8ab 	bl	8003664 <micros>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4933      	ldr	r1, [pc, #204]	; (80015e0 <main+0x520>)
 8001514:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			  //************************************************
			  Trajec();
 8001518:	f001 f9ee 	bl	80028f8 <Trajec>
			  if (FinishedTraj)
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <main+0x570>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8117 	beq.w	8001754 <main+0x694>
			  {
				  if (FinalPos - Degree > 0.5 || FinalPos - Degree < -0.5)
 8001526:	4b43      	ldr	r3, [pc, #268]	; (8001634 <main+0x574>)
 8001528:	ed93 7a00 	vldr	s14, [r3]
 800152c:	4b42      	ldr	r3, [pc, #264]	; (8001638 <main+0x578>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001536:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800153a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	dc0e      	bgt.n	8001562 <main+0x4a2>
 8001544:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <main+0x574>)
 8001546:	ed93 7a00 	vldr	s14, [r3]
 800154a:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <main+0x578>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001554:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	d52f      	bpl.n	80015c2 <main+0x502>
				  {
					  if (FinalPos - Degree >= 359.5 || FinalPos - Degree <= -359.5)
 8001562:	4b34      	ldr	r3, [pc, #208]	; (8001634 <main+0x574>)
 8001564:	ed93 7a00 	vldr	s14, [r3]
 8001568:	4b33      	ldr	r3, [pc, #204]	; (8001638 <main+0x578>)
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001572:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800163c <main+0x57c>
 8001576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157e:	da0e      	bge.n	800159e <main+0x4de>
 8001580:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <main+0x574>)
 8001582:	ed93 7a00 	vldr	s14, [r3]
 8001586:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <main+0x578>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001590:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001640 <main+0x580>
 8001594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	d806      	bhi.n	80015ac <main+0x4ec>
					  {
						  Statee = Trong;
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <main+0x56c>)
 80015a0:	220a      	movs	r2, #10
 80015a2:	701a      	strb	r2, [r3, #0]
						  FinishedTraj = 0;
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <main+0x570>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
					  if (FinalPos - Degree >= 359.5 || FinalPos - Degree <= -359.5)
 80015aa:	e011      	b.n	80015d0 <main+0x510>
					  }
					  else
					  {
						  Statee = YangMaiTrong;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <main+0x56c>)
 80015ae:	220b      	movs	r2, #11
 80015b0:	701a      	strb	r2, [r3, #0]
						  SUM = 0;
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <main+0x584>)
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
						  FinishedTraj = 0;
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <main+0x570>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
					  if (FinalPos - Degree >= 359.5 || FinalPos - Degree <= -359.5)
 80015c0:	e006      	b.n	80015d0 <main+0x510>
					  }

				  }
				  else
				  {
					  Statee = Trong;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <main+0x56c>)
 80015c4:	220a      	movs	r2, #10
 80015c6:	701a      	strb	r2, [r3, #0]
					  FinishedTraj = 0;
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <main+0x570>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  break;
 80015ce:	e0c1      	b.n	8001754 <main+0x694>
 80015d0:	e0c0      	b.n	8001754 <main+0x694>
 80015d2:	bf00      	nop
 80015d4:	20000500 	.word	0x20000500
 80015d8:	200004ac 	.word	0x200004ac
 80015dc:	200004c9 	.word	0x200004c9
 80015e0:	20000420 	.word	0x20000420
 80015e4:	20000004 	.word	0x20000004
 80015e8:	20000448 	.word	0x20000448
 80015ec:	20000008 	.word	0x20000008
 80015f0:	2000044c 	.word	0x2000044c
 80015f4:	2000000c 	.word	0x2000000c
 80015f8:	20000450 	.word	0x20000450
 80015fc:	200002e4 	.word	0x200002e4
 8001600:	200003fe 	.word	0x200003fe
 8001604:	200004e5 	.word	0x200004e5
 8001608:	200003fc 	.word	0x200003fc
 800160c:	200002fc 	.word	0x200002fc
 8001610:	2000041a 	.word	0x2000041a
 8001614:	20000460 	.word	0x20000460
 8001618:	20000484 	.word	0x20000484
 800161c:	20000480 	.word	0x20000480
 8001620:	2000047c 	.word	0x2000047c
 8001624:	20000461 	.word	0x20000461
 8001628:	20000508 	.word	0x20000508
 800162c:	20000024 	.word	0x20000024
 8001630:	200004b0 	.word	0x200004b0
 8001634:	2000001c 	.word	0x2000001c
 8001638:	20000504 	.word	0x20000504
 800163c:	43b3c000 	.word	0x43b3c000
 8001640:	c3b3c000 	.word	0xc3b3c000
 8001644:	20000454 	.word	0x20000454
		  case YangMaiTrong:
			  SecondPID();
 8001648:	f001 fe5e 	bl	8003308 <SecondPID>
			  if (FinalPos - Degree < 0.5 && FinalPos - Degree > -0.5)
 800164c:	4b45      	ldr	r3, [pc, #276]	; (8001764 <main+0x6a4>)
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	4b45      	ldr	r3, [pc, #276]	; (8001768 <main+0x6a8>)
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	d511      	bpl.n	800168e <main+0x5ce>
 800166a:	4b3e      	ldr	r3, [pc, #248]	; (8001764 <main+0x6a4>)
 800166c:	ed93 7a00 	vldr	s14, [r3]
 8001670:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <main+0x6a8>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800167e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	dd02      	ble.n	800168e <main+0x5ce>
			  {
				  Vi = 1;
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <main+0x6ac>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
			  }
			  if (FinalPos - Degree >= 359.5 && FinalPos - Degree > -359.5)
 800168e:	4b35      	ldr	r3, [pc, #212]	; (8001764 <main+0x6a4>)
 8001690:	ed93 7a00 	vldr	s14, [r3]
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <main+0x6a8>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001770 <main+0x6b0>
 80016a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	db11      	blt.n	80016d0 <main+0x610>
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <main+0x6a4>)
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <main+0x6a8>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016bc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001774 <main+0x6b4>
 80016c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c8:	dd02      	ble.n	80016d0 <main+0x610>
			  {
				  Vi = 1;
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <main+0x6ac>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
			  }
			  if (Vi == 0)
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <main+0x6ac>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d106      	bne.n	80016e6 <main+0x626>
			  {
				  Trong1Vi = micros();
 80016d8:	f001 ffc4 	bl	8003664 <micros>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4925      	ldr	r1, [pc, #148]	; (8001778 <main+0x6b8>)
 80016e2:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			  if (micros() - Trong1Vi > 500000 && Vi)
 80016e6:	f001 ffbd 	bl	8003664 <micros>
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <main+0x6b8>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	1a86      	subs	r6, r0, r2
 80016f2:	603e      	str	r6, [r7, #0]
 80016f4:	eb61 0303 	sbc.w	r3, r1, r3
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <main+0x6bc>)
 80016fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001700:	4602      	mov	r2, r0
 8001702:	429a      	cmp	r2, r3
 8001704:	460b      	mov	r3, r1
 8001706:	f173 0300 	sbcs.w	r3, r3, #0
 800170a:	d325      	bcc.n	8001758 <main+0x698>
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <main+0x6ac>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d021      	beq.n	8001758 <main+0x698>
			  {
				  Statee = Trong;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <main+0x6c0>)
 8001716:	220a      	movs	r2, #10
 8001718:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 800171a:	e01d      	b.n	8001758 <main+0x698>
		  case Trong:
			  request = 0;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <main+0x6c4>)
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
			  FinishedStation = 1;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <main+0x6c8>)
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
			  StartMoving = 0;
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <main+0x6cc>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
			  Statee = InitPID;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <main+0x6c0>)
 8001732:	2208      	movs	r2, #8
 8001734:	701a      	strb	r2, [r3, #0]
			  Vi = 0;
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <main+0x6ac>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
			  effTimestamp = micros();
 800173c:	f001 ff92 	bl	8003664 <micros>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4912      	ldr	r1, [pc, #72]	; (8001790 <main+0x6d0>)
 8001746:	e9c1 2300 	strd	r2, r3, [r1]
			  EndEffWrite();
 800174a:	f000 fad5 	bl	8001cf8 <EndEffWrite>
			  break;
 800174e:	e004      	b.n	800175a <main+0x69a>
		  }

	  }
 8001750:	bf00      	nop
 8001752:	e002      	b.n	800175a <main+0x69a>
			  break;
 8001754:	bf00      	nop
 8001756:	e000      	b.n	800175a <main+0x69a>
			  break;
 8001758:	bf00      	nop

//***************************************************
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UARTTxDumpBuffer(&UART2);
 800175a:	480e      	ldr	r0, [pc, #56]	; (8001794 <main+0x6d4>)
 800175c:	f000 fb74 	bl	8001e48 <UARTTxDumpBuffer>
  {
 8001760:	e4eb      	b.n	800113a <main+0x7a>
 8001762:	bf00      	nop
 8001764:	2000001c 	.word	0x2000001c
 8001768:	20000504 	.word	0x20000504
 800176c:	200004b1 	.word	0x200004b1
 8001770:	43b3c000 	.word	0x43b3c000
 8001774:	c3b3c000 	.word	0xc3b3c000
 8001778:	200004b8 	.word	0x200004b8
 800177c:	0007a121 	.word	0x0007a121
 8001780:	20000024 	.word	0x20000024
 8001784:	200004f0 	.word	0x200004f0
 8001788:	200004e4 	.word	0x200004e4
 800178c:	20000460 	.word	0x20000460
 8001790:	200004e8 	.word	0x200004e8
 8001794:	200002e4 	.word	0x200002e4

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b094      	sub	sp, #80	; 0x50
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 0320 	add.w	r3, r7, #32
 80017a2:	2230      	movs	r2, #48	; 0x30
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f006 fce4 	bl	8008174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <SystemClock_Config+0xc8>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a26      	ldr	r2, [pc, #152]	; (8001860 <SystemClock_Config+0xc8>)
 80017c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <SystemClock_Config+0xc8>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <SystemClock_Config+0xcc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a20      	ldr	r2, [pc, #128]	; (8001864 <SystemClock_Config+0xcc>)
 80017e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <SystemClock_Config+0xcc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fc:	2310      	movs	r3, #16
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001800:	2302      	movs	r3, #2
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001804:	2300      	movs	r3, #0
 8001806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001808:	2308      	movs	r3, #8
 800180a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800180c:	2364      	movs	r3, #100	; 0x64
 800180e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001810:	2302      	movs	r3, #2
 8001812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001814:	2304      	movs	r3, #4
 8001816:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	4618      	mov	r0, r3
 800181e:	f003 fd85 	bl	800532c <HAL_RCC_OscConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001828:	f001 ff36 	bl	8003698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182c:	230f      	movs	r3, #15
 800182e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001830:	2302      	movs	r3, #2
 8001832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2103      	movs	r1, #3
 8001848:	4618      	mov	r0, r3
 800184a:	f003 ffe7 	bl	800581c <HAL_RCC_ClockConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001854:	f001 ff20 	bl	8003698 <Error_Handler>
  }
}
 8001858:	bf00      	nop
 800185a:	3750      	adds	r7, #80	; 0x50
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	40007000 	.word	0x40007000

08001868 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_I2C1_Init+0x54>)
 800186e:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <MX_I2C1_Init+0x58>)
 8001870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_I2C1_Init+0x54>)
 8001874:	f242 7210 	movw	r2, #10000	; 0x2710
 8001878:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <MX_I2C1_Init+0x54>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_I2C1_Init+0x54>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <MX_I2C1_Init+0x54>)
 8001888:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800188c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_I2C1_Init+0x54>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_I2C1_Init+0x54>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_I2C1_Init+0x54>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_I2C1_Init+0x54>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_I2C1_Init+0x54>)
 80018a8:	f003 f8f4 	bl	8004a94 <HAL_I2C_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80018b2:	f001 fef1 	bl	8003698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200000b4 	.word	0x200000b4
 80018c0:	40005400 	.word	0x40005400

080018c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b096      	sub	sp, #88	; 0x58
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2220      	movs	r2, #32
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f006 fc39 	bl	8008174 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001902:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <MX_TIM1_Init+0x150>)
 8001904:	4a44      	ldr	r2, [pc, #272]	; (8001a18 <MX_TIM1_Init+0x154>)
 8001906:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001908:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <MX_TIM1_Init+0x150>)
 800190a:	2200      	movs	r2, #0
 800190c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <MX_TIM1_Init+0x150>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <MX_TIM1_Init+0x150>)
 8001916:	f24c 3250 	movw	r2, #50000	; 0xc350
 800191a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <MX_TIM1_Init+0x150>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001922:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <MX_TIM1_Init+0x150>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001928:	4b3a      	ldr	r3, [pc, #232]	; (8001a14 <MX_TIM1_Init+0x150>)
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800192e:	4839      	ldr	r0, [pc, #228]	; (8001a14 <MX_TIM1_Init+0x150>)
 8001930:	f004 f994 	bl	8005c5c <HAL_TIM_Base_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800193a:	f001 fead 	bl	8003698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001948:	4619      	mov	r1, r3
 800194a:	4832      	ldr	r0, [pc, #200]	; (8001a14 <MX_TIM1_Init+0x150>)
 800194c:	f004 fd92 	bl	8006474 <HAL_TIM_ConfigClockSource>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001956:	f001 fe9f 	bl	8003698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800195a:	482e      	ldr	r0, [pc, #184]	; (8001a14 <MX_TIM1_Init+0x150>)
 800195c:	f004 fa8a 	bl	8005e74 <HAL_TIM_PWM_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001966:	f001 fe97 	bl	8003698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001972:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001976:	4619      	mov	r1, r3
 8001978:	4826      	ldr	r0, [pc, #152]	; (8001a14 <MX_TIM1_Init+0x150>)
 800197a:	f005 f90f 	bl	8006b9c <HAL_TIMEx_MasterConfigSynchronization>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001984:	f001 fe88 	bl	8003698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001988:	2360      	movs	r3, #96	; 0x60
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001990:	2300      	movs	r3, #0
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001994:	2300      	movs	r3, #0
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	2200      	movs	r2, #0
 80019aa:	4619      	mov	r1, r3
 80019ac:	4819      	ldr	r0, [pc, #100]	; (8001a14 <MX_TIM1_Init+0x150>)
 80019ae:	f004 fc9f 	bl	80062f0 <HAL_TIM_PWM_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019b8:	f001 fe6e 	bl	8003698 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	2204      	movs	r2, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4813      	ldr	r0, [pc, #76]	; (8001a14 <MX_TIM1_Init+0x150>)
 80019c6:	f004 fc93 	bl	80062f0 <HAL_TIM_PWM_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80019d0:	f001 fe62 	bl	8003698 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <MX_TIM1_Init+0x150>)
 80019f8:	f005 f93e 	bl	8006c78 <HAL_TIMEx_ConfigBreakDeadTime>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001a02:	f001 fe49 	bl	8003698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a06:	4803      	ldr	r0, [pc, #12]	; (8001a14 <MX_TIM1_Init+0x150>)
 8001a08:	f001 ff3a 	bl	8003880 <HAL_TIM_MspPostInit>

}
 8001a0c:	bf00      	nop
 8001a0e:	3758      	adds	r7, #88	; 0x58
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000108 	.word	0x20000108
 8001a18:	40010000 	.word	0x40010000

08001a1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a42:	2263      	movs	r2, #99	; 0x63
 8001a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a60:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a62:	f004 f8fb 	bl	8005c5c <HAL_TIM_Base_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a6c:	f001 fe14 	bl	8003698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a7e:	f004 fcf9 	bl	8006474 <HAL_TIM_ConfigClockSource>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a88:	f001 fe06 	bl	8003698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a9a:	f005 f87f 	bl	8006b9c <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001aa4:	f001 fdf8 	bl	8003698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000150 	.word	0x20000150

08001ab4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	; 0x30
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f006 fb56 	bl	8008174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001ad2:	4a21      	ldr	r2, [pc, #132]	; (8001b58 <MX_TIM3_Init+0xa4>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001ae4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001ae8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001af6:	2303      	movs	r3, #3
 8001af8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001afe:	2301      	movs	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001b22:	f004 fab1 	bl	8006088 <HAL_TIM_Encoder_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b2c:	f001 fdb4 	bl	8003698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001b3e:	f005 f82d 	bl	8006b9c <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b48:	f001 fda6 	bl	8003698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3730      	adds	r7, #48	; 0x30
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000198 	.word	0x20000198
 8001b58:	40000400 	.word	0x40000400

08001b5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <MX_USART2_UART_Init+0x50>)
 8001b62:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <MX_USART2_UART_Init+0x54>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_USART2_UART_Init+0x50>)
 8001b68:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_USART2_UART_Init+0x50>)
 8001b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b74:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <MX_USART2_UART_Init+0x50>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_USART2_UART_Init+0x50>)
 8001b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_USART2_UART_Init+0x50>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_USART2_UART_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_USART2_UART_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_USART2_UART_Init+0x50>)
 8001b98:	f005 f8c0 	bl	8006d1c <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001ba2:	f001 fd79 	bl	8003698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200001e0 	.word	0x200001e0
 8001bb0:	40004400 	.word	0x40004400

08001bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_DMA_Init+0x4c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <MX_DMA_Init+0x4c>)
 8001bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <MX_DMA_Init+0x4c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2010      	movs	r0, #16
 8001bdc:	f002 f96b 	bl	8003eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001be0:	2010      	movs	r0, #16
 8001be2:	f002 f984 	bl	8003eee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2011      	movs	r0, #17
 8001bec:	f002 f963 	bl	8003eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001bf0:	2011      	movs	r0, #17
 8001bf2:	f002 f97c 	bl	8003eee <HAL_NVIC_EnableIRQ>

}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800

08001c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a32      	ldr	r2, [pc, #200]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a2b      	ldr	r2, [pc, #172]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b29      	ldr	r3, [pc, #164]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a24      	ldr	r2, [pc, #144]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <MX_GPIO_Init+0xe8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2120      	movs	r1, #32
 8001c8e:	4818      	ldr	r0, [pc, #96]	; (8001cf0 <MX_GPIO_Init+0xec>)
 8001c90:	f002 fee6 	bl	8004a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4812      	ldr	r0, [pc, #72]	; (8001cf4 <MX_GPIO_Init+0xf0>)
 8001cac:	f002 fd3c 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : Home_Pin */
  GPIO_InitStruct.Pin = Home_Pin;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Home_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480c      	ldr	r0, [pc, #48]	; (8001cf4 <MX_GPIO_Init+0xf0>)
 8001cc4:	f002 fd30 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cc8:	2320      	movs	r3, #32
 8001cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <MX_GPIO_Init+0xec>)
 8001ce0:	f002 fd22 	bl	8004728 <HAL_GPIO_Init>

}
 8001ce4:	bf00      	nop
 8001ce6:	3728      	adds	r7, #40	; 0x28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020800 	.word	0x40020800

08001cf8 <EndEffWrite>:

/* USER CODE BEGIN 4 */
void EndEffWrite()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY && enable_eff)
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <EndEffWrite+0x58>)
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d11d      	bne.n	8001d46 <EndEffWrite+0x4e>
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <EndEffWrite+0x5c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d019      	beq.n	8001d46 <EndEffWrite+0x4e>
	{
		test ++;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <EndEffWrite+0x60>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <EndEffWrite+0x60>)
 8001d1c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 8001d1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d22:	f001 ffc9 	bl	8003cb8 <HAL_Delay>
		uint8_t temp = 0x45;
 8001d26:	2345      	movs	r3, #69	; 0x45
 8001d28:	71bb      	strb	r3, [r7, #6]
		uint8_t add = 0x23;
 8001d2a:	2323      	movs	r3, #35	; 0x23
 8001d2c:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Master_Transmit(&hi2c1, add << 1, &temp, 1, 1000); //Write eff
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	b299      	uxth	r1, r3
 8001d36:	1dba      	adds	r2, r7, #6
 8001d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <EndEffWrite+0x58>)
 8001d42:	f002 ffeb 	bl	8004d1c <HAL_I2C_Master_Transmit>
	}

}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200000b4 	.word	0x200000b4
 8001d54:	2000041a 	.word	0x2000041a
 8001d58:	2000050e 	.word	0x2000050e

08001d5c <UARTInit>:

void UARTInit(UARTStucrture *uart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8001d64:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <UARTInit+0x4c>)
 8001d66:	88db      	ldrh	r3, [r3, #6]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f006 f9c2 	bl	80080f4 <calloc>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <UARTInit+0x4c>)
 8001d7a:	889b      	ldrh	r3, [r3, #4]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f006 f9b8 	bl	80080f4 <calloc>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	81da      	strh	r2, [r3, #14]

}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200002e4 	.word	0x200002e4

08001dac <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6919      	ldr	r1, [r3, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	88db      	ldrh	r3, [r3, #6]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f005 f877 	bl	8006eb4 <HAL_UART_Receive_DMA>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	88db      	ldrh	r3, [r3, #6]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	1ad3      	subs	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	uint16_t Result = -1; // -1 Mean no new data
 8001dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e00:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	8a9b      	ldrh	r3, [r3, #20]
 8001e06:	461c      	mov	r4, r3
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ffe0 	bl	8001dce <UARTGetRxHead>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	429c      	cmp	r4, r3
 8001e12:	d013      	beq.n	8001e3c <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	8a92      	ldrh	r2, [r2, #20]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	8a9b      	ldrh	r3, [r3, #20]
 8001e26:	3301      	adds	r3, #1
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	88d2      	ldrh	r2, [r2, #6]
 8001e2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e30:	fb01 f202 	mul.w	r2, r1, r2
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8001e3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd90      	pop	{r4, r7, pc}

08001e48 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d13d      	bne.n	8001eda <UARTTxDumpBuffer+0x92>
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <UARTTxDumpBuffer+0x9c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d139      	bne.n	8001eda <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <UARTTxDumpBuffer+0x9c>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	89da      	ldrh	r2, [r3, #14]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	899b      	ldrh	r3, [r3, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d02d      	beq.n	8001ed4 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	89da      	ldrh	r2, [r3, #14]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d906      	bls.n	8001e92 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	89da      	ldrh	r2, [r3, #14]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	e005      	b.n	8001e9e <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	889a      	ldrh	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	8992      	ldrh	r2, [r2, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	89fa      	ldrh	r2, [r7, #14]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f004 ff81 	bl	8006db8 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	899b      	ldrh	r3, [r3, #12]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	8892      	ldrh	r2, [r2, #4]
 8001ec4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ec8:	fb01 f202 	mul.w	r2, r1, r2
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <UARTTxDumpBuffer+0x9c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
	}

}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000515 	.word	0x20000515

08001ee8 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]

	//check data len is more than buffer?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	88fa      	ldrh	r2, [r7, #6]
 8001efc:	4293      	cmp	r3, r2
 8001efe:	bf28      	it	cs
 8001f00:	4613      	movcs	r3, r2
 8001f02:	82fb      	strh	r3, [r7, #22]

	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8001f04:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	889b      	ldrh	r3, [r3, #4]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	89db      	ldrh	r3, [r3, #14]
 8001f10:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8001f12:	4293      	cmp	r3, r2
 8001f14:	bfa8      	it	ge
 8001f16:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8001f18:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	89d2      	ldrh	r2, [r2, #14]
 8001f22:	4413      	add	r3, r2
 8001f24:	8aba      	ldrh	r2, [r7, #20]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f006 f915 	bl	8008158 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	89db      	ldrh	r3, [r3, #14]
 8001f32:	461a      	mov	r2, r3
 8001f34:	8afb      	ldrh	r3, [r7, #22]
 8001f36:	4413      	add	r3, r2
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	8892      	ldrh	r2, [r2, #4]
 8001f3c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f40:	fb01 f202 	mul.w	r2, r1, r2
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8001f4c:	8afa      	ldrh	r2, [r7, #22]
 8001f4e:	8abb      	ldrh	r3, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d00a      	beq.n	8001f6a <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6898      	ldr	r0, [r3, #8]
 8001f58:	8abb      	ldrh	r3, [r7, #20]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8001f5e:	8afa      	ldrh	r2, [r7, #22]
 8001f60:	8abb      	ldrh	r3, [r7, #20]
 8001f62:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8001f64:	461a      	mov	r2, r3
 8001f66:	f006 f8f7 	bl	8008158 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f7ff ff6c 	bl	8001e48 <UARTTxDumpBuffer>
}
 8001f70:	bf00      	nop
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <Protocal>:

void Protocal(int16_t dataIn,UARTStucrture *uart)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	81fb      	strh	r3, [r7, #14]
	static uint16_t CollectedData2 = 0;
	static uint16_t stationSUM;
	static uint8_t CurrentAngle1 = 0;
	static uint8_t CurrentAngle2 = 0;

	DataInTest = dataIn&0xf0;
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <Protocal+0x44>)
 8001f8e:	801a      	strh	r2, [r3, #0]


//	//State Machine
	switch (State)
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <Protocal+0x48>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b06      	cmp	r3, #6
 8001f96:	f200 8391 	bhi.w	80026bc <Protocal+0x744>
 8001f9a:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <Protocal+0x28>)
 8001f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa0:	08001fc5 	.word	0x08001fc5
 8001fa4:	080022a1 	.word	0x080022a1
 8001fa8:	0800246d 	.word	0x0800246d
 8001fac:	0800247b 	.word	0x0800247b
 8001fb0:	08002619 	.word	0x08002619
 8001fb4:	08002629 	.word	0x08002629
 8001fb8:	080024ed 	.word	0x080024ed
 8001fbc:	20000512 	.word	0x20000512
 8001fc0:	20000516 	.word	0x20000516
	{
	case Idle:
		UARTsuccess = 0;
 8001fc4:	4ba1      	ldr	r3, [pc, #644]	; (800224c <Protocal+0x2d4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
		UARTerror = 0;
 8001fca:	4ba1      	ldr	r3, [pc, #644]	; (8002250 <Protocal+0x2d8>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
		if (DataInTest == 0b10010000)
 8001fd0:	4ba0      	ldr	r3, [pc, #640]	; (8002254 <Protocal+0x2dc>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	2b90      	cmp	r3, #144	; 0x90
 8001fd6:	f040 815f 	bne.w	8002298 <Protocal+0x320>
		{
			ModeIN = dataIn&0xf;
 8001fda:	89fb      	ldrh	r3, [r7, #14]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	4b9c      	ldr	r3, [pc, #624]	; (8002258 <Protocal+0x2e0>)
 8001fe6:	701a      	strb	r2, [r3, #0]
			if (ModeIN == 0b0001)
 8001fe8:	4b9b      	ldr	r3, [pc, #620]	; (8002258 <Protocal+0x2e0>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d112      	bne.n	8002016 <Protocal+0x9e>
			{
				Mode = 1;
 8001ff0:	4b9a      	ldr	r3, [pc, #616]	; (800225c <Protocal+0x2e4>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1;
 8001ff6:	4b9a      	ldr	r3, [pc, #616]	; (8002260 <Protocal+0x2e8>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	b25b      	sxtb	r3, r3
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b97      	ldr	r3, [pc, #604]	; (8002264 <Protocal+0x2ec>)
 8002008:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 800200a:	4b97      	ldr	r3, [pc, #604]	; (8002268 <Protocal+0x2f0>)
 800200c:	2202      	movs	r2, #2
 800200e:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 8002010:	4b96      	ldr	r3, [pc, #600]	; (800226c <Protocal+0x2f4>)
 8002012:	2202      	movs	r2, #2
 8002014:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0010)
 8002016:	4b90      	ldr	r3, [pc, #576]	; (8002258 <Protocal+0x2e0>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d112      	bne.n	8002044 <Protocal+0xcc>
			{
				Mode = 2;
 800201e:	4b8f      	ldr	r3, [pc, #572]	; (800225c <Protocal+0x2e4>)
 8002020:	2202      	movs	r2, #2
 8002022:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002024:	4b91      	ldr	r3, [pc, #580]	; (800226c <Protocal+0x2f4>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 800202a:	4b8f      	ldr	r3, [pc, #572]	; (8002268 <Protocal+0x2f0>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b10;
 8002030:	4b8b      	ldr	r3, [pc, #556]	; (8002260 <Protocal+0x2e8>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	b25b      	sxtb	r3, r3
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	b25b      	sxtb	r3, r3
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b88      	ldr	r3, [pc, #544]	; (8002264 <Protocal+0x2ec>)
 8002042:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0011)
 8002044:	4b84      	ldr	r3, [pc, #528]	; (8002258 <Protocal+0x2e0>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d112      	bne.n	8002072 <Protocal+0xfa>
			{
				Mode = 3;
 800204c:	4b83      	ldr	r3, [pc, #524]	; (800225c <Protocal+0x2e4>)
 800204e:	2203      	movs	r2, #3
 8002050:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002052:	4b86      	ldr	r3, [pc, #536]	; (800226c <Protocal+0x2f4>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8002058:	4b83      	ldr	r3, [pc, #524]	; (8002268 <Protocal+0x2f0>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b11;
 800205e:	4b80      	ldr	r3, [pc, #512]	; (8002260 <Protocal+0x2e8>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	b25b      	sxtb	r3, r3
 8002066:	f043 0303 	orr.w	r3, r3, #3
 800206a:	b25b      	sxtb	r3, r3
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b7d      	ldr	r3, [pc, #500]	; (8002264 <Protocal+0x2ec>)
 8002070:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0100)
 8002072:	4b79      	ldr	r3, [pc, #484]	; (8002258 <Protocal+0x2e0>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b04      	cmp	r3, #4
 8002078:	d112      	bne.n	80020a0 <Protocal+0x128>
			{
				Mode = 4;
 800207a:	4b78      	ldr	r3, [pc, #480]	; (800225c <Protocal+0x2e4>)
 800207c:	2204      	movs	r2, #4
 800207e:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 8002080:	4b7a      	ldr	r3, [pc, #488]	; (800226c <Protocal+0x2f4>)
 8002082:	2202      	movs	r2, #2
 8002084:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 8002086:	4b78      	ldr	r3, [pc, #480]	; (8002268 <Protocal+0x2f0>)
 8002088:	2202      	movs	r2, #2
 800208a:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b100;
 800208c:	4b74      	ldr	r3, [pc, #464]	; (8002260 <Protocal+0x2e8>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	b25b      	sxtb	r3, r3
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	b25b      	sxtb	r3, r3
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b71      	ldr	r3, [pc, #452]	; (8002264 <Protocal+0x2ec>)
 800209e:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0101)
 80020a0:	4b6d      	ldr	r3, [pc, #436]	; (8002258 <Protocal+0x2e0>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d112      	bne.n	80020ce <Protocal+0x156>
			{
				Mode = 5;
 80020a8:	4b6c      	ldr	r3, [pc, #432]	; (800225c <Protocal+0x2e4>)
 80020aa:	2205      	movs	r2, #5
 80020ac:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 80020ae:	4b6f      	ldr	r3, [pc, #444]	; (800226c <Protocal+0x2f4>)
 80020b0:	2202      	movs	r2, #2
 80020b2:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 80020b4:	4b6c      	ldr	r3, [pc, #432]	; (8002268 <Protocal+0x2f0>)
 80020b6:	2202      	movs	r2, #2
 80020b8:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b101;
 80020ba:	4b69      	ldr	r3, [pc, #420]	; (8002260 <Protocal+0x2e8>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	f043 0305 	orr.w	r3, r3, #5
 80020c6:	b25b      	sxtb	r3, r3
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b66      	ldr	r3, [pc, #408]	; (8002264 <Protocal+0x2ec>)
 80020cc:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0110)
 80020ce:	4b62      	ldr	r3, [pc, #392]	; (8002258 <Protocal+0x2e0>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d112      	bne.n	80020fc <Protocal+0x184>
			{
				Mode = 6;
 80020d6:	4b61      	ldr	r3, [pc, #388]	; (800225c <Protocal+0x2e4>)
 80020d8:	2206      	movs	r2, #6
 80020da:	701a      	strb	r2, [r3, #0]
				State = Frame2_1;
 80020dc:	4b63      	ldr	r3, [pc, #396]	; (800226c <Protocal+0x2f4>)
 80020de:	2202      	movs	r2, #2
 80020e0:	701a      	strb	r2, [r3, #0]
				Frame = 2;
 80020e2:	4b61      	ldr	r3, [pc, #388]	; (8002268 <Protocal+0x2f0>)
 80020e4:	2202      	movs	r2, #2
 80020e6:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b110;
 80020e8:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <Protocal+0x2e8>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	f043 0306 	orr.w	r3, r3, #6
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b5a      	ldr	r3, [pc, #360]	; (8002264 <Protocal+0x2ec>)
 80020fa:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b0111)
 80020fc:	4b56      	ldr	r3, [pc, #344]	; (8002258 <Protocal+0x2e0>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b07      	cmp	r3, #7
 8002102:	d112      	bne.n	800212a <Protocal+0x1b2>
			{
				Mode = 7;
 8002104:	4b55      	ldr	r3, [pc, #340]	; (800225c <Protocal+0x2e4>)
 8002106:	2207      	movs	r2, #7
 8002108:	701a      	strb	r2, [r3, #0]
				State = Frame3_n;
 800210a:	4b58      	ldr	r3, [pc, #352]	; (800226c <Protocal+0x2f4>)
 800210c:	2204      	movs	r2, #4
 800210e:	701a      	strb	r2, [r3, #0]
				Frame = 3;
 8002110:	4b55      	ldr	r3, [pc, #340]	; (8002268 <Protocal+0x2f0>)
 8002112:	2203      	movs	r2, #3
 8002114:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b111;
 8002116:	4b52      	ldr	r3, [pc, #328]	; (8002260 <Protocal+0x2e8>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	b25b      	sxtb	r3, r3
 800211e:	f043 0307 	orr.w	r3, r3, #7
 8002122:	b25b      	sxtb	r3, r3
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <Protocal+0x2ec>)
 8002128:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1000)
 800212a:	4b4b      	ldr	r3, [pc, #300]	; (8002258 <Protocal+0x2e0>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b08      	cmp	r3, #8
 8002130:	d112      	bne.n	8002158 <Protocal+0x1e0>
			{
				Mode = 8;
 8002132:	4b4a      	ldr	r3, [pc, #296]	; (800225c <Protocal+0x2e4>)
 8002134:	2208      	movs	r2, #8
 8002136:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002138:	4b4c      	ldr	r3, [pc, #304]	; (800226c <Protocal+0x2f4>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <Protocal+0x2f0>)
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1000;
 8002144:	4b46      	ldr	r3, [pc, #280]	; (8002260 <Protocal+0x2e8>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	b25b      	sxtb	r3, r3
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	b25b      	sxtb	r3, r3
 8002152:	b2da      	uxtb	r2, r3
 8002154:	4b43      	ldr	r3, [pc, #268]	; (8002264 <Protocal+0x2ec>)
 8002156:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1001)
 8002158:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <Protocal+0x2e0>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b09      	cmp	r3, #9
 800215e:	d112      	bne.n	8002186 <Protocal+0x20e>
			{
				Mode = 9;
 8002160:	4b3e      	ldr	r3, [pc, #248]	; (800225c <Protocal+0x2e4>)
 8002162:	2209      	movs	r2, #9
 8002164:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002166:	4b41      	ldr	r3, [pc, #260]	; (800226c <Protocal+0x2f4>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 800216c:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <Protocal+0x2f0>)
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1001;
 8002172:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <Protocal+0x2e8>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	b25b      	sxtb	r3, r3
 800217a:	f043 0309 	orr.w	r3, r3, #9
 800217e:	b25b      	sxtb	r3, r3
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b38      	ldr	r3, [pc, #224]	; (8002264 <Protocal+0x2ec>)
 8002184:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1010)
 8002186:	4b34      	ldr	r3, [pc, #208]	; (8002258 <Protocal+0x2e0>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b0a      	cmp	r3, #10
 800218c:	d112      	bne.n	80021b4 <Protocal+0x23c>
			{
				Mode = 10;
 800218e:	4b33      	ldr	r3, [pc, #204]	; (800225c <Protocal+0x2e4>)
 8002190:	220a      	movs	r2, #10
 8002192:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002194:	4b35      	ldr	r3, [pc, #212]	; (800226c <Protocal+0x2f4>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 800219a:	4b33      	ldr	r3, [pc, #204]	; (8002268 <Protocal+0x2f0>)
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1010;
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <Protocal+0x2e8>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	f043 030a 	orr.w	r3, r3, #10
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <Protocal+0x2ec>)
 80021b2:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1011)
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <Protocal+0x2e0>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b0b      	cmp	r3, #11
 80021ba:	d112      	bne.n	80021e2 <Protocal+0x26a>
			{
				Mode = 11;
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <Protocal+0x2e4>)
 80021be:	220b      	movs	r2, #11
 80021c0:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <Protocal+0x2f4>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <Protocal+0x2f0>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1011;
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <Protocal+0x2e8>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	f043 030b 	orr.w	r3, r3, #11
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <Protocal+0x2ec>)
 80021e0:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1100)
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <Protocal+0x2e0>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d112      	bne.n	8002210 <Protocal+0x298>
			{
				Mode = 12;
 80021ea:	4b1c      	ldr	r3, [pc, #112]	; (800225c <Protocal+0x2e4>)
 80021ec:	220c      	movs	r2, #12
 80021ee:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <Protocal+0x2f4>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <Protocal+0x2f0>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1100;
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <Protocal+0x2e8>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	b25b      	sxtb	r3, r3
 8002204:	f043 030c 	orr.w	r3, r3, #12
 8002208:	b25b      	sxtb	r3, r3
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <Protocal+0x2ec>)
 800220e:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1101)
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <Protocal+0x2e0>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b0d      	cmp	r3, #13
 8002216:	d112      	bne.n	800223e <Protocal+0x2c6>
			{
				Mode = 13;
 8002218:	4b10      	ldr	r3, [pc, #64]	; (800225c <Protocal+0x2e4>)
 800221a:	220d      	movs	r2, #13
 800221c:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 800221e:	4b13      	ldr	r3, [pc, #76]	; (800226c <Protocal+0x2f4>)
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <Protocal+0x2f0>)
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1101;
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <Protocal+0x2e8>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	b25b      	sxtb	r3, r3
 8002232:	f043 030d 	orr.w	r3, r3, #13
 8002236:	b25b      	sxtb	r3, r3
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <Protocal+0x2ec>)
 800223c:	701a      	strb	r2, [r3, #0]
			}
			if (ModeIN == 0b1110)
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <Protocal+0x2e0>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b0e      	cmp	r3, #14
 8002244:	f040 8237 	bne.w	80026b6 <Protocal+0x73e>
 8002248:	e012      	b.n	8002270 <Protocal+0x2f8>
 800224a:	bf00      	nop
 800224c:	20000418 	.word	0x20000418
 8002250:	20000419 	.word	0x20000419
 8002254:	20000512 	.word	0x20000512
 8002258:	20000517 	.word	0x20000517
 800225c:	200003fe 	.word	0x200003fe
 8002260:	20000025 	.word	0x20000025
 8002264:	20000518 	.word	0x20000518
 8002268:	200003ff 	.word	0x200003ff
 800226c:	20000516 	.word	0x20000516
			{
				Mode = 14;
 8002270:	4b87      	ldr	r3, [pc, #540]	; (8002490 <Protocal+0x518>)
 8002272:	220e      	movs	r2, #14
 8002274:	701a      	strb	r2, [r3, #0]
				State = Frame1;
 8002276:	4b87      	ldr	r3, [pc, #540]	; (8002494 <Protocal+0x51c>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
				Frame = 1;
 800227c:	4b86      	ldr	r3, [pc, #536]	; (8002498 <Protocal+0x520>)
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
				CheckSum = (StartBit << 4) | 0b1110;
 8002282:	4b86      	ldr	r3, [pc, #536]	; (800249c <Protocal+0x524>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	b25b      	sxtb	r3, r3
 800228a:	f043 030e 	orr.w	r3, r3, #14
 800228e:	b25b      	sxtb	r3, r3
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b83      	ldr	r3, [pc, #524]	; (80024a0 <Protocal+0x528>)
 8002294:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			State = Idle;
		}
		break;
 8002296:	e20e      	b.n	80026b6 <Protocal+0x73e>
			State = Idle;
 8002298:	4b7e      	ldr	r3, [pc, #504]	; (8002494 <Protocal+0x51c>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
		break;
 800229e:	e20a      	b.n	80026b6 <Protocal+0x73e>
	case Frame1:
		frame1 = dataIn;
 80022a0:	89fb      	ldrh	r3, [r7, #14]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b7f      	ldr	r3, [pc, #508]	; (80024a4 <Protocal+0x52c>)
 80022a6:	701a      	strb	r2, [r3, #0]
		checksumtest = CheckSumFunction(CheckSum, Frame, CollectedData);
 80022a8:	4b7d      	ldr	r3, [pc, #500]	; (80024a0 <Protocal+0x528>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4a7a      	ldr	r2, [pc, #488]	; (8002498 <Protocal+0x520>)
 80022ae:	7811      	ldrb	r1, [r2, #0]
 80022b0:	4a7d      	ldr	r2, [pc, #500]	; (80024a8 <Protocal+0x530>)
 80022b2:	8812      	ldrh	r2, [r2, #0]
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fa36 	bl	8002728 <CheckSumFunction>
 80022bc:	4603      	mov	r3, r0
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b7a      	ldr	r3, [pc, #488]	; (80024ac <Protocal+0x534>)
 80022c2:	701a      	strb	r2, [r3, #0]
			if (frame1 == checksumtest)
 80022c4:	4b77      	ldr	r3, [pc, #476]	; (80024a4 <Protocal+0x52c>)
 80022c6:	781a      	ldrb	r2, [r3, #0]
 80022c8:	4b78      	ldr	r3, [pc, #480]	; (80024ac <Protocal+0x534>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 80c0 	bne.w	8002452 <Protocal+0x4da>
			{
				UARTsuccess += 1;
 80022d2:	4b77      	ldr	r3, [pc, #476]	; (80024b0 <Protocal+0x538>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	3301      	adds	r3, #1
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4b75      	ldr	r3, [pc, #468]	; (80024b0 <Protocal+0x538>)
 80022dc:	701a      	strb	r2, [r3, #0]
				if (Mode == 2 || Mode == 3 || Mode == 12 || Mode == 13 || Mode == 14)
 80022de:	4b6c      	ldr	r3, [pc, #432]	; (8002490 <Protocal+0x518>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d00f      	beq.n	8002306 <Protocal+0x38e>
 80022e6:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <Protocal+0x518>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d00b      	beq.n	8002306 <Protocal+0x38e>
 80022ee:	4b68      	ldr	r3, [pc, #416]	; (8002490 <Protocal+0x518>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d007      	beq.n	8002306 <Protocal+0x38e>
 80022f6:	4b66      	ldr	r3, [pc, #408]	; (8002490 <Protocal+0x518>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b0d      	cmp	r3, #13
 80022fc:	d003      	beq.n	8002306 <Protocal+0x38e>
 80022fe:	4b64      	ldr	r3, [pc, #400]	; (8002490 <Protocal+0x518>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b0e      	cmp	r3, #14
 8002304:	d101      	bne.n	800230a <Protocal+0x392>
				{
					WriteACK1();
 8002306:	f000 fa3f 	bl	8002788 <WriteACK1>
				}
				if (Mode == 8) // Go to Station N
 800230a:	4b61      	ldr	r3, [pc, #388]	; (8002490 <Protocal+0x518>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b08      	cmp	r3, #8
 8002310:	d101      	bne.n	8002316 <Protocal+0x39e>
				{
					WriteACK1();
 8002312:	f000 fa39 	bl	8002788 <WriteACK1>
				}
				if (Mode == 10) //Decimal 4 degree
 8002316:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <Protocal+0x518>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d166      	bne.n	80023ec <Protocal+0x474>
				{
					WriteACK1();
 800231e:	f000 fa33 	bl	8002788 <WriteACK1>
					CurrentAngle1 = (int8_t)(Degree * 10000 * 3.14159265 / 256 /180) ;
 8002322:	4b64      	ldr	r3, [pc, #400]	; (80024b4 <Protocal+0x53c>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80024b8 <Protocal+0x540>
 800232c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002330:	ee17 0a90 	vmov	r0, s15
 8002334:	f7fe f8b4 	bl	80004a0 <__aeabi_f2d>
 8002338:	a353      	add	r3, pc, #332	; (adr r3, 8002488 <Protocal+0x510>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	f7fe f907 	bl	8000550 <__aeabi_dmul>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <Protocal+0x544>)
 8002350:	f7fe fa28 	bl	80007a4 <__aeabi_ddiv>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b57      	ldr	r3, [pc, #348]	; (80024c0 <Protocal+0x548>)
 8002362:	f7fe fa1f 	bl	80007a4 <__aeabi_ddiv>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fb9f 	bl	8000ab0 <__aeabi_d2iz>
 8002372:	4603      	mov	r3, r0
 8002374:	b25b      	sxtb	r3, r3
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b52      	ldr	r3, [pc, #328]	; (80024c4 <Protocal+0x54c>)
 800237a:	701a      	strb	r2, [r3, #0]
					CurrentAngle2 = (int8_t)((int)(Degree* 10000 * 3.14159265 / 180) % 256) ;
 800237c:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <Protocal+0x53c>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80024b8 <Protocal+0x540>
 8002386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800238a:	ee17 0a90 	vmov	r0, s15
 800238e:	f7fe f887 	bl	80004a0 <__aeabi_f2d>
 8002392:	a33d      	add	r3, pc, #244	; (adr r3, 8002488 <Protocal+0x510>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fe f8da 	bl	8000550 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	4b45      	ldr	r3, [pc, #276]	; (80024c0 <Protocal+0x548>)
 80023aa:	f7fe f9fb 	bl	80007a4 <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	f7fe fb7b 	bl	8000ab0 <__aeabi_d2iz>
 80023ba:	4603      	mov	r3, r0
 80023bc:	425a      	negs	r2, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	bf58      	it	pl
 80023c4:	4253      	negpl	r3, r2
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <Protocal+0x550>)
 80023ca:	701a      	strb	r2, [r3, #0]
					uint8_t temp[] = {CurrentAngle1, CurrentAngle2};
 80023cc:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <Protocal+0x54c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	753b      	strb	r3, [r7, #20]
 80023d2:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <Protocal+0x550>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	757b      	strb	r3, [r7, #21]
					UARTTxWrite(&UART2, temp, 2);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	2202      	movs	r2, #2
 80023de:	4619      	mov	r1, r3
 80023e0:	483a      	ldr	r0, [pc, #232]	; (80024cc <Protocal+0x554>)
 80023e2:	f7ff fd81 	bl	8001ee8 <UARTTxWrite>
					n = 0;
 80023e6:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <Protocal+0x558>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	801a      	strh	r2, [r3, #0]
					//read Ack in while loop
				}
				if (Mode == 11)
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <Protocal+0x518>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b0b      	cmp	r3, #11
 80023f2:	d120      	bne.n	8002436 <Protocal+0x4be>
				{
					WriteACK1();
 80023f4:	f000 f9c8 	bl	8002788 <WriteACK1>
					uint8_t temp[] = {(int8_t)VmaxReal * 255 / 10};
 80023f8:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <Protocal+0x55c>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002402:	edc7 7a01 	vstr	s15, [r7, #4]
 8002406:	793b      	ldrb	r3, [r7, #4]
 8002408:	b25b      	sxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	4613      	mov	r3, r2
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	4a31      	ldr	r2, [pc, #196]	; (80024d8 <Protocal+0x560>)
 8002414:	fb82 1203 	smull	r1, r2, r2, r3
 8002418:	1092      	asrs	r2, r2, #2
 800241a:	17db      	asrs	r3, r3, #31
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	743b      	strb	r3, [r7, #16]
					UARTTxWrite(&UART2, temp, 1) ;
 8002422:	f107 0310 	add.w	r3, r7, #16
 8002426:	2201      	movs	r2, #1
 8002428:	4619      	mov	r1, r3
 800242a:	4828      	ldr	r0, [pc, #160]	; (80024cc <Protocal+0x554>)
 800242c:	f7ff fd5c 	bl	8001ee8 <UARTTxWrite>
					//send Vmax
					n = 0;
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <Protocal+0x558>)
 8002432:	2200      	movs	r2, #0
 8002434:	801a      	strh	r2, [r3, #0]
					//read Ack in while loop

				}
				if (Mode == 14)
 8002436:	4b16      	ldr	r3, [pc, #88]	; (8002490 <Protocal+0x518>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b0e      	cmp	r3, #14
 800243c:	d105      	bne.n	800244a <Protocal+0x4d2>
				{
					StartSetHome = 1;
 800243e:	4b27      	ldr	r3, [pc, #156]	; (80024dc <Protocal+0x564>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
					SetHomeFlag = 0;
 8002444:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <Protocal+0x568>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
				}
				State = Idle;
 800244a:	4b12      	ldr	r3, [pc, #72]	; (8002494 <Protocal+0x51c>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
			{
				Mode = 0;
				UARTerror += 1;
				State = Idle;
			}
		break;
 8002450:	e134      	b.n	80026bc <Protocal+0x744>
				Mode = 0;
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <Protocal+0x518>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
				UARTerror += 1;
 8002458:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <Protocal+0x56c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	3301      	adds	r3, #1
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <Protocal+0x56c>)
 8002462:	701a      	strb	r2, [r3, #0]
				State = Idle;
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <Protocal+0x51c>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
		break;
 800246a:	e127      	b.n	80026bc <Protocal+0x744>

	case Frame2_1:
		CollectedData = dataIn;
 800246c:	89fa      	ldrh	r2, [r7, #14]
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <Protocal+0x530>)
 8002470:	801a      	strh	r2, [r3, #0]
		State = Frame2_2;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <Protocal+0x51c>)
 8002474:	2203      	movs	r2, #3
 8002476:	701a      	strb	r2, [r3, #0]
		break;
 8002478:	e120      	b.n	80026bc <Protocal+0x744>
	case Frame2_2:
		CollectedData2 = dataIn;
 800247a:	89fa      	ldrh	r2, [r7, #14]
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <Protocal+0x570>)
 800247e:	801a      	strh	r2, [r3, #0]
		State = CheckSum2;
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <Protocal+0x51c>)
 8002482:	2206      	movs	r2, #6
 8002484:	701a      	strb	r2, [r3, #0]
		break;
 8002486:	e119      	b.n	80026bc <Protocal+0x744>
 8002488:	53c8d4f1 	.word	0x53c8d4f1
 800248c:	400921fb 	.word	0x400921fb
 8002490:	200003fe 	.word	0x200003fe
 8002494:	20000516 	.word	0x20000516
 8002498:	200003ff 	.word	0x200003ff
 800249c:	20000025 	.word	0x20000025
 80024a0:	20000518 	.word	0x20000518
 80024a4:	2000050f 	.word	0x2000050f
 80024a8:	2000051a 	.word	0x2000051a
 80024ac:	20000514 	.word	0x20000514
 80024b0:	20000418 	.word	0x20000418
 80024b4:	20000504 	.word	0x20000504
 80024b8:	461c4000 	.word	0x461c4000
 80024bc:	40700000 	.word	0x40700000
 80024c0:	40668000 	.word	0x40668000
 80024c4:	2000051c 	.word	0x2000051c
 80024c8:	2000051d 	.word	0x2000051d
 80024cc:	200002e4 	.word	0x200002e4
 80024d0:	200003fc 	.word	0x200003fc
 80024d4:	200004ac 	.word	0x200004ac
 80024d8:	66666667 	.word	0x66666667
 80024dc:	200004c9 	.word	0x200004c9
 80024e0:	200004c8 	.word	0x200004c8
 80024e4:	20000419 	.word	0x20000419
 80024e8:	2000051e 	.word	0x2000051e
	case CheckSum2:
		frame2 = dataIn;
 80024ec:	89fb      	ldrh	r3, [r7, #14]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b7b      	ldr	r3, [pc, #492]	; (80026e0 <Protocal+0x768>)
 80024f2:	701a      	strb	r2, [r3, #0]
		checksumtest = CheckSumFunction(CheckSum, Frame, CollectedData + CollectedData2);
 80024f4:	4b7b      	ldr	r3, [pc, #492]	; (80026e4 <Protocal+0x76c>)
 80024f6:	7818      	ldrb	r0, [r3, #0]
 80024f8:	4b7b      	ldr	r3, [pc, #492]	; (80026e8 <Protocal+0x770>)
 80024fa:	7819      	ldrb	r1, [r3, #0]
 80024fc:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <Protocal+0x774>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b7b      	ldr	r3, [pc, #492]	; (80026f0 <Protocal+0x778>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4413      	add	r3, r2
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	f000 f90b 	bl	8002728 <CheckSumFunction>
 8002512:	4603      	mov	r3, r0
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b77      	ldr	r3, [pc, #476]	; (80026f4 <Protocal+0x77c>)
 8002518:	701a      	strb	r2, [r3, #0]
		if (frame2 == checksumtest)
 800251a:	4b71      	ldr	r3, [pc, #452]	; (80026e0 <Protocal+0x768>)
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	4b75      	ldr	r3, [pc, #468]	; (80026f4 <Protocal+0x77c>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d16e      	bne.n	8002604 <Protocal+0x68c>
		{
			UARTsuccess += 1;
 8002526:	4b74      	ldr	r3, [pc, #464]	; (80026f8 <Protocal+0x780>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b72      	ldr	r3, [pc, #456]	; (80026f8 <Protocal+0x780>)
 8002530:	701a      	strb	r2, [r3, #0]
			if (Mode == 4)
 8002532:	4b72      	ldr	r3, [pc, #456]	; (80026fc <Protocal+0x784>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b04      	cmp	r3, #4
 8002538:	d11d      	bne.n	8002576 <Protocal+0x5fe>
			{
				VmaxRPM = (double)CollectedData2/255*10 ;
 800253a:	4b6d      	ldr	r3, [pc, #436]	; (80026f0 <Protocal+0x778>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fd ff8c 	bl	800045c <__aeabi_ui2d>
 8002544:	a360      	add	r3, pc, #384	; (adr r3, 80026c8 <Protocal+0x750>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fe f92b 	bl	80007a4 <__aeabi_ddiv>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	4b69      	ldr	r3, [pc, #420]	; (8002700 <Protocal+0x788>)
 800255c:	f7fd fff8 	bl	8000550 <__aeabi_dmul>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe faca 	bl	8000b00 <__aeabi_d2f>
 800256c:	4603      	mov	r3, r0
 800256e:	4a65      	ldr	r2, [pc, #404]	; (8002704 <Protocal+0x78c>)
 8002570:	6013      	str	r3, [r2, #0]
				WriteACK1();
 8002572:	f000 f909 	bl	8002788 <WriteACK1>
			}
			if (Mode == 5)
 8002576:	4b61      	ldr	r3, [pc, #388]	; (80026fc <Protocal+0x784>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b05      	cmp	r3, #5
 800257c:	d13e      	bne.n	80025fc <Protocal+0x684>
			{
				FinalPos = (((double)CollectedData * 256) + ((double)CollectedData2))/10000/3.14159265*180;
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <Protocal+0x774>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd ff6a 	bl	800045c <__aeabi_ui2d>
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <Protocal+0x790>)
 800258e:	f7fd ffdf 	bl	8000550 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4614      	mov	r4, r2
 8002598:	461d      	mov	r5, r3
 800259a:	4b55      	ldr	r3, [pc, #340]	; (80026f0 <Protocal+0x778>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ff5c 	bl	800045c <__aeabi_ui2d>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4620      	mov	r0, r4
 80025aa:	4629      	mov	r1, r5
 80025ac:	f7fd fe1a 	bl	80001e4 <__adddf3>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	a345      	add	r3, pc, #276	; (adr r3, 80026d0 <Protocal+0x758>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fe f8f1 	bl	80007a4 <__aeabi_ddiv>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	a343      	add	r3, pc, #268	; (adr r3, 80026d8 <Protocal+0x760>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fe f8e8 	bl	80007a4 <__aeabi_ddiv>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	4b4a      	ldr	r3, [pc, #296]	; (800270c <Protocal+0x794>)
 80025e2:	f7fd ffb5 	bl	8000550 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	f7fe fa87 	bl	8000b00 <__aeabi_d2f>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4a46      	ldr	r2, [pc, #280]	; (8002710 <Protocal+0x798>)
 80025f6:	6013      	str	r3, [r2, #0]
				WriteACK1();
 80025f8:	f000 f8c6 	bl	8002788 <WriteACK1>
			}

			State = Idle;
 80025fc:	4b45      	ldr	r3, [pc, #276]	; (8002714 <Protocal+0x79c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
		{
			UARTerror += 1;
			State = Idle;
		}

		break;
 8002602:	e05b      	b.n	80026bc <Protocal+0x744>
			UARTerror += 1;
 8002604:	4b44      	ldr	r3, [pc, #272]	; (8002718 <Protocal+0x7a0>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b42      	ldr	r3, [pc, #264]	; (8002718 <Protocal+0x7a0>)
 800260e:	701a      	strb	r2, [r3, #0]
			State = Idle;
 8002610:	4b40      	ldr	r3, [pc, #256]	; (8002714 <Protocal+0x79c>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
		break;
 8002616:	e051      	b.n	80026bc <Protocal+0x744>
	case Frame3_n:
		n_Station = dataIn;
 8002618:	89fb      	ldrh	r3, [r7, #14]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b3f      	ldr	r3, [pc, #252]	; (800271c <Protocal+0x7a4>)
 800261e:	701a      	strb	r2, [r3, #0]
		State = Frame3_station;
 8002620:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <Protocal+0x79c>)
 8002622:	2205      	movs	r2, #5
 8002624:	701a      	strb	r2, [r3, #0]
		break;
 8002626:	e049      	b.n	80026bc <Protocal+0x744>
	case Frame3_station:
		if (n_Station > 0)
 8002628:	4b3c      	ldr	r3, [pc, #240]	; (800271c <Protocal+0x7a4>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d014      	beq.n	800265a <Protocal+0x6e2>
		{
			Station[via_point] = dataIn&0xf;
 8002630:	89fb      	ldrh	r3, [r7, #14]
 8002632:	4a3b      	ldr	r2, [pc, #236]	; (8002720 <Protocal+0x7a8>)
 8002634:	7812      	ldrb	r2, [r2, #0]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	b299      	uxth	r1, r3
 800263c:	4b39      	ldr	r3, [pc, #228]	; (8002724 <Protocal+0x7ac>)
 800263e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			via_point++;
 8002642:	4b37      	ldr	r3, [pc, #220]	; (8002720 <Protocal+0x7a8>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b35      	ldr	r3, [pc, #212]	; (8002720 <Protocal+0x7a8>)
 800264c:	701a      	strb	r2, [r3, #0]
			n_Station--;
 800264e:	4b33      	ldr	r3, [pc, #204]	; (800271c <Protocal+0x7a4>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	3b01      	subs	r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <Protocal+0x7a4>)
 8002658:	701a      	strb	r2, [r3, #0]
		}
		if (n_Station==0)
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <Protocal+0x7a4>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <Protocal+0x6f2>
		{
			State = Idle;
 8002662:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <Protocal+0x79c>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
			break;
 8002668:	e028      	b.n	80026bc <Protocal+0x744>
		}
		if (n_Station>0)
 800266a:	4b2c      	ldr	r3, [pc, #176]	; (800271c <Protocal+0x7a4>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d019      	beq.n	80026a6 <Protocal+0x72e>
		{
			Station[via_point] = (dataIn&0xf0)>>4;
 8002672:	89fb      	ldrh	r3, [r7, #14]
 8002674:	111b      	asrs	r3, r3, #4
 8002676:	b29b      	uxth	r3, r3
 8002678:	4a29      	ldr	r2, [pc, #164]	; (8002720 <Protocal+0x7a8>)
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	b299      	uxth	r1, r3
 8002682:	4b28      	ldr	r3, [pc, #160]	; (8002724 <Protocal+0x7ac>)
 8002684:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			via_point++;
 8002688:	4b25      	ldr	r3, [pc, #148]	; (8002720 <Protocal+0x7a8>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <Protocal+0x7a8>)
 8002692:	701a      	strb	r2, [r3, #0]
			n_Station--;
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <Protocal+0x7a4>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	3b01      	subs	r3, #1
 800269a:	b2da      	uxtb	r2, r3
 800269c:	4b1f      	ldr	r3, [pc, #124]	; (800271c <Protocal+0x7a4>)
 800269e:	701a      	strb	r2, [r3, #0]
			State = Frame3_station;
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <Protocal+0x79c>)
 80026a2:	2205      	movs	r2, #5
 80026a4:	701a      	strb	r2, [r3, #0]
		}
		if (n_Station==0)
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <Protocal+0x7a4>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d105      	bne.n	80026ba <Protocal+0x742>
		{
			State = Idle;
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <Protocal+0x79c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
			break;
 80026b4:	e002      	b.n	80026bc <Protocal+0x744>
		break;
 80026b6:	bf00      	nop
 80026b8:	e000      	b.n	80026bc <Protocal+0x744>
		}
		break;
 80026ba:	bf00      	nop
	}
}
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bdb0      	pop	{r4, r5, r7, pc}
 80026c4:	f3af 8000 	nop.w
 80026c8:	00000000 	.word	0x00000000
 80026cc:	406fe000 	.word	0x406fe000
 80026d0:	00000000 	.word	0x00000000
 80026d4:	40c38800 	.word	0x40c38800
 80026d8:	53c8d4f1 	.word	0x53c8d4f1
 80026dc:	400921fb 	.word	0x400921fb
 80026e0:	20000510 	.word	0x20000510
 80026e4:	20000518 	.word	0x20000518
 80026e8:	200003ff 	.word	0x200003ff
 80026ec:	2000051a 	.word	0x2000051a
 80026f0:	2000051e 	.word	0x2000051e
 80026f4:	20000514 	.word	0x20000514
 80026f8:	20000418 	.word	0x20000418
 80026fc:	200003fe 	.word	0x200003fe
 8002700:	40240000 	.word	0x40240000
 8002704:	20000020 	.word	0x20000020
 8002708:	40700000 	.word	0x40700000
 800270c:	40668000 	.word	0x40668000
 8002710:	2000001c 	.word	0x2000001c
 8002714:	20000516 	.word	0x20000516
 8002718:	20000419 	.word	0x20000419
 800271c:	20000400 	.word	0x20000400
 8002720:	200004a8 	.word	0x200004a8
 8002724:	20000404 	.word	0x20000404

08002728 <CheckSumFunction>:

int16_t CheckSumFunction(uint8_t CheckSum, uint8_t Frame, uint8_t Data)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
 8002732:	460b      	mov	r3, r1
 8002734:	71bb      	strb	r3, [r7, #6]
 8002736:	4613      	mov	r3, r2
 8002738:	717b      	strb	r3, [r7, #5]
	uint16_t result = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	81fb      	strh	r3, [r7, #14]
	if (Frame == 1)
 800273e:	79bb      	ldrb	r3, [r7, #6]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d103      	bne.n	800274c <CheckSumFunction+0x24>
	{
		result = ~(CheckSum);
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	b29b      	uxth	r3, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	81fb      	strh	r3, [r7, #14]
	}
	if (Frame == 2)
 800274c:	79bb      	ldrb	r3, [r7, #6]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d107      	bne.n	8002762 <CheckSumFunction+0x3a>
	{
		result = ~((CheckSum)+Data);
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	b29a      	uxth	r2, r3
 8002756:	797b      	ldrb	r3, [r7, #5]
 8002758:	b29b      	uxth	r3, r3
 800275a:	4413      	add	r3, r2
 800275c:	b29b      	uxth	r3, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	81fb      	strh	r3, [r7, #14]
	}
	if (Frame == 3)
 8002762:	79bb      	ldrb	r3, [r7, #6]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d107      	bne.n	8002778 <CheckSumFunction+0x50>
	{
		result = ~((CheckSum)+Data);
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	b29a      	uxth	r2, r3
 800276c:	797b      	ldrb	r3, [r7, #5]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4413      	add	r3, r2
 8002772:	b29b      	uxth	r3, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	81fb      	strh	r3, [r7, #14]
	}
	return result;
 8002778:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <WriteACK1>:

void WriteACK1()
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
	//*********write ACK1*****************
	uint8_t temp[] = {0x58, 0b01110101};
 800278e:	f247 5358 	movw	r3, #30040	; 0x7558
 8002792:	80bb      	strh	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 2);
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	2202      	movs	r2, #2
 8002798:	4619      	mov	r1, r3
 800279a:	4803      	ldr	r0, [pc, #12]	; (80027a8 <WriteACK1+0x20>)
 800279c:	f7ff fba4 	bl	8001ee8 <UARTTxWrite>
	//************************************
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200002e4 	.word	0x200002e4

080027ac <WriteACK2>:
void WriteACK2()
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
	//*********write ACK2*****************
	uint8_t temp[] = {70, 0x6e};
 80027b2:	f646 6346 	movw	r3, #28230	; 0x6e46
 80027b6:	80bb      	strh	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 2);
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	2202      	movs	r2, #2
 80027bc:	4619      	mov	r1, r3
 80027be:	4803      	ldr	r0, [pc, #12]	; (80027cc <WriteACK2+0x20>)
 80027c0:	f7ff fb92 	bl	8001ee8 <UARTTxWrite>
	//************************************
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200002e4 	.word	0x200002e4

080027d0 <SetHome>:
void SetHome()
{
 80027d0:	b5b0      	push	{r4, r5, r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	HomeSignal[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) ; //Read set home
 80027d4:	2101      	movs	r1, #1
 80027d6:	483c      	ldr	r0, [pc, #240]	; (80028c8 <SetHome+0xf8>)
 80027d8:	f002 f92a 	bl	8004a30 <HAL_GPIO_ReadPin>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <SetHome+0xfc>)
 80027e2:	701a      	strb	r2, [r3, #0]
	sum = HomeSignal[0] + HomeSignal[1]+ HomeSignal[2]+ HomeSignal[3]+ HomeSignal[4]+ HomeSignal[5]+ HomeSignal[6]+ HomeSignal[7];
 80027e4:	4b39      	ldr	r3, [pc, #228]	; (80028cc <SetHome+0xfc>)
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	4b38      	ldr	r3, [pc, #224]	; (80028cc <SetHome+0xfc>)
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	4413      	add	r3, r2
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <SetHome+0xfc>)
 80027f2:	789b      	ldrb	r3, [r3, #2]
 80027f4:	4413      	add	r3, r2
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	4b34      	ldr	r3, [pc, #208]	; (80028cc <SetHome+0xfc>)
 80027fa:	78db      	ldrb	r3, [r3, #3]
 80027fc:	4413      	add	r3, r2
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <SetHome+0xfc>)
 8002802:	791b      	ldrb	r3, [r3, #4]
 8002804:	4413      	add	r3, r2
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <SetHome+0xfc>)
 800280a:	795b      	ldrb	r3, [r3, #5]
 800280c:	4413      	add	r3, r2
 800280e:	b2da      	uxtb	r2, r3
 8002810:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <SetHome+0xfc>)
 8002812:	799b      	ldrb	r3, [r3, #6]
 8002814:	4413      	add	r3, r2
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <SetHome+0xfc>)
 800281a:	79db      	ldrb	r3, [r3, #7]
 800281c:	4413      	add	r3, r2
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <SetHome+0x100>)
 8002822:	701a      	strb	r2, [r3, #0]

	if (SetHomeFlag == 0)
 8002824:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <SetHome+0x104>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d113      	bne.n	8002854 <SetHome+0x84>
	{
		request = 5;
 800282c:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <SetHome+0x108>)
 800282e:	4a2b      	ldr	r2, [pc, #172]	; (80028dc <SetHome+0x10c>)
 8002830:	601a      	str	r2, [r3, #0]
		Direction = 0;
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <SetHome+0x110>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
		if (sum > 0)
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <SetHome+0x100>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <SetHome+0x84>
		{
			SetHomeFlag = 1;
 8002840:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <SetHome+0x104>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
			SetHomeTimeStamp = micros();
 8002846:	f000 ff0d 	bl	8003664 <micros>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4925      	ldr	r1, [pc, #148]	; (80028e4 <SetHome+0x114>)
 8002850:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}
	if (SetHomeFlag == 1)
 8002854:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <SetHome+0x104>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d116      	bne.n	800288a <SetHome+0xba>
	{
		request = 0;
 800285c:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <SetHome+0x108>)
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
		Direction = 2;
 8002864:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <SetHome+0x110>)
 8002866:	2202      	movs	r2, #2
 8002868:	701a      	strb	r2, [r3, #0]
		if (micros()-SetHomeTimeStamp > 1000000)
 800286a:	f000 fefb 	bl	8003664 <micros>
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <SetHome+0x114>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	1a84      	subs	r4, r0, r2
 8002876:	eb61 0503 	sbc.w	r5, r1, r3
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <SetHome+0x118>)
 800287c:	429c      	cmp	r4, r3
 800287e:	f175 0300 	sbcs.w	r3, r5, #0
 8002882:	d302      	bcc.n	800288a <SetHome+0xba>
		{
			SetHomeFlag = 2;
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <SetHome+0x104>)
 8002886:	2202      	movs	r2, #2
 8002888:	701a      	strb	r2, [r3, #0]
		}
	}
	if (SetHomeFlag == 2)
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <SetHome+0x104>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d118      	bne.n	80028c4 <SetHome+0xf4>
	{
		request = -0.5;
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <SetHome+0x108>)
 8002894:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8002898:	601a      	str	r2, [r3, #0]
		Direction = 1;
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <SetHome+0x110>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
		if (sum > 0)
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <SetHome+0x100>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <SetHome+0xf4>
		{
			request = 0;
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <SetHome+0x108>)
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
			htim3.Instance->CNT = 0;
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <SetHome+0x11c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2200      	movs	r2, #0
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24
			SetHomeFlag = 0;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <SetHome+0x104>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
			StartSetHome = 0;
 80028be:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <SetHome+0x120>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80028c4:	bf00      	nop
 80028c6:	bdb0      	pop	{r4, r5, r7, pc}
 80028c8:	40020800 	.word	0x40020800
 80028cc:	200004c0 	.word	0x200004c0
 80028d0:	200004ca 	.word	0x200004ca
 80028d4:	200004c8 	.word	0x200004c8
 80028d8:	200004f0 	.word	0x200004f0
 80028dc:	40a00000 	.word	0x40a00000
 80028e0:	20000508 	.word	0x20000508
 80028e4:	200004d0 	.word	0x200004d0
 80028e8:	000f4241 	.word	0x000f4241
 80028ec:	20000198 	.word	0x20000198
 80028f0:	200004c9 	.word	0x200004c9
 80028f4:	00000000 	.word	0x00000000

080028f8 <Trajec>:


void Trajec()
{
 80028f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028fc:	b088      	sub	sp, #32
 80028fe:	af00      	add	r7, sp, #0
	float Vmax;
	Vmax = VmaxRPM * 0.10472 ; //rad per sec
 8002900:	4bbb      	ldr	r3, [pc, #748]	; (8002bf0 <Trajec+0x2f8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fdcb 	bl	80004a0 <__aeabi_f2d>
 800290a:	a3ad      	add	r3, pc, #692	; (adr r3, 8002bc0 <Trajec+0x2c8>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fe1e 	bl	8000550 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f7fe f8f0 	bl	8000b00 <__aeabi_d2f>
 8002920:	4603      	mov	r3, r0
 8002922:	61fb      	str	r3, [r7, #28]
	float Amax = 0.5 ;  //rad per sec square
 8002924:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002928:	61bb      	str	r3, [r7, #24]
	if (ST == 0)
 800292a:	4bb2      	ldr	r3, [pc, #712]	; (8002bf4 <Trajec+0x2fc>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d129      	bne.n	8002986 <Trajec+0x8e>
	{
		StartTime = micros() ;
 8002932:	f000 fe97 	bl	8003664 <micros>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	f7fe f9f7 	bl	8000d30 <__aeabi_ul2f>
 8002942:	4603      	mov	r3, r0
 8002944:	4aac      	ldr	r2, [pc, #688]	; (8002bf8 <Trajec+0x300>)
 8002946:	6013      	str	r3, [r2, #0]
		ST = 1 ;
 8002948:	4baa      	ldr	r3, [pc, #680]	; (8002bf4 <Trajec+0x2fc>)
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
		StartPos = Degree * 3.14159 / 180.0 ; //rad
 800294e:	4bab      	ldr	r3, [pc, #684]	; (8002bfc <Trajec+0x304>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fda4 	bl	80004a0 <__aeabi_f2d>
 8002958:	a39b      	add	r3, pc, #620	; (adr r3, 8002bc8 <Trajec+0x2d0>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fd fdf7 	bl	8000550 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	4ba4      	ldr	r3, [pc, #656]	; (8002c00 <Trajec+0x308>)
 8002970:	f7fd ff18 	bl	80007a4 <__aeabi_ddiv>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f7fe f8c0 	bl	8000b00 <__aeabi_d2f>
 8002980:	4603      	mov	r3, r0
 8002982:	4aa0      	ldr	r2, [pc, #640]	; (8002c04 <Trajec+0x30c>)
 8002984:	6013      	str	r3, [r2, #0]
	}
	tau = (micros() - StartTime) / 1000000 ; //sec
 8002986:	f000 fe6d 	bl	8003664 <micros>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	f7fe f9cd 	bl	8000d30 <__aeabi_ul2f>
 8002996:	ee07 0a10 	vmov	s14, r0
 800299a:	4b97      	ldr	r3, [pc, #604]	; (8002bf8 <Trajec+0x300>)
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029a4:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002c08 <Trajec+0x310>
 80029a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ac:	4b97      	ldr	r3, [pc, #604]	; (8002c0c <Trajec+0x314>)
 80029ae:	edc3 7a00 	vstr	s15, [r3]

	Qi = StartPos ;
 80029b2:	4b94      	ldr	r3, [pc, #592]	; (8002c04 <Trajec+0x30c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a96      	ldr	r2, [pc, #600]	; (8002c10 <Trajec+0x318>)
 80029b8:	6013      	str	r3, [r2, #0]
	Qf = FinalPos * 3.14159 / 180.0 ;
 80029ba:	4b96      	ldr	r3, [pc, #600]	; (8002c14 <Trajec+0x31c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fd6e 	bl	80004a0 <__aeabi_f2d>
 80029c4:	a380      	add	r3, pc, #512	; (adr r3, 8002bc8 <Trajec+0x2d0>)
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	f7fd fdc1 	bl	8000550 <__aeabi_dmul>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <Trajec+0x308>)
 80029dc:	f7fd fee2 	bl	80007a4 <__aeabi_ddiv>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7fe f88a 	bl	8000b00 <__aeabi_d2f>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4a8a      	ldr	r2, [pc, #552]	; (8002c18 <Trajec+0x320>)
 80029f0:	6013      	str	r3, [r2, #0]

	if (Qf - Qi > 3.14159265)
 80029f2:	4b89      	ldr	r3, [pc, #548]	; (8002c18 <Trajec+0x320>)
 80029f4:	ed93 7a00 	vldr	s14, [r3]
 80029f8:	4b85      	ldr	r3, [pc, #532]	; (8002c10 <Trajec+0x318>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a02:	ee17 0a90 	vmov	r0, s15
 8002a06:	f7fd fd4b 	bl	80004a0 <__aeabi_f2d>
 8002a0a:	a371      	add	r3, pc, #452	; (adr r3, 8002bd0 <Trajec+0x2d8>)
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f7fe f82e 	bl	8000a70 <__aeabi_dcmpgt>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d012      	beq.n	8002a40 <Trajec+0x148>
	{
		Qi += 2*3.14159265;
 8002a1a:	4b7d      	ldr	r3, [pc, #500]	; (8002c10 <Trajec+0x318>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fd3e 	bl	80004a0 <__aeabi_f2d>
 8002a24:	a36c      	add	r3, pc, #432	; (adr r3, 8002bd8 <Trajec+0x2e0>)
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	f7fd fbdb 	bl	80001e4 <__adddf3>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7fe f863 	bl	8000b00 <__aeabi_d2f>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4a74      	ldr	r2, [pc, #464]	; (8002c10 <Trajec+0x318>)
 8002a3e:	6013      	str	r3, [r2, #0]
	}
	if (Qf - Qi < -3.14159265)
 8002a40:	4b75      	ldr	r3, [pc, #468]	; (8002c18 <Trajec+0x320>)
 8002a42:	ed93 7a00 	vldr	s14, [r3]
 8002a46:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <Trajec+0x318>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a50:	ee17 0a90 	vmov	r0, s15
 8002a54:	f7fd fd24 	bl	80004a0 <__aeabi_f2d>
 8002a58:	a361      	add	r3, pc, #388	; (adr r3, 8002be0 <Trajec+0x2e8>)
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f7fd ffe9 	bl	8000a34 <__aeabi_dcmplt>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d012      	beq.n	8002a8e <Trajec+0x196>
	{
		Qf += 2*3.14159265;
 8002a68:	4b6b      	ldr	r3, [pc, #428]	; (8002c18 <Trajec+0x320>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd17 	bl	80004a0 <__aeabi_f2d>
 8002a72:	a359      	add	r3, pc, #356	; (adr r3, 8002bd8 <Trajec+0x2e0>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	f7fd fbb4 	bl	80001e4 <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f83c 	bl	8000b00 <__aeabi_d2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4a63      	ldr	r2, [pc, #396]	; (8002c18 <Trajec+0x320>)
 8002a8c:	6013      	str	r3, [r2, #0]
	}
	TA1= (40.0 * sqrt(3.0))*(Qf - Qi);
 8002a8e:	4b62      	ldr	r3, [pc, #392]	; (8002c18 <Trajec+0x320>)
 8002a90:	ed93 7a00 	vldr	s14, [r3]
 8002a94:	4b5e      	ldr	r3, [pc, #376]	; (8002c10 <Trajec+0x318>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9e:	ee17 0a90 	vmov	r0, s15
 8002aa2:	f7fd fcfd 	bl	80004a0 <__aeabi_f2d>
 8002aa6:	a350      	add	r3, pc, #320	; (adr r3, 8002be8 <Trajec+0x2f0>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f7fd fd50 	bl	8000550 <__aeabi_dmul>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fe f822 	bl	8000b00 <__aeabi_d2f>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4a57      	ldr	r2, [pc, #348]	; (8002c1c <Trajec+0x324>)
 8002ac0:	6013      	str	r3, [r2, #0]
	TA2 = TA1/(3.0*Amax) ;
 8002ac2:	4b56      	ldr	r3, [pc, #344]	; (8002c1c <Trajec+0x324>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fcea 	bl	80004a0 <__aeabi_f2d>
 8002acc:	4680      	mov	r8, r0
 8002ace:	4689      	mov	r9, r1
 8002ad0:	69b8      	ldr	r0, [r7, #24]
 8002ad2:	f7fd fce5 	bl	80004a0 <__aeabi_f2d>
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	4b51      	ldr	r3, [pc, #324]	; (8002c20 <Trajec+0x328>)
 8002adc:	f7fd fd38 	bl	8000550 <__aeabi_dmul>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4640      	mov	r0, r8
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	f7fd fe5c 	bl	80007a4 <__aeabi_ddiv>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7fe f804 	bl	8000b00 <__aeabi_d2f>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a4a      	ldr	r2, [pc, #296]	; (8002c24 <Trajec+0x32c>)
 8002afc:	6013      	str	r3, [r2, #0]
	if (TA2 >= 0)
 8002afe:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <Trajec+0x32c>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0c:	db04      	blt.n	8002b18 <Trajec+0x220>
	{
		TA3 = TA2;
 8002b0e:	4b45      	ldr	r3, [pc, #276]	; (8002c24 <Trajec+0x32c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a45      	ldr	r2, [pc, #276]	; (8002c28 <Trajec+0x330>)
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e00c      	b.n	8002b32 <Trajec+0x23a>
	}
	else
	{
		TA3 = TA2 - (2*TA2);
 8002b18:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <Trajec+0x32c>)
 8002b1a:	ed93 7a00 	vldr	s14, [r3]
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <Trajec+0x32c>)
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <Trajec+0x330>)
 8002b2e:	edc3 7a00 	vstr	s15, [r3]
	}
	TA = sqrt(TA3) / 2.0 ;
 8002b32:	4b3d      	ldr	r3, [pc, #244]	; (8002c28 <Trajec+0x330>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fcb2 	bl	80004a0 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	ec43 2b10 	vmov	d0, r2, r3
 8002b44:	f005 fbe6 	bl	8008314 <sqrt>
 8002b48:	ec51 0b10 	vmov	r0, r1, d0
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b54:	f7fd fe26 	bl	80007a4 <__aeabi_ddiv>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7fd ffce 	bl	8000b00 <__aeabi_d2f>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4a31      	ldr	r2, [pc, #196]	; (8002c2c <Trajec+0x334>)
 8002b68:	6013      	str	r3, [r2, #0]

	TV1 = (15*Qf - 15*Qi)/(8*Vmax);
 8002b6a:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <Trajec+0x320>)
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002b74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <Trajec+0x318>)
 8002b7a:	edd3 7a00 	vldr	s15, [r3]
 8002b7e:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8002b82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b8e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002b92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b9a:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <Trajec+0x338>)
 8002b9c:	edc3 7a00 	vstr	s15, [r3]
	if (TV1 >= 0)
 8002ba0:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <Trajec+0x338>)
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bae:	db43      	blt.n	8002c38 <Trajec+0x340>
	{
		TV = TV1;
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	; (8002c30 <Trajec+0x338>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <Trajec+0x33c>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	e04b      	b.n	8002c52 <Trajec+0x35a>
 8002bba:	bf00      	nop
 8002bbc:	f3af 8000 	nop.w
 8002bc0:	0f3cb3e5 	.word	0x0f3cb3e5
 8002bc4:	3fbaceee 	.word	0x3fbaceee
 8002bc8:	f01b866e 	.word	0xf01b866e
 8002bcc:	400921f9 	.word	0x400921f9
 8002bd0:	53c8d4f1 	.word	0x53c8d4f1
 8002bd4:	400921fb 	.word	0x400921fb
 8002bd8:	53c8d4f1 	.word	0x53c8d4f1
 8002bdc:	401921fb 	.word	0x401921fb
 8002be0:	53c8d4f1 	.word	0x53c8d4f1
 8002be4:	c00921fb 	.word	0xc00921fb
 8002be8:	d1372fea 	.word	0xd1372fea
 8002bec:	4051520c 	.word	0x4051520c
 8002bf0:	20000020 	.word	0x20000020
 8002bf4:	20000461 	.word	0x20000461
 8002bf8:	2000045c 	.word	0x2000045c
 8002bfc:	20000504 	.word	0x20000504
 8002c00:	40668000 	.word	0x40668000
 8002c04:	20000470 	.word	0x20000470
 8002c08:	49742400 	.word	0x49742400
 8002c0c:	20000488 	.word	0x20000488
 8002c10:	20000474 	.word	0x20000474
 8002c14:	2000001c 	.word	0x2000001c
 8002c18:	20000478 	.word	0x20000478
 8002c1c:	2000048c 	.word	0x2000048c
 8002c20:	40080000 	.word	0x40080000
 8002c24:	20000490 	.word	0x20000490
 8002c28:	20000494 	.word	0x20000494
 8002c2c:	2000047c 	.word	0x2000047c
 8002c30:	20000498 	.word	0x20000498
 8002c34:	20000480 	.word	0x20000480
	}
	else
	{
		TV = TV1 - (2*TV1);
 8002c38:	4bd6      	ldr	r3, [pc, #856]	; (8002f94 <Trajec+0x69c>)
 8002c3a:	ed93 7a00 	vldr	s14, [r3]
 8002c3e:	4bd5      	ldr	r3, [pc, #852]	; (8002f94 <Trajec+0x69c>)
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4c:	4bd2      	ldr	r3, [pc, #840]	; (8002f98 <Trajec+0x6a0>)
 8002c4e:	edc3 7a00 	vstr	s15, [r3]
	}

	if (TV > TA)
 8002c52:	4bd1      	ldr	r3, [pc, #836]	; (8002f98 <Trajec+0x6a0>)
 8002c54:	ed93 7a00 	vldr	s14, [r3]
 8002c58:	4bd0      	ldr	r3, [pc, #832]	; (8002f9c <Trajec+0x6a4>)
 8002c5a:	edd3 7a00 	vldr	s15, [r3]
 8002c5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c66:	dd03      	ble.n	8002c70 <Trajec+0x378>
	{
		T = TV ;
 8002c68:	4bcb      	ldr	r3, [pc, #812]	; (8002f98 <Trajec+0x6a0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4acc      	ldr	r2, [pc, #816]	; (8002fa0 <Trajec+0x6a8>)
 8002c6e:	6013      	str	r3, [r2, #0]
	}
	if (TV <= TA)
 8002c70:	4bc9      	ldr	r3, [pc, #804]	; (8002f98 <Trajec+0x6a0>)
 8002c72:	ed93 7a00 	vldr	s14, [r3]
 8002c76:	4bc9      	ldr	r3, [pc, #804]	; (8002f9c <Trajec+0x6a4>)
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c84:	d803      	bhi.n	8002c8e <Trajec+0x396>
	{
		T = TA ;
 8002c86:	4bc5      	ldr	r3, [pc, #788]	; (8002f9c <Trajec+0x6a4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4ac5      	ldr	r2, [pc, #788]	; (8002fa0 <Trajec+0x6a8>)
 8002c8c:	6013      	str	r3, [r2, #0]
	}
	float a0 = Qi ;
 8002c8e:	4bc5      	ldr	r3, [pc, #788]	; (8002fa4 <Trajec+0x6ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	617b      	str	r3, [r7, #20]
	float a1 = 0 ;
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
	float a2 = 0 ;
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
	float a3 = (1 / (2 * (T*T*T))) * (20 * (Qf-Qi)) ;
 8002ca0:	4bbf      	ldr	r3, [pc, #764]	; (8002fa0 <Trajec+0x6a8>)
 8002ca2:	ed93 7a00 	vldr	s14, [r3]
 8002ca6:	4bbe      	ldr	r3, [pc, #760]	; (8002fa0 <Trajec+0x6a8>)
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cb0:	4bbb      	ldr	r3, [pc, #748]	; (8002fa0 <Trajec+0x6a8>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cc6:	4bb8      	ldr	r3, [pc, #736]	; (8002fa8 <Trajec+0x6b0>)
 8002cc8:	edd3 6a00 	vldr	s13, [r3]
 8002ccc:	4bb5      	ldr	r3, [pc, #724]	; (8002fa4 <Trajec+0x6ac>)
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002cd6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce2:	edc7 7a02 	vstr	s15, [r7, #8]
	float a4 = (1 / (2 * (T*T*T*T))) * (30 * (Qi-Qf)) ;
 8002ce6:	4bae      	ldr	r3, [pc, #696]	; (8002fa0 <Trajec+0x6a8>)
 8002ce8:	ed93 7a00 	vldr	s14, [r3]
 8002cec:	4bac      	ldr	r3, [pc, #688]	; (8002fa0 <Trajec+0x6a8>)
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf6:	4baa      	ldr	r3, [pc, #680]	; (8002fa0 <Trajec+0x6a8>)
 8002cf8:	edd3 7a00 	vldr	s15, [r3]
 8002cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d00:	4ba7      	ldr	r3, [pc, #668]	; (8002fa0 <Trajec+0x6a8>)
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d16:	4ba3      	ldr	r3, [pc, #652]	; (8002fa4 <Trajec+0x6ac>)
 8002d18:	edd3 6a00 	vldr	s13, [r3]
 8002d1c:	4ba2      	ldr	r3, [pc, #648]	; (8002fa8 <Trajec+0x6b0>)
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d26:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002d2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d32:	edc7 7a01 	vstr	s15, [r7, #4]
	float a5 = (1 / (2 * (T*T*T*T*T))) * (12 * (Qf-Qi)) ;
 8002d36:	4b9a      	ldr	r3, [pc, #616]	; (8002fa0 <Trajec+0x6a8>)
 8002d38:	ed93 7a00 	vldr	s14, [r3]
 8002d3c:	4b98      	ldr	r3, [pc, #608]	; (8002fa0 <Trajec+0x6a8>)
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d46:	4b96      	ldr	r3, [pc, #600]	; (8002fa0 <Trajec+0x6a8>)
 8002d48:	edd3 7a00 	vldr	s15, [r3]
 8002d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d50:	4b93      	ldr	r3, [pc, #588]	; (8002fa0 <Trajec+0x6a8>)
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d5a:	4b91      	ldr	r3, [pc, #580]	; (8002fa0 <Trajec+0x6a8>)
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d70:	4b8d      	ldr	r3, [pc, #564]	; (8002fa8 <Trajec+0x6b0>)
 8002d72:	edd3 6a00 	vldr	s13, [r3]
 8002d76:	4b8b      	ldr	r3, [pc, #556]	; (8002fa4 <Trajec+0x6ac>)
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d80:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002d84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8c:	edc7 7a00 	vstr	s15, [r7]

	if (micros() - StartTime < T*1000000)
 8002d90:	f000 fc68 	bl	8003664 <micros>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f7fd ffc8 	bl	8000d30 <__aeabi_ul2f>
 8002da0:	ee07 0a10 	vmov	s14, r0
 8002da4:	4b81      	ldr	r3, [pc, #516]	; (8002fac <Trajec+0x6b4>)
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dae:	4b7c      	ldr	r3, [pc, #496]	; (8002fa0 <Trajec+0x6a8>)
 8002db0:	edd3 7a00 	vldr	s15, [r3]
 8002db4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8002fb0 <Trajec+0x6b8>
 8002db8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc4:	f140 8156 	bpl.w	8003074 <Trajec+0x77c>
	{
		if (micros() - Trajtimestamp > 1500)
 8002dc8:	f000 fc4c 	bl	8003664 <micros>
 8002dcc:	4b79      	ldr	r3, [pc, #484]	; (8002fb4 <Trajec+0x6bc>)
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	1a84      	subs	r4, r0, r2
 8002dd4:	eb61 0503 	sbc.w	r5, r1, r3
 8002dd8:	f240 53dd 	movw	r3, #1501	; 0x5dd
 8002ddc:	429c      	cmp	r4, r3
 8002dde:	f175 0300 	sbcs.w	r3, r5, #0
 8002de2:	f0c0 8147 	bcc.w	8003074 <Trajec+0x77c>
		{
			position = a0 + a1*tau + a2*tau*tau + a3*tau*tau*tau + a4*tau*tau*tau*tau + a5*tau*tau*tau*tau*tau; //rad
 8002de6:	4b74      	ldr	r3, [pc, #464]	; (8002fb8 <Trajec+0x6c0>)
 8002de8:	ed93 7a00 	vldr	s14, [r3]
 8002dec:	edd7 7a04 	vldr	s15, [r7, #16]
 8002df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dfc:	4b6e      	ldr	r3, [pc, #440]	; (8002fb8 <Trajec+0x6c0>)
 8002dfe:	edd3 6a00 	vldr	s13, [r3]
 8002e02:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e0a:	4b6b      	ldr	r3, [pc, #428]	; (8002fb8 <Trajec+0x6c0>)
 8002e0c:	edd3 7a00 	vldr	s15, [r3]
 8002e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e18:	4b67      	ldr	r3, [pc, #412]	; (8002fb8 <Trajec+0x6c0>)
 8002e1a:	edd3 6a00 	vldr	s13, [r3]
 8002e1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e26:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <Trajec+0x6c0>)
 8002e28:	edd3 7a00 	vldr	s15, [r3]
 8002e2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <Trajec+0x6c0>)
 8002e32:	edd3 7a00 	vldr	s15, [r3]
 8002e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e3e:	4b5e      	ldr	r3, [pc, #376]	; (8002fb8 <Trajec+0x6c0>)
 8002e40:	edd3 6a00 	vldr	s13, [r3]
 8002e44:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e4c:	4b5a      	ldr	r3, [pc, #360]	; (8002fb8 <Trajec+0x6c0>)
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e56:	4b58      	ldr	r3, [pc, #352]	; (8002fb8 <Trajec+0x6c0>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e60:	4b55      	ldr	r3, [pc, #340]	; (8002fb8 <Trajec+0x6c0>)
 8002e62:	edd3 7a00 	vldr	s15, [r3]
 8002e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e6e:	4b52      	ldr	r3, [pc, #328]	; (8002fb8 <Trajec+0x6c0>)
 8002e70:	edd3 6a00 	vldr	s13, [r3]
 8002e74:	edd7 7a00 	vldr	s15, [r7]
 8002e78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e7c:	4b4e      	ldr	r3, [pc, #312]	; (8002fb8 <Trajec+0x6c0>)
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e86:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <Trajec+0x6c0>)
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e90:	4b49      	ldr	r3, [pc, #292]	; (8002fb8 <Trajec+0x6c0>)
 8002e92:	edd3 7a00 	vldr	s15, [r3]
 8002e96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e9a:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <Trajec+0x6c0>)
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea8:	4b44      	ldr	r3, [pc, #272]	; (8002fbc <Trajec+0x6c4>)
 8002eaa:	edc3 7a00 	vstr	s15, [r3]
			velocity = a1 + 2*a2*tau + 3*a3*tau*tau + 4*a4*tau*tau*tau + 5*a5*tau*tau*tau*tau; //rad/s
 8002eae:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002eb6:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <Trajec+0x6c0>)
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ecc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002ed0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ed4:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <Trajec+0x6c0>)
 8002ed6:	edd3 7a00 	vldr	s15, [r3]
 8002eda:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ede:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <Trajec+0x6c0>)
 8002ee0:	edd3 7a00 	vldr	s15, [r3]
 8002ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eec:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ef0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002ef4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ef8:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <Trajec+0x6c0>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f02:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <Trajec+0x6c0>)
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <Trajec+0x6c0>)
 8002f0e:	edd3 7a00 	vldr	s15, [r3]
 8002f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	edd7 7a00 	vldr	s15, [r7]
 8002f1e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002f22:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002f26:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <Trajec+0x6c0>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <Trajec+0x6c0>)
 8002f32:	edd3 7a00 	vldr	s15, [r3]
 8002f36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f3a:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <Trajec+0x6c0>)
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <Trajec+0x6c0>)
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <Trajec+0x6c8>)
 8002f54:	edc3 7a00 	vstr	s15, [r3]
			acceleration = 2*a2 + 6*a3*tau + 12*a4*tau*tau + 20*a5*tau*tau*tau; //rad per secsquare
 8002f58:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f5c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f60:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f64:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002f68:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <Trajec+0x6c0>)
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f7e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002f82:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <Trajec+0x6c0>)
 8002f88:	edd3 7a00 	vldr	s15, [r3]
 8002f8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f90:	e018      	b.n	8002fc4 <Trajec+0x6cc>
 8002f92:	bf00      	nop
 8002f94:	20000498 	.word	0x20000498
 8002f98:	20000480 	.word	0x20000480
 8002f9c:	2000047c 	.word	0x2000047c
 8002fa0:	20000484 	.word	0x20000484
 8002fa4:	20000474 	.word	0x20000474
 8002fa8:	20000478 	.word	0x20000478
 8002fac:	2000045c 	.word	0x2000045c
 8002fb0:	49742400 	.word	0x49742400
 8002fb4:	200004a0 	.word	0x200004a0
 8002fb8:	20000488 	.word	0x20000488
 8002fbc:	20000468 	.word	0x20000468
 8002fc0:	20000464 	.word	0x20000464
 8002fc4:	4b44      	ldr	r3, [pc, #272]	; (80030d8 <Trajec+0x7e0>)
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fd2:	edd7 7a00 	vldr	s15, [r7]
 8002fd6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002fda:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002fde:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <Trajec+0x7e0>)
 8002fe0:	edd3 7a00 	vldr	s15, [r3]
 8002fe4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fe8:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <Trajec+0x7e0>)
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <Trajec+0x7e0>)
 8002ff4:	edd3 7a00 	vldr	s15, [r3]
 8002ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <Trajec+0x7e4>)
 8003002:	edc3 7a00 	vstr	s15, [r3]

			position = position * 180 / 3.1415 ; //degree
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <Trajec+0x7e8>)
 8003008:	edd3 7a00 	vldr	s15, [r3]
 800300c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80030e4 <Trajec+0x7ec>
 8003010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003014:	ee17 0a90 	vmov	r0, s15
 8003018:	f7fd fa42 	bl	80004a0 <__aeabi_f2d>
 800301c:	a32a      	add	r3, pc, #168	; (adr r3, 80030c8 <Trajec+0x7d0>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd fbbf 	bl	80007a4 <__aeabi_ddiv>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f7fd fd67 	bl	8000b00 <__aeabi_d2f>
 8003032:	4603      	mov	r3, r0
 8003034:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <Trajec+0x7e8>)
 8003036:	6013      	str	r3, [r2, #0]
			velocity = velocity * 9.549297; //rpm
 8003038:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <Trajec+0x7f0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fa2f 	bl	80004a0 <__aeabi_f2d>
 8003042:	a323      	add	r3, pc, #140	; (adr r3, 80030d0 <Trajec+0x7d8>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f7fd fa82 	bl	8000550 <__aeabi_dmul>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	f7fd fd54 	bl	8000b00 <__aeabi_d2f>
 8003058:	4603      	mov	r3, r0
 800305a:	4a23      	ldr	r2, [pc, #140]	; (80030e8 <Trajec+0x7f0>)
 800305c:	6013      	str	r3, [r2, #0]
			Trajtimestamp = micros() ;
 800305e:	f000 fb01 	bl	8003664 <micros>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4921      	ldr	r1, [pc, #132]	; (80030ec <Trajec+0x7f4>)
 8003068:	e9c1 2300 	strd	r2, r3, [r1]
			request = velocity ;
 800306c:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <Trajec+0x7f0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1f      	ldr	r2, [pc, #124]	; (80030f0 <Trajec+0x7f8>)
 8003072:	6013      	str	r3, [r2, #0]
		}
	}
	if (micros() - StartTime > (T*1000000)+500000)
 8003074:	f000 faf6 	bl	8003664 <micros>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f7fd fe56 	bl	8000d30 <__aeabi_ul2f>
 8003084:	ee07 0a10 	vmov	s14, r0
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <Trajec+0x7fc>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003092:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <Trajec+0x800>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	eddf 6a18 	vldr	s13, [pc, #96]	; 80030fc <Trajec+0x804>
 800309c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030a0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003100 <Trajec+0x808>
 80030a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b0:	dc00      	bgt.n	80030b4 <Trajec+0x7bc>
	{
		FinishedTraj = 1;
	}

}
 80030b2:	e002      	b.n	80030ba <Trajec+0x7c2>
		FinishedTraj = 1;
 80030b4:	4b13      	ldr	r3, [pc, #76]	; (8003104 <Trajec+0x80c>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030c4:	f3af 8000 	nop.w
 80030c8:	c083126f 	.word	0xc083126f
 80030cc:	400921ca 	.word	0x400921ca
 80030d0:	74d594f2 	.word	0x74d594f2
 80030d4:	4023193d 	.word	0x4023193d
 80030d8:	20000488 	.word	0x20000488
 80030dc:	2000046c 	.word	0x2000046c
 80030e0:	20000468 	.word	0x20000468
 80030e4:	43340000 	.word	0x43340000
 80030e8:	20000464 	.word	0x20000464
 80030ec:	200004a0 	.word	0x200004a0
 80030f0:	200004f0 	.word	0x200004f0
 80030f4:	2000045c 	.word	0x2000045c
 80030f8:	20000484 	.word	0x20000484
 80030fc:	49742400 	.word	0x49742400
 8003100:	48f42400 	.word	0x48f42400
 8003104:	200004b0 	.word	0x200004b0

08003108 <PIDinit>:

void PIDinit()
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
	preErr1 = 0 ;
 800310c:	4b17      	ldr	r3, [pc, #92]	; (800316c <PIDinit+0x64>)
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
	preErr2 = 0 ;
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <PIDinit+0x68>)
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
	PreviousPWM = 0 ;
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <PIDinit+0x6c>)
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
	PWMPercent = 0 ;
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <PIDinit+0x70>)
 8003126:	2200      	movs	r2, #0
 8003128:	801a      	strh	r2, [r3, #0]
	Propotional = 0 ;
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <PIDinit+0x74>)
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
	Integrator = 0 ;
 8003132:	4b13      	ldr	r3, [pc, #76]	; (8003180 <PIDinit+0x78>)
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
	Differentiator = 0 ;
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <PIDinit+0x7c>)
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
	P = 0 ;
 8003142:	4b11      	ldr	r3, [pc, #68]	; (8003188 <PIDinit+0x80>)
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
	I = 0 ;
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <PIDinit+0x84>)
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
	D = 0 ;
 8003152:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <PIDinit+0x88>)
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
	Tau = 0 ;
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <PIDinit+0x8c>)
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	2000042c 	.word	0x2000042c
 8003170:	20000430 	.word	0x20000430
 8003174:	20000428 	.word	0x20000428
 8003178:	200004f4 	.word	0x200004f4
 800317c:	20000434 	.word	0x20000434
 8003180:	20000438 	.word	0x20000438
 8003184:	2000043c 	.word	0x2000043c
 8003188:	20000448 	.word	0x20000448
 800318c:	2000044c 	.word	0x2000044c
 8003190:	20000450 	.word	0x20000450
 8003194:	20000440 	.word	0x20000440

08003198 <PID>:

void PID()
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
	float req,Vel ;
	if (request < 0)
 800319e:	4b4e      	ldr	r3, [pc, #312]	; (80032d8 <PID+0x140>)
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ac:	d510      	bpl.n	80031d0 <PID+0x38>
	{
		req = - request ;
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <PID+0x140>)
 80031b0:	edd3 7a00 	vldr	s15, [r3]
 80031b4:	eef1 7a67 	vneg.f32	s15, s15
 80031b8:	edc7 7a03 	vstr	s15, [r7, #12]
		Vel = - VelocityRPM ;
 80031bc:	4b47      	ldr	r3, [pc, #284]	; (80032dc <PID+0x144>)
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	eef1 7a67 	vneg.f32	s15, s15
 80031c6:	edc7 7a02 	vstr	s15, [r7, #8]
		Direction = 1 ;
 80031ca:	4b45      	ldr	r3, [pc, #276]	; (80032e0 <PID+0x148>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	701a      	strb	r2, [r3, #0]
	}
	if (request > 0)
 80031d0:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <PID+0x140>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031de:	dd08      	ble.n	80031f2 <PID+0x5a>
	{
		req = request ;
 80031e0:	4b3d      	ldr	r3, [pc, #244]	; (80032d8 <PID+0x140>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
		Vel = VelocityRPM ;
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <PID+0x144>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60bb      	str	r3, [r7, #8]
		Direction = 0 ;
 80031ec:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <PID+0x148>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
	}
	float error = req - Vel;
 80031f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80031f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80031fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031fe:	edc7 7a01 	vstr	s15, [r7, #4]
	DeltaU = ((P+I+D)*error) - ((P+(2*D))*preErr1) + (D*preErr2) ;
 8003202:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <PID+0x14c>)
 8003204:	ed93 7a00 	vldr	s14, [r3]
 8003208:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <PID+0x150>)
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003212:	4b36      	ldr	r3, [pc, #216]	; (80032ec <PID+0x154>)
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	ee37 7a27 	vadd.f32	s14, s14, s15
 800321c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003224:	4b31      	ldr	r3, [pc, #196]	; (80032ec <PID+0x154>)
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800322e:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <PID+0x14c>)
 8003230:	edd3 7a00 	vldr	s15, [r3]
 8003234:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <PID+0x158>)
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003242:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003246:	4b29      	ldr	r3, [pc, #164]	; (80032ec <PID+0x154>)
 8003248:	edd3 6a00 	vldr	s13, [r3]
 800324c:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <PID+0x15c>)
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325a:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <PID+0x160>)
 800325c:	edc3 7a00 	vstr	s15, [r3]
	PWMPercent = PreviousPWM + DeltaU + InitialPWM ;
 8003260:	4b26      	ldr	r3, [pc, #152]	; (80032fc <PID+0x164>)
 8003262:	ed93 7a00 	vldr	s14, [r3]
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <PID+0x160>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <PID+0x168>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800327c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003284:	ee17 3a90 	vmov	r3, s15
 8003288:	b29a      	uxth	r2, r3
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <PID+0x16c>)
 800328c:	801a      	strh	r2, [r3, #0]
	if (PWMPercent > 50000)
 800328e:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <PID+0x16c>)
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003296:	4293      	cmp	r3, r2
 8003298:	d903      	bls.n	80032a2 <PID+0x10a>
	{
		PWMPercent = 50000;
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <PID+0x16c>)
 800329c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80032a0:	801a      	strh	r2, [r3, #0]
	}
	if (PWMPercent < 0)
	{
		PWMPercent = 0 ;
	}
	PreviousPWM = PWMPercent - InitialPWM ;
 80032a2:	4b18      	ldr	r3, [pc, #96]	; (8003304 <PID+0x16c>)
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <PID+0x168>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <PID+0x164>)
 80032b8:	edc3 7a00 	vstr	s15, [r3]
	preErr2 = preErr1 ;
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <PID+0x158>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <PID+0x15c>)
 80032c2:	6013      	str	r3, [r2, #0]
	preErr1 = error ;
 80032c4:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <PID+0x158>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6013      	str	r3, [r2, #0]

}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	200004f0 	.word	0x200004f0
 80032dc:	20000500 	.word	0x20000500
 80032e0:	20000508 	.word	0x20000508
 80032e4:	20000448 	.word	0x20000448
 80032e8:	2000044c 	.word	0x2000044c
 80032ec:	20000450 	.word	0x20000450
 80032f0:	2000042c 	.word	0x2000042c
 80032f4:	20000430 	.word	0x20000430
 80032f8:	20000444 	.word	0x20000444
 80032fc:	20000428 	.word	0x20000428
 8003300:	20000000 	.word	0x20000000
 8003304:	200004f4 	.word	0x200004f4

08003308 <SecondPID>:

void SecondPID()
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
	float final,now;
	final = FinalPos;
 800330e:	4b58      	ldr	r3, [pc, #352]	; (8003470 <SecondPID+0x168>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]
	now = Degree;
 8003314:	4b57      	ldr	r3, [pc, #348]	; (8003474 <SecondPID+0x16c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	607b      	str	r3, [r7, #4]
	float error;
	if (FinalPos > Degree)
 800331a:	4b55      	ldr	r3, [pc, #340]	; (8003470 <SecondPID+0x168>)
 800331c:	ed93 7a00 	vldr	s14, [r3]
 8003320:	4b54      	ldr	r3, [pc, #336]	; (8003474 <SecondPID+0x16c>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	dd0a      	ble.n	8003346 <SecondPID+0x3e>
	{
		Direction = 0;
 8003330:	4b51      	ldr	r3, [pc, #324]	; (8003478 <SecondPID+0x170>)
 8003332:	2200      	movs	r2, #0
 8003334:	701a      	strb	r2, [r3, #0]
		error = final - now;
 8003336:	ed97 7a03 	vldr	s14, [r7, #12]
 800333a:	edd7 7a01 	vldr	s15, [r7, #4]
 800333e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003342:	edc7 7a02 	vstr	s15, [r7, #8]
	}
	if (FinalPos < Degree)
 8003346:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <SecondPID+0x168>)
 8003348:	ed93 7a00 	vldr	s14, [r3]
 800334c:	4b49      	ldr	r3, [pc, #292]	; (8003474 <SecondPID+0x16c>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335a:	d50a      	bpl.n	8003372 <SecondPID+0x6a>
	{
		Direction = 1;
 800335c:	4b46      	ldr	r3, [pc, #280]	; (8003478 <SecondPID+0x170>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
		error = now - final;
 8003362:	ed97 7a01 	vldr	s14, [r7, #4]
 8003366:	edd7 7a03 	vldr	s15, [r7, #12]
 800336a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800336e:	edc7 7a02 	vstr	s15, [r7, #8]
	}
	if (FinalPos - Degree < -350)
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <SecondPID+0x168>)
 8003374:	ed93 7a00 	vldr	s14, [r3]
 8003378:	4b3e      	ldr	r3, [pc, #248]	; (8003474 <SecondPID+0x16c>)
 800337a:	edd3 7a00 	vldr	s15, [r3]
 800337e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003382:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800347c <SecondPID+0x174>
 8003386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338e:	d513      	bpl.n	80033b8 <SecondPID+0xb0>
	{
		final = FinalPos + 360;
 8003390:	4b37      	ldr	r3, [pc, #220]	; (8003470 <SecondPID+0x168>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003480 <SecondPID+0x178>
 800339a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800339e:	edc7 7a03 	vstr	s15, [r7, #12]
		Direction = 0;
 80033a2:	4b35      	ldr	r3, [pc, #212]	; (8003478 <SecondPID+0x170>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
		error = final - now;
 80033a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80033ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b4:	edc7 7a02 	vstr	s15, [r7, #8]
	}

	if (FinalPos - Degree > 350)
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <SecondPID+0x168>)
 80033ba:	ed93 7a00 	vldr	s14, [r3]
 80033be:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <SecondPID+0x16c>)
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003484 <SecondPID+0x17c>
 80033cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d4:	dd13      	ble.n	80033fe <SecondPID+0xf6>
	{
		now = Degree + 360;
 80033d6:	4b27      	ldr	r3, [pc, #156]	; (8003474 <SecondPID+0x16c>)
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003480 <SecondPID+0x178>
 80033e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033e4:	edc7 7a01 	vstr	s15, [r7, #4]
		Direction = 1;
 80033e8:	4b23      	ldr	r3, [pc, #140]	; (8003478 <SecondPID+0x170>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	701a      	strb	r2, [r3, #0]
		error = now - final;
 80033ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80033f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80033f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fa:	edc7 7a02 	vstr	s15, [r7, #8]
	}

	SUM = SUM + error ;
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <SecondPID+0x180>)
 8003400:	ed93 7a00 	vldr	s14, [r3]
 8003404:	edd7 7a02 	vldr	s15, [r7, #8]
 8003408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340c:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <SecondPID+0x180>)
 800340e:	edc3 7a00 	vstr	s15, [r3]
	PWMPercent = (PP*error) + (II*SUM) + (DD*(error - PPreerror)) ;
 8003412:	4b1e      	ldr	r3, [pc, #120]	; (800348c <SecondPID+0x184>)
 8003414:	ed93 7a00 	vldr	s14, [r3]
 8003418:	edd7 7a02 	vldr	s15, [r7, #8]
 800341c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <SecondPID+0x188>)
 8003422:	edd3 6a00 	vldr	s13, [r3]
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <SecondPID+0x180>)
 8003428:	edd3 7a00 	vldr	s15, [r3]
 800342c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003434:	4b17      	ldr	r3, [pc, #92]	; (8003494 <SecondPID+0x18c>)
 8003436:	edd3 7a00 	vldr	s15, [r3]
 800343a:	edd7 6a02 	vldr	s13, [r7, #8]
 800343e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <SecondPID+0x190>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003454:	ee17 3a90 	vmov	r3, s15
 8003458:	b29a      	uxth	r2, r3
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <SecondPID+0x194>)
 800345c:	801a      	strh	r2, [r3, #0]
	PPreerror = error;
 800345e:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <SecondPID+0x18c>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	2000001c 	.word	0x2000001c
 8003474:	20000504 	.word	0x20000504
 8003478:	20000508 	.word	0x20000508
 800347c:	c3af0000 	.word	0xc3af0000
 8003480:	43b40000 	.word	0x43b40000
 8003484:	43af0000 	.word	0x43af0000
 8003488:	20000454 	.word	0x20000454
 800348c:	20000010 	.word	0x20000010
 8003490:	20000014 	.word	0x20000014
 8003494:	20000458 	.word	0x20000458
 8003498:	20000018 	.word	0x20000018
 800349c:	200004f4 	.word	0x200004f4

080034a0 <Velocity>:


float Velocity()
{
 80034a0:	b5b0      	push	{r4, r5, r7, lr}
 80034a2:	ed2d 8b02 	vpush	{d8}
 80034a6:	af00      	add	r7, sp, #0
	  if (micros() - TimestampEncoder >= 100)
 80034a8:	f000 f8dc 	bl	8003664 <micros>
 80034ac:	4b28      	ldr	r3, [pc, #160]	; (8003550 <Velocity+0xb0>)
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	1a84      	subs	r4, r0, r2
 80034b4:	eb61 0503 	sbc.w	r5, r1, r3
 80034b8:	2c64      	cmp	r4, #100	; 0x64
 80034ba:	f175 0300 	sbcs.w	r3, r5, #0
 80034be:	d325      	bcc.n	800350c <Velocity+0x6c>
	  {
		  TimestampEncoder = micros();
 80034c0:	f000 f8d0 	bl	8003664 <micros>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4921      	ldr	r1, [pc, #132]	; (8003550 <Velocity+0xb0>)
 80034ca:	e9c1 2300 	strd	r2, r3, [r1]
		  EncoderVel = (EncoderVel * 999 + EncoderVelocity_Update()) / 1000.0;
 80034ce:	4b21      	ldr	r3, [pc, #132]	; (8003554 <Velocity+0xb4>)
 80034d0:	edd3 7a00 	vldr	s15, [r3]
 80034d4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003558 <Velocity+0xb8>
 80034d8:	ee27 8a87 	vmul.f32	s16, s15, s14
 80034dc:	f000 f86e 	bl	80035bc <EncoderVelocity_Update>
 80034e0:	eef0 7a40 	vmov.f32	s15, s0
 80034e4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80034e8:	ee17 0a90 	vmov	r0, s15
 80034ec:	f7fc ffd8 	bl	80004a0 <__aeabi_f2d>
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	4b19      	ldr	r3, [pc, #100]	; (800355c <Velocity+0xbc>)
 80034f6:	f7fd f955 	bl	80007a4 <__aeabi_ddiv>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4610      	mov	r0, r2
 8003500:	4619      	mov	r1, r3
 8003502:	f7fd fafd 	bl	8000b00 <__aeabi_d2f>
 8003506:	4603      	mov	r3, r0
 8003508:	4a12      	ldr	r2, [pc, #72]	; (8003554 <Velocity+0xb4>)
 800350a:	6013      	str	r3, [r2, #0]
	  }
	  return EncoderVel * 60.0 / 2048.0; //pulse per sec to rpm
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <Velocity+0xb4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fc ffc5 	bl	80004a0 <__aeabi_f2d>
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <Velocity+0xc0>)
 800351c:	f7fd f818 	bl	8000550 <__aeabi_dmul>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <Velocity+0xc4>)
 800352e:	f7fd f939 	bl	80007a4 <__aeabi_ddiv>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	f7fd fae1 	bl	8000b00 <__aeabi_d2f>
 800353e:	4603      	mov	r3, r0
 8003540:	ee07 3a90 	vmov	s15, r3
}
 8003544:	eeb0 0a67 	vmov.f32	s0, s15
 8003548:	46bd      	mov	sp, r7
 800354a:	ecbd 8b02 	vpop	{d8}
 800354e:	bdb0      	pop	{r4, r5, r7, pc}
 8003550:	200004d8 	.word	0x200004d8
 8003554:	200004e0 	.word	0x200004e0
 8003558:	4479c000 	.word	0x4479c000
 800355c:	408f4000 	.word	0x408f4000
 8003560:	404e0000 	.word	0x404e0000
 8003564:	40a00000 	.word	0x40a00000

08003568 <PWMgeneration>:
void PWMgeneration()
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
	  if (Direction == 0)
 800356c:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <PWMgeneration+0x48>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <PWMgeneration+0x16>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50000);
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <PWMgeneration+0x4c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f24c 3250 	movw	r2, #50000	; 0xc350
 800357c:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 1)
 800357e:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <PWMgeneration+0x48>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d103      	bne.n	800358e <PWMgeneration+0x26>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <PWMgeneration+0x4c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 2)
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <PWMgeneration+0x48>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d104      	bne.n	80035a0 <PWMgeneration+0x38>
	  {
		  PIDinit() ;
 8003596:	f7ff fdb7 	bl	8003108 <PIDinit>
		  PWMPercent = 0 ;
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <PWMgeneration+0x50>)
 800359c:	2200      	movs	r2, #0
 800359e:	801a      	strh	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMPercent);
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <PWMgeneration+0x50>)
 80035a2:	881a      	ldrh	r2, [r3, #0]
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <PWMgeneration+0x4c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000508 	.word	0x20000508
 80035b4:	20000108 	.word	0x20000108
 80035b8:	200004f4 	.word	0x200004f4

080035bc <EncoderVelocity_Update>:
#define  HTIM_ENCODER htim3
#define  MAX_SUBPOSITION_OVERFLOW 1024
#define  MAX_ENCODER_PERIOD 2048

float EncoderVelocity_Update()
{
 80035bc:	b5b0      	push	{r4, r5, r7, lr}
 80035be:	ed2d 8b02 	vpush	{d8}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 80035c6:	4b23      	ldr	r3, [pc, #140]	; (8003654 <EncoderVelocity_Update+0x98>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 80035ce:	f000 f849 	bl	8003664 <micros>
 80035d2:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <EncoderVelocity_Update+0x9c>)
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035e0:	1a84      	subs	r4, r0, r2
 80035e2:	eb61 0503 	sbc.w	r5, r1, r3
 80035e6:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80035ea:	4b1c      	ldr	r3, [pc, #112]	; (800365c <EncoderVelocity_Update+0xa0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fa:	db04      	blt.n	8003606 <EncoderVelocity_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e007      	b.n	8003616 <EncoderVelocity_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800360c:	dc03      	bgt.n	8003616 <EncoderVelocity_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003614:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8003616:	4a11      	ldr	r2, [pc, #68]	; (800365c <EncoderVelocity_Update+0xa0>)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 800361c:	490e      	ldr	r1, [pc, #56]	; (8003658 <EncoderVelocity_Update+0x9c>)
 800361e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003622:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <EncoderVelocity_Update+0xa4>)
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800363a:	f7fd fb79 	bl	8000d30 <__aeabi_ul2f>
 800363e:	ee07 0a10 	vmov	s14, r0
 8003642:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 8003646:	eeb0 0a67 	vmov.f32	s0, s15
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	ecbd 8b02 	vpop	{d8}
 8003652:	bdb0      	pop	{r4, r5, r7, pc}
 8003654:	20000198 	.word	0x20000198
 8003658:	20000520 	.word	0x20000520
 800365c:	20000528 	.word	0x20000528
 8003660:	000f4240 	.word	0x000f4240

08003664 <micros>:
	{
		_micros += 4294967295;
	}
}
uint64_t micros()
{
 8003664:	b4b0      	push	{r4, r5, r7}
 8003666:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <micros+0x2c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2200      	movs	r2, #0
 8003670:	4618      	mov	r0, r3
 8003672:	4611      	mov	r1, r2
 8003674:	4b07      	ldr	r3, [pc, #28]	; (8003694 <micros+0x30>)
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	1884      	adds	r4, r0, r2
 800367c:	eb41 0503 	adc.w	r5, r1, r3
 8003680:	4622      	mov	r2, r4
 8003682:	462b      	mov	r3, r5
}
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	bcb0      	pop	{r4, r5, r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000150 	.word	0x20000150
 8003694:	200004f8 	.word	0x200004f8

08003698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800369c:	b672      	cpsid	i
}
 800369e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036a0:	e7fe      	b.n	80036a0 <Error_Handler+0x8>
	...

080036a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_MspInit+0x4c>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <HAL_MspInit+0x4c>)
 80036b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_MspInit+0x4c>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_MspInit+0x4c>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <HAL_MspInit+0x4c>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_MspInit+0x4c>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80036e2:	2007      	movs	r0, #7
 80036e4:	f000 fbdc 	bl	8003ea0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a19      	ldr	r2, [pc, #100]	; (8003778 <HAL_I2C_MspInit+0x84>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d12c      	bne.n	8003770 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <HAL_I2C_MspInit+0x88>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	4a17      	ldr	r2, [pc, #92]	; (800377c <HAL_I2C_MspInit+0x88>)
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	6313      	str	r3, [r2, #48]	; 0x30
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_I2C_MspInit+0x88>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003732:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003738:	2312      	movs	r3, #18
 800373a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800373c:	2301      	movs	r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003740:	2302      	movs	r3, #2
 8003742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003744:	2304      	movs	r3, #4
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	4619      	mov	r1, r3
 800374e:	480c      	ldr	r0, [pc, #48]	; (8003780 <HAL_I2C_MspInit+0x8c>)
 8003750:	f000 ffea 	bl	8004728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_I2C_MspInit+0x88>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	4a07      	ldr	r2, [pc, #28]	; (800377c <HAL_I2C_MspInit+0x88>)
 800375e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003762:	6413      	str	r3, [r2, #64]	; 0x40
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_I2C_MspInit+0x88>)
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003770:	bf00      	nop
 8003772:	3728      	adds	r7, #40	; 0x28
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40005400 	.word	0x40005400
 800377c:	40023800 	.word	0x40023800
 8003780:	40020400 	.word	0x40020400

08003784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <HAL_TIM_Base_MspInit+0x64>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <HAL_TIM_Base_MspInit+0x68>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	4a13      	ldr	r2, [pc, #76]	; (80037ec <HAL_TIM_Base_MspInit+0x68>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6453      	str	r3, [r2, #68]	; 0x44
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_TIM_Base_MspInit+0x68>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80037b2:	e012      	b.n	80037da <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037bc:	d10d      	bne.n	80037da <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_TIM_Base_MspInit+0x68>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <HAL_TIM_Base_MspInit+0x68>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <HAL_TIM_Base_MspInit+0x68>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40023800 	.word	0x40023800

080037f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_TIM_Encoder_MspInit+0x84>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d12b      	bne.n	800386a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	4b18      	ldr	r3, [pc, #96]	; (8003878 <HAL_TIM_Encoder_MspInit+0x88>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	4a17      	ldr	r2, [pc, #92]	; (8003878 <HAL_TIM_Encoder_MspInit+0x88>)
 800381c:	f043 0302 	orr.w	r3, r3, #2
 8003820:	6413      	str	r3, [r2, #64]	; 0x40
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <HAL_TIM_Encoder_MspInit+0x88>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <HAL_TIM_Encoder_MspInit+0x88>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4a10      	ldr	r2, [pc, #64]	; (8003878 <HAL_TIM_Encoder_MspInit+0x88>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6313      	str	r3, [r2, #48]	; 0x30
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <HAL_TIM_Encoder_MspInit+0x88>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800384a:	23c0      	movs	r3, #192	; 0xc0
 800384c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003856:	2300      	movs	r3, #0
 8003858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800385a:	2302      	movs	r3, #2
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385e:	f107 0314 	add.w	r3, r7, #20
 8003862:	4619      	mov	r1, r3
 8003864:	4805      	ldr	r0, [pc, #20]	; (800387c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003866:	f000 ff5f 	bl	8004728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800386a:	bf00      	nop
 800386c:	3728      	adds	r7, #40	; 0x28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40000400 	.word	0x40000400
 8003878:	40023800 	.word	0x40023800
 800387c:	40020000 	.word	0x40020000

08003880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003888:	f107 030c 	add.w	r3, r7, #12
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_TIM_MspPostInit+0x68>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d11e      	bne.n	80038e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_TIM_MspPostInit+0x6c>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a10      	ldr	r2, [pc, #64]	; (80038ec <HAL_TIM_MspPostInit+0x6c>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_TIM_MspPostInit+0x6c>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c4:	2302      	movs	r3, #2
 80038c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038d0:	2301      	movs	r3, #1
 80038d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	4619      	mov	r1, r3
 80038da:	4805      	ldr	r0, [pc, #20]	; (80038f0 <HAL_TIM_MspPostInit+0x70>)
 80038dc:	f000 ff24 	bl	8004728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80038e0:	bf00      	nop
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40020000 	.word	0x40020000

080038f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a4c      	ldr	r2, [pc, #304]	; (8003a44 <HAL_UART_MspInit+0x150>)
 8003912:	4293      	cmp	r3, r2
 8003914:	f040 8091 	bne.w	8003a3a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <HAL_UART_MspInit+0x154>)
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	4a49      	ldr	r2, [pc, #292]	; (8003a48 <HAL_UART_MspInit+0x154>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003926:	6413      	str	r3, [r2, #64]	; 0x40
 8003928:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <HAL_UART_MspInit+0x154>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <HAL_UART_MspInit+0x154>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4a42      	ldr	r2, [pc, #264]	; (8003a48 <HAL_UART_MspInit+0x154>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6313      	str	r3, [r2, #48]	; 0x30
 8003944:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <HAL_UART_MspInit+0x154>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003950:	230c      	movs	r3, #12
 8003952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003954:	2302      	movs	r3, #2
 8003956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395c:	2303      	movs	r3, #3
 800395e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003960:	2307      	movs	r3, #7
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003964:	f107 0314 	add.w	r3, r7, #20
 8003968:	4619      	mov	r1, r3
 800396a:	4838      	ldr	r0, [pc, #224]	; (8003a4c <HAL_UART_MspInit+0x158>)
 800396c:	f000 fedc 	bl	8004728 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003970:	4b37      	ldr	r3, [pc, #220]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 8003972:	4a38      	ldr	r2, [pc, #224]	; (8003a54 <HAL_UART_MspInit+0x160>)
 8003974:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003976:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 8003978:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800397c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800397e:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 8003980:	2200      	movs	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003984:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 8003986:	2200      	movs	r2, #0
 8003988:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800398a:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 800398c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003990:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003992:	4b2f      	ldr	r3, [pc, #188]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 8003994:	2200      	movs	r2, #0
 8003996:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 800399a:	2200      	movs	r2, #0
 800399c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800399e:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 80039a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039ac:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80039b2:	4827      	ldr	r0, [pc, #156]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 80039b4:	f000 fab6 	bl	8003f24 <HAL_DMA_Init>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80039be:	f7ff fe6b 	bl	8003698 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38
 80039c8:	4a21      	ldr	r2, [pc, #132]	; (8003a50 <HAL_UART_MspInit+0x15c>)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80039ce:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <HAL_UART_MspInit+0x164>)
 80039d0:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <HAL_UART_MspInit+0x168>)
 80039d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80039d4:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <HAL_UART_MspInit+0x164>)
 80039d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039dc:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <HAL_UART_MspInit+0x164>)
 80039de:	2240      	movs	r2, #64	; 0x40
 80039e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039e2:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_UART_MspInit+0x164>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039e8:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <HAL_UART_MspInit+0x164>)
 80039ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039f0:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_UART_MspInit+0x164>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039f6:	4b18      	ldr	r3, [pc, #96]	; (8003a58 <HAL_UART_MspInit+0x164>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80039fc:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <HAL_UART_MspInit+0x164>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a02:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_UART_MspInit+0x164>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <HAL_UART_MspInit+0x164>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a0e:	4812      	ldr	r0, [pc, #72]	; (8003a58 <HAL_UART_MspInit+0x164>)
 8003a10:	f000 fa88 	bl	8003f24 <HAL_DMA_Init>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003a1a:	f7ff fe3d 	bl	8003698 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a0d      	ldr	r2, [pc, #52]	; (8003a58 <HAL_UART_MspInit+0x164>)
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34
 8003a24:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <HAL_UART_MspInit+0x164>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2026      	movs	r0, #38	; 0x26
 8003a30:	f000 fa41 	bl	8003eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a34:	2026      	movs	r0, #38	; 0x26
 8003a36:	f000 fa5a 	bl	8003eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a3a:	bf00      	nop
 8003a3c:	3728      	adds	r7, #40	; 0x28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40004400 	.word	0x40004400
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40020000 	.word	0x40020000
 8003a50:	20000224 	.word	0x20000224
 8003a54:	40026088 	.word	0x40026088
 8003a58:	20000284 	.word	0x20000284
 8003a5c:	400260a0 	.word	0x400260a0

08003a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a64:	e7fe      	b.n	8003a64 <NMI_Handler+0x4>

08003a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a6a:	e7fe      	b.n	8003a6a <HardFault_Handler+0x4>

08003a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <MemManage_Handler+0x4>

08003a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a76:	e7fe      	b.n	8003a76 <BusFault_Handler+0x4>

08003a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <UsageFault_Handler+0x4>

08003a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aac:	f000 f8e4 	bl	8003c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <DMA1_Stream5_IRQHandler+0x10>)
 8003aba:	f000 fbcb 	bl	8004254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000224 	.word	0x20000224

08003ac8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003acc:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <DMA1_Stream6_IRQHandler+0x10>)
 8003ace:	f000 fbc1 	bl	8004254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000284 	.word	0x20000284

08003adc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ae0:	4802      	ldr	r0, [pc, #8]	; (8003aec <USART2_IRQHandler+0x10>)
 8003ae2:	f003 fa17 	bl	8006f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200001e0 	.word	0x200001e0

08003af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003af8:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <_sbrk+0x5c>)
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <_sbrk+0x60>)
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b04:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <_sbrk+0x64>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <_sbrk+0x64>)
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <_sbrk+0x68>)
 8003b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b12:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <_sbrk+0x64>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d207      	bcs.n	8003b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b20:	f004 faf0 	bl	8008104 <__errno>
 8003b24:	4603      	mov	r3, r0
 8003b26:	220c      	movs	r2, #12
 8003b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2e:	e009      	b.n	8003b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <_sbrk+0x64>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <_sbrk+0x64>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <_sbrk+0x64>)
 8003b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b42:	68fb      	ldr	r3, [r7, #12]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20020000 	.word	0x20020000
 8003b50:	00000400 	.word	0x00000400
 8003b54:	2000052c 	.word	0x2000052c
 8003b58:	20000548 	.word	0x20000548

08003b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <SystemInit+0x20>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <SystemInit+0x20>)
 8003b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b84:	480d      	ldr	r0, [pc, #52]	; (8003bbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b86:	490e      	ldr	r1, [pc, #56]	; (8003bc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b88:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b8c:	e002      	b.n	8003b94 <LoopCopyDataInit>

08003b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b92:	3304      	adds	r3, #4

08003b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b98:	d3f9      	bcc.n	8003b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b9a:	4a0b      	ldr	r2, [pc, #44]	; (8003bc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b9c:	4c0b      	ldr	r4, [pc, #44]	; (8003bcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ba0:	e001      	b.n	8003ba6 <LoopFillZerobss>

08003ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba4:	3204      	adds	r2, #4

08003ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba8:	d3fb      	bcc.n	8003ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003baa:	f7ff ffd7 	bl	8003b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bae:	f004 faaf 	bl	8008110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bb2:	f7fd fa85 	bl	80010c0 <main>
  bx  lr    
 8003bb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bc0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003bc4:	08008520 	.word	0x08008520
  ldr r2, =_sbss
 8003bc8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003bcc:	20000544 	.word	0x20000544

08003bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bd0:	e7fe      	b.n	8003bd0 <ADC_IRQHandler>
	...

08003bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <HAL_Init+0x40>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	; (8003c14 <HAL_Init+0x40>)
 8003bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_Init+0x40>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <HAL_Init+0x40>)
 8003bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_Init+0x40>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <HAL_Init+0x40>)
 8003bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	f000 f94f 	bl	8003ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c02:	2000      	movs	r0, #0
 8003c04:	f000 f808 	bl	8003c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c08:	f7ff fd4c 	bl	80036a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40023c00 	.word	0x40023c00

08003c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c20:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_InitTick+0x54>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_InitTick+0x58>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f967 	bl	8003f0a <HAL_SYSTICK_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e00e      	b.n	8003c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b0f      	cmp	r3, #15
 8003c4a:	d80a      	bhi.n	8003c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	f000 f92f 	bl	8003eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c58:	4a06      	ldr	r2, [pc, #24]	; (8003c74 <HAL_InitTick+0x5c>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e000      	b.n	8003c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000028 	.word	0x20000028
 8003c70:	20000030 	.word	0x20000030
 8003c74:	2000002c 	.word	0x2000002c

08003c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_IncTick+0x20>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_IncTick+0x24>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <HAL_IncTick+0x24>)
 8003c8a:	6013      	str	r3, [r2, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000030 	.word	0x20000030
 8003c9c:	20000530 	.word	0x20000530

08003ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_GetTick+0x14>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000530 	.word	0x20000530

08003cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cc0:	f7ff ffee 	bl	8003ca0 <HAL_GetTick>
 8003cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d005      	beq.n	8003cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <HAL_Delay+0x44>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4413      	add	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cde:	bf00      	nop
 8003ce0:	f7ff ffde 	bl	8003ca0 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d8f7      	bhi.n	8003ce0 <HAL_Delay+0x28>
  {
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000030 	.word	0x20000030

08003d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <__NVIC_SetPriorityGrouping+0x44>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d32:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <__NVIC_SetPriorityGrouping+0x44>)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	60d3      	str	r3, [r2, #12]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <__NVIC_GetPriorityGrouping+0x18>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	0a1b      	lsrs	r3, r3, #8
 8003d52:	f003 0307 	and.w	r3, r3, #7
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	db0b      	blt.n	8003d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	f003 021f 	and.w	r2, r3, #31
 8003d7c:	4907      	ldr	r1, [pc, #28]	; (8003d9c <__NVIC_EnableIRQ+0x38>)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	2001      	movs	r0, #1
 8003d86:	fa00 f202 	lsl.w	r2, r0, r2
 8003d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	e000e100 	.word	0xe000e100

08003da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	6039      	str	r1, [r7, #0]
 8003daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	db0a      	blt.n	8003dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	490c      	ldr	r1, [pc, #48]	; (8003dec <__NVIC_SetPriority+0x4c>)
 8003dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbe:	0112      	lsls	r2, r2, #4
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dc8:	e00a      	b.n	8003de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	4908      	ldr	r1, [pc, #32]	; (8003df0 <__NVIC_SetPriority+0x50>)
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	3b04      	subs	r3, #4
 8003dd8:	0112      	lsls	r2, r2, #4
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	440b      	add	r3, r1
 8003dde:	761a      	strb	r2, [r3, #24]
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	e000e100 	.word	0xe000e100
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b089      	sub	sp, #36	; 0x24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f1c3 0307 	rsb	r3, r3, #7
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	bf28      	it	cs
 8003e12:	2304      	movcs	r3, #4
 8003e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d902      	bls.n	8003e24 <NVIC_EncodePriority+0x30>
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3b03      	subs	r3, #3
 8003e22:	e000      	b.n	8003e26 <NVIC_EncodePriority+0x32>
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e28:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43da      	mvns	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	401a      	ands	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	fa01 f303 	lsl.w	r3, r1, r3
 8003e46:	43d9      	mvns	r1, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e4c:	4313      	orrs	r3, r2
         );
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3724      	adds	r7, #36	; 0x24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e6c:	d301      	bcc.n	8003e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e00f      	b.n	8003e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <SysTick_Config+0x40>)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e7a:	210f      	movs	r1, #15
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e80:	f7ff ff8e 	bl	8003da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <SysTick_Config+0x40>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e8a:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <SysTick_Config+0x40>)
 8003e8c:	2207      	movs	r2, #7
 8003e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	e000e010 	.word	0xe000e010

08003ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ff29 	bl	8003d00 <__NVIC_SetPriorityGrouping>
}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b086      	sub	sp, #24
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ec8:	f7ff ff3e 	bl	8003d48 <__NVIC_GetPriorityGrouping>
 8003ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	6978      	ldr	r0, [r7, #20]
 8003ed4:	f7ff ff8e 	bl	8003df4 <NVIC_EncodePriority>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff ff5d 	bl	8003da0 <__NVIC_SetPriority>
}
 8003ee6:	bf00      	nop
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff ff31 	bl	8003d64 <__NVIC_EnableIRQ>
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff ffa2 	bl	8003e5c <SysTick_Config>
 8003f18:	4603      	mov	r3, r0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f30:	f7ff feb6 	bl	8003ca0 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e099      	b.n	8004074 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f60:	e00f      	b.n	8003f82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f62:	f7ff fe9d 	bl	8003ca0 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b05      	cmp	r3, #5
 8003f6e:	d908      	bls.n	8003f82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2203      	movs	r2, #3
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e078      	b.n	8004074 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e8      	bne.n	8003f62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4b38      	ldr	r3, [pc, #224]	; (800407c <HAL_DMA_Init+0x158>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d107      	bne.n	8003fec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f023 0307 	bic.w	r3, r3, #7
 8004002:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b04      	cmp	r3, #4
 8004014:	d117      	bne.n	8004046 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fb01 	bl	8004630 <DMA_CheckFifoParam>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2240      	movs	r2, #64	; 0x40
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004042:	2301      	movs	r3, #1
 8004044:	e016      	b.n	8004074 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fab8 	bl	80045c4 <DMA_CalcBaseAndBitshift>
 8004054:	4603      	mov	r3, r0
 8004056:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	223f      	movs	r2, #63	; 0x3f
 800405e:	409a      	lsls	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	f010803f 	.word	0xf010803f

08004080 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004096:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_DMA_Start_IT+0x26>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e040      	b.n	8004128 <HAL_DMA_Start_IT+0xa8>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d12f      	bne.n	800411a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fa4a 	bl	8004568 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	223f      	movs	r2, #63	; 0x3f
 80040da:	409a      	lsls	r2, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0216 	orr.w	r2, r2, #22
 80040ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0208 	orr.w	r2, r2, #8
 8004106:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e005      	b.n	8004126 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004122:	2302      	movs	r3, #2
 8004124:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800413e:	f7ff fdaf 	bl	8003ca0 <HAL_GetTick>
 8004142:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d008      	beq.n	8004162 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2280      	movs	r2, #128	; 0x80
 8004154:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e052      	b.n	8004208 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0216 	bic.w	r2, r2, #22
 8004170:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004180:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d103      	bne.n	8004192 <HAL_DMA_Abort+0x62>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0208 	bic.w	r2, r2, #8
 80041a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041b2:	e013      	b.n	80041dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041b4:	f7ff fd74 	bl	8003ca0 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d90c      	bls.n	80041dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2203      	movs	r2, #3
 80041cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e015      	b.n	8004208 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e4      	bne.n	80041b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ee:	223f      	movs	r2, #63	; 0x3f
 80041f0:	409a      	lsls	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d004      	beq.n	800422e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2280      	movs	r2, #128	; 0x80
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e00c      	b.n	8004248 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2205      	movs	r2, #5
 8004232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004260:	4b8e      	ldr	r3, [pc, #568]	; (800449c <HAL_DMA_IRQHandler+0x248>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a8e      	ldr	r2, [pc, #568]	; (80044a0 <HAL_DMA_IRQHandler+0x24c>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	0a9b      	lsrs	r3, r3, #10
 800426c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	2208      	movs	r2, #8
 8004280:	409a      	lsls	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01a      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0204 	bic.w	r2, r2, #4
 80042a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	2208      	movs	r2, #8
 80042ae:	409a      	lsls	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	f043 0201 	orr.w	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	2201      	movs	r2, #1
 80042c6:	409a      	lsls	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d012      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	2201      	movs	r2, #1
 80042e4:	409a      	lsls	r2, r3
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	f043 0202 	orr.w	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fa:	2204      	movs	r2, #4
 80042fc:	409a      	lsls	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d012      	beq.n	800432c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00b      	beq.n	800432c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	2204      	movs	r2, #4
 800431a:	409a      	lsls	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f043 0204 	orr.w	r2, r3, #4
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	2210      	movs	r2, #16
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d043      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d03c      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	2210      	movs	r2, #16
 8004350:	409a      	lsls	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d018      	beq.n	8004396 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d108      	bne.n	8004384 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d024      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4798      	blx	r3
 8004382:	e01f      	b.n	80043c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01b      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
 8004394:	e016      	b.n	80043c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d107      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0208 	bic.w	r2, r2, #8
 80043b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c8:	2220      	movs	r2, #32
 80043ca:	409a      	lsls	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 808f 	beq.w	80044f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8087 	beq.w	80044f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ea:	2220      	movs	r2, #32
 80043ec:	409a      	lsls	r2, r3
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	d136      	bne.n	800446c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0216 	bic.w	r2, r2, #22
 800440c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800441c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <HAL_DMA_IRQHandler+0x1da>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0208 	bic.w	r2, r2, #8
 800443c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004442:	223f      	movs	r2, #63	; 0x3f
 8004444:	409a      	lsls	r2, r3
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445e:	2b00      	cmp	r3, #0
 8004460:	d07e      	beq.n	8004560 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	4798      	blx	r3
        }
        return;
 800446a:	e079      	b.n	8004560 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01d      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	2b00      	cmp	r3, #0
 800448e:	d031      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
 8004498:	e02c      	b.n	80044f4 <HAL_DMA_IRQHandler+0x2a0>
 800449a:	bf00      	nop
 800449c:	20000028 	.word	0x20000028
 80044a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d023      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
 80044b4:	e01e      	b.n	80044f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10f      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0210 	bic.w	r2, r2, #16
 80044d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d032      	beq.n	8004562 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d022      	beq.n	800454e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2205      	movs	r2, #5
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	3301      	adds	r3, #1
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	429a      	cmp	r2, r3
 800452a:	d307      	bcc.n	800453c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f2      	bne.n	8004520 <HAL_DMA_IRQHandler+0x2cc>
 800453a:	e000      	b.n	800453e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800453c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
 800455e:	e000      	b.n	8004562 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004560:	bf00      	nop
    }
  }
}
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004584:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	d108      	bne.n	80045a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045a6:	e007      	b.n	80045b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	60da      	str	r2, [r3, #12]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	3b10      	subs	r3, #16
 80045d4:	4a14      	ldr	r2, [pc, #80]	; (8004628 <DMA_CalcBaseAndBitshift+0x64>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045de:	4a13      	ldr	r2, [pc, #76]	; (800462c <DMA_CalcBaseAndBitshift+0x68>)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d909      	bls.n	8004606 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045fa:	f023 0303 	bic.w	r3, r3, #3
 80045fe:	1d1a      	adds	r2, r3, #4
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	659a      	str	r2, [r3, #88]	; 0x58
 8004604:	e007      	b.n	8004616 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	aaaaaaab 	.word	0xaaaaaaab
 800462c:	08008508 	.word	0x08008508

08004630 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d11f      	bne.n	800468a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d856      	bhi.n	80046fe <DMA_CheckFifoParam+0xce>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <DMA_CheckFifoParam+0x28>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	08004669 	.word	0x08004669
 800465c:	0800467b 	.word	0x0800467b
 8004660:	08004669 	.word	0x08004669
 8004664:	080046ff 	.word	0x080046ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d046      	beq.n	8004702 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004678:	e043      	b.n	8004702 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004682:	d140      	bne.n	8004706 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004688:	e03d      	b.n	8004706 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004692:	d121      	bne.n	80046d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b03      	cmp	r3, #3
 8004698:	d837      	bhi.n	800470a <DMA_CheckFifoParam+0xda>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <DMA_CheckFifoParam+0x70>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046b1 	.word	0x080046b1
 80046a4:	080046b7 	.word	0x080046b7
 80046a8:	080046b1 	.word	0x080046b1
 80046ac:	080046c9 	.word	0x080046c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      break;
 80046b4:	e030      	b.n	8004718 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d025      	beq.n	800470e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c6:	e022      	b.n	800470e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046d0:	d11f      	bne.n	8004712 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046d6:	e01c      	b.n	8004712 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d903      	bls.n	80046e6 <DMA_CheckFifoParam+0xb6>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d003      	beq.n	80046ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046e4:	e018      	b.n	8004718 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
      break;
 80046ea:	e015      	b.n	8004718 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00e      	beq.n	8004716 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
      break;
 80046fc:	e00b      	b.n	8004716 <DMA_CheckFifoParam+0xe6>
      break;
 80046fe:	bf00      	nop
 8004700:	e00a      	b.n	8004718 <DMA_CheckFifoParam+0xe8>
      break;
 8004702:	bf00      	nop
 8004704:	e008      	b.n	8004718 <DMA_CheckFifoParam+0xe8>
      break;
 8004706:	bf00      	nop
 8004708:	e006      	b.n	8004718 <DMA_CheckFifoParam+0xe8>
      break;
 800470a:	bf00      	nop
 800470c:	e004      	b.n	8004718 <DMA_CheckFifoParam+0xe8>
      break;
 800470e:	bf00      	nop
 8004710:	e002      	b.n	8004718 <DMA_CheckFifoParam+0xe8>
      break;   
 8004712:	bf00      	nop
 8004714:	e000      	b.n	8004718 <DMA_CheckFifoParam+0xe8>
      break;
 8004716:	bf00      	nop
    }
  } 
  
  return status; 
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop

08004728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004728:	b480      	push	{r7}
 800472a:	b089      	sub	sp, #36	; 0x24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800473a:	2300      	movs	r3, #0
 800473c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	e159      	b.n	80049f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004744:	2201      	movs	r2, #1
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4013      	ands	r3, r2
 8004756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	429a      	cmp	r2, r3
 800475e:	f040 8148 	bne.w	80049f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b01      	cmp	r3, #1
 800476c:	d005      	beq.n	800477a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004776:	2b02      	cmp	r3, #2
 8004778:	d130      	bne.n	80047dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	2203      	movs	r2, #3
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047b0:	2201      	movs	r2, #1
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4013      	ands	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	091b      	lsrs	r3, r3, #4
 80047c6:	f003 0201 	and.w	r2, r3, #1
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d017      	beq.n	8004818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	2203      	movs	r2, #3
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4313      	orrs	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d123      	bne.n	800486c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	08da      	lsrs	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3208      	adds	r2, #8
 800482c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	220f      	movs	r2, #15
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	08da      	lsrs	r2, r3, #3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3208      	adds	r2, #8
 8004866:	69b9      	ldr	r1, [r7, #24]
 8004868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	2203      	movs	r2, #3
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0203 	and.w	r2, r3, #3
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 80a2 	beq.w	80049f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	4b57      	ldr	r3, [pc, #348]	; (8004a10 <HAL_GPIO_Init+0x2e8>)
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	4a56      	ldr	r2, [pc, #344]	; (8004a10 <HAL_GPIO_Init+0x2e8>)
 80048b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048bc:	6453      	str	r3, [r2, #68]	; 0x44
 80048be:	4b54      	ldr	r3, [pc, #336]	; (8004a10 <HAL_GPIO_Init+0x2e8>)
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ca:	4a52      	ldr	r2, [pc, #328]	; (8004a14 <HAL_GPIO_Init+0x2ec>)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	3302      	adds	r3, #2
 80048d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	220f      	movs	r2, #15
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a49      	ldr	r2, [pc, #292]	; (8004a18 <HAL_GPIO_Init+0x2f0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d019      	beq.n	800492a <HAL_GPIO_Init+0x202>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a48      	ldr	r2, [pc, #288]	; (8004a1c <HAL_GPIO_Init+0x2f4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <HAL_GPIO_Init+0x1fe>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a47      	ldr	r2, [pc, #284]	; (8004a20 <HAL_GPIO_Init+0x2f8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00d      	beq.n	8004922 <HAL_GPIO_Init+0x1fa>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a46      	ldr	r2, [pc, #280]	; (8004a24 <HAL_GPIO_Init+0x2fc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <HAL_GPIO_Init+0x1f6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a45      	ldr	r2, [pc, #276]	; (8004a28 <HAL_GPIO_Init+0x300>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <HAL_GPIO_Init+0x1f2>
 8004916:	2304      	movs	r3, #4
 8004918:	e008      	b.n	800492c <HAL_GPIO_Init+0x204>
 800491a:	2307      	movs	r3, #7
 800491c:	e006      	b.n	800492c <HAL_GPIO_Init+0x204>
 800491e:	2303      	movs	r3, #3
 8004920:	e004      	b.n	800492c <HAL_GPIO_Init+0x204>
 8004922:	2302      	movs	r3, #2
 8004924:	e002      	b.n	800492c <HAL_GPIO_Init+0x204>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <HAL_GPIO_Init+0x204>
 800492a:	2300      	movs	r3, #0
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	f002 0203 	and.w	r2, r2, #3
 8004932:	0092      	lsls	r2, r2, #2
 8004934:	4093      	lsls	r3, r2
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4313      	orrs	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800493c:	4935      	ldr	r1, [pc, #212]	; (8004a14 <HAL_GPIO_Init+0x2ec>)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	089b      	lsrs	r3, r3, #2
 8004942:	3302      	adds	r3, #2
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800494a:	4b38      	ldr	r3, [pc, #224]	; (8004a2c <HAL_GPIO_Init+0x304>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800496e:	4a2f      	ldr	r2, [pc, #188]	; (8004a2c <HAL_GPIO_Init+0x304>)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004974:	4b2d      	ldr	r3, [pc, #180]	; (8004a2c <HAL_GPIO_Init+0x304>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	43db      	mvns	r3, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004998:	4a24      	ldr	r2, [pc, #144]	; (8004a2c <HAL_GPIO_Init+0x304>)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800499e:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <HAL_GPIO_Init+0x304>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4013      	ands	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049c2:	4a1a      	ldr	r2, [pc, #104]	; (8004a2c <HAL_GPIO_Init+0x304>)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049c8:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <HAL_GPIO_Init+0x304>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4013      	ands	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049ec:	4a0f      	ldr	r2, [pc, #60]	; (8004a2c <HAL_GPIO_Init+0x304>)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3301      	adds	r3, #1
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b0f      	cmp	r3, #15
 80049fc:	f67f aea2 	bls.w	8004744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	3724      	adds	r7, #36	; 0x24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40013800 	.word	0x40013800
 8004a18:	40020000 	.word	0x40020000
 8004a1c:	40020400 	.word	0x40020400
 8004a20:	40020800 	.word	0x40020800
 8004a24:	40020c00 	.word	0x40020c00
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40013c00 	.word	0x40013c00

08004a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	887b      	ldrh	r3, [r7, #2]
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
 8004a4c:	e001      	b.n	8004a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a70:	787b      	ldrb	r3, [r7, #1]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a76:	887a      	ldrh	r2, [r7, #2]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a7c:	e003      	b.n	8004a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a7e:	887b      	ldrh	r3, [r7, #2]
 8004a80:	041a      	lsls	r2, r3, #16
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	619a      	str	r2, [r3, #24]
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e12b      	b.n	8004cfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fe fe1a 	bl	80036f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2224      	movs	r2, #36	; 0x24
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004af6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004af8:	f001 f888 	bl	8005c0c <HAL_RCC_GetPCLK1Freq>
 8004afc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4a81      	ldr	r2, [pc, #516]	; (8004d08 <HAL_I2C_Init+0x274>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d807      	bhi.n	8004b18 <HAL_I2C_Init+0x84>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4a80      	ldr	r2, [pc, #512]	; (8004d0c <HAL_I2C_Init+0x278>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	bf94      	ite	ls
 8004b10:	2301      	movls	r3, #1
 8004b12:	2300      	movhi	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	e006      	b.n	8004b26 <HAL_I2C_Init+0x92>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4a7d      	ldr	r2, [pc, #500]	; (8004d10 <HAL_I2C_Init+0x27c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	bf94      	ite	ls
 8004b20:	2301      	movls	r3, #1
 8004b22:	2300      	movhi	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e0e7      	b.n	8004cfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a78      	ldr	r2, [pc, #480]	; (8004d14 <HAL_I2C_Init+0x280>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	0c9b      	lsrs	r3, r3, #18
 8004b38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4a6a      	ldr	r2, [pc, #424]	; (8004d08 <HAL_I2C_Init+0x274>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d802      	bhi.n	8004b68 <HAL_I2C_Init+0xd4>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	3301      	adds	r3, #1
 8004b66:	e009      	b.n	8004b7c <HAL_I2C_Init+0xe8>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	4a69      	ldr	r2, [pc, #420]	; (8004d18 <HAL_I2C_Init+0x284>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	099b      	lsrs	r3, r3, #6
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	430b      	orrs	r3, r1
 8004b82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	495c      	ldr	r1, [pc, #368]	; (8004d08 <HAL_I2C_Init+0x274>)
 8004b98:	428b      	cmp	r3, r1
 8004b9a:	d819      	bhi.n	8004bd0 <HAL_I2C_Init+0x13c>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1e59      	subs	r1, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004baa:	1c59      	adds	r1, r3, #1
 8004bac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bb0:	400b      	ands	r3, r1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_I2C_Init+0x138>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1e59      	subs	r1, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bca:	e051      	b.n	8004c70 <HAL_I2C_Init+0x1dc>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	e04f      	b.n	8004c70 <HAL_I2C_Init+0x1dc>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d111      	bne.n	8004bfc <HAL_I2C_Init+0x168>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1e58      	subs	r0, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	440b      	add	r3, r1
 8004be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bea:	3301      	adds	r3, #1
 8004bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2301      	moveq	r3, #1
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	e012      	b.n	8004c22 <HAL_I2C_Init+0x18e>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1e58      	subs	r0, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	0099      	lsls	r1, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c12:	3301      	adds	r3, #1
 8004c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_I2C_Init+0x196>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e022      	b.n	8004c70 <HAL_I2C_Init+0x1dc>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10e      	bne.n	8004c50 <HAL_I2C_Init+0x1bc>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1e58      	subs	r0, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6859      	ldr	r1, [r3, #4]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	440b      	add	r3, r1
 8004c40:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c44:	3301      	adds	r3, #1
 8004c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4e:	e00f      	b.n	8004c70 <HAL_I2C_Init+0x1dc>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	1e58      	subs	r0, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6859      	ldr	r1, [r3, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	0099      	lsls	r1, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c66:	3301      	adds	r3, #1
 8004c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	6809      	ldr	r1, [r1, #0]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69da      	ldr	r2, [r3, #28]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6911      	ldr	r1, [r2, #16]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68d2      	ldr	r2, [r2, #12]
 8004caa:	4311      	orrs	r1, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	000186a0 	.word	0x000186a0
 8004d0c:	001e847f 	.word	0x001e847f
 8004d10:	003d08ff 	.word	0x003d08ff
 8004d14:	431bde83 	.word	0x431bde83
 8004d18:	10624dd3 	.word	0x10624dd3

08004d1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	461a      	mov	r2, r3
 8004d28:	460b      	mov	r3, r1
 8004d2a:	817b      	strh	r3, [r7, #10]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d30:	f7fe ffb6 	bl	8003ca0 <HAL_GetTick>
 8004d34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	f040 80e0 	bne.w	8004f04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2319      	movs	r3, #25
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	4970      	ldr	r1, [pc, #448]	; (8004f10 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f964 	bl	800501c <I2C_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e0d3      	b.n	8004f06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_I2C_Master_Transmit+0x50>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e0cc      	b.n	8004f06 <HAL_I2C_Master_Transmit+0x1ea>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d007      	beq.n	8004d92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0201 	orr.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2221      	movs	r2, #33	; 0x21
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2210      	movs	r2, #16
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	893a      	ldrh	r2, [r7, #8]
 8004dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4a50      	ldr	r2, [pc, #320]	; (8004f14 <HAL_I2C_Master_Transmit+0x1f8>)
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004dd4:	8979      	ldrh	r1, [r7, #10]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	6a3a      	ldr	r2, [r7, #32]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f89c 	bl	8004f18 <I2C_MasterRequestWrite>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e08d      	b.n	8004f06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e00:	e066      	b.n	8004ed0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	6a39      	ldr	r1, [r7, #32]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f9de 	bl	80051c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00d      	beq.n	8004e2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d107      	bne.n	8004e2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e06b      	b.n	8004f06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d11b      	bne.n	8004ea4 <HAL_I2C_Master_Transmit+0x188>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d017      	beq.n	8004ea4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	781a      	ldrb	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	6a39      	ldr	r1, [r7, #32]
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f9ce 	bl	800524a <I2C_WaitOnBTFFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d107      	bne.n	8004ecc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e01a      	b.n	8004f06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d194      	bne.n	8004e02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	00100002 	.word	0x00100002
 8004f14:	ffff0000 	.word	0xffff0000

08004f18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	460b      	mov	r3, r1
 8004f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d006      	beq.n	8004f42 <I2C_MasterRequestWrite+0x2a>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d003      	beq.n	8004f42 <I2C_MasterRequestWrite+0x2a>
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f40:	d108      	bne.n	8004f54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e00b      	b.n	8004f6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	2b12      	cmp	r3, #18
 8004f5a:	d107      	bne.n	8004f6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f84f 	bl	800501c <I2C_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00d      	beq.n	8004fa0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f92:	d103      	bne.n	8004f9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e035      	b.n	800500c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fa8:	d108      	bne.n	8004fbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004faa:	897b      	ldrh	r3, [r7, #10]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fb8:	611a      	str	r2, [r3, #16]
 8004fba:	e01b      	b.n	8004ff4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fbc:	897b      	ldrh	r3, [r7, #10]
 8004fbe:	11db      	asrs	r3, r3, #7
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	f003 0306 	and.w	r3, r3, #6
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f063 030f 	orn	r3, r3, #15
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	490e      	ldr	r1, [pc, #56]	; (8005014 <I2C_MasterRequestWrite+0xfc>)
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f875 	bl	80050ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e010      	b.n	800500c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fea:	897b      	ldrh	r3, [r7, #10]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4907      	ldr	r1, [pc, #28]	; (8005018 <I2C_MasterRequestWrite+0x100>)
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f865 	bl	80050ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	00010008 	.word	0x00010008
 8005018:	00010002 	.word	0x00010002

0800501c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800502c:	e025      	b.n	800507a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005034:	d021      	beq.n	800507a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005036:	f7fe fe33 	bl	8003ca0 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d302      	bcc.n	800504c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d116      	bne.n	800507a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	f043 0220 	orr.w	r2, r3, #32
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e023      	b.n	80050c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	d10d      	bne.n	80050a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	43da      	mvns	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4013      	ands	r3, r2
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	bf0c      	ite	eq
 8005096:	2301      	moveq	r3, #1
 8005098:	2300      	movne	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	e00c      	b.n	80050ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	43da      	mvns	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4013      	ands	r3, r2
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	bf0c      	ite	eq
 80050b2:	2301      	moveq	r3, #1
 80050b4:	2300      	movne	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d0b6      	beq.n	800502e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
 80050d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050d8:	e051      	b.n	800517e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e8:	d123      	bne.n	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005102:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f043 0204 	orr.w	r2, r3, #4
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e046      	b.n	80051c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d021      	beq.n	800517e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513a:	f7fe fdb1 	bl	8003ca0 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	429a      	cmp	r2, r3
 8005148:	d302      	bcc.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d116      	bne.n	800517e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f043 0220 	orr.w	r2, r3, #32
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e020      	b.n	80051c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	0c1b      	lsrs	r3, r3, #16
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d10c      	bne.n	80051a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	43da      	mvns	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4013      	ands	r3, r2
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	bf14      	ite	ne
 800519a:	2301      	movne	r3, #1
 800519c:	2300      	moveq	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	e00b      	b.n	80051ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	43da      	mvns	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4013      	ands	r3, r2
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d18d      	bne.n	80050da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051d4:	e02d      	b.n	8005232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f878 	bl	80052cc <I2C_IsAcknowledgeFailed>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e02d      	b.n	8005242 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d021      	beq.n	8005232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fe fd57 	bl	8003ca0 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d116      	bne.n	8005232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0220 	orr.w	r2, r3, #32
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e007      	b.n	8005242 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523c:	2b80      	cmp	r3, #128	; 0x80
 800523e:	d1ca      	bne.n	80051d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005256:	e02d      	b.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f837 	bl	80052cc <I2C_IsAcknowledgeFailed>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e02d      	b.n	80052c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d021      	beq.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005270:	f7fe fd16 	bl	8003ca0 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	429a      	cmp	r2, r3
 800527e:	d302      	bcc.n	8005286 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d116      	bne.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e007      	b.n	80052c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d1ca      	bne.n	8005258 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e2:	d11b      	bne.n	800531c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	f043 0204 	orr.w	r2, r3, #4
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e267      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d075      	beq.n	8005436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800534a:	4b88      	ldr	r3, [pc, #544]	; (800556c <HAL_RCC_OscConfig+0x240>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
 8005352:	2b04      	cmp	r3, #4
 8005354:	d00c      	beq.n	8005370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005356:	4b85      	ldr	r3, [pc, #532]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800535e:	2b08      	cmp	r3, #8
 8005360:	d112      	bne.n	8005388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005362:	4b82      	ldr	r3, [pc, #520]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800536e:	d10b      	bne.n	8005388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005370:	4b7e      	ldr	r3, [pc, #504]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d05b      	beq.n	8005434 <HAL_RCC_OscConfig+0x108>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d157      	bne.n	8005434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e242      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005390:	d106      	bne.n	80053a0 <HAL_RCC_OscConfig+0x74>
 8005392:	4b76      	ldr	r3, [pc, #472]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a75      	ldr	r2, [pc, #468]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e01d      	b.n	80053dc <HAL_RCC_OscConfig+0xb0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x98>
 80053aa:	4b70      	ldr	r3, [pc, #448]	; (800556c <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a6f      	ldr	r2, [pc, #444]	; (800556c <HAL_RCC_OscConfig+0x240>)
 80053b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b6d      	ldr	r3, [pc, #436]	; (800556c <HAL_RCC_OscConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a6c      	ldr	r2, [pc, #432]	; (800556c <HAL_RCC_OscConfig+0x240>)
 80053bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e00b      	b.n	80053dc <HAL_RCC_OscConfig+0xb0>
 80053c4:	4b69      	ldr	r3, [pc, #420]	; (800556c <HAL_RCC_OscConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a68      	ldr	r2, [pc, #416]	; (800556c <HAL_RCC_OscConfig+0x240>)
 80053ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	4b66      	ldr	r3, [pc, #408]	; (800556c <HAL_RCC_OscConfig+0x240>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a65      	ldr	r2, [pc, #404]	; (800556c <HAL_RCC_OscConfig+0x240>)
 80053d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d013      	beq.n	800540c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e4:	f7fe fc5c 	bl	8003ca0 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ec:	f7fe fc58 	bl	8003ca0 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b64      	cmp	r3, #100	; 0x64
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e207      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fe:	4b5b      	ldr	r3, [pc, #364]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0xc0>
 800540a:	e014      	b.n	8005436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7fe fc48 	bl	8003ca0 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005414:	f7fe fc44 	bl	8003ca0 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e1f3      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005426:	4b51      	ldr	r3, [pc, #324]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0xe8>
 8005432:	e000      	b.n	8005436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d063      	beq.n	800550a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005442:	4b4a      	ldr	r3, [pc, #296]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544e:	4b47      	ldr	r3, [pc, #284]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005456:	2b08      	cmp	r3, #8
 8005458:	d11c      	bne.n	8005494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800545a:	4b44      	ldr	r3, [pc, #272]	; (800556c <HAL_RCC_OscConfig+0x240>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d116      	bne.n	8005494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005466:	4b41      	ldr	r3, [pc, #260]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_RCC_OscConfig+0x152>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d001      	beq.n	800547e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e1c7      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547e:	4b3b      	ldr	r3, [pc, #236]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4937      	ldr	r1, [pc, #220]	; (800556c <HAL_RCC_OscConfig+0x240>)
 800548e:	4313      	orrs	r3, r2
 8005490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005492:	e03a      	b.n	800550a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d020      	beq.n	80054de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800549c:	4b34      	ldr	r3, [pc, #208]	; (8005570 <HAL_RCC_OscConfig+0x244>)
 800549e:	2201      	movs	r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a2:	f7fe fbfd 	bl	8003ca0 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054aa:	f7fe fbf9 	bl	8003ca0 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e1a8      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054bc:	4b2b      	ldr	r3, [pc, #172]	; (800556c <HAL_RCC_OscConfig+0x240>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0f0      	beq.n	80054aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c8:	4b28      	ldr	r3, [pc, #160]	; (800556c <HAL_RCC_OscConfig+0x240>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4925      	ldr	r1, [pc, #148]	; (800556c <HAL_RCC_OscConfig+0x240>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	600b      	str	r3, [r1, #0]
 80054dc:	e015      	b.n	800550a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054de:	4b24      	ldr	r3, [pc, #144]	; (8005570 <HAL_RCC_OscConfig+0x244>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7fe fbdc 	bl	8003ca0 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ec:	f7fe fbd8 	bl	8003ca0 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e187      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054fe:	4b1b      	ldr	r3, [pc, #108]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d036      	beq.n	8005584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d016      	beq.n	800554c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800551e:	4b15      	ldr	r3, [pc, #84]	; (8005574 <HAL_RCC_OscConfig+0x248>)
 8005520:	2201      	movs	r2, #1
 8005522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005524:	f7fe fbbc 	bl	8003ca0 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800552c:	f7fe fbb8 	bl	8003ca0 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e167      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <HAL_RCC_OscConfig+0x240>)
 8005540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <HAL_RCC_OscConfig+0x200>
 800554a:	e01b      	b.n	8005584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800554c:	4b09      	ldr	r3, [pc, #36]	; (8005574 <HAL_RCC_OscConfig+0x248>)
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005552:	f7fe fba5 	bl	8003ca0 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005558:	e00e      	b.n	8005578 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800555a:	f7fe fba1 	bl	8003ca0 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d907      	bls.n	8005578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e150      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
 800556c:	40023800 	.word	0x40023800
 8005570:	42470000 	.word	0x42470000
 8005574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005578:	4b88      	ldr	r3, [pc, #544]	; (800579c <HAL_RCC_OscConfig+0x470>)
 800557a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1ea      	bne.n	800555a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 8097 	beq.w	80056c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005592:	2300      	movs	r3, #0
 8005594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005596:	4b81      	ldr	r3, [pc, #516]	; (800579c <HAL_RCC_OscConfig+0x470>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10f      	bne.n	80055c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a2:	2300      	movs	r3, #0
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	4b7d      	ldr	r3, [pc, #500]	; (800579c <HAL_RCC_OscConfig+0x470>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	4a7c      	ldr	r2, [pc, #496]	; (800579c <HAL_RCC_OscConfig+0x470>)
 80055ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b0:	6413      	str	r3, [r2, #64]	; 0x40
 80055b2:	4b7a      	ldr	r3, [pc, #488]	; (800579c <HAL_RCC_OscConfig+0x470>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ba:	60bb      	str	r3, [r7, #8]
 80055bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c2:	4b77      	ldr	r3, [pc, #476]	; (80057a0 <HAL_RCC_OscConfig+0x474>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d118      	bne.n	8005600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ce:	4b74      	ldr	r3, [pc, #464]	; (80057a0 <HAL_RCC_OscConfig+0x474>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a73      	ldr	r2, [pc, #460]	; (80057a0 <HAL_RCC_OscConfig+0x474>)
 80055d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055da:	f7fe fb61 	bl	8003ca0 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e2:	f7fe fb5d 	bl	8003ca0 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e10c      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f4:	4b6a      	ldr	r3, [pc, #424]	; (80057a0 <HAL_RCC_OscConfig+0x474>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0f0      	beq.n	80055e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d106      	bne.n	8005616 <HAL_RCC_OscConfig+0x2ea>
 8005608:	4b64      	ldr	r3, [pc, #400]	; (800579c <HAL_RCC_OscConfig+0x470>)
 800560a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560c:	4a63      	ldr	r2, [pc, #396]	; (800579c <HAL_RCC_OscConfig+0x470>)
 800560e:	f043 0301 	orr.w	r3, r3, #1
 8005612:	6713      	str	r3, [r2, #112]	; 0x70
 8005614:	e01c      	b.n	8005650 <HAL_RCC_OscConfig+0x324>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b05      	cmp	r3, #5
 800561c:	d10c      	bne.n	8005638 <HAL_RCC_OscConfig+0x30c>
 800561e:	4b5f      	ldr	r3, [pc, #380]	; (800579c <HAL_RCC_OscConfig+0x470>)
 8005620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005622:	4a5e      	ldr	r2, [pc, #376]	; (800579c <HAL_RCC_OscConfig+0x470>)
 8005624:	f043 0304 	orr.w	r3, r3, #4
 8005628:	6713      	str	r3, [r2, #112]	; 0x70
 800562a:	4b5c      	ldr	r3, [pc, #368]	; (800579c <HAL_RCC_OscConfig+0x470>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	4a5b      	ldr	r2, [pc, #364]	; (800579c <HAL_RCC_OscConfig+0x470>)
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	6713      	str	r3, [r2, #112]	; 0x70
 8005636:	e00b      	b.n	8005650 <HAL_RCC_OscConfig+0x324>
 8005638:	4b58      	ldr	r3, [pc, #352]	; (800579c <HAL_RCC_OscConfig+0x470>)
 800563a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563c:	4a57      	ldr	r2, [pc, #348]	; (800579c <HAL_RCC_OscConfig+0x470>)
 800563e:	f023 0301 	bic.w	r3, r3, #1
 8005642:	6713      	str	r3, [r2, #112]	; 0x70
 8005644:	4b55      	ldr	r3, [pc, #340]	; (800579c <HAL_RCC_OscConfig+0x470>)
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	4a54      	ldr	r2, [pc, #336]	; (800579c <HAL_RCC_OscConfig+0x470>)
 800564a:	f023 0304 	bic.w	r3, r3, #4
 800564e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d015      	beq.n	8005684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005658:	f7fe fb22 	bl	8003ca0 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800565e:	e00a      	b.n	8005676 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005660:	f7fe fb1e 	bl	8003ca0 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	; 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e0cb      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005676:	4b49      	ldr	r3, [pc, #292]	; (800579c <HAL_RCC_OscConfig+0x470>)
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0ee      	beq.n	8005660 <HAL_RCC_OscConfig+0x334>
 8005682:	e014      	b.n	80056ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005684:	f7fe fb0c 	bl	8003ca0 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800568a:	e00a      	b.n	80056a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800568c:	f7fe fb08 	bl	8003ca0 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	f241 3288 	movw	r2, #5000	; 0x1388
 800569a:	4293      	cmp	r3, r2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e0b5      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a2:	4b3e      	ldr	r3, [pc, #248]	; (800579c <HAL_RCC_OscConfig+0x470>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1ee      	bne.n	800568c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d105      	bne.n	80056c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b4:	4b39      	ldr	r3, [pc, #228]	; (800579c <HAL_RCC_OscConfig+0x470>)
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	4a38      	ldr	r2, [pc, #224]	; (800579c <HAL_RCC_OscConfig+0x470>)
 80056ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80a1 	beq.w	800580c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ca:	4b34      	ldr	r3, [pc, #208]	; (800579c <HAL_RCC_OscConfig+0x470>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 030c 	and.w	r3, r3, #12
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d05c      	beq.n	8005790 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d141      	bne.n	8005762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056de:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <HAL_RCC_OscConfig+0x478>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e4:	f7fe fadc 	bl	8003ca0 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ec:	f7fe fad8 	bl	8003ca0 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e087      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056fe:	4b27      	ldr	r3, [pc, #156]	; (800579c <HAL_RCC_OscConfig+0x470>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69da      	ldr	r2, [r3, #28]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	019b      	lsls	r3, r3, #6
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	085b      	lsrs	r3, r3, #1
 8005722:	3b01      	subs	r3, #1
 8005724:	041b      	lsls	r3, r3, #16
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	061b      	lsls	r3, r3, #24
 800572e:	491b      	ldr	r1, [pc, #108]	; (800579c <HAL_RCC_OscConfig+0x470>)
 8005730:	4313      	orrs	r3, r2
 8005732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005734:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <HAL_RCC_OscConfig+0x478>)
 8005736:	2201      	movs	r2, #1
 8005738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573a:	f7fe fab1 	bl	8003ca0 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005742:	f7fe faad 	bl	8003ca0 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e05c      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005754:	4b11      	ldr	r3, [pc, #68]	; (800579c <HAL_RCC_OscConfig+0x470>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x416>
 8005760:	e054      	b.n	800580c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005762:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <HAL_RCC_OscConfig+0x478>)
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7fe fa9a 	bl	8003ca0 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005770:	f7fe fa96 	bl	8003ca0 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e045      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <HAL_RCC_OscConfig+0x470>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f0      	bne.n	8005770 <HAL_RCC_OscConfig+0x444>
 800578e:	e03d      	b.n	800580c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d107      	bne.n	80057a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e038      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
 800579c:	40023800 	.word	0x40023800
 80057a0:	40007000 	.word	0x40007000
 80057a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057a8:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <HAL_RCC_OscConfig+0x4ec>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d028      	beq.n	8005808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d121      	bne.n	8005808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d11a      	bne.n	8005808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057d8:	4013      	ands	r3, r2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d111      	bne.n	8005808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	085b      	lsrs	r3, r3, #1
 80057f0:	3b01      	subs	r3, #1
 80057f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d107      	bne.n	8005808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005804:	429a      	cmp	r2, r3
 8005806:	d001      	beq.n	800580c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40023800 	.word	0x40023800

0800581c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e0cc      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005830:	4b68      	ldr	r3, [pc, #416]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d90c      	bls.n	8005858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583e:	4b65      	ldr	r3, [pc, #404]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005846:	4b63      	ldr	r3, [pc, #396]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d001      	beq.n	8005858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0b8      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d020      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005870:	4b59      	ldr	r3, [pc, #356]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4a58      	ldr	r2, [pc, #352]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800587a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005888:	4b53      	ldr	r3, [pc, #332]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	4a52      	ldr	r2, [pc, #328]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005894:	4b50      	ldr	r3, [pc, #320]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	494d      	ldr	r1, [pc, #308]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d044      	beq.n	800593c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d107      	bne.n	80058ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ba:	4b47      	ldr	r3, [pc, #284]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d119      	bne.n	80058fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e07f      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d003      	beq.n	80058da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d107      	bne.n	80058ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058da:	4b3f      	ldr	r3, [pc, #252]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e06f      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ea:	4b3b      	ldr	r3, [pc, #236]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e067      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058fa:	4b37      	ldr	r3, [pc, #220]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f023 0203 	bic.w	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4934      	ldr	r1, [pc, #208]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005908:	4313      	orrs	r3, r2
 800590a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800590c:	f7fe f9c8 	bl	8003ca0 <HAL_GetTick>
 8005910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005912:	e00a      	b.n	800592a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005914:	f7fe f9c4 	bl	8003ca0 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e04f      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592a:	4b2b      	ldr	r3, [pc, #172]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 020c 	and.w	r2, r3, #12
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	429a      	cmp	r2, r3
 800593a:	d1eb      	bne.n	8005914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800593c:	4b25      	ldr	r3, [pc, #148]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d20c      	bcs.n	8005964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594a:	4b22      	ldr	r3, [pc, #136]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005952:	4b20      	ldr	r3, [pc, #128]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d001      	beq.n	8005964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e032      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005970:	4b19      	ldr	r3, [pc, #100]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4916      	ldr	r1, [pc, #88]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	4313      	orrs	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800598e:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	490e      	ldr	r1, [pc, #56]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059a2:	f000 f821 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 80059a6:	4602      	mov	r2, r0
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	490a      	ldr	r1, [pc, #40]	; (80059dc <HAL_RCC_ClockConfig+0x1c0>)
 80059b4:	5ccb      	ldrb	r3, [r1, r3]
 80059b6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ba:	4a09      	ldr	r2, [pc, #36]	; (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 80059bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059be:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <HAL_RCC_ClockConfig+0x1c8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe f928 	bl	8003c18 <HAL_InitTick>

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40023c00 	.word	0x40023c00
 80059d8:	40023800 	.word	0x40023800
 80059dc:	080084f0 	.word	0x080084f0
 80059e0:	20000028 	.word	0x20000028
 80059e4:	2000002c 	.word	0x2000002c

080059e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059ec:	b094      	sub	sp, #80	; 0x50
 80059ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	647b      	str	r3, [r7, #68]	; 0x44
 80059f4:	2300      	movs	r3, #0
 80059f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f8:	2300      	movs	r3, #0
 80059fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a00:	4b79      	ldr	r3, [pc, #484]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 030c 	and.w	r3, r3, #12
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d00d      	beq.n	8005a28 <HAL_RCC_GetSysClockFreq+0x40>
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	f200 80e1 	bhi.w	8005bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x34>
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d003      	beq.n	8005a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a1a:	e0db      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a1c:	4b73      	ldr	r3, [pc, #460]	; (8005bec <HAL_RCC_GetSysClockFreq+0x204>)
 8005a1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a20:	e0db      	b.n	8005bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a22:	4b73      	ldr	r3, [pc, #460]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a26:	e0d8      	b.n	8005bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a28:	4b6f      	ldr	r3, [pc, #444]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a32:	4b6d      	ldr	r3, [pc, #436]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d063      	beq.n	8005b06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a3e:	4b6a      	ldr	r3, [pc, #424]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	099b      	lsrs	r3, r3, #6
 8005a44:	2200      	movs	r2, #0
 8005a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a50:	633b      	str	r3, [r7, #48]	; 0x30
 8005a52:	2300      	movs	r3, #0
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
 8005a56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	f04f 0000 	mov.w	r0, #0
 8005a62:	f04f 0100 	mov.w	r1, #0
 8005a66:	0159      	lsls	r1, r3, #5
 8005a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a6c:	0150      	lsls	r0, r2, #5
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4621      	mov	r1, r4
 8005a74:	1a51      	subs	r1, r2, r1
 8005a76:	6139      	str	r1, [r7, #16]
 8005a78:	4629      	mov	r1, r5
 8005a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	018b      	lsls	r3, r1, #6
 8005a90:	4651      	mov	r1, sl
 8005a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a96:	4651      	mov	r1, sl
 8005a98:	018a      	lsls	r2, r1, #6
 8005a9a:	4651      	mov	r1, sl
 8005a9c:	ebb2 0801 	subs.w	r8, r2, r1
 8005aa0:	4659      	mov	r1, fp
 8005aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aba:	4690      	mov	r8, r2
 8005abc:	4699      	mov	r9, r3
 8005abe:	4623      	mov	r3, r4
 8005ac0:	eb18 0303 	adds.w	r3, r8, r3
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	462b      	mov	r3, r5
 8005ac8:	eb49 0303 	adc.w	r3, r9, r3
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ada:	4629      	mov	r1, r5
 8005adc:	024b      	lsls	r3, r1, #9
 8005ade:	4621      	mov	r1, r4
 8005ae0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	024a      	lsls	r2, r1, #9
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4619      	mov	r1, r3
 8005aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aee:	2200      	movs	r2, #0
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005af8:	f7fb f960 	bl	8000dbc <__aeabi_uldivmod>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4613      	mov	r3, r2
 8005b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b04:	e058      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b06:	4b38      	ldr	r3, [pc, #224]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	099b      	lsrs	r3, r3, #6
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	4611      	mov	r1, r2
 8005b12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b16:	623b      	str	r3, [r7, #32]
 8005b18:	2300      	movs	r3, #0
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b20:	4642      	mov	r2, r8
 8005b22:	464b      	mov	r3, r9
 8005b24:	f04f 0000 	mov.w	r0, #0
 8005b28:	f04f 0100 	mov.w	r1, #0
 8005b2c:	0159      	lsls	r1, r3, #5
 8005b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b32:	0150      	lsls	r0, r2, #5
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4641      	mov	r1, r8
 8005b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b3e:	4649      	mov	r1, r9
 8005b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b58:	ebb2 040a 	subs.w	r4, r2, sl
 8005b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	00eb      	lsls	r3, r5, #3
 8005b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b6e:	00e2      	lsls	r2, r4, #3
 8005b70:	4614      	mov	r4, r2
 8005b72:	461d      	mov	r5, r3
 8005b74:	4643      	mov	r3, r8
 8005b76:	18e3      	adds	r3, r4, r3
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	eb45 0303 	adc.w	r3, r5, r3
 8005b80:	607b      	str	r3, [r7, #4]
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b8e:	4629      	mov	r1, r5
 8005b90:	028b      	lsls	r3, r1, #10
 8005b92:	4621      	mov	r1, r4
 8005b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b98:	4621      	mov	r1, r4
 8005b9a:	028a      	lsls	r2, r1, #10
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	61fa      	str	r2, [r7, #28]
 8005ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bac:	f7fb f906 	bl	8000dbc <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	0c1b      	lsrs	r3, r3, #16
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bd2:	e002      	b.n	8005bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bd4:	4b05      	ldr	r3, [pc, #20]	; (8005bec <HAL_RCC_GetSysClockFreq+0x204>)
 8005bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3750      	adds	r7, #80	; 0x50
 8005be0:	46bd      	mov	sp, r7
 8005be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005be6:	bf00      	nop
 8005be8:	40023800 	.word	0x40023800
 8005bec:	00f42400 	.word	0x00f42400
 8005bf0:	007a1200 	.word	0x007a1200

08005bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf8:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20000028 	.word	0x20000028

08005c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c10:	f7ff fff0 	bl	8005bf4 <HAL_RCC_GetHCLKFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	0a9b      	lsrs	r3, r3, #10
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	4903      	ldr	r1, [pc, #12]	; (8005c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c22:	5ccb      	ldrb	r3, [r1, r3]
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	08008500 	.word	0x08008500

08005c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c38:	f7ff ffdc 	bl	8005bf4 <HAL_RCC_GetHCLKFreq>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	0b5b      	lsrs	r3, r3, #13
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	4903      	ldr	r1, [pc, #12]	; (8005c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c4a:	5ccb      	ldrb	r3, [r1, r3]
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40023800 	.word	0x40023800
 8005c58:	08008500 	.word	0x08008500

08005c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e041      	b.n	8005cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fd fd7e 	bl	8003784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f000 fcb2 	bl	8006604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d001      	beq.n	8005d14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e03c      	b.n	8005d8e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <HAL_TIM_Base_Start+0xa0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d018      	beq.n	8005d58 <HAL_TIM_Base_Start+0x5c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d013      	beq.n	8005d58 <HAL_TIM_Base_Start+0x5c>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1a      	ldr	r2, [pc, #104]	; (8005da0 <HAL_TIM_Base_Start+0xa4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00e      	beq.n	8005d58 <HAL_TIM_Base_Start+0x5c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a19      	ldr	r2, [pc, #100]	; (8005da4 <HAL_TIM_Base_Start+0xa8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d009      	beq.n	8005d58 <HAL_TIM_Base_Start+0x5c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a17      	ldr	r2, [pc, #92]	; (8005da8 <HAL_TIM_Base_Start+0xac>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <HAL_TIM_Base_Start+0x5c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a16      	ldr	r2, [pc, #88]	; (8005dac <HAL_TIM_Base_Start+0xb0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d111      	bne.n	8005d7c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b06      	cmp	r3, #6
 8005d68:	d010      	beq.n	8005d8c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0201 	orr.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7a:	e007      	b.n	8005d8c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00
 8005dac:	40014000 	.word	0x40014000

08005db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d001      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e044      	b.n	8005e52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <HAL_TIM_Base_Start_IT+0xb0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d018      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x6c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df2:	d013      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x6c>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1a      	ldr	r2, [pc, #104]	; (8005e64 <HAL_TIM_Base_Start_IT+0xb4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00e      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x6c>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d009      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x6c>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <HAL_TIM_Base_Start_IT+0xbc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x6c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d111      	bne.n	8005e40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b06      	cmp	r3, #6
 8005e2c:	d010      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0201 	orr.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3e:	e007      	b.n	8005e50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40014000 	.word	0x40014000

08005e74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e041      	b.n	8005f0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f839 	bl	8005f12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	f000 fba6 	bl	8006604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d109      	bne.n	8005f4c <HAL_TIM_PWM_Start+0x24>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	bf14      	ite	ne
 8005f44:	2301      	movne	r3, #1
 8005f46:	2300      	moveq	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	e022      	b.n	8005f92 <HAL_TIM_PWM_Start+0x6a>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d109      	bne.n	8005f66 <HAL_TIM_PWM_Start+0x3e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	bf14      	ite	ne
 8005f5e:	2301      	movne	r3, #1
 8005f60:	2300      	moveq	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	e015      	b.n	8005f92 <HAL_TIM_PWM_Start+0x6a>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d109      	bne.n	8005f80 <HAL_TIM_PWM_Start+0x58>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	e008      	b.n	8005f92 <HAL_TIM_PWM_Start+0x6a>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	bf14      	ite	ne
 8005f8c:	2301      	movne	r3, #1
 8005f8e:	2300      	moveq	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e068      	b.n	800606c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <HAL_TIM_PWM_Start+0x82>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fa8:	e013      	b.n	8005fd2 <HAL_TIM_PWM_Start+0xaa>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d104      	bne.n	8005fba <HAL_TIM_PWM_Start+0x92>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb8:	e00b      	b.n	8005fd2 <HAL_TIM_PWM_Start+0xaa>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_PWM_Start+0xa2>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc8:	e003      	b.n	8005fd2 <HAL_TIM_PWM_Start+0xaa>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fdb8 	bl	8006b50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a23      	ldr	r2, [pc, #140]	; (8006074 <HAL_TIM_PWM_Start+0x14c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d107      	bne.n	8005ffa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1d      	ldr	r2, [pc, #116]	; (8006074 <HAL_TIM_PWM_Start+0x14c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d018      	beq.n	8006036 <HAL_TIM_PWM_Start+0x10e>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600c:	d013      	beq.n	8006036 <HAL_TIM_PWM_Start+0x10e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a19      	ldr	r2, [pc, #100]	; (8006078 <HAL_TIM_PWM_Start+0x150>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00e      	beq.n	8006036 <HAL_TIM_PWM_Start+0x10e>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a17      	ldr	r2, [pc, #92]	; (800607c <HAL_TIM_PWM_Start+0x154>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d009      	beq.n	8006036 <HAL_TIM_PWM_Start+0x10e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a16      	ldr	r2, [pc, #88]	; (8006080 <HAL_TIM_PWM_Start+0x158>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d004      	beq.n	8006036 <HAL_TIM_PWM_Start+0x10e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a14      	ldr	r2, [pc, #80]	; (8006084 <HAL_TIM_PWM_Start+0x15c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d111      	bne.n	800605a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b06      	cmp	r3, #6
 8006046:	d010      	beq.n	800606a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006058:	e007      	b.n	800606a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0201 	orr.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40010000 	.word	0x40010000
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800
 8006080:	40000c00 	.word	0x40000c00
 8006084:	40014000 	.word	0x40014000

08006088 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e097      	b.n	80061cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7fd fb9d 	bl	80037f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060cc:	f023 0307 	bic.w	r3, r3, #7
 80060d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3304      	adds	r3, #4
 80060da:	4619      	mov	r1, r3
 80060dc:	4610      	mov	r0, r2
 80060de:	f000 fa91 	bl	8006604 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	4313      	orrs	r3, r2
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006128:	f023 030c 	bic.w	r3, r3, #12
 800612c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	4313      	orrs	r3, r2
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	011a      	lsls	r2, r3, #4
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	031b      	lsls	r3, r3, #12
 8006158:	4313      	orrs	r3, r2
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006166:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	4313      	orrs	r3, r2
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d110      	bne.n	8006226 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d102      	bne.n	8006210 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800620a:	7b7b      	ldrb	r3, [r7, #13]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d001      	beq.n	8006214 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e069      	b.n	80062e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006224:	e031      	b.n	800628a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b04      	cmp	r3, #4
 800622a:	d110      	bne.n	800624e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d102      	bne.n	8006238 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006232:	7b3b      	ldrb	r3, [r7, #12]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d001      	beq.n	800623c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e055      	b.n	80062e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800624c:	e01d      	b.n	800628a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d108      	bne.n	8006266 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d105      	bne.n	8006266 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800625a:	7b7b      	ldrb	r3, [r7, #13]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d102      	bne.n	8006266 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006260:	7b3b      	ldrb	r3, [r7, #12]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d001      	beq.n	800626a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e03e      	b.n	80062e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2202      	movs	r2, #2
 800626e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2202      	movs	r2, #2
 8006286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <HAL_TIM_Encoder_Start+0xc4>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b04      	cmp	r3, #4
 8006294:	d008      	beq.n	80062a8 <HAL_TIM_Encoder_Start+0xd4>
 8006296:	e00f      	b.n	80062b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2201      	movs	r2, #1
 800629e:	2100      	movs	r1, #0
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fc55 	bl	8006b50 <TIM_CCxChannelCmd>
      break;
 80062a6:	e016      	b.n	80062d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2201      	movs	r2, #1
 80062ae:	2104      	movs	r1, #4
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fc4d 	bl	8006b50 <TIM_CCxChannelCmd>
      break;
 80062b6:	e00e      	b.n	80062d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2201      	movs	r2, #1
 80062be:	2100      	movs	r1, #0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fc45 	bl	8006b50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2201      	movs	r2, #1
 80062cc:	2104      	movs	r1, #4
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fc3e 	bl	8006b50 <TIM_CCxChannelCmd>
      break;
 80062d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0201 	orr.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800630a:	2302      	movs	r3, #2
 800630c:	e0ae      	b.n	800646c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b0c      	cmp	r3, #12
 800631a:	f200 809f 	bhi.w	800645c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006359 	.word	0x08006359
 8006328:	0800645d 	.word	0x0800645d
 800632c:	0800645d 	.word	0x0800645d
 8006330:	0800645d 	.word	0x0800645d
 8006334:	08006399 	.word	0x08006399
 8006338:	0800645d 	.word	0x0800645d
 800633c:	0800645d 	.word	0x0800645d
 8006340:	0800645d 	.word	0x0800645d
 8006344:	080063db 	.word	0x080063db
 8006348:	0800645d 	.word	0x0800645d
 800634c:	0800645d 	.word	0x0800645d
 8006350:	0800645d 	.word	0x0800645d
 8006354:	0800641b 	.word	0x0800641b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	4618      	mov	r0, r3
 8006360:	f000 f9d0 	bl	8006704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0208 	orr.w	r2, r2, #8
 8006372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0204 	bic.w	r2, r2, #4
 8006382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6999      	ldr	r1, [r3, #24]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	619a      	str	r2, [r3, #24]
      break;
 8006396:	e064      	b.n	8006462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fa16 	bl	80067d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6999      	ldr	r1, [r3, #24]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	021a      	lsls	r2, r3, #8
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	619a      	str	r2, [r3, #24]
      break;
 80063d8:	e043      	b.n	8006462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fa61 	bl	80068a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0208 	orr.w	r2, r2, #8
 80063f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69da      	ldr	r2, [r3, #28]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0204 	bic.w	r2, r2, #4
 8006404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69d9      	ldr	r1, [r3, #28]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	61da      	str	r2, [r3, #28]
      break;
 8006418:	e023      	b.n	8006462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 faab 	bl	800697c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69da      	ldr	r2, [r3, #28]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69da      	ldr	r2, [r3, #28]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69d9      	ldr	r1, [r3, #28]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	021a      	lsls	r2, r3, #8
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	61da      	str	r2, [r3, #28]
      break;
 800645a:	e002      	b.n	8006462 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	75fb      	strb	r3, [r7, #23]
      break;
 8006460:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800646a:	7dfb      	ldrb	r3, [r7, #23]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006488:	2b01      	cmp	r3, #1
 800648a:	d101      	bne.n	8006490 <HAL_TIM_ConfigClockSource+0x1c>
 800648c:	2302      	movs	r3, #2
 800648e:	e0b4      	b.n	80065fa <HAL_TIM_ConfigClockSource+0x186>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c8:	d03e      	beq.n	8006548 <HAL_TIM_ConfigClockSource+0xd4>
 80064ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ce:	f200 8087 	bhi.w	80065e0 <HAL_TIM_ConfigClockSource+0x16c>
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	f000 8086 	beq.w	80065e6 <HAL_TIM_ConfigClockSource+0x172>
 80064da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064de:	d87f      	bhi.n	80065e0 <HAL_TIM_ConfigClockSource+0x16c>
 80064e0:	2b70      	cmp	r3, #112	; 0x70
 80064e2:	d01a      	beq.n	800651a <HAL_TIM_ConfigClockSource+0xa6>
 80064e4:	2b70      	cmp	r3, #112	; 0x70
 80064e6:	d87b      	bhi.n	80065e0 <HAL_TIM_ConfigClockSource+0x16c>
 80064e8:	2b60      	cmp	r3, #96	; 0x60
 80064ea:	d050      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x11a>
 80064ec:	2b60      	cmp	r3, #96	; 0x60
 80064ee:	d877      	bhi.n	80065e0 <HAL_TIM_ConfigClockSource+0x16c>
 80064f0:	2b50      	cmp	r3, #80	; 0x50
 80064f2:	d03c      	beq.n	800656e <HAL_TIM_ConfigClockSource+0xfa>
 80064f4:	2b50      	cmp	r3, #80	; 0x50
 80064f6:	d873      	bhi.n	80065e0 <HAL_TIM_ConfigClockSource+0x16c>
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d058      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x13a>
 80064fc:	2b40      	cmp	r3, #64	; 0x40
 80064fe:	d86f      	bhi.n	80065e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006500:	2b30      	cmp	r3, #48	; 0x30
 8006502:	d064      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x15a>
 8006504:	2b30      	cmp	r3, #48	; 0x30
 8006506:	d86b      	bhi.n	80065e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006508:	2b20      	cmp	r3, #32
 800650a:	d060      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x15a>
 800650c:	2b20      	cmp	r3, #32
 800650e:	d867      	bhi.n	80065e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d05c      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x15a>
 8006514:	2b10      	cmp	r3, #16
 8006516:	d05a      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x15a>
 8006518:	e062      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	6899      	ldr	r1, [r3, #8]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f000 faf1 	bl	8006b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800653c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	609a      	str	r2, [r3, #8]
      break;
 8006546:	e04f      	b.n	80065e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6818      	ldr	r0, [r3, #0]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	6899      	ldr	r1, [r3, #8]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f000 fada 	bl	8006b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800656a:	609a      	str	r2, [r3, #8]
      break;
 800656c:	e03c      	b.n	80065e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6859      	ldr	r1, [r3, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	461a      	mov	r2, r3
 800657c:	f000 fa4e 	bl	8006a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2150      	movs	r1, #80	; 0x50
 8006586:	4618      	mov	r0, r3
 8006588:	f000 faa7 	bl	8006ada <TIM_ITRx_SetConfig>
      break;
 800658c:	e02c      	b.n	80065e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	461a      	mov	r2, r3
 800659c:	f000 fa6d 	bl	8006a7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2160      	movs	r1, #96	; 0x60
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fa97 	bl	8006ada <TIM_ITRx_SetConfig>
      break;
 80065ac:	e01c      	b.n	80065e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6859      	ldr	r1, [r3, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f000 fa2e 	bl	8006a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2140      	movs	r1, #64	; 0x40
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fa87 	bl	8006ada <TIM_ITRx_SetConfig>
      break;
 80065cc:	e00c      	b.n	80065e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4619      	mov	r1, r3
 80065d8:	4610      	mov	r0, r2
 80065da:	f000 fa7e 	bl	8006ada <TIM_ITRx_SetConfig>
      break;
 80065de:	e003      	b.n	80065e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	73fb      	strb	r3, [r7, #15]
      break;
 80065e4:	e000      	b.n	80065e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a34      	ldr	r2, [pc, #208]	; (80066e8 <TIM_Base_SetConfig+0xe4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00f      	beq.n	800663c <TIM_Base_SetConfig+0x38>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006622:	d00b      	beq.n	800663c <TIM_Base_SetConfig+0x38>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a31      	ldr	r2, [pc, #196]	; (80066ec <TIM_Base_SetConfig+0xe8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d007      	beq.n	800663c <TIM_Base_SetConfig+0x38>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a30      	ldr	r2, [pc, #192]	; (80066f0 <TIM_Base_SetConfig+0xec>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_Base_SetConfig+0x38>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a2f      	ldr	r2, [pc, #188]	; (80066f4 <TIM_Base_SetConfig+0xf0>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d108      	bne.n	800664e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a25      	ldr	r2, [pc, #148]	; (80066e8 <TIM_Base_SetConfig+0xe4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01b      	beq.n	800668e <TIM_Base_SetConfig+0x8a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665c:	d017      	beq.n	800668e <TIM_Base_SetConfig+0x8a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a22      	ldr	r2, [pc, #136]	; (80066ec <TIM_Base_SetConfig+0xe8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <TIM_Base_SetConfig+0x8a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a21      	ldr	r2, [pc, #132]	; (80066f0 <TIM_Base_SetConfig+0xec>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_Base_SetConfig+0x8a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a20      	ldr	r2, [pc, #128]	; (80066f4 <TIM_Base_SetConfig+0xf0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_Base_SetConfig+0x8a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a1f      	ldr	r2, [pc, #124]	; (80066f8 <TIM_Base_SetConfig+0xf4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_Base_SetConfig+0x8a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a1e      	ldr	r2, [pc, #120]	; (80066fc <TIM_Base_SetConfig+0xf8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_Base_SetConfig+0x8a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <TIM_Base_SetConfig+0xfc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d108      	bne.n	80066a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a08      	ldr	r2, [pc, #32]	; (80066e8 <TIM_Base_SetConfig+0xe4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d103      	bne.n	80066d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	615a      	str	r2, [r3, #20]
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	40010000 	.word	0x40010000
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800
 80066f4:	40000c00 	.word	0x40000c00
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40014400 	.word	0x40014400
 8006700:	40014800 	.word	0x40014800

08006704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f023 0201 	bic.w	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f023 0302 	bic.w	r3, r3, #2
 800674c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a1c      	ldr	r2, [pc, #112]	; (80067cc <TIM_OC1_SetConfig+0xc8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d10c      	bne.n	800677a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0308 	bic.w	r3, r3, #8
 8006766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f023 0304 	bic.w	r3, r3, #4
 8006778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a13      	ldr	r2, [pc, #76]	; (80067cc <TIM_OC1_SetConfig+0xc8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d111      	bne.n	80067a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	621a      	str	r2, [r3, #32]
}
 80067c0:	bf00      	nop
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	40010000 	.word	0x40010000

080067d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	f023 0210 	bic.w	r2, r3, #16
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f023 0320 	bic.w	r3, r3, #32
 800681a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a1e      	ldr	r2, [pc, #120]	; (80068a4 <TIM_OC2_SetConfig+0xd4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10d      	bne.n	800684c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800684a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <TIM_OC2_SetConfig+0xd4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d113      	bne.n	800687c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800685a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006862:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	621a      	str	r2, [r3, #32]
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40010000 	.word	0x40010000

080068a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0303 	bic.w	r3, r3, #3
 80068de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <TIM_OC3_SetConfig+0xd0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d10d      	bne.n	8006922 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800690c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a14      	ldr	r2, [pc, #80]	; (8006978 <TIM_OC3_SetConfig+0xd0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d113      	bne.n	8006952 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	621a      	str	r2, [r3, #32]
}
 800696c:	bf00      	nop
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	40010000 	.word	0x40010000

0800697c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	021b      	lsls	r3, r3, #8
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	031b      	lsls	r3, r3, #12
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a10      	ldr	r2, [pc, #64]	; (8006a18 <TIM_OC4_SetConfig+0x9c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d109      	bne.n	80069f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	019b      	lsls	r3, r3, #6
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40010000 	.word	0x40010000

08006a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f023 0201 	bic.w	r2, r3, #1
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f023 030a 	bic.w	r3, r3, #10
 8006a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	621a      	str	r2, [r3, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b087      	sub	sp, #28
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f023 0210 	bic.w	r2, r3, #16
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	031b      	lsls	r3, r3, #12
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b085      	sub	sp, #20
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f043 0307 	orr.w	r3, r3, #7
 8006afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	609a      	str	r2, [r3, #8]
}
 8006b04:	bf00      	nop
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	021a      	lsls	r2, r3, #8
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	431a      	orrs	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	609a      	str	r2, [r3, #8]
}
 8006b44:	bf00      	nop
 8006b46:	371c      	adds	r7, #28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	2201      	movs	r2, #1
 8006b64:	fa02 f303 	lsl.w	r3, r2, r3
 8006b68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a1a      	ldr	r2, [r3, #32]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	43db      	mvns	r3, r3
 8006b72:	401a      	ands	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a1a      	ldr	r2, [r3, #32]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	fa01 f303 	lsl.w	r3, r1, r3
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
	...

08006b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e050      	b.n	8006c56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a1c      	ldr	r2, [pc, #112]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d018      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c00:	d013      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a18      	ldr	r2, [pc, #96]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00e      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d009      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a15      	ldr	r2, [pc, #84]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d004      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a13      	ldr	r2, [pc, #76]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d10c      	bne.n	8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40010000 	.word	0x40010000
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	40000c00 	.word	0x40000c00
 8006c74:	40014000 	.word	0x40014000

08006c78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e03d      	b.n	8006d10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e03f      	b.n	8006dae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fc fdd6 	bl	80038f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2224      	movs	r2, #36	; 0x24
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 ff53 	bl	8007c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695a      	ldr	r2, [r3, #20]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08c      	sub	sp, #48	; 0x30
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d165      	bne.n	8006e9e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <HAL_UART_Transmit_DMA+0x26>
 8006dd8:	88fb      	ldrh	r3, [r7, #6]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e05e      	b.n	8006ea0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_UART_Transmit_DMA+0x38>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e057      	b.n	8006ea0 <HAL_UART_Transmit_DMA+0xe8>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	88fa      	ldrh	r2, [r7, #6]
 8006e02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	88fa      	ldrh	r2, [r7, #6]
 8006e08:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2221      	movs	r2, #33	; 0x21
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1c:	4a22      	ldr	r2, [pc, #136]	; (8006ea8 <HAL_UART_Transmit_DMA+0xf0>)
 8006e1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e24:	4a21      	ldr	r2, [pc, #132]	; (8006eac <HAL_UART_Transmit_DMA+0xf4>)
 8006e26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2c:	4a20      	ldr	r2, [pc, #128]	; (8006eb0 <HAL_UART_Transmit_DMA+0xf8>)
 8006e2e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e34:	2200      	movs	r2, #0
 8006e36:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006e38:	f107 0308 	add.w	r3, r7, #8
 8006e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	6819      	ldr	r1, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	f7fd f916 	bl	8004080 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e5c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3314      	adds	r3, #20
 8006e6c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	617b      	str	r3, [r7, #20]
   return(result);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3314      	adds	r3, #20
 8006e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e86:	627a      	str	r2, [r7, #36]	; 0x24
 8006e88:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6a39      	ldr	r1, [r7, #32]
 8006e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e5      	bne.n	8006e66 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e000      	b.n	8006ea0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006e9e:	2302      	movs	r3, #2
  }
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3730      	adds	r7, #48	; 0x30
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	080074ad 	.word	0x080074ad
 8006eac:	08007547 	.word	0x08007547
 8006eb0:	080076bf 	.word	0x080076bf

08006eb4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	d11d      	bne.n	8006f0a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <HAL_UART_Receive_DMA+0x26>
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e016      	b.n	8006f0c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_UART_Receive_DMA+0x38>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e00f      	b.n	8006f0c <HAL_UART_Receive_DMA+0x58>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	461a      	mov	r2, r3
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 fc27 	bl	8007754 <UART_Start_Receive_DMA>
 8006f06:	4603      	mov	r3, r0
 8006f08:	e000      	b.n	8006f0c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f0a:	2302      	movs	r3, #2
  }
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b0ba      	sub	sp, #232	; 0xe8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10f      	bne.n	8006f7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <HAL_UART_IRQHandler+0x66>
 8006f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fd8f 	bl	8007a96 <UART_Receive_IT>
      return;
 8006f78:	e256      	b.n	8007428 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 80de 	beq.w	8007140 <HAL_UART_IRQHandler+0x22c>
 8006f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d106      	bne.n	8006f9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 80d1 	beq.w	8007140 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <HAL_UART_IRQHandler+0xae>
 8006faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d005      	beq.n	8006fc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f043 0201 	orr.w	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <HAL_UART_IRQHandler+0xd2>
 8006fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d005      	beq.n	8006fe6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	f043 0202 	orr.w	r2, r3, #2
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00b      	beq.n	800700a <HAL_UART_IRQHandler+0xf6>
 8006ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f043 0204 	orr.w	r2, r3, #4
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d011      	beq.n	800703a <HAL_UART_IRQHandler+0x126>
 8007016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d105      	bne.n	800702e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d005      	beq.n	800703a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	f043 0208 	orr.w	r2, r3, #8
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 81ed 	beq.w	800741e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b00      	cmp	r3, #0
 800704e:	d008      	beq.n	8007062 <HAL_UART_IRQHandler+0x14e>
 8007050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fd1a 	bl	8007a96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b40      	cmp	r3, #64	; 0x40
 800706e:	bf0c      	ite	eq
 8007070:	2301      	moveq	r3, #1
 8007072:	2300      	movne	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d103      	bne.n	800708e <HAL_UART_IRQHandler+0x17a>
 8007086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d04f      	beq.n	800712e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fc22 	bl	80078d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	d141      	bne.n	8007126 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3314      	adds	r3, #20
 80070a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80070b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3314      	adds	r3, #20
 80070ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1d9      	bne.n	80070a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d013      	beq.n	800711e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	4a7d      	ldr	r2, [pc, #500]	; (80072f0 <HAL_UART_IRQHandler+0x3dc>)
 80070fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	4618      	mov	r0, r3
 8007104:	f7fd f884 	bl	8004210 <HAL_DMA_Abort_IT>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d016      	beq.n	800713c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711c:	e00e      	b.n	800713c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9ae 	bl	8007480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007124:	e00a      	b.n	800713c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f9aa 	bl	8007480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712c:	e006      	b.n	800713c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f9a6 	bl	8007480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800713a:	e170      	b.n	800741e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713c:	bf00      	nop
    return;
 800713e:	e16e      	b.n	800741e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	2b01      	cmp	r3, #1
 8007146:	f040 814a 	bne.w	80073de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800714a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714e:	f003 0310 	and.w	r3, r3, #16
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 8143 	beq.w	80073de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 813c 	beq.w	80073de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007166:	2300      	movs	r3, #0
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60bb      	str	r3, [r7, #8]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	60bb      	str	r3, [r7, #8]
 800717a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007186:	2b40      	cmp	r3, #64	; 0x40
 8007188:	f040 80b4 	bne.w	80072f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007198:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8140 	beq.w	8007422 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071aa:	429a      	cmp	r2, r3
 80071ac:	f080 8139 	bcs.w	8007422 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c2:	f000 8088 	beq.w	80072d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	330c      	adds	r3, #12
 80071cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	330c      	adds	r3, #12
 80071ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80071f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800720a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1d9      	bne.n	80071c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3314      	adds	r3, #20
 8007218:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007224:	f023 0301 	bic.w	r3, r3, #1
 8007228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3314      	adds	r3, #20
 8007232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007236:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800723a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800723e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e1      	bne.n	8007212 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3314      	adds	r3, #20
 8007254:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800725e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3314      	adds	r3, #20
 800726e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007272:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007274:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007278:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e3      	bne.n	800724e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	330c      	adds	r3, #12
 800729a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800729e:	e853 3f00 	ldrex	r3, [r3]
 80072a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072a6:	f023 0310 	bic.w	r3, r3, #16
 80072aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	330c      	adds	r3, #12
 80072b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80072b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80072ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e3      	bne.n	8007294 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fc ff2d 	bl	8004130 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072de:	b29b      	uxth	r3, r3
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f8d4 	bl	8007494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072ec:	e099      	b.n	8007422 <HAL_UART_IRQHandler+0x50e>
 80072ee:	bf00      	nop
 80072f0:	0800799f 	.word	0x0800799f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 808b 	beq.w	8007426 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8086 	beq.w	8007426 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	330c      	adds	r3, #12
 8007320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800732a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	330c      	adds	r3, #12
 800733a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800733e:	647a      	str	r2, [r7, #68]	; 0x44
 8007340:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800734c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e3      	bne.n	800731a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3314      	adds	r3, #20
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	623b      	str	r3, [r7, #32]
   return(result);
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	f023 0301 	bic.w	r3, r3, #1
 8007368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007376:	633a      	str	r2, [r7, #48]	; 0x30
 8007378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800737c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e3      	bne.n	8007352 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	330c      	adds	r3, #12
 800739e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0310 	bic.w	r3, r3, #16
 80073ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	330c      	adds	r3, #12
 80073b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80073bc:	61fa      	str	r2, [r7, #28]
 80073be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	69b9      	ldr	r1, [r7, #24]
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	617b      	str	r3, [r7, #20]
   return(result);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e3      	bne.n	8007398 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f85c 	bl	8007494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073dc:	e023      	b.n	8007426 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d009      	beq.n	80073fe <HAL_UART_IRQHandler+0x4ea>
 80073ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fae5 	bl	80079c6 <UART_Transmit_IT>
    return;
 80073fc:	e014      	b.n	8007428 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00e      	beq.n	8007428 <HAL_UART_IRQHandler+0x514>
 800740a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800740e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d008      	beq.n	8007428 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fb25 	bl	8007a66 <UART_EndTransmit_IT>
    return;
 800741c:	e004      	b.n	8007428 <HAL_UART_IRQHandler+0x514>
    return;
 800741e:	bf00      	nop
 8007420:	e002      	b.n	8007428 <HAL_UART_IRQHandler+0x514>
      return;
 8007422:	bf00      	nop
 8007424:	e000      	b.n	8007428 <HAL_UART_IRQHandler+0x514>
      return;
 8007426:	bf00      	nop
  }
}
 8007428:	37e8      	adds	r7, #232	; 0xe8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop

08007430 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b090      	sub	sp, #64	; 0x40
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d137      	bne.n	8007538 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80074c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ca:	2200      	movs	r2, #0
 80074cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3314      	adds	r3, #20
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	623b      	str	r3, [r7, #32]
   return(result);
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80074e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3314      	adds	r3, #20
 80074ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ee:	633a      	str	r2, [r7, #48]	; 0x30
 80074f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e5      	bne.n	80074ce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	330c      	adds	r3, #12
 8007508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	60fb      	str	r3, [r7, #12]
   return(result);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
 800751a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007522:	61fa      	str	r2, [r7, #28]
 8007524:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	69b9      	ldr	r1, [r7, #24]
 8007528:	69fa      	ldr	r2, [r7, #28]
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	617b      	str	r3, [r7, #20]
   return(result);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e5      	bne.n	8007502 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007536:	e002      	b.n	800753e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007538:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800753a:	f7ff ff79 	bl	8007430 <HAL_UART_TxCpltCallback>
}
 800753e:	bf00      	nop
 8007540:	3740      	adds	r7, #64	; 0x40
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007552:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f7ff ff75 	bl	8007444 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800755a:	bf00      	nop
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b09c      	sub	sp, #112	; 0x70
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757a:	2b00      	cmp	r3, #0
 800757c:	d172      	bne.n	8007664 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800757e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007580:	2200      	movs	r2, #0
 8007582:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	330c      	adds	r3, #12
 800758a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800759a:	66bb      	str	r3, [r7, #104]	; 0x68
 800759c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	330c      	adds	r3, #12
 80075a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80075a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e5      	bne.n	8007584 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3314      	adds	r3, #20
 80075be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c2:	e853 3f00 	ldrex	r3, [r3]
 80075c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ca:	f023 0301 	bic.w	r3, r3, #1
 80075ce:	667b      	str	r3, [r7, #100]	; 0x64
 80075d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3314      	adds	r3, #20
 80075d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075d8:	647a      	str	r2, [r7, #68]	; 0x44
 80075da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e5      	bne.n	80075b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3314      	adds	r3, #20
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	623b      	str	r3, [r7, #32]
   return(result);
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007602:	663b      	str	r3, [r7, #96]	; 0x60
 8007604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3314      	adds	r3, #20
 800760a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800760c:	633a      	str	r2, [r7, #48]	; 0x30
 800760e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e5      	bne.n	80075ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007622:	2220      	movs	r2, #32
 8007624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762c:	2b01      	cmp	r3, #1
 800762e:	d119      	bne.n	8007664 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	330c      	adds	r3, #12
 8007636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0310 	bic.w	r3, r3, #16
 8007646:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	330c      	adds	r3, #12
 800764e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007650:	61fa      	str	r2, [r7, #28]
 8007652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	69b9      	ldr	r1, [r7, #24]
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	617b      	str	r3, [r7, #20]
   return(result);
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e5      	bne.n	8007630 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007668:	2b01      	cmp	r3, #1
 800766a:	d106      	bne.n	800767a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800766c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800766e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007670:	4619      	mov	r1, r3
 8007672:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007674:	f7ff ff0e 	bl	8007494 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007678:	e002      	b.n	8007680 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800767a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800767c:	f7ff feec 	bl	8007458 <HAL_UART_RxCpltCallback>
}
 8007680:	bf00      	nop
 8007682:	3770      	adds	r7, #112	; 0x70
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	2b01      	cmp	r3, #1
 800769c:	d108      	bne.n	80076b0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076a2:	085b      	lsrs	r3, r3, #1
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	4619      	mov	r1, r3
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7ff fef3 	bl	8007494 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076ae:	e002      	b.n	80076b6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff fedb 	bl	800746c <HAL_UART_RxHalfCpltCallback>
}
 80076b6:	bf00      	nop
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076da:	2b80      	cmp	r3, #128	; 0x80
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b21      	cmp	r3, #33	; 0x21
 80076f0:	d108      	bne.n	8007704 <UART_DMAError+0x46>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076fe:	68b8      	ldr	r0, [r7, #8]
 8007700:	f000 f8c2 	bl	8007888 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770e:	2b40      	cmp	r3, #64	; 0x40
 8007710:	bf0c      	ite	eq
 8007712:	2301      	moveq	r3, #1
 8007714:	2300      	movne	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b22      	cmp	r3, #34	; 0x22
 8007724:	d108      	bne.n	8007738 <UART_DMAError+0x7a>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d005      	beq.n	8007738 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2200      	movs	r2, #0
 8007730:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007732:	68b8      	ldr	r0, [r7, #8]
 8007734:	f000 f8d0 	bl	80078d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773c:	f043 0210 	orr.w	r2, r3, #16
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007744:	68b8      	ldr	r0, [r7, #8]
 8007746:	f7ff fe9b 	bl	8007480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800774a:	bf00      	nop
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b098      	sub	sp, #96	; 0x60
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	88fa      	ldrh	r2, [r7, #6]
 800776c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2222      	movs	r2, #34	; 0x22
 8007778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	4a3e      	ldr	r2, [pc, #248]	; (800787c <UART_Start_Receive_DMA+0x128>)
 8007782:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	4a3d      	ldr	r2, [pc, #244]	; (8007880 <UART_Start_Receive_DMA+0x12c>)
 800778a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	4a3c      	ldr	r2, [pc, #240]	; (8007884 <UART_Start_Receive_DMA+0x130>)
 8007792:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007798:	2200      	movs	r2, #0
 800779a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800779c:	f107 0308 	add.w	r3, r7, #8
 80077a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4619      	mov	r1, r3
 80077ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	88fb      	ldrh	r3, [r7, #6]
 80077b4:	f7fc fc64 	bl	8004080 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80077b8:	2300      	movs	r3, #0
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	613b      	str	r3, [r7, #16]
 80077cc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	330c      	adds	r3, #12
 80077dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	330c      	adds	r3, #12
 80077f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80077f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80077fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e5      	bne.n	80077d6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3314      	adds	r3, #20
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	f043 0301 	orr.w	r3, r3, #1
 8007820:	657b      	str	r3, [r7, #84]	; 0x54
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3314      	adds	r3, #20
 8007828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800782a:	63ba      	str	r2, [r7, #56]	; 0x38
 800782c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e5      	bne.n	800780a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3314      	adds	r3, #20
 8007844:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	617b      	str	r3, [r7, #20]
   return(result);
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007854:	653b      	str	r3, [r7, #80]	; 0x50
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3314      	adds	r3, #20
 800785c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800785e:	627a      	str	r2, [r7, #36]	; 0x24
 8007860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6a39      	ldr	r1, [r7, #32]
 8007864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	61fb      	str	r3, [r7, #28]
   return(result);
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e5      	bne.n	800783e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3760      	adds	r7, #96	; 0x60
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	08007563 	.word	0x08007563
 8007880:	08007689 	.word	0x08007689
 8007884:	080076bf 	.word	0x080076bf

08007888 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b089      	sub	sp, #36	; 0x24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	330c      	adds	r3, #12
 8007896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	e853 3f00 	ldrex	r3, [r3]
 800789e:	60bb      	str	r3, [r7, #8]
   return(result);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	330c      	adds	r3, #12
 80078ae:	69fa      	ldr	r2, [r7, #28]
 80078b0:	61ba      	str	r2, [r7, #24]
 80078b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b4:	6979      	ldr	r1, [r7, #20]
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	e841 2300 	strex	r3, r2, [r1]
 80078bc:	613b      	str	r3, [r7, #16]
   return(result);
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e5      	bne.n	8007890 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80078cc:	bf00      	nop
 80078ce:	3724      	adds	r7, #36	; 0x24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b095      	sub	sp, #84	; 0x54
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	330c      	adds	r3, #12
 80078fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007900:	643a      	str	r2, [r7, #64]	; 0x40
 8007902:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007908:	e841 2300 	strex	r3, r2, [r1]
 800790c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e5      	bne.n	80078e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3314      	adds	r3, #20
 800791a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	61fb      	str	r3, [r7, #28]
   return(result);
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	f023 0301 	bic.w	r3, r3, #1
 800792a:	64bb      	str	r3, [r7, #72]	; 0x48
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3314      	adds	r3, #20
 8007932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007934:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800793a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e5      	bne.n	8007914 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794c:	2b01      	cmp	r3, #1
 800794e:	d119      	bne.n	8007984 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	330c      	adds	r3, #12
 8007956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	e853 3f00 	ldrex	r3, [r3]
 800795e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f023 0310 	bic.w	r3, r3, #16
 8007966:	647b      	str	r3, [r7, #68]	; 0x44
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	330c      	adds	r3, #12
 800796e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007970:	61ba      	str	r2, [r7, #24]
 8007972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6979      	ldr	r1, [r7, #20]
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	613b      	str	r3, [r7, #16]
   return(result);
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e5      	bne.n	8007950 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2220      	movs	r2, #32
 8007988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007992:	bf00      	nop
 8007994:	3754      	adds	r7, #84	; 0x54
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f7ff fd61 	bl	8007480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079be:	bf00      	nop
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b21      	cmp	r3, #33	; 0x21
 80079d8:	d13e      	bne.n	8007a58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e2:	d114      	bne.n	8007a0e <UART_Transmit_IT+0x48>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d110      	bne.n	8007a0e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	1c9a      	adds	r2, r3, #2
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	621a      	str	r2, [r3, #32]
 8007a0c:	e008      	b.n	8007a20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	1c59      	adds	r1, r3, #1
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6211      	str	r1, [r2, #32]
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3b01      	subs	r3, #1
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10f      	bne.n	8007a54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	e000      	b.n	8007a5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a58:	2302      	movs	r3, #2
  }
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff fcd2 	bl	8007430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b08c      	sub	sp, #48	; 0x30
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b22      	cmp	r3, #34	; 0x22
 8007aa8:	f040 80ab 	bne.w	8007c02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab4:	d117      	bne.n	8007ae6 <UART_Receive_IT+0x50>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d113      	bne.n	8007ae6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ade:	1c9a      	adds	r2, r3, #2
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8007ae4:	e026      	b.n	8007b34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af8:	d007      	beq.n	8007b0a <UART_Receive_IT+0x74>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10a      	bne.n	8007b18 <UART_Receive_IT+0x82>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	e008      	b.n	8007b2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	4619      	mov	r1, r3
 8007b42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d15a      	bne.n	8007bfe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0220 	bic.w	r2, r2, #32
 8007b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695a      	ldr	r2, [r3, #20]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0201 	bic.w	r2, r2, #1
 8007b76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d135      	bne.n	8007bf4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	330c      	adds	r3, #12
 8007b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f023 0310 	bic.w	r3, r3, #16
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	330c      	adds	r3, #12
 8007bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bae:	623a      	str	r2, [r7, #32]
 8007bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	69f9      	ldr	r1, [r7, #28]
 8007bb4:	6a3a      	ldr	r2, [r7, #32]
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e5      	bne.n	8007b8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	2b10      	cmp	r3, #16
 8007bce:	d10a      	bne.n	8007be6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff fc51 	bl	8007494 <HAL_UARTEx_RxEventCallback>
 8007bf2:	e002      	b.n	8007bfa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff fc2f 	bl	8007458 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e002      	b.n	8007c04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e000      	b.n	8007c04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c02:	2302      	movs	r3, #2
  }
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3730      	adds	r7, #48	; 0x30
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c10:	b0c0      	sub	sp, #256	; 0x100
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c28:	68d9      	ldr	r1, [r3, #12]
 8007c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	ea40 0301 	orr.w	r3, r0, r1
 8007c34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c64:	f021 010c 	bic.w	r1, r1, #12
 8007c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c72:	430b      	orrs	r3, r1
 8007c74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c86:	6999      	ldr	r1, [r3, #24]
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	ea40 0301 	orr.w	r3, r0, r1
 8007c92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	4b8f      	ldr	r3, [pc, #572]	; (8007ed8 <UART_SetConfig+0x2cc>)
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d005      	beq.n	8007cac <UART_SetConfig+0xa0>
 8007ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	4b8d      	ldr	r3, [pc, #564]	; (8007edc <UART_SetConfig+0x2d0>)
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d104      	bne.n	8007cb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cac:	f7fd ffc2 	bl	8005c34 <HAL_RCC_GetPCLK2Freq>
 8007cb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007cb4:	e003      	b.n	8007cbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cb6:	f7fd ffa9 	bl	8005c0c <HAL_RCC_GetPCLK1Freq>
 8007cba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc8:	f040 810c 	bne.w	8007ee4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007cde:	4622      	mov	r2, r4
 8007ce0:	462b      	mov	r3, r5
 8007ce2:	1891      	adds	r1, r2, r2
 8007ce4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ce6:	415b      	adcs	r3, r3
 8007ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cee:	4621      	mov	r1, r4
 8007cf0:	eb12 0801 	adds.w	r8, r2, r1
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	eb43 0901 	adc.w	r9, r3, r1
 8007cfa:	f04f 0200 	mov.w	r2, #0
 8007cfe:	f04f 0300 	mov.w	r3, #0
 8007d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d0e:	4690      	mov	r8, r2
 8007d10:	4699      	mov	r9, r3
 8007d12:	4623      	mov	r3, r4
 8007d14:	eb18 0303 	adds.w	r3, r8, r3
 8007d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d1c:	462b      	mov	r3, r5
 8007d1e:	eb49 0303 	adc.w	r3, r9, r3
 8007d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	18db      	adds	r3, r3, r3
 8007d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d40:	4613      	mov	r3, r2
 8007d42:	eb42 0303 	adc.w	r3, r2, r3
 8007d46:	657b      	str	r3, [r7, #84]	; 0x54
 8007d48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d50:	f7f9 f834 	bl	8000dbc <__aeabi_uldivmod>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4b61      	ldr	r3, [pc, #388]	; (8007ee0 <UART_SetConfig+0x2d4>)
 8007d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	011c      	lsls	r4, r3, #4
 8007d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d74:	4642      	mov	r2, r8
 8007d76:	464b      	mov	r3, r9
 8007d78:	1891      	adds	r1, r2, r2
 8007d7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d7c:	415b      	adcs	r3, r3
 8007d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d84:	4641      	mov	r1, r8
 8007d86:	eb12 0a01 	adds.w	sl, r2, r1
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	eb43 0b01 	adc.w	fp, r3, r1
 8007d90:	f04f 0200 	mov.w	r2, #0
 8007d94:	f04f 0300 	mov.w	r3, #0
 8007d98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007da4:	4692      	mov	sl, r2
 8007da6:	469b      	mov	fp, r3
 8007da8:	4643      	mov	r3, r8
 8007daa:	eb1a 0303 	adds.w	r3, sl, r3
 8007dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007db2:	464b      	mov	r3, r9
 8007db4:	eb4b 0303 	adc.w	r3, fp, r3
 8007db8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007dcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	18db      	adds	r3, r3, r3
 8007dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	eb42 0303 	adc.w	r3, r2, r3
 8007ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8007dde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007de2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007de6:	f7f8 ffe9 	bl	8000dbc <__aeabi_uldivmod>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4611      	mov	r1, r2
 8007df0:	4b3b      	ldr	r3, [pc, #236]	; (8007ee0 <UART_SetConfig+0x2d4>)
 8007df2:	fba3 2301 	umull	r2, r3, r3, r1
 8007df6:	095b      	lsrs	r3, r3, #5
 8007df8:	2264      	movs	r2, #100	; 0x64
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	1acb      	subs	r3, r1, r3
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e06:	4b36      	ldr	r3, [pc, #216]	; (8007ee0 <UART_SetConfig+0x2d4>)
 8007e08:	fba3 2302 	umull	r2, r3, r3, r2
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e14:	441c      	add	r4, r3
 8007e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e28:	4642      	mov	r2, r8
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	1891      	adds	r1, r2, r2
 8007e2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e30:	415b      	adcs	r3, r3
 8007e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e38:	4641      	mov	r1, r8
 8007e3a:	1851      	adds	r1, r2, r1
 8007e3c:	6339      	str	r1, [r7, #48]	; 0x30
 8007e3e:	4649      	mov	r1, r9
 8007e40:	414b      	adcs	r3, r1
 8007e42:	637b      	str	r3, [r7, #52]	; 0x34
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e50:	4659      	mov	r1, fp
 8007e52:	00cb      	lsls	r3, r1, #3
 8007e54:	4651      	mov	r1, sl
 8007e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e5a:	4651      	mov	r1, sl
 8007e5c:	00ca      	lsls	r2, r1, #3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	4619      	mov	r1, r3
 8007e62:	4603      	mov	r3, r0
 8007e64:	4642      	mov	r2, r8
 8007e66:	189b      	adds	r3, r3, r2
 8007e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	460a      	mov	r2, r1
 8007e70:	eb42 0303 	adc.w	r3, r2, r3
 8007e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	18db      	adds	r3, r3, r3
 8007e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e92:	4613      	mov	r3, r2
 8007e94:	eb42 0303 	adc.w	r3, r2, r3
 8007e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ea2:	f7f8 ff8b 	bl	8000dbc <__aeabi_uldivmod>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <UART_SetConfig+0x2d4>)
 8007eac:	fba3 1302 	umull	r1, r3, r3, r2
 8007eb0:	095b      	lsrs	r3, r3, #5
 8007eb2:	2164      	movs	r1, #100	; 0x64
 8007eb4:	fb01 f303 	mul.w	r3, r1, r3
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	3332      	adds	r3, #50	; 0x32
 8007ebe:	4a08      	ldr	r2, [pc, #32]	; (8007ee0 <UART_SetConfig+0x2d4>)
 8007ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec4:	095b      	lsrs	r3, r3, #5
 8007ec6:	f003 0207 	and.w	r2, r3, #7
 8007eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4422      	add	r2, r4
 8007ed2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ed4:	e105      	b.n	80080e2 <UART_SetConfig+0x4d6>
 8007ed6:	bf00      	nop
 8007ed8:	40011000 	.word	0x40011000
 8007edc:	40011400 	.word	0x40011400
 8007ee0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007eee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ef2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007ef6:	4642      	mov	r2, r8
 8007ef8:	464b      	mov	r3, r9
 8007efa:	1891      	adds	r1, r2, r2
 8007efc:	6239      	str	r1, [r7, #32]
 8007efe:	415b      	adcs	r3, r3
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
 8007f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f06:	4641      	mov	r1, r8
 8007f08:	1854      	adds	r4, r2, r1
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	eb43 0501 	adc.w	r5, r3, r1
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	f04f 0300 	mov.w	r3, #0
 8007f18:	00eb      	lsls	r3, r5, #3
 8007f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f1e:	00e2      	lsls	r2, r4, #3
 8007f20:	4614      	mov	r4, r2
 8007f22:	461d      	mov	r5, r3
 8007f24:	4643      	mov	r3, r8
 8007f26:	18e3      	adds	r3, r4, r3
 8007f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	eb45 0303 	adc.w	r3, r5, r3
 8007f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f52:	4629      	mov	r1, r5
 8007f54:	008b      	lsls	r3, r1, #2
 8007f56:	4621      	mov	r1, r4
 8007f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	008a      	lsls	r2, r1, #2
 8007f60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f64:	f7f8 ff2a 	bl	8000dbc <__aeabi_uldivmod>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4b60      	ldr	r3, [pc, #384]	; (80080f0 <UART_SetConfig+0x4e4>)
 8007f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f72:	095b      	lsrs	r3, r3, #5
 8007f74:	011c      	lsls	r4, r3, #4
 8007f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f88:	4642      	mov	r2, r8
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	1891      	adds	r1, r2, r2
 8007f8e:	61b9      	str	r1, [r7, #24]
 8007f90:	415b      	adcs	r3, r3
 8007f92:	61fb      	str	r3, [r7, #28]
 8007f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f98:	4641      	mov	r1, r8
 8007f9a:	1851      	adds	r1, r2, r1
 8007f9c:	6139      	str	r1, [r7, #16]
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	414b      	adcs	r3, r1
 8007fa2:	617b      	str	r3, [r7, #20]
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fb0:	4659      	mov	r1, fp
 8007fb2:	00cb      	lsls	r3, r1, #3
 8007fb4:	4651      	mov	r1, sl
 8007fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fba:	4651      	mov	r1, sl
 8007fbc:	00ca      	lsls	r2, r1, #3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	189b      	adds	r3, r3, r2
 8007fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fcc:	464b      	mov	r3, r9
 8007fce:	460a      	mov	r2, r1
 8007fd0:	eb42 0303 	adc.w	r3, r2, r3
 8007fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fe2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007fe4:	f04f 0200 	mov.w	r2, #0
 8007fe8:	f04f 0300 	mov.w	r3, #0
 8007fec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	008b      	lsls	r3, r1, #2
 8007ff4:	4641      	mov	r1, r8
 8007ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ffa:	4641      	mov	r1, r8
 8007ffc:	008a      	lsls	r2, r1, #2
 8007ffe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008002:	f7f8 fedb 	bl	8000dbc <__aeabi_uldivmod>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4b39      	ldr	r3, [pc, #228]	; (80080f0 <UART_SetConfig+0x4e4>)
 800800c:	fba3 1302 	umull	r1, r3, r3, r2
 8008010:	095b      	lsrs	r3, r3, #5
 8008012:	2164      	movs	r1, #100	; 0x64
 8008014:	fb01 f303 	mul.w	r3, r1, r3
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	3332      	adds	r3, #50	; 0x32
 800801e:	4a34      	ldr	r2, [pc, #208]	; (80080f0 <UART_SetConfig+0x4e4>)
 8008020:	fba2 2303 	umull	r2, r3, r2, r3
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800802a:	441c      	add	r4, r3
 800802c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008030:	2200      	movs	r2, #0
 8008032:	673b      	str	r3, [r7, #112]	; 0x70
 8008034:	677a      	str	r2, [r7, #116]	; 0x74
 8008036:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800803a:	4642      	mov	r2, r8
 800803c:	464b      	mov	r3, r9
 800803e:	1891      	adds	r1, r2, r2
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	415b      	adcs	r3, r3
 8008044:	60fb      	str	r3, [r7, #12]
 8008046:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800804a:	4641      	mov	r1, r8
 800804c:	1851      	adds	r1, r2, r1
 800804e:	6039      	str	r1, [r7, #0]
 8008050:	4649      	mov	r1, r9
 8008052:	414b      	adcs	r3, r1
 8008054:	607b      	str	r3, [r7, #4]
 8008056:	f04f 0200 	mov.w	r2, #0
 800805a:	f04f 0300 	mov.w	r3, #0
 800805e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008062:	4659      	mov	r1, fp
 8008064:	00cb      	lsls	r3, r1, #3
 8008066:	4651      	mov	r1, sl
 8008068:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800806c:	4651      	mov	r1, sl
 800806e:	00ca      	lsls	r2, r1, #3
 8008070:	4610      	mov	r0, r2
 8008072:	4619      	mov	r1, r3
 8008074:	4603      	mov	r3, r0
 8008076:	4642      	mov	r2, r8
 8008078:	189b      	adds	r3, r3, r2
 800807a:	66bb      	str	r3, [r7, #104]	; 0x68
 800807c:	464b      	mov	r3, r9
 800807e:	460a      	mov	r2, r1
 8008080:	eb42 0303 	adc.w	r3, r2, r3
 8008084:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	663b      	str	r3, [r7, #96]	; 0x60
 8008090:	667a      	str	r2, [r7, #100]	; 0x64
 8008092:	f04f 0200 	mov.w	r2, #0
 8008096:	f04f 0300 	mov.w	r3, #0
 800809a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800809e:	4649      	mov	r1, r9
 80080a0:	008b      	lsls	r3, r1, #2
 80080a2:	4641      	mov	r1, r8
 80080a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080a8:	4641      	mov	r1, r8
 80080aa:	008a      	lsls	r2, r1, #2
 80080ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080b0:	f7f8 fe84 	bl	8000dbc <__aeabi_uldivmod>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4b0d      	ldr	r3, [pc, #52]	; (80080f0 <UART_SetConfig+0x4e4>)
 80080ba:	fba3 1302 	umull	r1, r3, r3, r2
 80080be:	095b      	lsrs	r3, r3, #5
 80080c0:	2164      	movs	r1, #100	; 0x64
 80080c2:	fb01 f303 	mul.w	r3, r1, r3
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	3332      	adds	r3, #50	; 0x32
 80080cc:	4a08      	ldr	r2, [pc, #32]	; (80080f0 <UART_SetConfig+0x4e4>)
 80080ce:	fba2 2303 	umull	r2, r3, r2, r3
 80080d2:	095b      	lsrs	r3, r3, #5
 80080d4:	f003 020f 	and.w	r2, r3, #15
 80080d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4422      	add	r2, r4
 80080e0:	609a      	str	r2, [r3, #8]
}
 80080e2:	bf00      	nop
 80080e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080e8:	46bd      	mov	sp, r7
 80080ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ee:	bf00      	nop
 80080f0:	51eb851f 	.word	0x51eb851f

080080f4 <calloc>:
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <calloc+0xc>)
 80080f6:	460a      	mov	r2, r1
 80080f8:	4601      	mov	r1, r0
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	f000 b842 	b.w	8008184 <_calloc_r>
 8008100:	20000034 	.word	0x20000034

08008104 <__errno>:
 8008104:	4b01      	ldr	r3, [pc, #4]	; (800810c <__errno+0x8>)
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20000034 	.word	0x20000034

08008110 <__libc_init_array>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	4d0d      	ldr	r5, [pc, #52]	; (8008148 <__libc_init_array+0x38>)
 8008114:	4c0d      	ldr	r4, [pc, #52]	; (800814c <__libc_init_array+0x3c>)
 8008116:	1b64      	subs	r4, r4, r5
 8008118:	10a4      	asrs	r4, r4, #2
 800811a:	2600      	movs	r6, #0
 800811c:	42a6      	cmp	r6, r4
 800811e:	d109      	bne.n	8008134 <__libc_init_array+0x24>
 8008120:	4d0b      	ldr	r5, [pc, #44]	; (8008150 <__libc_init_array+0x40>)
 8008122:	4c0c      	ldr	r4, [pc, #48]	; (8008154 <__libc_init_array+0x44>)
 8008124:	f000 f9d4 	bl	80084d0 <_init>
 8008128:	1b64      	subs	r4, r4, r5
 800812a:	10a4      	asrs	r4, r4, #2
 800812c:	2600      	movs	r6, #0
 800812e:	42a6      	cmp	r6, r4
 8008130:	d105      	bne.n	800813e <__libc_init_array+0x2e>
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	f855 3b04 	ldr.w	r3, [r5], #4
 8008138:	4798      	blx	r3
 800813a:	3601      	adds	r6, #1
 800813c:	e7ee      	b.n	800811c <__libc_init_array+0xc>
 800813e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008142:	4798      	blx	r3
 8008144:	3601      	adds	r6, #1
 8008146:	e7f2      	b.n	800812e <__libc_init_array+0x1e>
 8008148:	08008518 	.word	0x08008518
 800814c:	08008518 	.word	0x08008518
 8008150:	08008518 	.word	0x08008518
 8008154:	0800851c 	.word	0x0800851c

08008158 <memcpy>:
 8008158:	440a      	add	r2, r1
 800815a:	4291      	cmp	r1, r2
 800815c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008160:	d100      	bne.n	8008164 <memcpy+0xc>
 8008162:	4770      	bx	lr
 8008164:	b510      	push	{r4, lr}
 8008166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800816a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800816e:	4291      	cmp	r1, r2
 8008170:	d1f9      	bne.n	8008166 <memcpy+0xe>
 8008172:	bd10      	pop	{r4, pc}

08008174 <memset>:
 8008174:	4402      	add	r2, r0
 8008176:	4603      	mov	r3, r0
 8008178:	4293      	cmp	r3, r2
 800817a:	d100      	bne.n	800817e <memset+0xa>
 800817c:	4770      	bx	lr
 800817e:	f803 1b01 	strb.w	r1, [r3], #1
 8008182:	e7f9      	b.n	8008178 <memset+0x4>

08008184 <_calloc_r>:
 8008184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008186:	fba1 2402 	umull	r2, r4, r1, r2
 800818a:	b94c      	cbnz	r4, 80081a0 <_calloc_r+0x1c>
 800818c:	4611      	mov	r1, r2
 800818e:	9201      	str	r2, [sp, #4]
 8008190:	f000 f82e 	bl	80081f0 <_malloc_r>
 8008194:	9a01      	ldr	r2, [sp, #4]
 8008196:	4605      	mov	r5, r0
 8008198:	b930      	cbnz	r0, 80081a8 <_calloc_r+0x24>
 800819a:	4628      	mov	r0, r5
 800819c:	b003      	add	sp, #12
 800819e:	bd30      	pop	{r4, r5, pc}
 80081a0:	220c      	movs	r2, #12
 80081a2:	6002      	str	r2, [r0, #0]
 80081a4:	2500      	movs	r5, #0
 80081a6:	e7f8      	b.n	800819a <_calloc_r+0x16>
 80081a8:	4621      	mov	r1, r4
 80081aa:	f7ff ffe3 	bl	8008174 <memset>
 80081ae:	e7f4      	b.n	800819a <_calloc_r+0x16>

080081b0 <sbrk_aligned>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	4e0e      	ldr	r6, [pc, #56]	; (80081ec <sbrk_aligned+0x3c>)
 80081b4:	460c      	mov	r4, r1
 80081b6:	6831      	ldr	r1, [r6, #0]
 80081b8:	4605      	mov	r5, r0
 80081ba:	b911      	cbnz	r1, 80081c2 <sbrk_aligned+0x12>
 80081bc:	f000 f88c 	bl	80082d8 <_sbrk_r>
 80081c0:	6030      	str	r0, [r6, #0]
 80081c2:	4621      	mov	r1, r4
 80081c4:	4628      	mov	r0, r5
 80081c6:	f000 f887 	bl	80082d8 <_sbrk_r>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d00a      	beq.n	80081e4 <sbrk_aligned+0x34>
 80081ce:	1cc4      	adds	r4, r0, #3
 80081d0:	f024 0403 	bic.w	r4, r4, #3
 80081d4:	42a0      	cmp	r0, r4
 80081d6:	d007      	beq.n	80081e8 <sbrk_aligned+0x38>
 80081d8:	1a21      	subs	r1, r4, r0
 80081da:	4628      	mov	r0, r5
 80081dc:	f000 f87c 	bl	80082d8 <_sbrk_r>
 80081e0:	3001      	adds	r0, #1
 80081e2:	d101      	bne.n	80081e8 <sbrk_aligned+0x38>
 80081e4:	f04f 34ff 	mov.w	r4, #4294967295
 80081e8:	4620      	mov	r0, r4
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	20000538 	.word	0x20000538

080081f0 <_malloc_r>:
 80081f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f4:	1ccd      	adds	r5, r1, #3
 80081f6:	f025 0503 	bic.w	r5, r5, #3
 80081fa:	3508      	adds	r5, #8
 80081fc:	2d0c      	cmp	r5, #12
 80081fe:	bf38      	it	cc
 8008200:	250c      	movcc	r5, #12
 8008202:	2d00      	cmp	r5, #0
 8008204:	4607      	mov	r7, r0
 8008206:	db01      	blt.n	800820c <_malloc_r+0x1c>
 8008208:	42a9      	cmp	r1, r5
 800820a:	d905      	bls.n	8008218 <_malloc_r+0x28>
 800820c:	230c      	movs	r3, #12
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	2600      	movs	r6, #0
 8008212:	4630      	mov	r0, r6
 8008214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008218:	4e2e      	ldr	r6, [pc, #184]	; (80082d4 <_malloc_r+0xe4>)
 800821a:	f000 f86d 	bl	80082f8 <__malloc_lock>
 800821e:	6833      	ldr	r3, [r6, #0]
 8008220:	461c      	mov	r4, r3
 8008222:	bb34      	cbnz	r4, 8008272 <_malloc_r+0x82>
 8008224:	4629      	mov	r1, r5
 8008226:	4638      	mov	r0, r7
 8008228:	f7ff ffc2 	bl	80081b0 <sbrk_aligned>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	4604      	mov	r4, r0
 8008230:	d14d      	bne.n	80082ce <_malloc_r+0xde>
 8008232:	6834      	ldr	r4, [r6, #0]
 8008234:	4626      	mov	r6, r4
 8008236:	2e00      	cmp	r6, #0
 8008238:	d140      	bne.n	80082bc <_malloc_r+0xcc>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	4631      	mov	r1, r6
 800823e:	4638      	mov	r0, r7
 8008240:	eb04 0803 	add.w	r8, r4, r3
 8008244:	f000 f848 	bl	80082d8 <_sbrk_r>
 8008248:	4580      	cmp	r8, r0
 800824a:	d13a      	bne.n	80082c2 <_malloc_r+0xd2>
 800824c:	6821      	ldr	r1, [r4, #0]
 800824e:	3503      	adds	r5, #3
 8008250:	1a6d      	subs	r5, r5, r1
 8008252:	f025 0503 	bic.w	r5, r5, #3
 8008256:	3508      	adds	r5, #8
 8008258:	2d0c      	cmp	r5, #12
 800825a:	bf38      	it	cc
 800825c:	250c      	movcc	r5, #12
 800825e:	4629      	mov	r1, r5
 8008260:	4638      	mov	r0, r7
 8008262:	f7ff ffa5 	bl	80081b0 <sbrk_aligned>
 8008266:	3001      	adds	r0, #1
 8008268:	d02b      	beq.n	80082c2 <_malloc_r+0xd2>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	442b      	add	r3, r5
 800826e:	6023      	str	r3, [r4, #0]
 8008270:	e00e      	b.n	8008290 <_malloc_r+0xa0>
 8008272:	6822      	ldr	r2, [r4, #0]
 8008274:	1b52      	subs	r2, r2, r5
 8008276:	d41e      	bmi.n	80082b6 <_malloc_r+0xc6>
 8008278:	2a0b      	cmp	r2, #11
 800827a:	d916      	bls.n	80082aa <_malloc_r+0xba>
 800827c:	1961      	adds	r1, r4, r5
 800827e:	42a3      	cmp	r3, r4
 8008280:	6025      	str	r5, [r4, #0]
 8008282:	bf18      	it	ne
 8008284:	6059      	strne	r1, [r3, #4]
 8008286:	6863      	ldr	r3, [r4, #4]
 8008288:	bf08      	it	eq
 800828a:	6031      	streq	r1, [r6, #0]
 800828c:	5162      	str	r2, [r4, r5]
 800828e:	604b      	str	r3, [r1, #4]
 8008290:	4638      	mov	r0, r7
 8008292:	f104 060b 	add.w	r6, r4, #11
 8008296:	f000 f835 	bl	8008304 <__malloc_unlock>
 800829a:	f026 0607 	bic.w	r6, r6, #7
 800829e:	1d23      	adds	r3, r4, #4
 80082a0:	1af2      	subs	r2, r6, r3
 80082a2:	d0b6      	beq.n	8008212 <_malloc_r+0x22>
 80082a4:	1b9b      	subs	r3, r3, r6
 80082a6:	50a3      	str	r3, [r4, r2]
 80082a8:	e7b3      	b.n	8008212 <_malloc_r+0x22>
 80082aa:	6862      	ldr	r2, [r4, #4]
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	bf0c      	ite	eq
 80082b0:	6032      	streq	r2, [r6, #0]
 80082b2:	605a      	strne	r2, [r3, #4]
 80082b4:	e7ec      	b.n	8008290 <_malloc_r+0xa0>
 80082b6:	4623      	mov	r3, r4
 80082b8:	6864      	ldr	r4, [r4, #4]
 80082ba:	e7b2      	b.n	8008222 <_malloc_r+0x32>
 80082bc:	4634      	mov	r4, r6
 80082be:	6876      	ldr	r6, [r6, #4]
 80082c0:	e7b9      	b.n	8008236 <_malloc_r+0x46>
 80082c2:	230c      	movs	r3, #12
 80082c4:	603b      	str	r3, [r7, #0]
 80082c6:	4638      	mov	r0, r7
 80082c8:	f000 f81c 	bl	8008304 <__malloc_unlock>
 80082cc:	e7a1      	b.n	8008212 <_malloc_r+0x22>
 80082ce:	6025      	str	r5, [r4, #0]
 80082d0:	e7de      	b.n	8008290 <_malloc_r+0xa0>
 80082d2:	bf00      	nop
 80082d4:	20000534 	.word	0x20000534

080082d8 <_sbrk_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d06      	ldr	r5, [pc, #24]	; (80082f4 <_sbrk_r+0x1c>)
 80082dc:	2300      	movs	r3, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	f7fb fc04 	bl	8003af0 <_sbrk>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_sbrk_r+0x1a>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_sbrk_r+0x1a>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	2000053c 	.word	0x2000053c

080082f8 <__malloc_lock>:
 80082f8:	4801      	ldr	r0, [pc, #4]	; (8008300 <__malloc_lock+0x8>)
 80082fa:	f000 b809 	b.w	8008310 <__retarget_lock_acquire_recursive>
 80082fe:	bf00      	nop
 8008300:	20000540 	.word	0x20000540

08008304 <__malloc_unlock>:
 8008304:	4801      	ldr	r0, [pc, #4]	; (800830c <__malloc_unlock+0x8>)
 8008306:	f000 b804 	b.w	8008312 <__retarget_lock_release_recursive>
 800830a:	bf00      	nop
 800830c:	20000540 	.word	0x20000540

08008310 <__retarget_lock_acquire_recursive>:
 8008310:	4770      	bx	lr

08008312 <__retarget_lock_release_recursive>:
 8008312:	4770      	bx	lr

08008314 <sqrt>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	ed2d 8b02 	vpush	{d8}
 800831a:	ec55 4b10 	vmov	r4, r5, d0
 800831e:	f000 f825 	bl	800836c <__ieee754_sqrt>
 8008322:	4622      	mov	r2, r4
 8008324:	462b      	mov	r3, r5
 8008326:	4620      	mov	r0, r4
 8008328:	4629      	mov	r1, r5
 800832a:	eeb0 8a40 	vmov.f32	s16, s0
 800832e:	eef0 8a60 	vmov.f32	s17, s1
 8008332:	f7f8 fba7 	bl	8000a84 <__aeabi_dcmpun>
 8008336:	b990      	cbnz	r0, 800835e <sqrt+0x4a>
 8008338:	2200      	movs	r2, #0
 800833a:	2300      	movs	r3, #0
 800833c:	4620      	mov	r0, r4
 800833e:	4629      	mov	r1, r5
 8008340:	f7f8 fb78 	bl	8000a34 <__aeabi_dcmplt>
 8008344:	b158      	cbz	r0, 800835e <sqrt+0x4a>
 8008346:	f7ff fedd 	bl	8008104 <__errno>
 800834a:	2321      	movs	r3, #33	; 0x21
 800834c:	6003      	str	r3, [r0, #0]
 800834e:	2200      	movs	r2, #0
 8008350:	2300      	movs	r3, #0
 8008352:	4610      	mov	r0, r2
 8008354:	4619      	mov	r1, r3
 8008356:	f7f8 fa25 	bl	80007a4 <__aeabi_ddiv>
 800835a:	ec41 0b18 	vmov	d8, r0, r1
 800835e:	eeb0 0a48 	vmov.f32	s0, s16
 8008362:	eef0 0a68 	vmov.f32	s1, s17
 8008366:	ecbd 8b02 	vpop	{d8}
 800836a:	bd38      	pop	{r3, r4, r5, pc}

0800836c <__ieee754_sqrt>:
 800836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008370:	ec55 4b10 	vmov	r4, r5, d0
 8008374:	4e55      	ldr	r6, [pc, #340]	; (80084cc <__ieee754_sqrt+0x160>)
 8008376:	43ae      	bics	r6, r5
 8008378:	ee10 0a10 	vmov	r0, s0
 800837c:	ee10 3a10 	vmov	r3, s0
 8008380:	462a      	mov	r2, r5
 8008382:	4629      	mov	r1, r5
 8008384:	d110      	bne.n	80083a8 <__ieee754_sqrt+0x3c>
 8008386:	ee10 2a10 	vmov	r2, s0
 800838a:	462b      	mov	r3, r5
 800838c:	f7f8 f8e0 	bl	8000550 <__aeabi_dmul>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4620      	mov	r0, r4
 8008396:	4629      	mov	r1, r5
 8008398:	f7f7 ff24 	bl	80001e4 <__adddf3>
 800839c:	4604      	mov	r4, r0
 800839e:	460d      	mov	r5, r1
 80083a0:	ec45 4b10 	vmov	d0, r4, r5
 80083a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083a8:	2d00      	cmp	r5, #0
 80083aa:	dc10      	bgt.n	80083ce <__ieee754_sqrt+0x62>
 80083ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80083b0:	4330      	orrs	r0, r6
 80083b2:	d0f5      	beq.n	80083a0 <__ieee754_sqrt+0x34>
 80083b4:	b15d      	cbz	r5, 80083ce <__ieee754_sqrt+0x62>
 80083b6:	ee10 2a10 	vmov	r2, s0
 80083ba:	462b      	mov	r3, r5
 80083bc:	ee10 0a10 	vmov	r0, s0
 80083c0:	f7f7 ff0e 	bl	80001e0 <__aeabi_dsub>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	f7f8 f9ec 	bl	80007a4 <__aeabi_ddiv>
 80083cc:	e7e6      	b.n	800839c <__ieee754_sqrt+0x30>
 80083ce:	1512      	asrs	r2, r2, #20
 80083d0:	d074      	beq.n	80084bc <__ieee754_sqrt+0x150>
 80083d2:	07d4      	lsls	r4, r2, #31
 80083d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80083d8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80083dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80083e0:	bf5e      	ittt	pl
 80083e2:	0fda      	lsrpl	r2, r3, #31
 80083e4:	005b      	lslpl	r3, r3, #1
 80083e6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80083ea:	2400      	movs	r4, #0
 80083ec:	0fda      	lsrs	r2, r3, #31
 80083ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80083f2:	107f      	asrs	r7, r7, #1
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	2516      	movs	r5, #22
 80083f8:	4620      	mov	r0, r4
 80083fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80083fe:	1886      	adds	r6, r0, r2
 8008400:	428e      	cmp	r6, r1
 8008402:	bfde      	ittt	le
 8008404:	1b89      	suble	r1, r1, r6
 8008406:	18b0      	addle	r0, r6, r2
 8008408:	18a4      	addle	r4, r4, r2
 800840a:	0049      	lsls	r1, r1, #1
 800840c:	3d01      	subs	r5, #1
 800840e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008412:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008416:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800841a:	d1f0      	bne.n	80083fe <__ieee754_sqrt+0x92>
 800841c:	462a      	mov	r2, r5
 800841e:	f04f 0e20 	mov.w	lr, #32
 8008422:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008426:	4281      	cmp	r1, r0
 8008428:	eb06 0c05 	add.w	ip, r6, r5
 800842c:	dc02      	bgt.n	8008434 <__ieee754_sqrt+0xc8>
 800842e:	d113      	bne.n	8008458 <__ieee754_sqrt+0xec>
 8008430:	459c      	cmp	ip, r3
 8008432:	d811      	bhi.n	8008458 <__ieee754_sqrt+0xec>
 8008434:	f1bc 0f00 	cmp.w	ip, #0
 8008438:	eb0c 0506 	add.w	r5, ip, r6
 800843c:	da43      	bge.n	80084c6 <__ieee754_sqrt+0x15a>
 800843e:	2d00      	cmp	r5, #0
 8008440:	db41      	blt.n	80084c6 <__ieee754_sqrt+0x15a>
 8008442:	f100 0801 	add.w	r8, r0, #1
 8008446:	1a09      	subs	r1, r1, r0
 8008448:	459c      	cmp	ip, r3
 800844a:	bf88      	it	hi
 800844c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008450:	eba3 030c 	sub.w	r3, r3, ip
 8008454:	4432      	add	r2, r6
 8008456:	4640      	mov	r0, r8
 8008458:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800845c:	f1be 0e01 	subs.w	lr, lr, #1
 8008460:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008464:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008468:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800846c:	d1db      	bne.n	8008426 <__ieee754_sqrt+0xba>
 800846e:	430b      	orrs	r3, r1
 8008470:	d006      	beq.n	8008480 <__ieee754_sqrt+0x114>
 8008472:	1c50      	adds	r0, r2, #1
 8008474:	bf13      	iteet	ne
 8008476:	3201      	addne	r2, #1
 8008478:	3401      	addeq	r4, #1
 800847a:	4672      	moveq	r2, lr
 800847c:	f022 0201 	bicne.w	r2, r2, #1
 8008480:	1063      	asrs	r3, r4, #1
 8008482:	0852      	lsrs	r2, r2, #1
 8008484:	07e1      	lsls	r1, r4, #31
 8008486:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800848a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800848e:	bf48      	it	mi
 8008490:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008494:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008498:	4614      	mov	r4, r2
 800849a:	e781      	b.n	80083a0 <__ieee754_sqrt+0x34>
 800849c:	0ad9      	lsrs	r1, r3, #11
 800849e:	3815      	subs	r0, #21
 80084a0:	055b      	lsls	r3, r3, #21
 80084a2:	2900      	cmp	r1, #0
 80084a4:	d0fa      	beq.n	800849c <__ieee754_sqrt+0x130>
 80084a6:	02cd      	lsls	r5, r1, #11
 80084a8:	d50a      	bpl.n	80084c0 <__ieee754_sqrt+0x154>
 80084aa:	f1c2 0420 	rsb	r4, r2, #32
 80084ae:	fa23 f404 	lsr.w	r4, r3, r4
 80084b2:	1e55      	subs	r5, r2, #1
 80084b4:	4093      	lsls	r3, r2
 80084b6:	4321      	orrs	r1, r4
 80084b8:	1b42      	subs	r2, r0, r5
 80084ba:	e78a      	b.n	80083d2 <__ieee754_sqrt+0x66>
 80084bc:	4610      	mov	r0, r2
 80084be:	e7f0      	b.n	80084a2 <__ieee754_sqrt+0x136>
 80084c0:	0049      	lsls	r1, r1, #1
 80084c2:	3201      	adds	r2, #1
 80084c4:	e7ef      	b.n	80084a6 <__ieee754_sqrt+0x13a>
 80084c6:	4680      	mov	r8, r0
 80084c8:	e7bd      	b.n	8008446 <__ieee754_sqrt+0xda>
 80084ca:	bf00      	nop
 80084cc:	7ff00000 	.word	0x7ff00000

080084d0 <_init>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr

080084dc <_fini>:
 80084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084de:	bf00      	nop
 80084e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e2:	bc08      	pop	{r3}
 80084e4:	469e      	mov	lr, r3
 80084e6:	4770      	bx	lr

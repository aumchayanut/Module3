
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f0c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080070a4  080070a4  000170a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c4  080070c4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070cc  080070cc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080070d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000088  08007158  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08007158  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a45  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c8  00000000  00000000  00031af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00033bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  00034b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160d1  00000000  00000000  00035a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e77  00000000  00000000  0004bb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee0e  00000000  00000000  0005d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec7ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e0  00000000  00000000  000ec804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800708c 	.word	0x0800708c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	0800708c 	.word	0x0800708c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106a:	f001 fd89 	bl	8002b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f917 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f000 fb49 	bl	8001708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001076:	f000 faf5 	bl	8001664 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800107a:	f000 f9a7 	bl	80013cc <MX_TIM1_Init>
  MX_TIM2_Init();
 800107e:	f000 fa51 	bl	8001524 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001082:	f000 fa9b 	bl	80015bc <MX_TIM3_Init>
  MX_DMA_Init();
 8001086:	f000 fb17 	bl	80016b8 <MX_DMA_Init>
  MX_I2C1_Init();
 800108a:	f000 f971 	bl	8001370 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	UART2.huart = &huart2;
 800108e:	4b68      	ldr	r3, [pc, #416]	; (8001230 <main+0x1cc>)
 8001090:	4a68      	ldr	r2, [pc, #416]	; (8001234 <main+0x1d0>)
 8001092:	601a      	str	r2, [r3, #0]
	UART2.RxLen = 255;
 8001094:	4b66      	ldr	r3, [pc, #408]	; (8001230 <main+0x1cc>)
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	80da      	strh	r2, [r3, #6]
	UART2.TxLen = 255;
 800109a:	4b65      	ldr	r3, [pc, #404]	; (8001230 <main+0x1cc>)
 800109c:	22ff      	movs	r2, #255	; 0xff
 800109e:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 80010a0:	4863      	ldr	r0, [pc, #396]	; (8001230 <main+0x1cc>)
 80010a2:	f000 fbdb 	bl	800185c <UARTInit>
	UARTResetStart(&UART2);
 80010a6:	4862      	ldr	r0, [pc, #392]	; (8001230 <main+0x1cc>)
 80010a8:	f000 fc00 	bl	80018ac <UARTResetStart>


  PIDinit() ;
 80010ac:	f001 f8d8 	bl	8002260 <PIDinit>

  // start PWM
  HAL_TIM_Base_Start(&htim1);
 80010b0:	4861      	ldr	r0, [pc, #388]	; (8001238 <main+0x1d4>)
 80010b2:	f003 fdd5 	bl	8004c60 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010b6:	2100      	movs	r1, #0
 80010b8:	485f      	ldr	r0, [pc, #380]	; (8001238 <main+0x1d4>)
 80010ba:	f003 fee7 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80010be:	2104      	movs	r1, #4
 80010c0:	485d      	ldr	r0, [pc, #372]	; (8001238 <main+0x1d4>)
 80010c2:	f003 fee3 	bl	8004e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80010c6:	2108      	movs	r1, #8
 80010c8:	485b      	ldr	r0, [pc, #364]	; (8001238 <main+0x1d4>)
 80010ca:	f003 fedf 	bl	8004e8c <HAL_TIM_PWM_Start>

  // start micros
  HAL_TIM_Base_Start_IT(&htim2);
 80010ce:	485b      	ldr	r0, [pc, #364]	; (800123c <main+0x1d8>)
 80010d0:	f003 fe20 	bl	8004d14 <HAL_TIM_Base_Start_IT>

  // start Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80010d4:	213c      	movs	r1, #60	; 0x3c
 80010d6:	485a      	ldr	r0, [pc, #360]	; (8001240 <main+0x1dc>)
 80010d8:	f004 f82e 	bl	8005138 <HAL_TIM_Encoder_Start>
  while (1)
  {

//***********General********************************************************************

	  VelocityRPM = Velocity() ; //rpm unit
 80010dc:	f001 f9c0 	bl	8002460 <Velocity>
 80010e0:	eef0 7a40 	vmov.f32	s15, s0
 80010e4:	4b57      	ldr	r3, [pc, #348]	; (8001244 <main+0x1e0>)
 80010e6:	edc3 7a00 	vstr	s15, [r3]
	  Degree = htim3.Instance->CNT * 360.0 / 2048.0 ; //Degree unit
 80010ea:	4b55      	ldr	r3, [pc, #340]	; (8001240 <main+0x1dc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f9b3 	bl	800045c <__aeabi_ui2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b53      	ldr	r3, [pc, #332]	; (8001248 <main+0x1e4>)
 80010fc:	f7ff fa28 	bl	8000550 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b4f      	ldr	r3, [pc, #316]	; (800124c <main+0x1e8>)
 800110e:	f7ff fb49 	bl	80007a4 <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fcc9 	bl	8000ab0 <__aeabi_d2f>
 800111e:	4603      	mov	r3, r0
 8001120:	4a4b      	ldr	r2, [pc, #300]	; (8001250 <main+0x1ec>)
 8001122:	6013      	str	r3, [r2, #0]
	  PWMgeneration() ; //Gen PWM
 8001124:	f001 f9f6 	bl	8002514 <PWMgeneration>
	  home = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8001128:	2101      	movs	r1, #1
 800112a:	484a      	ldr	r0, [pc, #296]	; (8001254 <main+0x1f0>)
 800112c:	f002 fc56 	bl	80039dc <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b48      	ldr	r3, [pc, #288]	; (8001258 <main+0x1f4>)
 8001136:	701a      	strb	r2, [r3, #0]
	  ButtonBuffer[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) ; // Read Blue button
 8001138:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113c:	4845      	ldr	r0, [pc, #276]	; (8001254 <main+0x1f0>)
 800113e:	f002 fc4d 	bl	80039dc <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b45      	ldr	r3, [pc, #276]	; (800125c <main+0x1f8>)
 8001148:	701a      	strb	r2, [r3, #0]
//**************************************************************************************
//**********Blue Button Push*********************
	  if (!ButtonBuffer[0] && ButtonBuffer[1])
 800114a:	4b44      	ldr	r3, [pc, #272]	; (800125c <main+0x1f8>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10b      	bne.n	800116a <main+0x106>
 8001152:	4b42      	ldr	r3, [pc, #264]	; (800125c <main+0x1f8>)
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <main+0x106>
	  {
		  EndEffWrite() ;
 800115a:	f000 fb4f 	bl	80017fc <EndEffWrite>
//		  x += 1 ;
//		  x = 1 ;
		  StartSetHome = 1 ; //Set home trigger
 800115e:	4b40      	ldr	r3, [pc, #256]	; (8001260 <main+0x1fc>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
		  SetHomeFlag = 0;
 8001164:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <main+0x200>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
	  }
	  ButtonBuffer[1] = ButtonBuffer[0] ;
 800116a:	4b3c      	ldr	r3, [pc, #240]	; (800125c <main+0x1f8>)
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b3b      	ldr	r3, [pc, #236]	; (800125c <main+0x1f8>)
 8001170:	705a      	strb	r2, [r3, #1]
//	  {
//		  EndEffWrite();
//	  }
//************************************************
//**********Set Home******************************
	  if (StartSetHome == 1)
 8001172:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <main+0x1fc>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <main+0x11a>
	  {
		  SetHome() ;
 800117a:	f000 fbe5 	bl	8001948 <SetHome>
	  }
//***********************************************
//**************PID******************************
	  if (micros() - TimestampPID > 1000)
 800117e:	f001 fa47 	bl	8002610 <micros>
 8001182:	4b39      	ldr	r3, [pc, #228]	; (8001268 <main+0x204>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	1a84      	subs	r4, r0, r2
 800118a:	eb61 0503 	sbc.w	r5, r1, r3
 800118e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	42ab      	cmp	r3, r5
 8001198:	bf08      	it	eq
 800119a:	42a2      	cmpeq	r2, r4
 800119c:	d21c      	bcs.n	80011d8 <main+0x174>
	  {
		  if (StartMoving || StartSetHome)
 800119e:	4b33      	ldr	r3, [pc, #204]	; (800126c <main+0x208>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d103      	bne.n	80011ae <main+0x14a>
 80011a6:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <main+0x1fc>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00d      	beq.n	80011ca <main+0x166>
		  {
			  P = p;
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <main+0x20c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a30      	ldr	r2, [pc, #192]	; (8001274 <main+0x210>)
 80011b4:	6013      	str	r3, [r2, #0]
			  I = i;
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <main+0x214>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a30      	ldr	r2, [pc, #192]	; (800127c <main+0x218>)
 80011bc:	6013      	str	r3, [r2, #0]
			  D = d;
 80011be:	4b30      	ldr	r3, [pc, #192]	; (8001280 <main+0x21c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a30      	ldr	r2, [pc, #192]	; (8001284 <main+0x220>)
 80011c4:	6013      	str	r3, [r2, #0]
			  PID() ;
 80011c6:	f001 f893 	bl	80022f0 <PID>
		  }
		  TimestampPID = micros() ;
 80011ca:	f001 fa21 	bl	8002610 <micros>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4925      	ldr	r1, [pc, #148]	; (8001268 <main+0x204>)
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]
	  }
//************************************************
//**************UART******************************
	  int16_t inputChar = UARTReadChar(&UART2);
 80011d8:	4815      	ldr	r0, [pc, #84]	; (8001230 <main+0x1cc>)
 80011da:	f000 fb8b 	bl	80018f4 <UARTReadChar>
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
//	  {
//		  request = 0;
//	  }

//********other**************
	  if (request == 0)
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <main+0x224>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	d102      	bne.n	80011f8 <main+0x194>
	  {
		  Direction = 2 ;
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <main+0x228>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	701a      	strb	r2, [r3, #0]
	  }
//****************************
	  if (StartMoving == 0)
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <main+0x208>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10e      	bne.n	800121e <main+0x1ba>
	  {
		  T = 0;
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <main+0x22c>)
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
		  TV = 0;
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <main+0x230>)
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
		  TA = 0;
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <main+0x234>)
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
		  ST = 0;
 8001218:	4b20      	ldr	r3, [pc, #128]	; (800129c <main+0x238>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
	  }
	  if (StartMoving == 1)
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <main+0x208>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	f47f af5a 	bne.w	80010dc <main+0x78>
	  {
		  Trajec();
 8001228:	f000 fc12 	bl	8001a50 <Trajec>
  {
 800122c:	e756      	b.n	80010dc <main+0x78>
 800122e:	bf00      	nop
 8001230:	200000a4 	.word	0x200000a4
 8001234:	20000394 	.word	0x20000394
 8001238:	200002f0 	.word	0x200002f0
 800123c:	20000344 	.word	0x20000344
 8001240:	2000020c 	.word	0x2000020c
 8001244:	20000390 	.word	0x20000390
 8001248:	40768000 	.word	0x40768000
 800124c:	40a00000 	.word	0x40a00000
 8001250:	20000110 	.word	0x20000110
 8001254:	40020800 	.word	0x40020800
 8001258:	200000e8 	.word	0x200000e8
 800125c:	20000118 	.word	0x20000118
 8001260:	200000dd 	.word	0x200000dd
 8001264:	200000dc 	.word	0x200000dc
 8001268:	200000c0 	.word	0x200000c0
 800126c:	200000d0 	.word	0x200000d0
 8001270:	20000198 	.word	0x20000198
 8001274:	20000004 	.word	0x20000004
 8001278:	200002c0 	.word	0x200002c0
 800127c:	20000008 	.word	0x20000008
 8001280:	20000338 	.word	0x20000338
 8001284:	200000cc 	.word	0x200000cc
 8001288:	200000fc 	.word	0x200000fc
 800128c:	20000114 	.word	0x20000114
 8001290:	20000208 	.word	0x20000208
 8001294:	20000340 	.word	0x20000340
 8001298:	20000258 	.word	0x20000258
 800129c:	200000d1 	.word	0x200000d1

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	; 0x50
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	2230      	movs	r2, #48	; 0x30
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f005 fd74 	bl	8006d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <SystemClock_Config+0xc8>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a26      	ldr	r2, [pc, #152]	; (8001368 <SystemClock_Config+0xc8>)
 80012ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <SystemClock_Config+0xc8>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <SystemClock_Config+0xcc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <SystemClock_Config+0xcc>)
 80012ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <SystemClock_Config+0xcc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001300:	2301      	movs	r3, #1
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001304:	2310      	movs	r3, #16
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001308:	2302      	movs	r3, #2
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800130c:	2300      	movs	r3, #0
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001310:	2308      	movs	r3, #8
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001314:	2364      	movs	r3, #100	; 0x64
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800131c:	2304      	movs	r3, #4
 800131e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	4618      	mov	r0, r3
 8001326:	f002 ffd7 	bl	80042d8 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001330:	f001 f988 	bl	8002644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001338:	2302      	movs	r3, #2
 800133a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2103      	movs	r1, #3
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fa39 	bl	80047c8 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800135c:	f001 f972 	bl	8002644 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3750      	adds	r7, #80	; 0x50
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <MX_I2C1_Init+0x54>)
 8001378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_I2C1_Init+0x50>)
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_I2C1_Init+0x58>)
 800137e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_I2C1_Init+0x50>)
 800138e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001392:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013ae:	f002 fb47 	bl	8003a40 <HAL_I2C_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b8:	f001 f944 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200001a0 	.word	0x200001a0
 80013c4:	40005400 	.word	0x40005400
 80013c8:	000186a0 	.word	0x000186a0

080013cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b096      	sub	sp, #88	; 0x58
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2220      	movs	r2, #32
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f005 fcc9 	bl	8006d9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140a:	4b44      	ldr	r3, [pc, #272]	; (800151c <MX_TIM1_Init+0x150>)
 800140c:	4a44      	ldr	r2, [pc, #272]	; (8001520 <MX_TIM1_Init+0x154>)
 800140e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001410:	4b42      	ldr	r3, [pc, #264]	; (800151c <MX_TIM1_Init+0x150>)
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <MX_TIM1_Init+0x150>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800141c:	4b3f      	ldr	r3, [pc, #252]	; (800151c <MX_TIM1_Init+0x150>)
 800141e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001422:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001424:	4b3d      	ldr	r3, [pc, #244]	; (800151c <MX_TIM1_Init+0x150>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142a:	4b3c      	ldr	r3, [pc, #240]	; (800151c <MX_TIM1_Init+0x150>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001430:	4b3a      	ldr	r3, [pc, #232]	; (800151c <MX_TIM1_Init+0x150>)
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001436:	4839      	ldr	r0, [pc, #228]	; (800151c <MX_TIM1_Init+0x150>)
 8001438:	f003 fbc2 	bl	8004bc0 <HAL_TIM_Base_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001442:	f001 f8ff 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800144c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001450:	4619      	mov	r1, r3
 8001452:	4832      	ldr	r0, [pc, #200]	; (800151c <MX_TIM1_Init+0x150>)
 8001454:	f003 ffc0 	bl	80053d8 <HAL_TIM_ConfigClockSource>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800145e:	f001 f8f1 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001462:	482e      	ldr	r0, [pc, #184]	; (800151c <MX_TIM1_Init+0x150>)
 8001464:	f003 fcb8 	bl	8004dd8 <HAL_TIM_PWM_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800146e:	f001 f8e9 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800147a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800147e:	4619      	mov	r1, r3
 8001480:	4826      	ldr	r0, [pc, #152]	; (800151c <MX_TIM1_Init+0x150>)
 8001482:	f004 fb3d 	bl	8005b00 <HAL_TIMEx_MasterConfigSynchronization>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800148c:	f001 f8da 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001490:	2360      	movs	r3, #96	; 0x60
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4819      	ldr	r0, [pc, #100]	; (800151c <MX_TIM1_Init+0x150>)
 80014b6:	f003 fecd 	bl	8005254 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014c0:	f001 f8c0 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	2204      	movs	r2, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4813      	ldr	r0, [pc, #76]	; (800151c <MX_TIM1_Init+0x150>)
 80014ce:	f003 fec1 	bl	8005254 <HAL_TIM_PWM_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80014d8:	f001 f8b4 	bl	8002644 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <MX_TIM1_Init+0x150>)
 8001500:	f004 fb6c 	bl	8005bdc <HAL_TIMEx_ConfigBreakDeadTime>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800150a:	f001 f89b 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800150e:	4803      	ldr	r0, [pc, #12]	; (800151c <MX_TIM1_Init+0x150>)
 8001510:	f001 f98c 	bl	800282c <HAL_TIM_MspPostInit>

}
 8001514:	bf00      	nop
 8001516:	3758      	adds	r7, #88	; 0x58
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200002f0 	.word	0x200002f0
 8001520:	40010000 	.word	0x40010000

08001524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <MX_TIM2_Init+0x94>)
 8001542:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001546:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_TIM2_Init+0x94>)
 800154a:	2263      	movs	r2, #99	; 0x63
 800154c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <MX_TIM2_Init+0x94>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MX_TIM2_Init+0x94>)
 8001556:	f04f 32ff 	mov.w	r2, #4294967295
 800155a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <MX_TIM2_Init+0x94>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_TIM2_Init+0x94>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001568:	4813      	ldr	r0, [pc, #76]	; (80015b8 <MX_TIM2_Init+0x94>)
 800156a:	f003 fb29 	bl	8004bc0 <HAL_TIM_Base_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001574:	f001 f866 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	4619      	mov	r1, r3
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <MX_TIM2_Init+0x94>)
 8001586:	f003 ff27 	bl	80053d8 <HAL_TIM_ConfigClockSource>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001590:	f001 f858 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_TIM2_Init+0x94>)
 80015a2:	f004 faad 	bl	8005b00 <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015ac:	f001 f84a 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000344 	.word	0x20000344

080015bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	2224      	movs	r2, #36	; 0x24
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 fbe6 	bl	8006d9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <MX_TIM3_Init+0xa0>)
 80015da:	4a21      	ldr	r2, [pc, #132]	; (8001660 <MX_TIM3_Init+0xa4>)
 80015dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_TIM3_Init+0xa0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_TIM3_Init+0xa0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_TIM3_Init+0xa0>)
 80015ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_TIM3_Init+0xa0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_TIM3_Init+0xa0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015fe:	2303      	movs	r3, #3
 8001600:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001606:	2301      	movs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001616:	2301      	movs	r3, #1
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4619      	mov	r1, r3
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <MX_TIM3_Init+0xa0>)
 800162a:	f003 fcdf 	bl	8004fec <HAL_TIM_Encoder_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001634:	f001 f806 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_TIM3_Init+0xa0>)
 8001646:	f004 fa5b 	bl	8005b00 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001650:	f000 fff8 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	; 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000020c 	.word	0x2000020c
 8001660:	40000400 	.word	0x40000400

08001664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <MX_USART2_UART_Init+0x50>)
 800166c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001670:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001688:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800168c:	220c      	movs	r2, #12
 800168e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800169e:	f004 faef 	bl	8005c80 <HAL_UART_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80016a8:	f000 ffcc 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000394 	.word	0x20000394
 80016b4:	40004400 	.word	0x40004400

080016b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_DMA_Init+0x4c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <MX_DMA_Init+0x4c>)
 80016c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <MX_DMA_Init+0x4c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	2010      	movs	r0, #16
 80016e0:	f001 fbbf 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016e4:	2010      	movs	r0, #16
 80016e6:	f001 fbd8 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2011      	movs	r0, #17
 80016f0:	f001 fbb7 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016f4:	2011      	movs	r0, #17
 80016f6:	f001 fbd0 	bl	8002e9a <HAL_NVIC_EnableIRQ>

}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a2b      	ldr	r2, [pc, #172]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_GPIO_Init+0xe8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <MX_GPIO_Init+0xe8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <MX_GPIO_Init+0xe8>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_GPIO_Init+0xe8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2120      	movs	r1, #32
 8001792:	4818      	ldr	r0, [pc, #96]	; (80017f4 <MX_GPIO_Init+0xec>)
 8001794:	f002 f93a 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	4812      	ldr	r0, [pc, #72]	; (80017f8 <MX_GPIO_Init+0xf0>)
 80017b0:	f001 ff90 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Home_Pin */
  GPIO_InitStruct.Pin = Home_Pin;
 80017b4:	2301      	movs	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Home_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	480c      	ldr	r0, [pc, #48]	; (80017f8 <MX_GPIO_Init+0xf0>)
 80017c8:	f001 ff84 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017cc:	2320      	movs	r3, #32
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4804      	ldr	r0, [pc, #16]	; (80017f4 <MX_GPIO_Init+0xec>)
 80017e4:	f001 ff76 	bl	80036d4 <HAL_GPIO_Init>

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020800 	.word	0x40020800

080017fc <EndEffWrite>:

/* USER CODE BEGIN 4 */
void EndEffWrite()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY)
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <EndEffWrite+0x58>)
 8001804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b20      	cmp	r3, #32
 800180c:	d11d      	bne.n	800184a <EndEffWrite+0x4e>
	{
		HAL_Delay(500);
 800180e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001812:	f001 fa27 	bl	8002c64 <HAL_Delay>
		uint8_t temp = 0x45;
 8001816:	2345      	movs	r3, #69	; 0x45
 8001818:	71bb      	strb	r3, [r7, #6]
		uint8_t add = 0x23;
 800181a:	2323      	movs	r3, #35	; 0x23
 800181c:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Master_Transmit(&hi2c1, add << 1, &temp, 1, 1000); //Write eff
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	b29b      	uxth	r3, r3
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	b299      	uxth	r1, r3
 8001826:	1dba      	adds	r2, r7, #6
 8001828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <EndEffWrite+0x58>)
 8001832:	f002 fa49 	bl	8003cc8 <HAL_I2C_Master_Transmit>
		x+=1;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <EndEffWrite+0x5c>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001840:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <EndEffWrite+0x5c>)
 8001846:	edc3 7a00 	vstr	s15, [r3]
//		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x23<<1, 0x45, 1);
	}

}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200001a0 	.word	0x200001a0
 8001858:	2000011c 	.word	0x2000011c

0800185c <UARTInit>:
//{
//
//}

void UARTInit(UARTStucrture *uart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <UARTInit+0x4c>)
 8001866:	88db      	ldrh	r3, [r3, #6]
 8001868:	4619      	mov	r1, r3
 800186a:	2001      	movs	r0, #1
 800186c:	f005 fa64 	bl	8006d38 <calloc>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <UARTInit+0x4c>)
 800187a:	889b      	ldrh	r3, [r3, #4]
 800187c:	4619      	mov	r1, r3
 800187e:	2001      	movs	r0, #1
 8001880:	f005 fa5a 	bl	8006d38 <calloc>
 8001884:	4603      	mov	r3, r0
 8001886:	461a      	mov	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	81da      	strh	r2, [r3, #14]
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200000a4 	.word	0x200000a4

080018ac <UARTResetStart>:
void UARTResetStart(UARTStucrture *uart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6919      	ldr	r1, [r3, #16]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	88db      	ldrh	r3, [r3, #6]
 80018c0:	461a      	mov	r2, r3
 80018c2:	f004 fa2a 	bl	8005d1a <HAL_UART_Receive_DMA>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	88db      	ldrh	r3, [r3, #6]
 80018da:	461a      	mov	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	1ad3      	subs	r3, r2, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 80018fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001900:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	8a9b      	ldrh	r3, [r3, #20]
 8001906:	461c      	mov	r4, r3
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ffe0 	bl	80018ce <UARTGetRxHead>
 800190e:	4603      	mov	r3, r0
 8001910:	429c      	cmp	r4, r3
 8001912:	d013      	beq.n	800193c <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	8a92      	ldrh	r2, [r2, #20]
 800191c:	4413      	add	r3, r2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	8a9b      	ldrh	r3, [r3, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	88d2      	ldrh	r2, [r2, #6]
 800192c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001930:	fb02 f201 	mul.w	r2, r2, r1
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	b29a      	uxth	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 800193c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bd90      	pop	{r4, r7, pc}

08001948 <SetHome>:
		result = ~(((Start<<4)|Mode)+Data);
	}
	return result;
}
void SetHome()
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	af00      	add	r7, sp, #0
	HomeSignal[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) ; //Read set home
 800194c:	2101      	movs	r1, #1
 800194e:	4837      	ldr	r0, [pc, #220]	; (8001a2c <SetHome+0xe4>)
 8001950:	f002 f844 	bl	80039dc <HAL_GPIO_ReadPin>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <SetHome+0xe8>)
 800195a:	701a      	strb	r2, [r3, #0]
	sum = HomeSignal[0] + HomeSignal[1]+ HomeSignal[2]+ HomeSignal[3]+ HomeSignal[4]+ HomeSignal[5]+ HomeSignal[6]+ HomeSignal[7];
 800195c:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <SetHome+0xe8>)
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <SetHome+0xe8>)
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	4413      	add	r3, r2
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <SetHome+0xe8>)
 800196a:	789b      	ldrb	r3, [r3, #2]
 800196c:	4413      	add	r3, r2
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <SetHome+0xe8>)
 8001972:	78db      	ldrb	r3, [r3, #3]
 8001974:	4413      	add	r3, r2
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <SetHome+0xe8>)
 800197a:	791b      	ldrb	r3, [r3, #4]
 800197c:	4413      	add	r3, r2
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <SetHome+0xe8>)
 8001982:	795b      	ldrb	r3, [r3, #5]
 8001984:	4413      	add	r3, r2
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <SetHome+0xe8>)
 800198a:	799b      	ldrb	r3, [r3, #6]
 800198c:	4413      	add	r3, r2
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <SetHome+0xe8>)
 8001992:	79db      	ldrb	r3, [r3, #7]
 8001994:	4413      	add	r3, r2
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <SetHome+0xec>)
 800199a:	701a      	strb	r2, [r3, #0]

	if (SetHomeFlag == 0)
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <SetHome+0xf0>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d110      	bne.n	80019c6 <SetHome+0x7e>
	{
		request = 5;
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <SetHome+0xf4>)
 80019a6:	4a26      	ldr	r2, [pc, #152]	; (8001a40 <SetHome+0xf8>)
 80019a8:	601a      	str	r2, [r3, #0]
		if (sum > 0)
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <SetHome+0xec>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <SetHome+0x7e>
		{
			SetHomeFlag = 1;
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <SetHome+0xf0>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
			SetHomeTimeStamp = micros();
 80019b8:	f000 fe2a 	bl	8002610 <micros>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4920      	ldr	r1, [pc, #128]	; (8001a44 <SetHome+0xfc>)
 80019c2:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}
	if (SetHomeFlag == 1)
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <SetHome+0xf0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d115      	bne.n	80019fa <SetHome+0xb2>
	{
		request = 0;
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <SetHome+0xf4>)
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
		if (micros()-SetHomeTimeStamp > 1000000)
 80019d6:	f000 fe1b 	bl	8002610 <micros>
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <SetHome+0xfc>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	1a84      	subs	r4, r0, r2
 80019e2:	eb61 0503 	sbc.w	r5, r1, r3
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <SetHome+0x100>)
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	42ab      	cmp	r3, r5
 80019ee:	bf08      	it	eq
 80019f0:	42a2      	cmpeq	r2, r4
 80019f2:	d202      	bcs.n	80019fa <SetHome+0xb2>
		{
			SetHomeFlag = 2;
 80019f4:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <SetHome+0xf0>)
 80019f6:	2202      	movs	r2, #2
 80019f8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (SetHomeFlag == 2)
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <SetHome+0xf0>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d112      	bne.n	8001a28 <SetHome+0xe0>
	{
		request = -0.5;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <SetHome+0xf4>)
 8001a04:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001a08:	601a      	str	r2, [r3, #0]
		if (sum > 0)
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <SetHome+0xec>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00a      	beq.n	8001a28 <SetHome+0xe0>
		{
			request = 0;
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <SetHome+0xf4>)
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
			htim3.Instance->CNT = 0;
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <SetHome+0x104>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
			SetHomeFlag = 3;
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <SetHome+0xf0>)
 8001a24:	2203      	movs	r2, #3
 8001a26:	701a      	strb	r2, [r3, #0]
		}
	}



}
 8001a28:	bf00      	nop
 8001a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	200000d4 	.word	0x200000d4
 8001a34:	200001f4 	.word	0x200001f4
 8001a38:	200000dc 	.word	0x200000dc
 8001a3c:	200000fc 	.word	0x200000fc
 8001a40:	40a00000 	.word	0x40a00000
 8001a44:	200000e0 	.word	0x200000e0
 8001a48:	000f4240 	.word	0x000f4240
 8001a4c:	2000020c 	.word	0x2000020c

08001a50 <Trajec>:


void Trajec()
{
 8001a50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a54:	b088      	sub	sp, #32
 8001a56:	af00      	add	r7, sp, #0
	float Vmax = 10 ; //rpm
 8001a58:	4bbb      	ldr	r3, [pc, #748]	; (8001d48 <Trajec+0x2f8>)
 8001a5a:	61fb      	str	r3, [r7, #28]
	Vmax = Vmax * 0.10472 ; //rad per sec
 8001a5c:	69f8      	ldr	r0, [r7, #28]
 8001a5e:	f7fe fd1f 	bl	80004a0 <__aeabi_f2d>
 8001a62:	a3ad      	add	r3, pc, #692	; (adr r3, 8001d18 <Trajec+0x2c8>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fd72 	bl	8000550 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff f81c 	bl	8000ab0 <__aeabi_d2f>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	61fb      	str	r3, [r7, #28]
	float Amax = 0.5 ;  //rad per sec square
 8001a7c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001a80:	61bb      	str	r3, [r7, #24]
	if (ST == 0)
 8001a82:	4bb2      	ldr	r3, [pc, #712]	; (8001d4c <Trajec+0x2fc>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d129      	bne.n	8001ade <Trajec+0x8e>
	{
		StartTime = micros() ;
 8001a8a:	f000 fdc1 	bl	8002610 <micros>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff f923 	bl	8000ce0 <__aeabi_ul2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4aac      	ldr	r2, [pc, #688]	; (8001d50 <Trajec+0x300>)
 8001a9e:	6013      	str	r3, [r2, #0]
		ST = 1 ;
 8001aa0:	4baa      	ldr	r3, [pc, #680]	; (8001d4c <Trajec+0x2fc>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
		StartPos = Degree * 3.14159 / 180.0 ; //rad
 8001aa6:	4bab      	ldr	r3, [pc, #684]	; (8001d54 <Trajec+0x304>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fcf8 	bl	80004a0 <__aeabi_f2d>
 8001ab0:	a39b      	add	r3, pc, #620	; (adr r3, 8001d20 <Trajec+0x2d0>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	f7fe fd4b 	bl	8000550 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4ba4      	ldr	r3, [pc, #656]	; (8001d58 <Trajec+0x308>)
 8001ac8:	f7fe fe6c 	bl	80007a4 <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7fe ffec 	bl	8000ab0 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4aa0      	ldr	r2, [pc, #640]	; (8001d5c <Trajec+0x30c>)
 8001adc:	6013      	str	r3, [r2, #0]
	}
	tau = (micros() - StartTime) / 1000000 ; //sec
 8001ade:	f000 fd97 	bl	8002610 <micros>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f8f9 	bl	8000ce0 <__aeabi_ul2f>
 8001aee:	ee07 0a10 	vmov	s14, r0
 8001af2:	4b97      	ldr	r3, [pc, #604]	; (8001d50 <Trajec+0x300>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001afc:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001d60 <Trajec+0x310>
 8001b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b04:	4b97      	ldr	r3, [pc, #604]	; (8001d64 <Trajec+0x314>)
 8001b06:	edc3 7a00 	vstr	s15, [r3]

	Qi = StartPos ;
 8001b0a:	4b94      	ldr	r3, [pc, #592]	; (8001d5c <Trajec+0x30c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a96      	ldr	r2, [pc, #600]	; (8001d68 <Trajec+0x318>)
 8001b10:	6013      	str	r3, [r2, #0]
	Qf = FinalPos * 3.14159 / 180.0 ;
 8001b12:	4b96      	ldr	r3, [pc, #600]	; (8001d6c <Trajec+0x31c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fcc2 	bl	80004a0 <__aeabi_f2d>
 8001b1c:	a380      	add	r3, pc, #512	; (adr r3, 8001d20 <Trajec+0x2d0>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd15 	bl	8000550 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b89      	ldr	r3, [pc, #548]	; (8001d58 <Trajec+0x308>)
 8001b34:	f7fe fe36 	bl	80007a4 <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7fe ffb6 	bl	8000ab0 <__aeabi_d2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a8a      	ldr	r2, [pc, #552]	; (8001d70 <Trajec+0x320>)
 8001b48:	6013      	str	r3, [r2, #0]

	if (Qf - Qi > 3.14159265)
 8001b4a:	4b89      	ldr	r3, [pc, #548]	; (8001d70 <Trajec+0x320>)
 8001b4c:	ed93 7a00 	vldr	s14, [r3]
 8001b50:	4b85      	ldr	r3, [pc, #532]	; (8001d68 <Trajec+0x318>)
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5a:	ee17 0a90 	vmov	r0, s15
 8001b5e:	f7fe fc9f 	bl	80004a0 <__aeabi_f2d>
 8001b62:	a371      	add	r3, pc, #452	; (adr r3, 8001d28 <Trajec+0x2d8>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe ff82 	bl	8000a70 <__aeabi_dcmpgt>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d012      	beq.n	8001b98 <Trajec+0x148>
	{
		Qi += 2*3.14159265;
 8001b72:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <Trajec+0x318>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fc92 	bl	80004a0 <__aeabi_f2d>
 8001b7c:	a36c      	add	r3, pc, #432	; (adr r3, 8001d30 <Trajec+0x2e0>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fb2f 	bl	80001e4 <__adddf3>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7fe ff8f 	bl	8000ab0 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a74      	ldr	r2, [pc, #464]	; (8001d68 <Trajec+0x318>)
 8001b96:	6013      	str	r3, [r2, #0]
	}
	if (Qf - Qi < -3.14159265)
 8001b98:	4b75      	ldr	r3, [pc, #468]	; (8001d70 <Trajec+0x320>)
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	4b72      	ldr	r3, [pc, #456]	; (8001d68 <Trajec+0x318>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba8:	ee17 0a90 	vmov	r0, s15
 8001bac:	f7fe fc78 	bl	80004a0 <__aeabi_f2d>
 8001bb0:	a361      	add	r3, pc, #388	; (adr r3, 8001d38 <Trajec+0x2e8>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	f7fe ff3d 	bl	8000a34 <__aeabi_dcmplt>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d012      	beq.n	8001be6 <Trajec+0x196>
	{
		Qf += 2*3.14159265;
 8001bc0:	4b6b      	ldr	r3, [pc, #428]	; (8001d70 <Trajec+0x320>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fc6b 	bl	80004a0 <__aeabi_f2d>
 8001bca:	a359      	add	r3, pc, #356	; (adr r3, 8001d30 <Trajec+0x2e0>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7fe fb08 	bl	80001e4 <__adddf3>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7fe ff68 	bl	8000ab0 <__aeabi_d2f>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a63      	ldr	r2, [pc, #396]	; (8001d70 <Trajec+0x320>)
 8001be4:	6013      	str	r3, [r2, #0]
	}
	TA1= (40.0 * sqrt(3.0))*(Qf - Qi);
 8001be6:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <Trajec+0x320>)
 8001be8:	ed93 7a00 	vldr	s14, [r3]
 8001bec:	4b5e      	ldr	r3, [pc, #376]	; (8001d68 <Trajec+0x318>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf6:	ee17 0a90 	vmov	r0, s15
 8001bfa:	f7fe fc51 	bl	80004a0 <__aeabi_f2d>
 8001bfe:	a350      	add	r3, pc, #320	; (adr r3, 8001d40 <Trajec+0x2f0>)
 8001c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c04:	f7fe fca4 	bl	8000550 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe ff4e 	bl	8000ab0 <__aeabi_d2f>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a57      	ldr	r2, [pc, #348]	; (8001d74 <Trajec+0x324>)
 8001c18:	6013      	str	r3, [r2, #0]
	TA2 = TA1/(3.0*Amax) ;
 8001c1a:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <Trajec+0x324>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc3e 	bl	80004a0 <__aeabi_f2d>
 8001c24:	4680      	mov	r8, r0
 8001c26:	4689      	mov	r9, r1
 8001c28:	69b8      	ldr	r0, [r7, #24]
 8001c2a:	f7fe fc39 	bl	80004a0 <__aeabi_f2d>
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <Trajec+0x328>)
 8001c34:	f7fe fc8c 	bl	8000550 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4640      	mov	r0, r8
 8001c3e:	4649      	mov	r1, r9
 8001c40:	f7fe fdb0 	bl	80007a4 <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ff30 	bl	8000ab0 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a4a      	ldr	r2, [pc, #296]	; (8001d7c <Trajec+0x32c>)
 8001c54:	6013      	str	r3, [r2, #0]
	if (TA2 >= 0)
 8001c56:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <Trajec+0x32c>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c64:	db04      	blt.n	8001c70 <Trajec+0x220>
	{
		TA3 = TA2;
 8001c66:	4b45      	ldr	r3, [pc, #276]	; (8001d7c <Trajec+0x32c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a45      	ldr	r2, [pc, #276]	; (8001d80 <Trajec+0x330>)
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00c      	b.n	8001c8a <Trajec+0x23a>
	}
	else
	{
		TA3 = TA2 - (2*TA2);
 8001c70:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <Trajec+0x32c>)
 8001c72:	ed93 7a00 	vldr	s14, [r3]
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <Trajec+0x32c>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c84:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <Trajec+0x330>)
 8001c86:	edc3 7a00 	vstr	s15, [r3]
	}
	TA = sqrt(TA3) / 2.0 ;
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <Trajec+0x330>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc06 	bl	80004a0 <__aeabi_f2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	ec43 2b10 	vmov	d0, r2, r3
 8001c9c:	f005 f90e 	bl	8006ebc <sqrt>
 8001ca0:	ec51 0b10 	vmov	r0, r1, d0
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cac:	f7fe fd7a 	bl	80007a4 <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7fe fefa 	bl	8000ab0 <__aeabi_d2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4a31      	ldr	r2, [pc, #196]	; (8001d84 <Trajec+0x334>)
 8001cc0:	6013      	str	r3, [r2, #0]

	TV1 = (15*Qf - 15*Qi)/(8*Vmax);
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <Trajec+0x320>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001ccc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cd0:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <Trajec+0x318>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8001cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cde:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ce2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ce6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001cea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <Trajec+0x338>)
 8001cf4:	edc3 7a00 	vstr	s15, [r3]
	if (TV1 >= 0)
 8001cf8:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <Trajec+0x338>)
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	db43      	blt.n	8001d90 <Trajec+0x340>
	{
		TV = TV1;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <Trajec+0x338>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <Trajec+0x33c>)
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e04b      	b.n	8001daa <Trajec+0x35a>
 8001d12:	bf00      	nop
 8001d14:	f3af 8000 	nop.w
 8001d18:	0f3cb3e5 	.word	0x0f3cb3e5
 8001d1c:	3fbaceee 	.word	0x3fbaceee
 8001d20:	f01b866e 	.word	0xf01b866e
 8001d24:	400921f9 	.word	0x400921f9
 8001d28:	53c8d4f1 	.word	0x53c8d4f1
 8001d2c:	400921fb 	.word	0x400921fb
 8001d30:	53c8d4f1 	.word	0x53c8d4f1
 8001d34:	401921fb 	.word	0x401921fb
 8001d38:	53c8d4f1 	.word	0x53c8d4f1
 8001d3c:	c00921fb 	.word	0xc00921fb
 8001d40:	d1372fea 	.word	0xd1372fea
 8001d44:	4051520c 	.word	0x4051520c
 8001d48:	41200000 	.word	0x41200000
 8001d4c:	200000d1 	.word	0x200000d1
 8001d50:	2000019c 	.word	0x2000019c
 8001d54:	20000110 	.word	0x20000110
 8001d58:	40668000 	.word	0x40668000
 8001d5c:	200001fc 	.word	0x200001fc
 8001d60:	49742400 	.word	0x49742400
 8001d64:	200002e4 	.word	0x200002e4
 8001d68:	200002e0 	.word	0x200002e0
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	200002ec 	.word	0x200002ec
 8001d74:	20000204 	.word	0x20000204
 8001d78:	40080000 	.word	0x40080000
 8001d7c:	2000038c 	.word	0x2000038c
 8001d80:	200003d8 	.word	0x200003d8
 8001d84:	20000258 	.word	0x20000258
 8001d88:	200002e8 	.word	0x200002e8
 8001d8c:	20000340 	.word	0x20000340
	}
	else
	{
		TV = TV1 - (2*TV1);
 8001d90:	4bd7      	ldr	r3, [pc, #860]	; (80020f0 <Trajec+0x6a0>)
 8001d92:	ed93 7a00 	vldr	s14, [r3]
 8001d96:	4bd6      	ldr	r3, [pc, #856]	; (80020f0 <Trajec+0x6a0>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da4:	4bd3      	ldr	r3, [pc, #844]	; (80020f4 <Trajec+0x6a4>)
 8001da6:	edc3 7a00 	vstr	s15, [r3]
	}

	if (TV > TA)
 8001daa:	4bd2      	ldr	r3, [pc, #840]	; (80020f4 <Trajec+0x6a4>)
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	4bd1      	ldr	r3, [pc, #836]	; (80020f8 <Trajec+0x6a8>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	dd03      	ble.n	8001dc8 <Trajec+0x378>
	{
		T = TV ;
 8001dc0:	4bcc      	ldr	r3, [pc, #816]	; (80020f4 <Trajec+0x6a4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4acd      	ldr	r2, [pc, #820]	; (80020fc <Trajec+0x6ac>)
 8001dc6:	6013      	str	r3, [r2, #0]
	}
	if (TV <= TA)
 8001dc8:	4bca      	ldr	r3, [pc, #808]	; (80020f4 <Trajec+0x6a4>)
 8001dca:	ed93 7a00 	vldr	s14, [r3]
 8001dce:	4bca      	ldr	r3, [pc, #808]	; (80020f8 <Trajec+0x6a8>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	d803      	bhi.n	8001de6 <Trajec+0x396>
	{
		T = TA ;
 8001dde:	4bc6      	ldr	r3, [pc, #792]	; (80020f8 <Trajec+0x6a8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4ac6      	ldr	r2, [pc, #792]	; (80020fc <Trajec+0x6ac>)
 8001de4:	6013      	str	r3, [r2, #0]
	}
	float a0 = Qi ;
 8001de6:	4bc6      	ldr	r3, [pc, #792]	; (8002100 <Trajec+0x6b0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	617b      	str	r3, [r7, #20]
	float a1 = 0 ;
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
	float a2 = 0 ;
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
	float a3 = (1 / (2 * (T*T*T))) * (20 * (Qf-Qi)) ;
 8001df8:	4bc0      	ldr	r3, [pc, #768]	; (80020fc <Trajec+0x6ac>)
 8001dfa:	ed93 7a00 	vldr	s14, [r3]
 8001dfe:	4bbf      	ldr	r3, [pc, #764]	; (80020fc <Trajec+0x6ac>)
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e08:	4bbc      	ldr	r3, [pc, #752]	; (80020fc <Trajec+0x6ac>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e1e:	4bb9      	ldr	r3, [pc, #740]	; (8002104 <Trajec+0x6b4>)
 8001e20:	edd3 6a00 	vldr	s13, [r3]
 8001e24:	4bb6      	ldr	r3, [pc, #728]	; (8002100 <Trajec+0x6b0>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e2e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001e32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3a:	edc7 7a02 	vstr	s15, [r7, #8]
	float a4 = (1 / (2 * (T*T*T*T))) * (30 * (Qi-Qf)) ;
 8001e3e:	4baf      	ldr	r3, [pc, #700]	; (80020fc <Trajec+0x6ac>)
 8001e40:	ed93 7a00 	vldr	s14, [r3]
 8001e44:	4bad      	ldr	r3, [pc, #692]	; (80020fc <Trajec+0x6ac>)
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4e:	4bab      	ldr	r3, [pc, #684]	; (80020fc <Trajec+0x6ac>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e58:	4ba8      	ldr	r3, [pc, #672]	; (80020fc <Trajec+0x6ac>)
 8001e5a:	edd3 7a00 	vldr	s15, [r3]
 8001e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e6e:	4ba4      	ldr	r3, [pc, #656]	; (8002100 <Trajec+0x6b0>)
 8001e70:	edd3 6a00 	vldr	s13, [r3]
 8001e74:	4ba3      	ldr	r3, [pc, #652]	; (8002104 <Trajec+0x6b4>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e7e:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001e82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	edc7 7a01 	vstr	s15, [r7, #4]
	float a5 = (1 / (2 * (T*T*T*T*T))) * (12 * (Qf-Qi)) ;
 8001e8e:	4b9b      	ldr	r3, [pc, #620]	; (80020fc <Trajec+0x6ac>)
 8001e90:	ed93 7a00 	vldr	s14, [r3]
 8001e94:	4b99      	ldr	r3, [pc, #612]	; (80020fc <Trajec+0x6ac>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e9e:	4b97      	ldr	r3, [pc, #604]	; (80020fc <Trajec+0x6ac>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea8:	4b94      	ldr	r3, [pc, #592]	; (80020fc <Trajec+0x6ac>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb2:	4b92      	ldr	r3, [pc, #584]	; (80020fc <Trajec+0x6ac>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ec8:	4b8e      	ldr	r3, [pc, #568]	; (8002104 <Trajec+0x6b4>)
 8001eca:	edd3 6a00 	vldr	s13, [r3]
 8001ece:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <Trajec+0x6b0>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ed8:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8001edc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee4:	edc7 7a00 	vstr	s15, [r7]

	if (micros() - StartTime < T*1000000)
 8001ee8:	f000 fb92 	bl	8002610 <micros>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe fef4 	bl	8000ce0 <__aeabi_ul2f>
 8001ef8:	ee07 0a10 	vmov	s14, r0
 8001efc:	4b82      	ldr	r3, [pc, #520]	; (8002108 <Trajec+0x6b8>)
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f06:	4b7d      	ldr	r3, [pc, #500]	; (80020fc <Trajec+0x6ac>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800210c <Trajec+0x6bc>
 8001f10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	f140 8158 	bpl.w	80021d0 <Trajec+0x780>
	{
		if (micros() - Trajtimestamp > 1500)
 8001f20:	f000 fb76 	bl	8002610 <micros>
 8001f24:	4b7a      	ldr	r3, [pc, #488]	; (8002110 <Trajec+0x6c0>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	1a84      	subs	r4, r0, r2
 8001f2c:	eb61 0503 	sbc.w	r5, r1, r3
 8001f30:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	42ab      	cmp	r3, r5
 8001f3a:	bf08      	it	eq
 8001f3c:	42a2      	cmpeq	r2, r4
 8001f3e:	f080 8147 	bcs.w	80021d0 <Trajec+0x780>
		{
			position = a0 + a1*tau + a2*tau*tau + a3*tau*tau*tau + a4*tau*tau*tau*tau + a5*tau*tau*tau*tau*tau; //rad
 8001f42:	4b74      	ldr	r3, [pc, #464]	; (8002114 <Trajec+0x6c4>)
 8001f44:	ed93 7a00 	vldr	s14, [r3]
 8001f48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f58:	4b6e      	ldr	r3, [pc, #440]	; (8002114 <Trajec+0x6c4>)
 8001f5a:	edd3 6a00 	vldr	s13, [r3]
 8001f5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f66:	4b6b      	ldr	r3, [pc, #428]	; (8002114 <Trajec+0x6c4>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f74:	4b67      	ldr	r3, [pc, #412]	; (8002114 <Trajec+0x6c4>)
 8001f76:	edd3 6a00 	vldr	s13, [r3]
 8001f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f82:	4b64      	ldr	r3, [pc, #400]	; (8002114 <Trajec+0x6c4>)
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f8c:	4b61      	ldr	r3, [pc, #388]	; (8002114 <Trajec+0x6c4>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f9a:	4b5e      	ldr	r3, [pc, #376]	; (8002114 <Trajec+0x6c4>)
 8001f9c:	edd3 6a00 	vldr	s13, [r3]
 8001fa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fa8:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <Trajec+0x6c4>)
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fb2:	4b58      	ldr	r3, [pc, #352]	; (8002114 <Trajec+0x6c4>)
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fbc:	4b55      	ldr	r3, [pc, #340]	; (8002114 <Trajec+0x6c4>)
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fca:	4b52      	ldr	r3, [pc, #328]	; (8002114 <Trajec+0x6c4>)
 8001fcc:	edd3 6a00 	vldr	s13, [r3]
 8001fd0:	edd7 7a00 	vldr	s15, [r7]
 8001fd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <Trajec+0x6c4>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fe2:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <Trajec+0x6c4>)
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fec:	4b49      	ldr	r3, [pc, #292]	; (8002114 <Trajec+0x6c4>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <Trajec+0x6c4>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002004:	4b44      	ldr	r3, [pc, #272]	; (8002118 <Trajec+0x6c8>)
 8002006:	edc3 7a00 	vstr	s15, [r3]
			velocity = a1 + 2*a2*tau + 3*a3*tau*tau + 4*a4*tau*tau*tau + 5*a5*tau*tau*tau*tau; //rad/s
 800200a:	edd7 7a03 	vldr	s15, [r7, #12]
 800200e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002012:	4b40      	ldr	r3, [pc, #256]	; (8002114 <Trajec+0x6c4>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800201c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002024:	edd7 7a02 	vldr	s15, [r7, #8]
 8002028:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800202c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002030:	4b38      	ldr	r3, [pc, #224]	; (8002114 <Trajec+0x6c4>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800203a:	4b36      	ldr	r3, [pc, #216]	; (8002114 <Trajec+0x6c4>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002048:	edd7 7a01 	vldr	s15, [r7, #4]
 800204c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002050:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002054:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <Trajec+0x6c4>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <Trajec+0x6c4>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002068:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <Trajec+0x6c4>)
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002072:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002076:	edd7 7a00 	vldr	s15, [r7]
 800207a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800207e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <Trajec+0x6c4>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <Trajec+0x6c4>)
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002096:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <Trajec+0x6c4>)
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <Trajec+0x6c4>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <Trajec+0x6cc>)
 80020b0:	edc3 7a00 	vstr	s15, [r3]
			acceleration = 2*a2 + 6*a3*tau + 12*a4*tau*tau + 20*a5*tau*tau*tau; //rad per secsquare
 80020b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80020c0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80020c4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <Trajec+0x6c4>)
 80020ca:	edd3 7a00 	vldr	s15, [r3]
 80020ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020da:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80020de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <Trajec+0x6c4>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020ec:	e018      	b.n	8002120 <Trajec+0x6d0>
 80020ee:	bf00      	nop
 80020f0:	200002e8 	.word	0x200002e8
 80020f4:	20000340 	.word	0x20000340
 80020f8:	20000258 	.word	0x20000258
 80020fc:	20000208 	.word	0x20000208
 8002100:	200002e0 	.word	0x200002e0
 8002104:	200002ec 	.word	0x200002ec
 8002108:	2000019c 	.word	0x2000019c
 800210c:	49742400 	.word	0x49742400
 8002110:	200002c8 	.word	0x200002c8
 8002114:	200002e4 	.word	0x200002e4
 8002118:	200001f8 	.word	0x200001f8
 800211c:	200002d8 	.word	0x200002d8
 8002120:	4b43      	ldr	r3, [pc, #268]	; (8002230 <Trajec+0x7e0>)
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800212e:	edd7 7a00 	vldr	s15, [r7]
 8002132:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002136:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800213a:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <Trajec+0x7e0>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002144:	4b3a      	ldr	r3, [pc, #232]	; (8002230 <Trajec+0x7e0>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800214e:	4b38      	ldr	r3, [pc, #224]	; (8002230 <Trajec+0x7e0>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215c:	4b35      	ldr	r3, [pc, #212]	; (8002234 <Trajec+0x7e4>)
 800215e:	edc3 7a00 	vstr	s15, [r3]

			position = position * 180 / 3.1415 ; //degree
 8002162:	4b35      	ldr	r3, [pc, #212]	; (8002238 <Trajec+0x7e8>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800223c <Trajec+0x7ec>
 800216c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002170:	ee17 0a90 	vmov	r0, s15
 8002174:	f7fe f994 	bl	80004a0 <__aeabi_f2d>
 8002178:	a329      	add	r3, pc, #164	; (adr r3, 8002220 <Trajec+0x7d0>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe fb11 	bl	80007a4 <__aeabi_ddiv>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fc91 	bl	8000ab0 <__aeabi_d2f>
 800218e:	4603      	mov	r3, r0
 8002190:	4a29      	ldr	r2, [pc, #164]	; (8002238 <Trajec+0x7e8>)
 8002192:	6013      	str	r3, [r2, #0]
			velocity = velocity * 9.549297; //rpm
 8002194:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <Trajec+0x7f0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f981 	bl	80004a0 <__aeabi_f2d>
 800219e:	a322      	add	r3, pc, #136	; (adr r3, 8002228 <Trajec+0x7d8>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe f9d4 	bl	8000550 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe fc7e 	bl	8000ab0 <__aeabi_d2f>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a22      	ldr	r2, [pc, #136]	; (8002240 <Trajec+0x7f0>)
 80021b8:	6013      	str	r3, [r2, #0]
			Trajtimestamp = micros() ;
 80021ba:	f000 fa29 	bl	8002610 <micros>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4920      	ldr	r1, [pc, #128]	; (8002244 <Trajec+0x7f4>)
 80021c4:	e9c1 2300 	strd	r2, r3, [r1]
			request = velocity ;
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <Trajec+0x7f0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1e      	ldr	r2, [pc, #120]	; (8002248 <Trajec+0x7f8>)
 80021ce:	6013      	str	r3, [r2, #0]
		}
	}
	if (micros() - StartTime > (T*1000000)+500000)
 80021d0:	f000 fa1e 	bl	8002610 <micros>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe fd80 	bl	8000ce0 <__aeabi_ul2f>
 80021e0:	ee07 0a10 	vmov	s14, r0
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <Trajec+0x7fc>)
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <Trajec+0x800>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002254 <Trajec+0x804>
 80021f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021fc:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002258 <Trajec+0x808>
 8002200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	dc00      	bgt.n	8002210 <Trajec+0x7c0>
	{
		StartMoving = 0;
	}

}
 800220e:	e002      	b.n	8002216 <Trajec+0x7c6>
		StartMoving = 0;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <Trajec+0x80c>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
}
 8002216:	bf00      	nop
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002220:	c083126f 	.word	0xc083126f
 8002224:	400921ca 	.word	0x400921ca
 8002228:	74d594f2 	.word	0x74d594f2
 800222c:	4023193d 	.word	0x4023193d
 8002230:	200002e4 	.word	0x200002e4
 8002234:	200003dc 	.word	0x200003dc
 8002238:	200001f8 	.word	0x200001f8
 800223c:	43340000 	.word	0x43340000
 8002240:	200002d8 	.word	0x200002d8
 8002244:	200002c8 	.word	0x200002c8
 8002248:	200000fc 	.word	0x200000fc
 800224c:	2000019c 	.word	0x2000019c
 8002250:	20000208 	.word	0x20000208
 8002254:	49742400 	.word	0x49742400
 8002258:	48f42400 	.word	0x48f42400
 800225c:	200000d0 	.word	0x200000d0

08002260 <PIDinit>:

void PIDinit()
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
	preErr1 = 0 ;
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <PIDinit+0x64>)
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
	preErr2 = 0 ;
 800226c:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <PIDinit+0x68>)
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
	PreviousPWM = 0 ;
 8002274:	4b15      	ldr	r3, [pc, #84]	; (80022cc <PIDinit+0x6c>)
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
	PWMPercent = 0 ;
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <PIDinit+0x70>)
 800227e:	2200      	movs	r2, #0
 8002280:	801a      	strh	r2, [r3, #0]
	Propotional = 0 ;
 8002282:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <PIDinit+0x74>)
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
	Integrator = 0 ;
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <PIDinit+0x78>)
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
	Differentiator = 0 ;
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <PIDinit+0x7c>)
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
	P = 0 ;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <PIDinit+0x80>)
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
	I = 0 ;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <PIDinit+0x84>)
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
	D = 0 ;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <PIDinit+0x88>)
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
	Tau = 0 ;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <PIDinit+0x8c>)
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	200002d4 	.word	0x200002d4
 80022c8:	20000200 	.word	0x20000200
 80022cc:	200000c8 	.word	0x200000c8
 80022d0:	20000100 	.word	0x20000100
 80022d4:	200003e0 	.word	0x200003e0
 80022d8:	20000254 	.word	0x20000254
 80022dc:	200002dc 	.word	0x200002dc
 80022e0:	20000004 	.word	0x20000004
 80022e4:	20000008 	.word	0x20000008
 80022e8:	200000cc 	.word	0x200000cc
 80022ec:	2000033c 	.word	0x2000033c

080022f0 <PID>:

void PID()
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
	float req,Vel ;
	if (request < 0)
 80022f6:	4b4e      	ldr	r3, [pc, #312]	; (8002430 <PID+0x140>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002304:	d510      	bpl.n	8002328 <PID+0x38>
	{
		req = - request ;
 8002306:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <PID+0x140>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	eef1 7a67 	vneg.f32	s15, s15
 8002310:	edc7 7a03 	vstr	s15, [r7, #12]
		Vel = - VelocityRPM ;
 8002314:	4b47      	ldr	r3, [pc, #284]	; (8002434 <PID+0x144>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	eef1 7a67 	vneg.f32	s15, s15
 800231e:	edc7 7a02 	vstr	s15, [r7, #8]
		Direction = 1 ;
 8002322:	4b45      	ldr	r3, [pc, #276]	; (8002438 <PID+0x148>)
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
	}
	if (request > 0)
 8002328:	4b41      	ldr	r3, [pc, #260]	; (8002430 <PID+0x140>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	dd08      	ble.n	800234a <PID+0x5a>
	{
		req = request ;
 8002338:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <PID+0x140>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
		Vel = VelocityRPM ;
 800233e:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <PID+0x144>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60bb      	str	r3, [r7, #8]
		Direction = 0 ;
 8002344:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <PID+0x148>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
	}
	float error = req - Vel;
 800234a:	ed97 7a03 	vldr	s14, [r7, #12]
 800234e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002356:	edc7 7a01 	vstr	s15, [r7, #4]
	DeltaU = ((P+I+D)*error) - ((P+(2*D))*preErr1) + (D*preErr2) ;
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <PID+0x14c>)
 800235c:	ed93 7a00 	vldr	s14, [r3]
 8002360:	4b37      	ldr	r3, [pc, #220]	; (8002440 <PID+0x150>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ee37 7a27 	vadd.f32	s14, s14, s15
 800236a:	4b36      	ldr	r3, [pc, #216]	; (8002444 <PID+0x154>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002374:	edd7 7a01 	vldr	s15, [r7, #4]
 8002378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800237c:	4b31      	ldr	r3, [pc, #196]	; (8002444 <PID+0x154>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <PID+0x14c>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002390:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <PID+0x158>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <PID+0x154>)
 80023a0:	edd3 6a00 	vldr	s13, [r3]
 80023a4:	4b29      	ldr	r3, [pc, #164]	; (800244c <PID+0x15c>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b2:	4b27      	ldr	r3, [pc, #156]	; (8002450 <PID+0x160>)
 80023b4:	edc3 7a00 	vstr	s15, [r3]
	PWMPercent = PreviousPWM + DeltaU + InitialPWM ;
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <PID+0x164>)
 80023ba:	ed93 7a00 	vldr	s14, [r3]
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <PID+0x160>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <PID+0x168>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023dc:	ee17 3a90 	vmov	r3, s15
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <PID+0x16c>)
 80023e4:	801a      	strh	r2, [r3, #0]
	if (PWMPercent > 10000)
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <PID+0x16c>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d903      	bls.n	80023fa <PID+0x10a>
	{
		PWMPercent = 10000;
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <PID+0x16c>)
 80023f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80023f8:	801a      	strh	r2, [r3, #0]
	}
	if (PWMPercent < 0)
	{
		PWMPercent = 0 ;
	}
	PreviousPWM = PWMPercent - InitialPWM ;
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <PID+0x16c>)
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	4b15      	ldr	r3, [pc, #84]	; (8002458 <PID+0x168>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <PID+0x164>)
 8002410:	edc3 7a00 	vstr	s15, [r3]
	preErr2 = preErr1 ;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <PID+0x158>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <PID+0x15c>)
 800241a:	6013      	str	r3, [r2, #0]
	preErr1 = error ;
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <PID+0x158>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6013      	str	r3, [r2, #0]

}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	200000fc 	.word	0x200000fc
 8002434:	20000390 	.word	0x20000390
 8002438:	20000114 	.word	0x20000114
 800243c:	20000004 	.word	0x20000004
 8002440:	20000008 	.word	0x20000008
 8002444:	200000cc 	.word	0x200000cc
 8002448:	200002d4 	.word	0x200002d4
 800244c:	20000200 	.word	0x20000200
 8002450:	2000025c 	.word	0x2000025c
 8002454:	200000c8 	.word	0x200000c8
 8002458:	20000000 	.word	0x20000000
 800245c:	20000100 	.word	0x20000100

08002460 <Velocity>:
//	preVel = Vel ;
//}


float Velocity()
{
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	ed2d 8b02 	vpush	{d8}
 8002466:	af00      	add	r7, sp, #0
	  if (micros() - TimestampEncoder >= 100)
 8002468:	f000 f8d2 	bl	8002610 <micros>
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <Velocity+0x9c>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	1a84      	subs	r4, r0, r2
 8002474:	eb61 0503 	sbc.w	r5, r1, r3
 8002478:	2d00      	cmp	r5, #0
 800247a:	bf08      	it	eq
 800247c:	2c64      	cmpeq	r4, #100	; 0x64
 800247e:	d31a      	bcc.n	80024b6 <Velocity+0x56>
	  {
		  TimestampEncoder = micros();
 8002480:	f000 f8c6 	bl	8002610 <micros>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	491c      	ldr	r1, [pc, #112]	; (80024fc <Velocity+0x9c>)
 800248a:	e9c1 2300 	strd	r2, r3, [r1]
		  EncoderVel = (EncoderVel * 999 + EncoderVelocity_Update()) / 1000.0;
 800248e:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <Velocity+0xa0>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002504 <Velocity+0xa4>
 8002498:	ee27 8a87 	vmul.f32	s16, s15, s14
 800249c:	f000 f864 	bl	8002568 <EncoderVelocity_Update>
 80024a0:	eef0 7a40 	vmov.f32	s15, s0
 80024a4:	ee38 7a27 	vadd.f32	s14, s16, s15
 80024a8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002508 <Velocity+0xa8>
 80024ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <Velocity+0xa0>)
 80024b2:	edc3 7a00 	vstr	s15, [r3]
	  }
	  return EncoderVel * 60.0 / 2048.0; //pulse per sec to rpm
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <Velocity+0xa0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fd fff0 	bl	80004a0 <__aeabi_f2d>
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <Velocity+0xac>)
 80024c6:	f7fe f843 	bl	8000550 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <Velocity+0xb0>)
 80024d8:	f7fe f964 	bl	80007a4 <__aeabi_ddiv>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	f7fe fae4 	bl	8000ab0 <__aeabi_d2f>
 80024e8:	4603      	mov	r3, r0
 80024ea:	ee07 3a90 	vmov	s15, r3
}
 80024ee:	eeb0 0a67 	vmov.f32	s0, s15
 80024f2:	46bd      	mov	sp, r7
 80024f4:	ecbd 8b02 	vpop	{d8}
 80024f8:	bdb0      	pop	{r4, r5, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200000f0 	.word	0x200000f0
 8002500:	200000f8 	.word	0x200000f8
 8002504:	4479c000 	.word	0x4479c000
 8002508:	447a0000 	.word	0x447a0000
 800250c:	404e0000 	.word	0x404e0000
 8002510:	40a00000 	.word	0x40a00000

08002514 <PWMgeneration>:
void PWMgeneration()
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	  if (Direction == 0)
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <PWMgeneration+0x48>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d104      	bne.n	800252a <PWMgeneration+0x16>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 10000);
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <PWMgeneration+0x4c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f242 7210 	movw	r2, #10000	; 0x2710
 8002528:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 1)
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <PWMgeneration+0x48>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d103      	bne.n	800253a <PWMgeneration+0x26>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <PWMgeneration+0x4c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2200      	movs	r2, #0
 8002538:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (Direction == 2)
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <PWMgeneration+0x48>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d104      	bne.n	800254c <PWMgeneration+0x38>
	  {
		  PIDinit() ;
 8002542:	f7ff fe8d 	bl	8002260 <PIDinit>
		  PWMPercent = 0 ;
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <PWMgeneration+0x50>)
 8002548:	2200      	movs	r2, #0
 800254a:	801a      	strh	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMPercent);
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <PWMgeneration+0x50>)
 800254e:	881a      	ldrh	r2, [r3, #0]
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <PWMgeneration+0x4c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000114 	.word	0x20000114
 8002560:	200002f0 	.word	0x200002f0
 8002564:	20000100 	.word	0x20000100

08002568 <EncoderVelocity_Update>:
#define  HTIM_ENCODER htim3
#define  MAX_SUBPOSITION_OVERFLOW 1024
#define  MAX_ENCODER_PERIOD 2048

float EncoderVelocity_Update()
{
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	ed2d 8b02 	vpush	{d8}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8002572:	4b23      	ldr	r3, [pc, #140]	; (8002600 <EncoderVelocity_Update+0x98>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 800257a:	f000 f849 	bl	8002610 <micros>
 800257e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8002582:	4b20      	ldr	r3, [pc, #128]	; (8002604 <EncoderVelocity_Update+0x9c>)
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800258c:	1a84      	subs	r4, r0, r2
 800258e:	eb61 0503 	sbc.w	r5, r1, r3
 8002592:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <EncoderVelocity_Update+0xa0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a6:	db04      	blt.n	80025b2 <EncoderVelocity_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e007      	b.n	80025c2 <EncoderVelocity_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80025b8:	dc03      	bgt.n	80025c2 <EncoderVelocity_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c0:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <EncoderVelocity_Update+0xa0>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80025c8:	490e      	ldr	r1, [pc, #56]	; (8002604 <EncoderVelocity_Update+0x9c>)
 80025ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025ce:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <EncoderVelocity_Update+0xa4>)
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80025e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025e6:	f7fe fb7b 	bl	8000ce0 <__aeabi_ul2f>
 80025ea:	ee07 0a10 	vmov	s14, r0
 80025ee:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 80025f2:	eeb0 0a67 	vmov.f32	s0, s15
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	ecbd 8b02 	vpop	{d8}
 80025fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002600:	2000020c 	.word	0x2000020c
 8002604:	20000120 	.word	0x20000120
 8002608:	20000128 	.word	0x20000128
 800260c:	000f4240 	.word	0x000f4240

08002610 <micros>:
	{
		_micros += 4294967295;
	}
}
uint64_t micros()
{
 8002610:	b4b0      	push	{r4, r5, r7}
 8002612:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <micros+0x2c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	4618      	mov	r0, r3
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <micros+0x30>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	1884      	adds	r4, r0, r2
 8002628:	eb41 0503 	adc.w	r5, r1, r3
 800262c:	4622      	mov	r2, r4
 800262e:	462b      	mov	r3, r5
}
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	bcb0      	pop	{r4, r5, r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000344 	.word	0x20000344
 8002640:	20000108 	.word	0x20000108

08002644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002648:	b672      	cpsid	i
}
 800264a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800264c:	e7fe      	b.n	800264c <Error_Handler+0x8>
	...

08002650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_MspInit+0x4c>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a0f      	ldr	r2, [pc, #60]	; (800269c <HAL_MspInit+0x4c>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_MspInit+0x4c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_MspInit+0x4c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_MspInit+0x4c>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_MspInit+0x4c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800268e:	2007      	movs	r0, #7
 8002690:	f000 fbdc 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_I2C_MspInit+0x84>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d12c      	bne.n	800271c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_I2C_MspInit+0x88>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_I2C_MspInit+0x88>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_I2C_MspInit+0x88>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e4:	2312      	movs	r3, #18
 80026e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026e8:	2301      	movs	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ec:	2303      	movs	r3, #3
 80026ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026f0:	2304      	movs	r3, #4
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	480c      	ldr	r0, [pc, #48]	; (800272c <HAL_I2C_MspInit+0x8c>)
 80026fc:	f000 ffea 	bl	80036d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_I2C_MspInit+0x88>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_I2C_MspInit+0x88>)
 800270a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800270e:	6413      	str	r3, [r2, #64]	; 0x40
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_I2C_MspInit+0x88>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40005400 	.word	0x40005400
 8002728:	40023800 	.word	0x40023800
 800272c:	40020400 	.word	0x40020400

08002730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a15      	ldr	r2, [pc, #84]	; (8002794 <HAL_TIM_Base_MspInit+0x64>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10e      	bne.n	8002760 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_TIM_Base_MspInit+0x68>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a13      	ldr	r2, [pc, #76]	; (8002798 <HAL_TIM_Base_MspInit+0x68>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_TIM_Base_MspInit+0x68>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800275e:	e012      	b.n	8002786 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002768:	d10d      	bne.n	8002786 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_TIM_Base_MspInit+0x68>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <HAL_TIM_Base_MspInit+0x68>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <HAL_TIM_Base_MspInit+0x68>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40010000 	.word	0x40010000
 8002798:	40023800 	.word	0x40023800

0800279c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_TIM_Encoder_MspInit+0x84>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d12b      	bne.n	8002816 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	4b18      	ldr	r3, [pc, #96]	; (8002824 <HAL_TIM_Encoder_MspInit+0x88>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a17      	ldr	r2, [pc, #92]	; (8002824 <HAL_TIM_Encoder_MspInit+0x88>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_TIM_Encoder_MspInit+0x88>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_TIM_Encoder_MspInit+0x88>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a10      	ldr	r2, [pc, #64]	; (8002824 <HAL_TIM_Encoder_MspInit+0x88>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_TIM_Encoder_MspInit+0x88>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027f6:	23c0      	movs	r3, #192	; 0xc0
 80027f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002806:	2302      	movs	r3, #2
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	4619      	mov	r1, r3
 8002810:	4805      	ldr	r0, [pc, #20]	; (8002828 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002812:	f000 ff5f 	bl	80036d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002816:	bf00      	nop
 8002818:	3728      	adds	r7, #40	; 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40000400 	.word	0x40000400
 8002824:	40023800 	.word	0x40023800
 8002828:	40020000 	.word	0x40020000

0800282c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_TIM_MspPostInit+0x68>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d11e      	bne.n	800288c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_TIM_MspPostInit+0x6c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_TIM_MspPostInit+0x6c>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_TIM_MspPostInit+0x6c>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800286a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800286e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800287c:	2301      	movs	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	f107 030c 	add.w	r3, r7, #12
 8002884:	4619      	mov	r1, r3
 8002886:	4805      	ldr	r0, [pc, #20]	; (800289c <HAL_TIM_MspPostInit+0x70>)
 8002888:	f000 ff24 	bl	80036d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800288c:	bf00      	nop
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40010000 	.word	0x40010000
 8002898:	40023800 	.word	0x40023800
 800289c:	40020000 	.word	0x40020000

080028a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a4c      	ldr	r2, [pc, #304]	; (80029f0 <HAL_UART_MspInit+0x150>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	f040 8091 	bne.w	80029e6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	4b4a      	ldr	r3, [pc, #296]	; (80029f4 <HAL_UART_MspInit+0x154>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	4a49      	ldr	r2, [pc, #292]	; (80029f4 <HAL_UART_MspInit+0x154>)
 80028ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d2:	6413      	str	r3, [r2, #64]	; 0x40
 80028d4:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_UART_MspInit+0x154>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <HAL_UART_MspInit+0x154>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	4a42      	ldr	r2, [pc, #264]	; (80029f4 <HAL_UART_MspInit+0x154>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6313      	str	r3, [r2, #48]	; 0x30
 80028f0:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <HAL_UART_MspInit+0x154>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028fc:	230c      	movs	r3, #12
 80028fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800290c:	2307      	movs	r3, #7
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	4838      	ldr	r0, [pc, #224]	; (80029f8 <HAL_UART_MspInit+0x158>)
 8002918:	f000 fedc 	bl	80036d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800291c:	4b37      	ldr	r3, [pc, #220]	; (80029fc <HAL_UART_MspInit+0x15c>)
 800291e:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_UART_MspInit+0x160>)
 8002920:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002922:	4b36      	ldr	r3, [pc, #216]	; (80029fc <HAL_UART_MspInit+0x15c>)
 8002924:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002928:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800292a:	4b34      	ldr	r3, [pc, #208]	; (80029fc <HAL_UART_MspInit+0x15c>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002930:	4b32      	ldr	r3, [pc, #200]	; (80029fc <HAL_UART_MspInit+0x15c>)
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002936:	4b31      	ldr	r3, [pc, #196]	; (80029fc <HAL_UART_MspInit+0x15c>)
 8002938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800293c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800293e:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <HAL_UART_MspInit+0x15c>)
 8002940:	2200      	movs	r2, #0
 8002942:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002944:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_UART_MspInit+0x15c>)
 8002946:	2200      	movs	r2, #0
 8002948:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800294a:	4b2c      	ldr	r3, [pc, #176]	; (80029fc <HAL_UART_MspInit+0x15c>)
 800294c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002950:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002952:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <HAL_UART_MspInit+0x15c>)
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002958:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_UART_MspInit+0x15c>)
 800295a:	2200      	movs	r2, #0
 800295c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800295e:	4827      	ldr	r0, [pc, #156]	; (80029fc <HAL_UART_MspInit+0x15c>)
 8002960:	f000 fab6 	bl	8002ed0 <HAL_DMA_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800296a:	f7ff fe6b 	bl	8002644 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_UART_MspInit+0x15c>)
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
 8002974:	4a21      	ldr	r2, [pc, #132]	; (80029fc <HAL_UART_MspInit+0x15c>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800297a:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <HAL_UART_MspInit+0x164>)
 800297c:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <HAL_UART_MspInit+0x168>)
 800297e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_UART_MspInit+0x164>)
 8002982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002986:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002988:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <HAL_UART_MspInit+0x164>)
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_UART_MspInit+0x164>)
 8002990:	2200      	movs	r2, #0
 8002992:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_UART_MspInit+0x164>)
 8002996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800299a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_UART_MspInit+0x164>)
 800299e:	2200      	movs	r2, #0
 80029a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <HAL_UART_MspInit+0x164>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80029a8:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <HAL_UART_MspInit+0x164>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_UART_MspInit+0x164>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <HAL_UART_MspInit+0x164>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80029ba:	4812      	ldr	r0, [pc, #72]	; (8002a04 <HAL_UART_MspInit+0x164>)
 80029bc:	f000 fa88 	bl	8002ed0 <HAL_DMA_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80029c6:	f7ff fe3d 	bl	8002644 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <HAL_UART_MspInit+0x164>)
 80029ce:	635a      	str	r2, [r3, #52]	; 0x34
 80029d0:	4a0c      	ldr	r2, [pc, #48]	; (8002a04 <HAL_UART_MspInit+0x164>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	2026      	movs	r0, #38	; 0x26
 80029dc:	f000 fa41 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029e0:	2026      	movs	r0, #38	; 0x26
 80029e2:	f000 fa5a 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029e6:	bf00      	nop
 80029e8:	3728      	adds	r7, #40	; 0x28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40004400 	.word	0x40004400
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	20000138 	.word	0x20000138
 8002a00:	40026088 	.word	0x40026088
 8002a04:	20000260 	.word	0x20000260
 8002a08:	400260a0 	.word	0x400260a0

08002a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <NMI_Handler+0x4>

08002a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a16:	e7fe      	b.n	8002a16 <HardFault_Handler+0x4>

08002a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <MemManage_Handler+0x4>

08002a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <BusFault_Handler+0x4>

08002a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <UsageFault_Handler+0x4>

08002a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a58:	f000 f8e4 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <DMA1_Stream5_IRQHandler+0x10>)
 8002a66:	f000 fbcb 	bl	8003200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000138 	.word	0x20000138

08002a74 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <DMA1_Stream6_IRQHandler+0x10>)
 8002a7a:	f000 fbc1 	bl	8003200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000260 	.word	0x20000260

08002a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <USART2_IRQHandler+0x10>)
 8002a8e:	f003 f975 	bl	8005d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000394 	.word	0x20000394

08002a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <_sbrk+0x5c>)
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <_sbrk+0x60>)
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab0:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <_sbrk+0x64>)
 8002aba:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <_sbrk+0x68>)
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d207      	bcs.n	8002adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002acc:	f004 f93c 	bl	8006d48 <__errno>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	e009      	b.n	8002af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <_sbrk+0x64>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <_sbrk+0x64>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <_sbrk+0x64>)
 8002aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aee:	68fb      	ldr	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20020000 	.word	0x20020000
 8002afc:	00000400 	.word	0x00000400
 8002b00:	2000012c 	.word	0x2000012c
 8002b04:	200003f8 	.word	0x200003f8

08002b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <SystemInit+0x20>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <SystemInit+0x20>)
 8002b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b30:	480d      	ldr	r0, [pc, #52]	; (8002b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b32:	490e      	ldr	r1, [pc, #56]	; (8002b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b34:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b38:	e002      	b.n	8002b40 <LoopCopyDataInit>

08002b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3e:	3304      	adds	r3, #4

08002b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b44:	d3f9      	bcc.n	8002b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b48:	4c0b      	ldr	r4, [pc, #44]	; (8002b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b4c:	e001      	b.n	8002b52 <LoopFillZerobss>

08002b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b50:	3204      	adds	r2, #4

08002b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b54:	d3fb      	bcc.n	8002b4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b56:	f7ff ffd7 	bl	8002b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f004 f8fb 	bl	8006d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5e:	f7fe fa81 	bl	8001064 <main>
  bx  lr    
 8002b62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b6c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002b70:	080070d4 	.word	0x080070d4
  ldr r2, =_sbss
 8002b74:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002b78:	200003f8 	.word	0x200003f8

08002b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC_IRQHandler>
	...

08002b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_Init+0x40>)
 8002b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_Init+0x40>)
 8002b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_Init+0x40>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f000 f94f 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f000 f808 	bl	8002bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb4:	f7ff fd4c 	bl	8002650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_InitTick+0x54>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_InitTick+0x58>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f967 	bl	8002eb6 <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00e      	b.n	8002c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d80a      	bhi.n	8002c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f000 f92f 	bl	8002e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4a06      	ldr	r2, [pc, #24]	; (8002c20 <HAL_InitTick+0x5c>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000010 	.word	0x20000010
 8002c1c:	20000018 	.word	0x20000018
 8002c20:	20000014 	.word	0x20000014

08002c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x20>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_IncTick+0x24>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_IncTick+0x24>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000018 	.word	0x20000018
 8002c48:	200003e4 	.word	0x200003e4

08002c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_GetTick+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	200003e4 	.word	0x200003e4

08002c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff ffee 	bl	8002c4c <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d005      	beq.n	8002c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_Delay+0x44>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c8a:	bf00      	nop
 8002c8c:	f7ff ffde 	bl	8002c4c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d8f7      	bhi.n	8002c8c <HAL_Delay+0x28>
  {
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000018 	.word	0x20000018

08002cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cde:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	60d3      	str	r3, [r2, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <__NVIC_GetPriorityGrouping+0x18>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	f003 0307 	and.w	r3, r3, #7
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db0b      	blt.n	8002d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	4907      	ldr	r1, [pc, #28]	; (8002d48 <__NVIC_EnableIRQ+0x38>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2001      	movs	r0, #1
 8002d32:	fa00 f202 	lsl.w	r2, r0, r2
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	; (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	; (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e18:	d301      	bcc.n	8002e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00f      	b.n	8002e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <SysTick_Config+0x40>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e26:	210f      	movs	r1, #15
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2c:	f7ff ff8e 	bl	8002d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <SysTick_Config+0x40>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e36:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <SysTick_Config+0x40>)
 8002e38:	2207      	movs	r2, #7
 8002e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	e000e010 	.word	0xe000e010

08002e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff29 	bl	8002cac <__NVIC_SetPriorityGrouping>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e74:	f7ff ff3e 	bl	8002cf4 <__NVIC_GetPriorityGrouping>
 8002e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7ff ff8e 	bl	8002da0 <NVIC_EncodePriority>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff5d 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff31 	bl	8002d10 <__NVIC_EnableIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ffa2 	bl	8002e08 <SysTick_Config>
 8002ec4:	4603      	mov	r3, r0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff feb6 	bl	8002c4c <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e099      	b.n	8003020 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f0c:	e00f      	b.n	8002f2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f0e:	f7ff fe9d 	bl	8002c4c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d908      	bls.n	8002f2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2203      	movs	r2, #3
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e078      	b.n	8003020 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e8      	bne.n	8002f0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4b38      	ldr	r3, [pc, #224]	; (8003028 <HAL_DMA_Init+0x158>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d107      	bne.n	8002f98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4313      	orrs	r3, r2
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0307 	bic.w	r3, r3, #7
 8002fae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d117      	bne.n	8002ff2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fb01 	bl	80035dc <DMA_CheckFifoParam>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2240      	movs	r2, #64	; 0x40
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e016      	b.n	8003020 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fab8 	bl	8003570 <DMA_CalcBaseAndBitshift>
 8003000:	4603      	mov	r3, r0
 8003002:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	223f      	movs	r2, #63	; 0x3f
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	f010803f 	.word	0xf010803f

0800302c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_DMA_Start_IT+0x26>
 800304e:	2302      	movs	r3, #2
 8003050:	e040      	b.n	80030d4 <HAL_DMA_Start_IT+0xa8>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d12f      	bne.n	80030c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fa4a 	bl	8003514 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	223f      	movs	r2, #63	; 0x3f
 8003086:	409a      	lsls	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0216 	orr.w	r2, r2, #22
 800309a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0208 	orr.w	r2, r2, #8
 80030b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e005      	b.n	80030d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
 80030d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030ea:	f7ff fdaf 	bl	8002c4c <HAL_GetTick>
 80030ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d008      	beq.n	800310e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e052      	b.n	80031b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0216 	bic.w	r2, r2, #22
 800311c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800312c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <HAL_DMA_Abort+0x62>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0208 	bic.w	r2, r2, #8
 800314c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800315e:	e013      	b.n	8003188 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003160:	f7ff fd74 	bl	8002c4c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b05      	cmp	r3, #5
 800316c:	d90c      	bls.n	8003188 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2203      	movs	r2, #3
 8003178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e015      	b.n	80031b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e4      	bne.n	8003160 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	223f      	movs	r2, #63	; 0x3f
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d004      	beq.n	80031da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00c      	b.n	80031f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2205      	movs	r2, #5
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800320c:	4b92      	ldr	r3, [pc, #584]	; (8003458 <HAL_DMA_IRQHandler+0x258>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a92      	ldr	r2, [pc, #584]	; (800345c <HAL_DMA_IRQHandler+0x25c>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	0a9b      	lsrs	r3, r3, #10
 8003218:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	2208      	movs	r2, #8
 800322c:	409a      	lsls	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01a      	beq.n	800326c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0204 	bic.w	r2, r2, #4
 8003252:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	2208      	movs	r2, #8
 800325a:	409a      	lsls	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	2201      	movs	r2, #1
 8003272:	409a      	lsls	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d012      	beq.n	80032a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	2201      	movs	r2, #1
 8003290:	409a      	lsls	r2, r3
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	f043 0202 	orr.w	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	2204      	movs	r2, #4
 80032a8:	409a      	lsls	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	2204      	movs	r2, #4
 80032c6:	409a      	lsls	r2, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	f043 0204 	orr.w	r2, r3, #4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	2210      	movs	r2, #16
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d043      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d03c      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	2210      	movs	r2, #16
 80032fc:	409a      	lsls	r2, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d018      	beq.n	8003342 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d024      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
 800332e:	e01f      	b.n	8003370 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01b      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
 8003340:	e016      	b.n	8003370 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d107      	bne.n	8003360 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0208 	bic.w	r2, r2, #8
 800335e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	2220      	movs	r2, #32
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 808e 	beq.w	800349e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8086 	beq.w	800349e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	2220      	movs	r2, #32
 8003398:	409a      	lsls	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d136      	bne.n	8003418 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0216 	bic.w	r2, r2, #22
 80033b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d103      	bne.n	80033da <HAL_DMA_IRQHandler+0x1da>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0208 	bic.w	r2, r2, #8
 80033e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	223f      	movs	r2, #63	; 0x3f
 80033f0:	409a      	lsls	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340a:	2b00      	cmp	r3, #0
 800340c:	d07d      	beq.n	800350a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	4798      	blx	r3
        }
        return;
 8003416:	e078      	b.n	800350a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01c      	beq.n	8003460 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d108      	bne.n	8003446 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	2b00      	cmp	r3, #0
 800343a:	d030      	beq.n	800349e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
 8003444:	e02b      	b.n	800349e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d027      	beq.n	800349e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
 8003456:	e022      	b.n	800349e <HAL_DMA_IRQHandler+0x29e>
 8003458:	20000010 	.word	0x20000010
 800345c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10f      	bne.n	800348e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0210 	bic.w	r2, r2, #16
 800347c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d032      	beq.n	800350c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d022      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2205      	movs	r2, #5
 80034b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3301      	adds	r3, #1
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d307      	bcc.n	80034e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f2      	bne.n	80034ca <HAL_DMA_IRQHandler+0x2ca>
 80034e4:	e000      	b.n	80034e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034e6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
 8003508:	e000      	b.n	800350c <HAL_DMA_IRQHandler+0x30c>
        return;
 800350a:	bf00      	nop
    }
  }
}
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop

08003514 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003530:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d108      	bne.n	8003554 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003552:	e007      	b.n	8003564 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	3b10      	subs	r3, #16
 8003580:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800358a:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <DMA_CalcBaseAndBitshift+0x68>)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d909      	bls.n	80035b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	1d1a      	adds	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	659a      	str	r2, [r3, #88]	; 0x58
 80035b0:	e007      	b.n	80035c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	aaaaaaab 	.word	0xaaaaaaab
 80035d8:	080070bc 	.word	0x080070bc

080035dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11f      	bne.n	8003636 <DMA_CheckFifoParam+0x5a>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d856      	bhi.n	80036aa <DMA_CheckFifoParam+0xce>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <DMA_CheckFifoParam+0x28>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003615 	.word	0x08003615
 8003608:	08003627 	.word	0x08003627
 800360c:	08003615 	.word	0x08003615
 8003610:	080036ab 	.word	0x080036ab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d046      	beq.n	80036ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003624:	e043      	b.n	80036ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800362e:	d140      	bne.n	80036b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003634:	e03d      	b.n	80036b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363e:	d121      	bne.n	8003684 <DMA_CheckFifoParam+0xa8>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d837      	bhi.n	80036b6 <DMA_CheckFifoParam+0xda>
 8003646:	a201      	add	r2, pc, #4	; (adr r2, 800364c <DMA_CheckFifoParam+0x70>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	0800365d 	.word	0x0800365d
 8003650:	08003663 	.word	0x08003663
 8003654:	0800365d 	.word	0x0800365d
 8003658:	08003675 	.word	0x08003675
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e030      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d025      	beq.n	80036ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003672:	e022      	b.n	80036ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800367c:	d11f      	bne.n	80036be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003682:	e01c      	b.n	80036be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d903      	bls.n	8003692 <DMA_CheckFifoParam+0xb6>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d003      	beq.n	8003698 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003690:	e018      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      break;
 8003696:	e015      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00e      	beq.n	80036c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      break;
 80036a8:	e00b      	b.n	80036c2 <DMA_CheckFifoParam+0xe6>
      break;
 80036aa:	bf00      	nop
 80036ac:	e00a      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e008      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
 80036b4:	e006      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e004      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e002      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
    }
  } 
  
  return status; 
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop

080036d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	e159      	b.n	80039a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f0:	2201      	movs	r2, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	f040 8148 	bne.w	800399e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d005      	beq.n	8003726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003722:	2b02      	cmp	r3, #2
 8003724:	d130      	bne.n	8003788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 0201 	and.w	r2, r3, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b03      	cmp	r3, #3
 8003792:	d017      	beq.n	80037c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d123      	bne.n	8003818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	08da      	lsrs	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	69b9      	ldr	r1, [r7, #24]
 8003814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80a2 	beq.w	800399e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	4b57      	ldr	r3, [pc, #348]	; (80039bc <HAL_GPIO_Init+0x2e8>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	4a56      	ldr	r2, [pc, #344]	; (80039bc <HAL_GPIO_Init+0x2e8>)
 8003864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003868:	6453      	str	r3, [r2, #68]	; 0x44
 800386a:	4b54      	ldr	r3, [pc, #336]	; (80039bc <HAL_GPIO_Init+0x2e8>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003876:	4a52      	ldr	r2, [pc, #328]	; (80039c0 <HAL_GPIO_Init+0x2ec>)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	3302      	adds	r3, #2
 800387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	220f      	movs	r2, #15
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a49      	ldr	r2, [pc, #292]	; (80039c4 <HAL_GPIO_Init+0x2f0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d019      	beq.n	80038d6 <HAL_GPIO_Init+0x202>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a48      	ldr	r2, [pc, #288]	; (80039c8 <HAL_GPIO_Init+0x2f4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <HAL_GPIO_Init+0x1fe>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a47      	ldr	r2, [pc, #284]	; (80039cc <HAL_GPIO_Init+0x2f8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00d      	beq.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a46      	ldr	r2, [pc, #280]	; (80039d0 <HAL_GPIO_Init+0x2fc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <HAL_GPIO_Init+0x1f6>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a45      	ldr	r2, [pc, #276]	; (80039d4 <HAL_GPIO_Init+0x300>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_GPIO_Init+0x1f2>
 80038c2:	2304      	movs	r3, #4
 80038c4:	e008      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038c6:	2307      	movs	r3, #7
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038ca:	2303      	movs	r3, #3
 80038cc:	e004      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e002      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038d6:	2300      	movs	r3, #0
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f002 0203 	and.w	r2, r2, #3
 80038de:	0092      	lsls	r2, r2, #2
 80038e0:	4093      	lsls	r3, r2
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e8:	4935      	ldr	r1, [pc, #212]	; (80039c0 <HAL_GPIO_Init+0x2ec>)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038f6:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <HAL_GPIO_Init+0x304>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800391a:	4a2f      	ldr	r2, [pc, #188]	; (80039d8 <HAL_GPIO_Init+0x304>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003920:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_GPIO_Init+0x304>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003944:	4a24      	ldr	r2, [pc, #144]	; (80039d8 <HAL_GPIO_Init+0x304>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800394a:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <HAL_GPIO_Init+0x304>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800396e:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <HAL_GPIO_Init+0x304>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003974:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <HAL_GPIO_Init+0x304>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003998:	4a0f      	ldr	r2, [pc, #60]	; (80039d8 <HAL_GPIO_Init+0x304>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3301      	adds	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	f67f aea2 	bls.w	80036f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3724      	adds	r7, #36	; 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40013800 	.word	0x40013800
 80039c4:	40020000 	.word	0x40020000
 80039c8:	40020400 	.word	0x40020400
 80039cc:	40020800 	.word	0x40020800
 80039d0:	40020c00 	.word	0x40020c00
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40013c00 	.word	0x40013c00

080039dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	887b      	ldrh	r3, [r7, #2]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e001      	b.n	80039fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a1c:	787b      	ldrb	r3, [r7, #1]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a28:	e003      	b.n	8003a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	041a      	lsls	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	619a      	str	r2, [r3, #24]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e12b      	b.n	8003caa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fe fe1a 	bl	80026a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2224      	movs	r2, #36	; 0x24
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003aa4:	f001 f864 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 8003aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4a81      	ldr	r2, [pc, #516]	; (8003cb4 <HAL_I2C_Init+0x274>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d807      	bhi.n	8003ac4 <HAL_I2C_Init+0x84>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a80      	ldr	r2, [pc, #512]	; (8003cb8 <HAL_I2C_Init+0x278>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bf94      	ite	ls
 8003abc:	2301      	movls	r3, #1
 8003abe:	2300      	movhi	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e006      	b.n	8003ad2 <HAL_I2C_Init+0x92>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a7d      	ldr	r2, [pc, #500]	; (8003cbc <HAL_I2C_Init+0x27c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bf94      	ite	ls
 8003acc:	2301      	movls	r3, #1
 8003ace:	2300      	movhi	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e0e7      	b.n	8003caa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a78      	ldr	r2, [pc, #480]	; (8003cc0 <HAL_I2C_Init+0x280>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	0c9b      	lsrs	r3, r3, #18
 8003ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4a6a      	ldr	r2, [pc, #424]	; (8003cb4 <HAL_I2C_Init+0x274>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d802      	bhi.n	8003b14 <HAL_I2C_Init+0xd4>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	3301      	adds	r3, #1
 8003b12:	e009      	b.n	8003b28 <HAL_I2C_Init+0xe8>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	4a69      	ldr	r2, [pc, #420]	; (8003cc4 <HAL_I2C_Init+0x284>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	099b      	lsrs	r3, r3, #6
 8003b26:	3301      	adds	r3, #1
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	495c      	ldr	r1, [pc, #368]	; (8003cb4 <HAL_I2C_Init+0x274>)
 8003b44:	428b      	cmp	r3, r1
 8003b46:	d819      	bhi.n	8003b7c <HAL_I2C_Init+0x13c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1e59      	subs	r1, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b56:	1c59      	adds	r1, r3, #1
 8003b58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b5c:	400b      	ands	r3, r1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_I2C_Init+0x138>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1e59      	subs	r1, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b70:	3301      	adds	r3, #1
 8003b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b76:	e051      	b.n	8003c1c <HAL_I2C_Init+0x1dc>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	e04f      	b.n	8003c1c <HAL_I2C_Init+0x1dc>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d111      	bne.n	8003ba8 <HAL_I2C_Init+0x168>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e58      	subs	r0, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	440b      	add	r3, r1
 8003b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b96:	3301      	adds	r3, #1
 8003b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e012      	b.n	8003bce <HAL_I2C_Init+0x18e>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1e58      	subs	r0, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	0099      	lsls	r1, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_Init+0x196>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e022      	b.n	8003c1c <HAL_I2C_Init+0x1dc>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10e      	bne.n	8003bfc <HAL_I2C_Init+0x1bc>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1e58      	subs	r0, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	440b      	add	r3, r1
 8003bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfa:	e00f      	b.n	8003c1c <HAL_I2C_Init+0x1dc>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1e58      	subs	r0, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	0099      	lsls	r1, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	6809      	ldr	r1, [r1, #0]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6911      	ldr	r1, [r2, #16]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68d2      	ldr	r2, [r2, #12]
 8003c56:	4311      	orrs	r1, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	000186a0 	.word	0x000186a0
 8003cb8:	001e847f 	.word	0x001e847f
 8003cbc:	003d08ff 	.word	0x003d08ff
 8003cc0:	431bde83 	.word	0x431bde83
 8003cc4:	10624dd3 	.word	0x10624dd3

08003cc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	817b      	strh	r3, [r7, #10]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cdc:	f7fe ffb6 	bl	8002c4c <HAL_GetTick>
 8003ce0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	f040 80e0 	bne.w	8003eb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2319      	movs	r3, #25
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	4970      	ldr	r1, [pc, #448]	; (8003ebc <HAL_I2C_Master_Transmit+0x1f4>)
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f964 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
 8003d08:	e0d3      	b.n	8003eb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_I2C_Master_Transmit+0x50>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e0cc      	b.n	8003eb2 <HAL_I2C_Master_Transmit+0x1ea>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d007      	beq.n	8003d3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2221      	movs	r2, #33	; 0x21
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	893a      	ldrh	r2, [r7, #8]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a50      	ldr	r2, [pc, #320]	; (8003ec0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d80:	8979      	ldrh	r1, [r7, #10]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	6a3a      	ldr	r2, [r7, #32]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f89c 	bl	8003ec4 <I2C_MasterRequestWrite>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e08d      	b.n	8003eb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003dac:	e066      	b.n	8003e7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	6a39      	ldr	r1, [r7, #32]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f9de 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00d      	beq.n	8003dda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d107      	bne.n	8003dd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e06b      	b.n	8003eb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d11b      	bne.n	8003e50 <HAL_I2C_Master_Transmit+0x188>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d017      	beq.n	8003e50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	6a39      	ldr	r1, [r7, #32]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f9ce 	bl	80041f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d107      	bne.n	8003e78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e01a      	b.n	8003eb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d194      	bne.n	8003dae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e000      	b.n	8003eb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	00100002 	.word	0x00100002
 8003ec0:	ffff0000 	.word	0xffff0000

08003ec4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	607a      	str	r2, [r7, #4]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d006      	beq.n	8003eee <I2C_MasterRequestWrite+0x2a>
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d003      	beq.n	8003eee <I2C_MasterRequestWrite+0x2a>
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eec:	d108      	bne.n	8003f00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e00b      	b.n	8003f18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	2b12      	cmp	r3, #18
 8003f06:	d107      	bne.n	8003f18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f84f 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3e:	d103      	bne.n	8003f48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e035      	b.n	8003fb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f54:	d108      	bne.n	8003f68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f56:	897b      	ldrh	r3, [r7, #10]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f64:	611a      	str	r2, [r3, #16]
 8003f66:	e01b      	b.n	8003fa0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f68:	897b      	ldrh	r3, [r7, #10]
 8003f6a:	11db      	asrs	r3, r3, #7
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0306 	and.w	r3, r3, #6
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f063 030f 	orn	r3, r3, #15
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	490e      	ldr	r1, [pc, #56]	; (8003fc0 <I2C_MasterRequestWrite+0xfc>)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f875 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e010      	b.n	8003fb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f96:	897b      	ldrh	r3, [r7, #10]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4907      	ldr	r1, [pc, #28]	; (8003fc4 <I2C_MasterRequestWrite+0x100>)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f865 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	00010008 	.word	0x00010008
 8003fc4:	00010002 	.word	0x00010002

08003fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fd8:	e025      	b.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d021      	beq.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe2:	f7fe fe33 	bl	8002c4c <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d302      	bcc.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d116      	bne.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0220 	orr.w	r2, r3, #32
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e023      	b.n	800406e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10d      	bne.n	800404c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	43da      	mvns	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	e00c      	b.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	43da      	mvns	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4013      	ands	r3, r2
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf0c      	ite	eq
 800405e:	2301      	moveq	r3, #1
 8004060:	2300      	movne	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	429a      	cmp	r2, r3
 800406a:	d0b6      	beq.n	8003fda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004084:	e051      	b.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004094:	d123      	bne.n	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0204 	orr.w	r2, r3, #4
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e046      	b.n	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d021      	beq.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e6:	f7fe fdb1 	bl	8002c4c <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d116      	bne.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e020      	b.n	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d10c      	bne.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	43da      	mvns	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	e00b      	b.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	43da      	mvns	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d18d      	bne.n	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004180:	e02d      	b.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f878 	bl	8004278 <I2C_IsAcknowledgeFailed>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e02d      	b.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d021      	beq.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fe fd57 	bl	8002c4c <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d116      	bne.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e007      	b.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b80      	cmp	r3, #128	; 0x80
 80041ea:	d1ca      	bne.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004202:	e02d      	b.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f837 	bl	8004278 <I2C_IsAcknowledgeFailed>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e02d      	b.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d021      	beq.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421c:	f7fe fd16 	bl	8002c4c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	429a      	cmp	r2, r3
 800422a:	d302      	bcc.n	8004232 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d116      	bne.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f043 0220 	orr.w	r2, r3, #32
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e007      	b.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b04      	cmp	r3, #4
 800426c:	d1ca      	bne.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428e:	d11b      	bne.n	80042c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004298:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f043 0204 	orr.w	r2, r3, #4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e264      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d075      	beq.n	80043e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f6:	4ba3      	ldr	r3, [pc, #652]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d00c      	beq.n	800431c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004302:	4ba0      	ldr	r3, [pc, #640]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800430a:	2b08      	cmp	r3, #8
 800430c:	d112      	bne.n	8004334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800430e:	4b9d      	ldr	r3, [pc, #628]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431a:	d10b      	bne.n	8004334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431c:	4b99      	ldr	r3, [pc, #612]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d05b      	beq.n	80043e0 <HAL_RCC_OscConfig+0x108>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d157      	bne.n	80043e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e23f      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d106      	bne.n	800434c <HAL_RCC_OscConfig+0x74>
 800433e:	4b91      	ldr	r3, [pc, #580]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a90      	ldr	r2, [pc, #576]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e01d      	b.n	8004388 <HAL_RCC_OscConfig+0xb0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x98>
 8004356:	4b8b      	ldr	r3, [pc, #556]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a8a      	ldr	r2, [pc, #552]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b88      	ldr	r3, [pc, #544]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a87      	ldr	r2, [pc, #540]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0xb0>
 8004370:	4b84      	ldr	r3, [pc, #528]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a83      	ldr	r2, [pc, #524]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b81      	ldr	r3, [pc, #516]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a80      	ldr	r2, [pc, #512]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fe fc5c 	bl	8002c4c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004398:	f7fe fc58 	bl	8002c4c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e204      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	4b76      	ldr	r3, [pc, #472]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0xc0>
 80043b6:	e014      	b.n	80043e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fe fc48 	bl	8002c4c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fe fc44 	bl	8002c4c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1f0      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0xe8>
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d063      	beq.n	80044b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043fa:	4b62      	ldr	r3, [pc, #392]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004402:	2b08      	cmp	r3, #8
 8004404:	d11c      	bne.n	8004440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004406:	4b5f      	ldr	r3, [pc, #380]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d116      	bne.n	8004440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004412:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x152>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d001      	beq.n	800442a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e1c4      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442a:	4b56      	ldr	r3, [pc, #344]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4952      	ldr	r1, [pc, #328]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	e03a      	b.n	80044b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d020      	beq.n	800448a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004448:	4b4f      	ldr	r3, [pc, #316]	; (8004588 <HAL_RCC_OscConfig+0x2b0>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fe fbfd 	bl	8002c4c <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004456:	f7fe fbf9 	bl	8002c4c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e1a5      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004468:	4b46      	ldr	r3, [pc, #280]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	4b43      	ldr	r3, [pc, #268]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4940      	ldr	r1, [pc, #256]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
 8004488:	e015      	b.n	80044b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448a:	4b3f      	ldr	r3, [pc, #252]	; (8004588 <HAL_RCC_OscConfig+0x2b0>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fe fbdc 	bl	8002c4c <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004498:	f7fe fbd8 	bl	8002c4c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e184      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044aa:	4b36      	ldr	r3, [pc, #216]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d030      	beq.n	8004524 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d016      	beq.n	80044f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ca:	4b30      	ldr	r3, [pc, #192]	; (800458c <HAL_RCC_OscConfig+0x2b4>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fe fbbc 	bl	8002c4c <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fe fbb8 	bl	8002c4c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e164      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ea:	4b26      	ldr	r3, [pc, #152]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x200>
 80044f6:	e015      	b.n	8004524 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f8:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_OscConfig+0x2b4>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fe:	f7fe fba5 	bl	8002c4c <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004506:	f7fe fba1 	bl	8002c4c <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e14d      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800451a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80a0 	beq.w	8004672 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10f      	bne.n	8004562 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004550:	6413      	str	r3, [r2, #64]	; 0x40
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_OscConfig+0x2b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d121      	bne.n	80045b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <HAL_RCC_OscConfig+0x2b8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a07      	ldr	r2, [pc, #28]	; (8004590 <HAL_RCC_OscConfig+0x2b8>)
 8004574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457a:	f7fe fb67 	bl	8002c4c <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004580:	e011      	b.n	80045a6 <HAL_RCC_OscConfig+0x2ce>
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800
 8004588:	42470000 	.word	0x42470000
 800458c:	42470e80 	.word	0x42470e80
 8004590:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004594:	f7fe fb5a 	bl	8002c4c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e106      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a6:	4b85      	ldr	r3, [pc, #532]	; (80047bc <HAL_RCC_OscConfig+0x4e4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d106      	bne.n	80045c8 <HAL_RCC_OscConfig+0x2f0>
 80045ba:	4b81      	ldr	r3, [pc, #516]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a80      	ldr	r2, [pc, #512]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	e01c      	b.n	8004602 <HAL_RCC_OscConfig+0x32a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b05      	cmp	r3, #5
 80045ce:	d10c      	bne.n	80045ea <HAL_RCC_OscConfig+0x312>
 80045d0:	4b7b      	ldr	r3, [pc, #492]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a7a      	ldr	r2, [pc, #488]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
 80045dc:	4b78      	ldr	r3, [pc, #480]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a77      	ldr	r2, [pc, #476]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
 80045e8:	e00b      	b.n	8004602 <HAL_RCC_OscConfig+0x32a>
 80045ea:	4b75      	ldr	r3, [pc, #468]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a74      	ldr	r2, [pc, #464]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70
 80045f6:	4b72      	ldr	r3, [pc, #456]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a71      	ldr	r2, [pc, #452]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d015      	beq.n	8004636 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fe fb1f 	bl	8002c4c <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fe fb1b 	bl	8002c4c <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e0c5      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004628:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0ee      	beq.n	8004612 <HAL_RCC_OscConfig+0x33a>
 8004634:	e014      	b.n	8004660 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004636:	f7fe fb09 	bl	8002c4c <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463c:	e00a      	b.n	8004654 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463e:	f7fe fb05 	bl	8002c4c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f241 3288 	movw	r2, #5000	; 0x1388
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e0af      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004654:	4b5a      	ldr	r3, [pc, #360]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1ee      	bne.n	800463e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d105      	bne.n	8004672 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004666:	4b56      	ldr	r3, [pc, #344]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	4a55      	ldr	r2, [pc, #340]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 800466c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004670:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 809b 	beq.w	80047b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 030c 	and.w	r3, r3, #12
 8004684:	2b08      	cmp	r3, #8
 8004686:	d05c      	beq.n	8004742 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d141      	bne.n	8004714 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004690:	4b4c      	ldr	r3, [pc, #304]	; (80047c4 <HAL_RCC_OscConfig+0x4ec>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004696:	f7fe fad9 	bl	8002c4c <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469e:	f7fe fad5 	bl	8002c4c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e081      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b0:	4b43      	ldr	r3, [pc, #268]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	019b      	lsls	r3, r3, #6
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	3b01      	subs	r3, #1
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	061b      	lsls	r3, r3, #24
 80046e0:	4937      	ldr	r1, [pc, #220]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e6:	4b37      	ldr	r3, [pc, #220]	; (80047c4 <HAL_RCC_OscConfig+0x4ec>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fe faae 	bl	8002c4c <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fe faaa 	bl	8002c4c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e056      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	4b2e      	ldr	r3, [pc, #184]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0x41c>
 8004712:	e04e      	b.n	80047b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004714:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <HAL_RCC_OscConfig+0x4ec>)
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471a:	f7fe fa97 	bl	8002c4c <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004722:	f7fe fa93 	bl	8002c4c <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e03f      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004734:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f0      	bne.n	8004722 <HAL_RCC_OscConfig+0x44a>
 8004740:	e037      	b.n	80047b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e032      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800474e:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d028      	beq.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d121      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d11a      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800477e:	4013      	ands	r3, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004784:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004786:	4293      	cmp	r3, r2
 8004788:	d111      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	3b01      	subs	r3, #1
 8004798:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800479a:	429a      	cmp	r2, r3
 800479c:	d107      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d001      	beq.n	80047b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40007000 	.word	0x40007000
 80047c0:	40023800 	.word	0x40023800
 80047c4:	42470060 	.word	0x42470060

080047c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0cc      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047dc:	4b68      	ldr	r3, [pc, #416]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d90c      	bls.n	8004804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b65      	ldr	r3, [pc, #404]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b63      	ldr	r3, [pc, #396]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0b8      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800481c:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a58      	ldr	r2, [pc, #352]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004834:	4b53      	ldr	r3, [pc, #332]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a52      	ldr	r2, [pc, #328]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800483e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	494d      	ldr	r1, [pc, #308]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d044      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d107      	bne.n	8004876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d119      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e07f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d003      	beq.n	8004886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004882:	2b03      	cmp	r3, #3
 8004884:	d107      	bne.n	8004896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004886:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e06f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004896:	4b3b      	ldr	r3, [pc, #236]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e067      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048a6:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f023 0203 	bic.w	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	4934      	ldr	r1, [pc, #208]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048b8:	f7fe f9c8 	bl	8002c4c <HAL_GetTick>
 80048bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c0:	f7fe f9c4 	bl	8002c4c <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e04f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d6:	4b2b      	ldr	r3, [pc, #172]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 020c 	and.w	r2, r3, #12
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d1eb      	bne.n	80048c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d20c      	bcs.n	8004910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e032      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4916      	ldr	r1, [pc, #88]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	490e      	ldr	r1, [pc, #56]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800494e:	f000 f821 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004952:	4602      	mov	r2, r0
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	490a      	ldr	r1, [pc, #40]	; (8004988 <HAL_RCC_ClockConfig+0x1c0>)
 8004960:	5ccb      	ldrb	r3, [r1, r3]
 8004962:	fa22 f303 	lsr.w	r3, r2, r3
 8004966:	4a09      	ldr	r2, [pc, #36]	; (800498c <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_RCC_ClockConfig+0x1c8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe f928 	bl	8002bc4 <HAL_InitTick>

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023c00 	.word	0x40023c00
 8004984:	40023800 	.word	0x40023800
 8004988:	080070a4 	.word	0x080070a4
 800498c:	20000010 	.word	0x20000010
 8004990:	20000014 	.word	0x20000014

08004994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	2300      	movs	r3, #0
 80049a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ac:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 030c 	and.w	r3, r3, #12
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d00d      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x40>
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	f200 80bd 	bhi.w	8004b38 <HAL_RCC_GetSysClockFreq+0x1a4>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x34>
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d003      	beq.n	80049ce <HAL_RCC_GetSysClockFreq+0x3a>
 80049c6:	e0b7      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b61      	ldr	r3, [pc, #388]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049ca:	60bb      	str	r3, [r7, #8]
       break;
 80049cc:	e0b7      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ce:	4b61      	ldr	r3, [pc, #388]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049d0:	60bb      	str	r3, [r7, #8]
      break;
 80049d2:	e0b4      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d4:	4b5d      	ldr	r3, [pc, #372]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049de:	4b5b      	ldr	r3, [pc, #364]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d04d      	beq.n	8004a86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ea:	4b58      	ldr	r3, [pc, #352]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	099b      	lsrs	r3, r3, #6
 80049f0:	461a      	mov	r2, r3
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	ea02 0800 	and.w	r8, r2, r0
 8004a02:	ea03 0901 	and.w	r9, r3, r1
 8004a06:	4640      	mov	r0, r8
 8004a08:	4649      	mov	r1, r9
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	014b      	lsls	r3, r1, #5
 8004a14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a18:	0142      	lsls	r2, r0, #5
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	ebb0 0008 	subs.w	r0, r0, r8
 8004a22:	eb61 0109 	sbc.w	r1, r1, r9
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	018b      	lsls	r3, r1, #6
 8004a30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a34:	0182      	lsls	r2, r0, #6
 8004a36:	1a12      	subs	r2, r2, r0
 8004a38:	eb63 0301 	sbc.w	r3, r3, r1
 8004a3c:	f04f 0000 	mov.w	r0, #0
 8004a40:	f04f 0100 	mov.w	r1, #0
 8004a44:	00d9      	lsls	r1, r3, #3
 8004a46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a4a:	00d0      	lsls	r0, r2, #3
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	eb12 0208 	adds.w	r2, r2, r8
 8004a54:	eb43 0309 	adc.w	r3, r3, r9
 8004a58:	f04f 0000 	mov.w	r0, #0
 8004a5c:	f04f 0100 	mov.w	r1, #0
 8004a60:	0259      	lsls	r1, r3, #9
 8004a62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a66:	0250      	lsls	r0, r2, #9
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	f7fc f978 	bl	8000d6c <__aeabi_uldivmod>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4613      	mov	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e04a      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a86:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	099b      	lsrs	r3, r3, #6
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	ea02 0400 	and.w	r4, r2, r0
 8004a9e:	ea03 0501 	and.w	r5, r3, r1
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	014b      	lsls	r3, r1, #5
 8004ab0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ab4:	0142      	lsls	r2, r0, #5
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	1b00      	subs	r0, r0, r4
 8004abc:	eb61 0105 	sbc.w	r1, r1, r5
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	018b      	lsls	r3, r1, #6
 8004aca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ace:	0182      	lsls	r2, r0, #6
 8004ad0:	1a12      	subs	r2, r2, r0
 8004ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad6:	f04f 0000 	mov.w	r0, #0
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	00d9      	lsls	r1, r3, #3
 8004ae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ae4:	00d0      	lsls	r0, r2, #3
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	1912      	adds	r2, r2, r4
 8004aec:	eb45 0303 	adc.w	r3, r5, r3
 8004af0:	f04f 0000 	mov.w	r0, #0
 8004af4:	f04f 0100 	mov.w	r1, #0
 8004af8:	0299      	lsls	r1, r3, #10
 8004afa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004afe:	0290      	lsls	r0, r2, #10
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4610      	mov	r0, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	f7fc f92c 	bl	8000d6c <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	3301      	adds	r3, #1
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	60bb      	str	r3, [r7, #8]
      break;
 8004b36:	e002      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b3a:	60bb      	str	r3, [r7, #8]
      break;
 8004b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	00f42400 	.word	0x00f42400
 8004b54:	007a1200 	.word	0x007a1200

08004b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000010 	.word	0x20000010

08004b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b74:	f7ff fff0 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	0a9b      	lsrs	r3, r3, #10
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	4903      	ldr	r1, [pc, #12]	; (8004b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40023800 	.word	0x40023800
 8004b94:	080070b4 	.word	0x080070b4

08004b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b9c:	f7ff ffdc 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	0b5b      	lsrs	r3, r3, #13
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	4903      	ldr	r1, [pc, #12]	; (8004bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	080070b4 	.word	0x080070b4

08004bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e041      	b.n	8004c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fd fda2 	bl	8002730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f000 fcb2 	bl	8005568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d001      	beq.n	8004c78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e03c      	b.n	8004cf2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1e      	ldr	r2, [pc, #120]	; (8004d00 <HAL_TIM_Base_Start+0xa0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d018      	beq.n	8004cbc <HAL_TIM_Base_Start+0x5c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c92:	d013      	beq.n	8004cbc <HAL_TIM_Base_Start+0x5c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <HAL_TIM_Base_Start+0xa4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <HAL_TIM_Base_Start+0x5c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <HAL_TIM_Base_Start+0xa8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_TIM_Base_Start+0x5c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_TIM_Base_Start+0xac>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_TIM_Base_Start+0x5c>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a16      	ldr	r2, [pc, #88]	; (8004d10 <HAL_TIM_Base_Start+0xb0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d111      	bne.n	8004ce0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d010      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cde:	e007      	b.n	8004cf0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40014000 	.word	0x40014000

08004d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d001      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e044      	b.n	8004db6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x6c>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d56:	d013      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x6c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x6c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <HAL_TIM_Base_Start_IT+0xb8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x6c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x6c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a16      	ldr	r2, [pc, #88]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d111      	bne.n	8004da4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b06      	cmp	r3, #6
 8004d90:	d010      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	e007      	b.n	8004db4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800
 8004dd0:	40000c00 	.word	0x40000c00
 8004dd4:	40014000 	.word	0x40014000

08004dd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e041      	b.n	8004e6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f839 	bl	8004e76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f000 fba6 	bl	8005568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <HAL_TIM_PWM_Start+0x24>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	e022      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x6a>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d109      	bne.n	8004eca <HAL_TIM_PWM_Start+0x3e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	bf14      	ite	ne
 8004ec2:	2301      	movne	r3, #1
 8004ec4:	2300      	moveq	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	e015      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x6a>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d109      	bne.n	8004ee4 <HAL_TIM_PWM_Start+0x58>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	bf14      	ite	ne
 8004edc:	2301      	movne	r3, #1
 8004ede:	2300      	moveq	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	e008      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x6a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e068      	b.n	8004fd0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <HAL_TIM_PWM_Start+0x82>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f0c:	e013      	b.n	8004f36 <HAL_TIM_PWM_Start+0xaa>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Start+0x92>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f1c:	e00b      	b.n	8004f36 <HAL_TIM_PWM_Start+0xaa>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Start+0xa2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f2c:	e003      	b.n	8004f36 <HAL_TIM_PWM_Start+0xaa>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fdb8 	bl	8005ab4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a23      	ldr	r2, [pc, #140]	; (8004fd8 <HAL_TIM_PWM_Start+0x14c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d107      	bne.n	8004f5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1d      	ldr	r2, [pc, #116]	; (8004fd8 <HAL_TIM_PWM_Start+0x14c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d018      	beq.n	8004f9a <HAL_TIM_PWM_Start+0x10e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d013      	beq.n	8004f9a <HAL_TIM_PWM_Start+0x10e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a19      	ldr	r2, [pc, #100]	; (8004fdc <HAL_TIM_PWM_Start+0x150>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_TIM_PWM_Start+0x10e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <HAL_TIM_PWM_Start+0x154>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_TIM_PWM_Start+0x10e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <HAL_TIM_PWM_Start+0x158>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_TIM_PWM_Start+0x10e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a14      	ldr	r2, [pc, #80]	; (8004fe8 <HAL_TIM_PWM_Start+0x15c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d111      	bne.n	8004fbe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b06      	cmp	r3, #6
 8004faa:	d010      	beq.n	8004fce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbc:	e007      	b.n	8004fce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0201 	orr.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00
 8004fe8:	40014000 	.word	0x40014000

08004fec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e097      	b.n	8005130 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fd fbc1 	bl	800279c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005030:	f023 0307 	bic.w	r3, r3, #7
 8005034:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3304      	adds	r3, #4
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f000 fa91 	bl	8005568 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	4313      	orrs	r3, r2
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800508c:	f023 030c 	bic.w	r3, r3, #12
 8005090:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005098:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800509c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	4313      	orrs	r3, r2
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	011a      	lsls	r2, r3, #4
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	031b      	lsls	r3, r3, #12
 80050bc:	4313      	orrs	r3, r2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	4313      	orrs	r3, r2
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005148:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005150:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005158:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005160:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d110      	bne.n	800518a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d102      	bne.n	8005174 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800516e:	7b7b      	ldrb	r3, [r7, #13]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d001      	beq.n	8005178 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e069      	b.n	800524c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005188:	e031      	b.n	80051ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d110      	bne.n	80051b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005190:	7bbb      	ldrb	r3, [r7, #14]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d102      	bne.n	800519c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005196:	7b3b      	ldrb	r3, [r7, #12]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d001      	beq.n	80051a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e055      	b.n	800524c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051b0:	e01d      	b.n	80051ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d108      	bne.n	80051ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051b8:	7bbb      	ldrb	r3, [r7, #14]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d105      	bne.n	80051ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051be:	7b7b      	ldrb	r3, [r7, #13]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d102      	bne.n	80051ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051c4:	7b3b      	ldrb	r3, [r7, #12]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d001      	beq.n	80051ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e03e      	b.n	800524c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_TIM_Encoder_Start+0xc4>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d008      	beq.n	800520c <HAL_TIM_Encoder_Start+0xd4>
 80051fa:	e00f      	b.n	800521c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2201      	movs	r2, #1
 8005202:	2100      	movs	r1, #0
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fc55 	bl	8005ab4 <TIM_CCxChannelCmd>
      break;
 800520a:	e016      	b.n	800523a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2201      	movs	r2, #1
 8005212:	2104      	movs	r1, #4
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fc4d 	bl	8005ab4 <TIM_CCxChannelCmd>
      break;
 800521a:	e00e      	b.n	800523a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2201      	movs	r2, #1
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fc45 	bl	8005ab4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2201      	movs	r2, #1
 8005230:	2104      	movs	r1, #4
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fc3e 	bl	8005ab4 <TIM_CCxChannelCmd>
      break;
 8005238:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0201 	orr.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800526e:	2302      	movs	r3, #2
 8005270:	e0ae      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b0c      	cmp	r3, #12
 800527e:	f200 809f 	bhi.w	80053c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052bd 	.word	0x080052bd
 800528c:	080053c1 	.word	0x080053c1
 8005290:	080053c1 	.word	0x080053c1
 8005294:	080053c1 	.word	0x080053c1
 8005298:	080052fd 	.word	0x080052fd
 800529c:	080053c1 	.word	0x080053c1
 80052a0:	080053c1 	.word	0x080053c1
 80052a4:	080053c1 	.word	0x080053c1
 80052a8:	0800533f 	.word	0x0800533f
 80052ac:	080053c1 	.word	0x080053c1
 80052b0:	080053c1 	.word	0x080053c1
 80052b4:	080053c1 	.word	0x080053c1
 80052b8:	0800537f 	.word	0x0800537f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 f9d0 	bl	8005668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0208 	orr.w	r2, r2, #8
 80052d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0204 	bic.w	r2, r2, #4
 80052e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6999      	ldr	r1, [r3, #24]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	619a      	str	r2, [r3, #24]
      break;
 80052fa:	e064      	b.n	80053c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fa16 	bl	8005734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	619a      	str	r2, [r3, #24]
      break;
 800533c:	e043      	b.n	80053c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fa61 	bl	800580c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0208 	orr.w	r2, r2, #8
 8005358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0204 	bic.w	r2, r2, #4
 8005368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69d9      	ldr	r1, [r3, #28]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	61da      	str	r2, [r3, #28]
      break;
 800537c:	e023      	b.n	80053c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	4618      	mov	r0, r3
 8005386:	f000 faab 	bl	80058e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69d9      	ldr	r1, [r3, #28]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	021a      	lsls	r2, r3, #8
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	61da      	str	r2, [r3, #28]
      break;
 80053be:	e002      	b.n	80053c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	75fb      	strb	r3, [r7, #23]
      break;
 80053c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_TIM_ConfigClockSource+0x1c>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e0b4      	b.n	800555e <HAL_TIM_ConfigClockSource+0x186>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800541a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542c:	d03e      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0xd4>
 800542e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005432:	f200 8087 	bhi.w	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 8005436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543a:	f000 8086 	beq.w	800554a <HAL_TIM_ConfigClockSource+0x172>
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005442:	d87f      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 8005444:	2b70      	cmp	r3, #112	; 0x70
 8005446:	d01a      	beq.n	800547e <HAL_TIM_ConfigClockSource+0xa6>
 8005448:	2b70      	cmp	r3, #112	; 0x70
 800544a:	d87b      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 800544c:	2b60      	cmp	r3, #96	; 0x60
 800544e:	d050      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005450:	2b60      	cmp	r3, #96	; 0x60
 8005452:	d877      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 8005454:	2b50      	cmp	r3, #80	; 0x50
 8005456:	d03c      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005458:	2b50      	cmp	r3, #80	; 0x50
 800545a:	d873      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d058      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x13a>
 8005460:	2b40      	cmp	r3, #64	; 0x40
 8005462:	d86f      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 8005464:	2b30      	cmp	r3, #48	; 0x30
 8005466:	d064      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15a>
 8005468:	2b30      	cmp	r3, #48	; 0x30
 800546a:	d86b      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 800546c:	2b20      	cmp	r3, #32
 800546e:	d060      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15a>
 8005470:	2b20      	cmp	r3, #32
 8005472:	d867      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d05c      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15a>
 8005478:	2b10      	cmp	r3, #16
 800547a:	d05a      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15a>
 800547c:	e062      	b.n	8005544 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6899      	ldr	r1, [r3, #8]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f000 faf1 	bl	8005a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	609a      	str	r2, [r3, #8]
      break;
 80054aa:	e04f      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6899      	ldr	r1, [r3, #8]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f000 fada 	bl	8005a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ce:	609a      	str	r2, [r3, #8]
      break;
 80054d0:	e03c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6859      	ldr	r1, [r3, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	461a      	mov	r2, r3
 80054e0:	f000 fa4e 	bl	8005980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2150      	movs	r1, #80	; 0x50
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 faa7 	bl	8005a3e <TIM_ITRx_SetConfig>
      break;
 80054f0:	e02c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6859      	ldr	r1, [r3, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	461a      	mov	r2, r3
 8005500:	f000 fa6d 	bl	80059de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2160      	movs	r1, #96	; 0x60
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fa97 	bl	8005a3e <TIM_ITRx_SetConfig>
      break;
 8005510:	e01c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	6859      	ldr	r1, [r3, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	461a      	mov	r2, r3
 8005520:	f000 fa2e 	bl	8005980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2140      	movs	r1, #64	; 0x40
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fa87 	bl	8005a3e <TIM_ITRx_SetConfig>
      break;
 8005530:	e00c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f000 fa7e 	bl	8005a3e <TIM_ITRx_SetConfig>
      break;
 8005542:	e003      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
      break;
 8005548:	e000      	b.n	800554c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800554a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a34      	ldr	r2, [pc, #208]	; (800564c <TIM_Base_SetConfig+0xe4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00f      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005586:	d00b      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a31      	ldr	r2, [pc, #196]	; (8005650 <TIM_Base_SetConfig+0xe8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d007      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a30      	ldr	r2, [pc, #192]	; (8005654 <TIM_Base_SetConfig+0xec>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a2f      	ldr	r2, [pc, #188]	; (8005658 <TIM_Base_SetConfig+0xf0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d108      	bne.n	80055b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a25      	ldr	r2, [pc, #148]	; (800564c <TIM_Base_SetConfig+0xe4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01b      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c0:	d017      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a22      	ldr	r2, [pc, #136]	; (8005650 <TIM_Base_SetConfig+0xe8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a21      	ldr	r2, [pc, #132]	; (8005654 <TIM_Base_SetConfig+0xec>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00f      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a20      	ldr	r2, [pc, #128]	; (8005658 <TIM_Base_SetConfig+0xf0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00b      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a1f      	ldr	r2, [pc, #124]	; (800565c <TIM_Base_SetConfig+0xf4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a1e      	ldr	r2, [pc, #120]	; (8005660 <TIM_Base_SetConfig+0xf8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <TIM_Base_SetConfig+0xfc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d108      	bne.n	8005604 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <TIM_Base_SetConfig+0xe4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d103      	bne.n	8005638 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	615a      	str	r2, [r3, #20]
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40010000 	.word	0x40010000
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800
 8005658:	40000c00 	.word	0x40000c00
 800565c:	40014000 	.word	0x40014000
 8005660:	40014400 	.word	0x40014400
 8005664:	40014800 	.word	0x40014800

08005668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f023 0201 	bic.w	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f023 0302 	bic.w	r3, r3, #2
 80056b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a1c      	ldr	r2, [pc, #112]	; (8005730 <TIM_OC1_SetConfig+0xc8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d10c      	bne.n	80056de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f023 0308 	bic.w	r3, r3, #8
 80056ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f023 0304 	bic.w	r3, r3, #4
 80056dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a13      	ldr	r2, [pc, #76]	; (8005730 <TIM_OC1_SetConfig+0xc8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d111      	bne.n	800570a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	621a      	str	r2, [r3, #32]
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40010000 	.word	0x40010000

08005734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0210 	bic.w	r2, r3, #16
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0320 	bic.w	r3, r3, #32
 800577e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <TIM_OC2_SetConfig+0xd4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d10d      	bne.n	80057b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800579a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <TIM_OC2_SetConfig+0xd4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d113      	bne.n	80057e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40010000 	.word	0x40010000

0800580c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0303 	bic.w	r3, r3, #3
 8005842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <TIM_OC3_SetConfig+0xd0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d10d      	bne.n	8005886 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <TIM_OC3_SetConfig+0xd0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d113      	bne.n	80058b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800589c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	621a      	str	r2, [r3, #32]
}
 80058d0:	bf00      	nop
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	40010000 	.word	0x40010000

080058e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800592a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	031b      	lsls	r3, r3, #12
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a10      	ldr	r2, [pc, #64]	; (800597c <TIM_OC4_SetConfig+0x9c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d109      	bne.n	8005954 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	019b      	lsls	r3, r3, #6
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40010000 	.word	0x40010000

08005980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f023 0201 	bic.w	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f023 030a 	bic.w	r3, r3, #10
 80059bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	621a      	str	r2, [r3, #32]
}
 80059d2:	bf00      	nop
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059de:	b480      	push	{r7}
 80059e0:	b087      	sub	sp, #28
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f023 0210 	bic.w	r2, r3, #16
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	031b      	lsls	r3, r3, #12
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	621a      	str	r2, [r3, #32]
}
 8005a32:	bf00      	nop
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f043 0307 	orr.w	r3, r3, #7
 8005a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	609a      	str	r2, [r3, #8]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	021a      	lsls	r2, r3, #8
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	609a      	str	r2, [r3, #8]
}
 8005aa8:	bf00      	nop
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f003 031f 	and.w	r3, r3, #31
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a1a      	ldr	r2, [r3, #32]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	401a      	ands	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a1a      	ldr	r2, [r3, #32]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f003 031f 	and.w	r3, r3, #31
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aec:	431a      	orrs	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e050      	b.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1c      	ldr	r2, [pc, #112]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d018      	beq.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b64:	d013      	beq.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00e      	beq.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a16      	ldr	r2, [pc, #88]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d009      	beq.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d004      	beq.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40000c00 	.word	0x40000c00
 8005bd8:	40014000 	.word	0x40014000

08005bdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e03d      	b.n	8005c74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e03f      	b.n	8005d12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fc fdfa 	bl	80028a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2224      	movs	r2, #36	; 0x24
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fe6f 	bl	80069a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695a      	ldr	r2, [r3, #20]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	4613      	mov	r3, r2
 8005d26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d11d      	bne.n	8005d70 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <HAL_UART_Receive_DMA+0x26>
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e016      	b.n	8005d72 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_UART_Receive_DMA+0x38>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e00f      	b.n	8005d72 <HAL_UART_Receive_DMA+0x58>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	461a      	mov	r2, r3
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 fbc2 	bl	80064f0 <UART_Start_Receive_DMA>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	e000      	b.n	8005d72 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d70:	2302      	movs	r3, #2
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b0ba      	sub	sp, #232	; 0xe8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10f      	bne.n	8005de2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <HAL_UART_IRQHandler+0x66>
 8005dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fd29 	bl	8006832 <UART_Receive_IT>
      return;
 8005de0:	e256      	b.n	8006290 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80de 	beq.w	8005fa8 <HAL_UART_IRQHandler+0x22c>
 8005dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80d1 	beq.w	8005fa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <HAL_UART_IRQHandler+0xae>
 8005e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	f043 0201 	orr.w	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <HAL_UART_IRQHandler+0xd2>
 8005e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f043 0202 	orr.w	r2, r3, #2
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <HAL_UART_IRQHandler+0xf6>
 8005e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f043 0204 	orr.w	r2, r3, #4
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d011      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x126>
 8005e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d105      	bne.n	8005e96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f043 0208 	orr.w	r2, r3, #8
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 81ed 	beq.w	8006286 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_UART_IRQHandler+0x14e>
 8005eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fcb4 	bl	8006832 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	bf0c      	ite	eq
 8005ed8:	2301      	moveq	r3, #1
 8005eda:	2300      	movne	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d103      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x17a>
 8005eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d04f      	beq.n	8005f96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fbbc 	bl	8006674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	d141      	bne.n	8005f8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3314      	adds	r3, #20
 8005f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3314      	adds	r3, #20
 8005f32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1d9      	bne.n	8005f0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d013      	beq.n	8005f86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	4a7d      	ldr	r2, [pc, #500]	; (8006158 <HAL_UART_IRQHandler+0x3dc>)
 8005f64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fd f926 	bl	80031bc <HAL_DMA_Abort_IT>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d016      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f80:	4610      	mov	r0, r2
 8005f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f84:	e00e      	b.n	8005fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f9a4 	bl	80062d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8c:	e00a      	b.n	8005fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f9a0 	bl	80062d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f94:	e006      	b.n	8005fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f99c 	bl	80062d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fa2:	e170      	b.n	8006286 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa4:	bf00      	nop
    return;
 8005fa6:	e16e      	b.n	8006286 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	f040 814a 	bne.w	8006246 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8143 	beq.w	8006246 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 813c 	beq.w	8006246 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	f040 80b4 	bne.w	800615c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006000:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8140 	beq.w	800628a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800600e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006012:	429a      	cmp	r2, r3
 8006014:	f080 8139 	bcs.w	800628a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800601e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602a:	f000 8088 	beq.w	800613e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800604c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	330c      	adds	r3, #12
 8006056:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800605a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800605e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006066:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1d9      	bne.n	800602e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3314      	adds	r3, #20
 8006080:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800608a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3314      	adds	r3, #20
 800609a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800609e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e1      	bne.n	800607a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3314      	adds	r3, #20
 80060bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3314      	adds	r3, #20
 80060d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e3      	bne.n	80060b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	330c      	adds	r3, #12
 8006102:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800610c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800610e:	f023 0310 	bic.w	r3, r3, #16
 8006112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006120:	65ba      	str	r2, [r7, #88]	; 0x58
 8006122:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800612e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e3      	bne.n	80060fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	4618      	mov	r0, r3
 800613a:	f7fc ffcf 	bl	80030dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006146:	b29b      	uxth	r3, r3
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	b29b      	uxth	r3, r3
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f8ca 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006154:	e099      	b.n	800628a <HAL_UART_IRQHandler+0x50e>
 8006156:	bf00      	nop
 8006158:	0800673b 	.word	0x0800673b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006164:	b29b      	uxth	r3, r3
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 808b 	beq.w	800628e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006178:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8086 	beq.w	800628e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061a6:	647a      	str	r2, [r7, #68]	; 0x44
 80061a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e3      	bne.n	8006182 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3314      	adds	r3, #20
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	623b      	str	r3, [r7, #32]
   return(result);
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3314      	adds	r3, #20
 80061da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061de:	633a      	str	r2, [r7, #48]	; 0x30
 80061e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e3      	bne.n	80061ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0310 	bic.w	r3, r3, #16
 8006216:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	330c      	adds	r3, #12
 8006220:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006224:	61fa      	str	r2, [r7, #28]
 8006226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	69b9      	ldr	r1, [r7, #24]
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	617b      	str	r3, [r7, #20]
   return(result);
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e3      	bne.n	8006200 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f852 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006244:	e023      	b.n	800628e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624e:	2b00      	cmp	r3, #0
 8006250:	d009      	beq.n	8006266 <HAL_UART_IRQHandler+0x4ea>
 8006252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fa7f 	bl	8006762 <UART_Transmit_IT>
    return;
 8006264:	e014      	b.n	8006290 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00e      	beq.n	8006290 <HAL_UART_IRQHandler+0x514>
 8006272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d008      	beq.n	8006290 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fabf 	bl	8006802 <UART_EndTransmit_IT>
    return;
 8006284:	e004      	b.n	8006290 <HAL_UART_IRQHandler+0x514>
    return;
 8006286:	bf00      	nop
 8006288:	e002      	b.n	8006290 <HAL_UART_IRQHandler+0x514>
      return;
 800628a:	bf00      	nop
 800628c:	e000      	b.n	8006290 <HAL_UART_IRQHandler+0x514>
      return;
 800628e:	bf00      	nop
  }
}
 8006290:	37e8      	adds	r7, #232	; 0xe8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop

08006298 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b09c      	sub	sp, #112	; 0x70
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006318:	2b00      	cmp	r3, #0
 800631a:	d172      	bne.n	8006402 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800631c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800631e:	2200      	movs	r2, #0
 8006320:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006338:	66bb      	str	r3, [r7, #104]	; 0x68
 800633a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006342:	65ba      	str	r2, [r7, #88]	; 0x58
 8006344:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e5      	bne.n	8006322 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3314      	adds	r3, #20
 800635c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	667b      	str	r3, [r7, #100]	; 0x64
 800636e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3314      	adds	r3, #20
 8006374:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006376:	647a      	str	r2, [r7, #68]	; 0x44
 8006378:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800637c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e5      	bne.n	8006356 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	623b      	str	r3, [r7, #32]
   return(result);
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a0:	663b      	str	r3, [r7, #96]	; 0x60
 80063a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3314      	adds	r3, #20
 80063a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063aa:	633a      	str	r2, [r7, #48]	; 0x30
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e5      	bne.n	800638a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d119      	bne.n	8006402 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	330c      	adds	r3, #12
 80063d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f023 0310 	bic.w	r3, r3, #16
 80063e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	330c      	adds	r3, #12
 80063ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063ee:	61fa      	str	r2, [r7, #28]
 80063f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	69b9      	ldr	r1, [r7, #24]
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	617b      	str	r3, [r7, #20]
   return(result);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e5      	bne.n	80063ce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	2b01      	cmp	r3, #1
 8006408:	d106      	bne.n	8006418 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800640a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800640e:	4619      	mov	r1, r3
 8006410:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006412:	f7ff ff69 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006416:	e002      	b.n	800641e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006418:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800641a:	f7ff ff47 	bl	80062ac <HAL_UART_RxCpltCallback>
}
 800641e:	bf00      	nop
 8006420:	3770      	adds	r7, #112	; 0x70
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006438:	2b01      	cmp	r3, #1
 800643a:	d108      	bne.n	800644e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	b29b      	uxth	r3, r3
 8006444:	4619      	mov	r1, r3
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff ff4e 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800644c:	e002      	b.n	8006454 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7ff ff36 	bl	80062c0 <HAL_UART_RxHalfCpltCallback>
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006464:	2300      	movs	r3, #0
 8006466:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006478:	2b80      	cmp	r3, #128	; 0x80
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b21      	cmp	r3, #33	; 0x21
 800648e:	d108      	bne.n	80064a2 <UART_DMAError+0x46>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2200      	movs	r2, #0
 800649a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800649c:	68b8      	ldr	r0, [r7, #8]
 800649e:	f000 f8c1 	bl	8006624 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	bf0c      	ite	eq
 80064b0:	2301      	moveq	r3, #1
 80064b2:	2300      	movne	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b22      	cmp	r3, #34	; 0x22
 80064c2:	d108      	bne.n	80064d6 <UART_DMAError+0x7a>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2200      	movs	r2, #0
 80064ce:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80064d0:	68b8      	ldr	r0, [r7, #8]
 80064d2:	f000 f8cf 	bl	8006674 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	f043 0210 	orr.w	r2, r3, #16
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064e2:	68b8      	ldr	r0, [r7, #8]
 80064e4:	f7ff fef6 	bl	80062d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b098      	sub	sp, #96	; 0x60
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4613      	mov	r3, r2
 80064fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	88fa      	ldrh	r2, [r7, #6]
 8006508:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2222      	movs	r2, #34	; 0x22
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	4a3e      	ldr	r2, [pc, #248]	; (8006618 <UART_Start_Receive_DMA+0x128>)
 800651e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	4a3d      	ldr	r2, [pc, #244]	; (800661c <UART_Start_Receive_DMA+0x12c>)
 8006526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	4a3c      	ldr	r2, [pc, #240]	; (8006620 <UART_Start_Receive_DMA+0x130>)
 800652e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	2200      	movs	r2, #0
 8006536:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006538:	f107 0308 	add.w	r3, r7, #8
 800653c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	88fb      	ldrh	r3, [r7, #6]
 8006550:	f7fc fd6c 	bl	800302c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006554:	2300      	movs	r3, #0
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	330c      	adds	r3, #12
 8006578:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006588:	65bb      	str	r3, [r7, #88]	; 0x58
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006592:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006594:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80065a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e5      	bne.n	8006572 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3314      	adds	r3, #20
 80065ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	657b      	str	r3, [r7, #84]	; 0x54
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3314      	adds	r3, #20
 80065c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f0:	653b      	str	r3, [r7, #80]	; 0x50
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3314      	adds	r3, #20
 80065f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065fa:	627a      	str	r2, [r7, #36]	; 0x24
 80065fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6a39      	ldr	r1, [r7, #32]
 8006600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	61fb      	str	r3, [r7, #28]
   return(result);
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3760      	adds	r7, #96	; 0x60
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	08006301 	.word	0x08006301
 800661c:	08006427 	.word	0x08006427
 8006620:	0800645d 	.word	0x0800645d

08006624 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b089      	sub	sp, #36	; 0x24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	60bb      	str	r3, [r7, #8]
   return(result);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	61ba      	str	r2, [r7, #24]
 800664e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6979      	ldr	r1, [r7, #20]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	613b      	str	r3, [r7, #16]
   return(result);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e5      	bne.n	800662c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006668:	bf00      	nop
 800666a:	3724      	adds	r7, #36	; 0x24
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b095      	sub	sp, #84	; 0x54
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	330c      	adds	r3, #12
 8006682:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	330c      	adds	r3, #12
 800669a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800669c:	643a      	str	r2, [r7, #64]	; 0x40
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e5      	bne.n	800667c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3314      	adds	r3, #20
 80066b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	61fb      	str	r3, [r7, #28]
   return(result);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3314      	adds	r3, #20
 80066ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e5      	bne.n	80066b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d119      	bne.n	8006720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f023 0310 	bic.w	r3, r3, #16
 8006702:	647b      	str	r3, [r7, #68]	; 0x44
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800670c:	61ba      	str	r2, [r7, #24]
 800670e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6979      	ldr	r1, [r7, #20]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	613b      	str	r3, [r7, #16]
   return(result);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e5      	bne.n	80066ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800672e:	bf00      	nop
 8006730:	3754      	adds	r7, #84	; 0x54
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7ff fdbd 	bl	80062d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b21      	cmp	r3, #33	; 0x21
 8006774:	d13e      	bne.n	80067f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677e:	d114      	bne.n	80067aa <UART_Transmit_IT+0x48>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d110      	bne.n	80067aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800679c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	1c9a      	adds	r2, r3, #2
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	621a      	str	r2, [r3, #32]
 80067a8:	e008      	b.n	80067bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	1c59      	adds	r1, r3, #1
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6211      	str	r1, [r2, #32]
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4619      	mov	r1, r3
 80067ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10f      	bne.n	80067f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e000      	b.n	80067f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067f4:	2302      	movs	r3, #2
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006818:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff fd38 	bl	8006298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b08c      	sub	sp, #48	; 0x30
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b22      	cmp	r3, #34	; 0x22
 8006844:	f040 80ab 	bne.w	800699e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006850:	d117      	bne.n	8006882 <UART_Receive_IT+0x50>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d113      	bne.n	8006882 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006870:	b29a      	uxth	r2, r3
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	1c9a      	adds	r2, r3, #2
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	629a      	str	r2, [r3, #40]	; 0x28
 8006880:	e026      	b.n	80068d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006888:	2300      	movs	r3, #0
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006894:	d007      	beq.n	80068a6 <UART_Receive_IT+0x74>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <UART_Receive_IT+0x82>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	e008      	b.n	80068c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29b      	uxth	r3, r3
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	4619      	mov	r1, r3
 80068de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d15a      	bne.n	800699a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0220 	bic.w	r2, r2, #32
 80068f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0201 	bic.w	r2, r2, #1
 8006912:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	2b01      	cmp	r3, #1
 8006922:	d135      	bne.n	8006990 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	613b      	str	r3, [r7, #16]
   return(result);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f023 0310 	bic.w	r3, r3, #16
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	330c      	adds	r3, #12
 8006948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694a:	623a      	str	r2, [r7, #32]
 800694c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	69f9      	ldr	r1, [r7, #28]
 8006950:	6a3a      	ldr	r2, [r7, #32]
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	61bb      	str	r3, [r7, #24]
   return(result);
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e5      	bne.n	800692a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b10      	cmp	r3, #16
 800696a:	d10a      	bne.n	8006982 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff fcad 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
 800698e:	e002      	b.n	8006996 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff fc8b 	bl	80062ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	e002      	b.n	80069a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e000      	b.n	80069a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800699e:	2302      	movs	r3, #2
  }
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3730      	adds	r7, #48	; 0x30
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	b09f      	sub	sp, #124	; 0x7c
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069be:	68d9      	ldr	r1, [r3, #12]
 80069c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	ea40 0301 	orr.w	r3, r0, r1
 80069c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	431a      	orrs	r2, r3
 80069da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	4313      	orrs	r3, r2
 80069e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80069e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069ec:	f021 010c 	bic.w	r1, r1, #12
 80069f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069f6:	430b      	orrs	r3, r1
 80069f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a06:	6999      	ldr	r1, [r3, #24]
 8006a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	ea40 0301 	orr.w	r3, r0, r1
 8006a10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4bc5      	ldr	r3, [pc, #788]	; (8006d2c <UART_SetConfig+0x384>)
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d004      	beq.n	8006a26 <UART_SetConfig+0x7e>
 8006a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	4bc3      	ldr	r3, [pc, #780]	; (8006d30 <UART_SetConfig+0x388>)
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d103      	bne.n	8006a2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a26:	f7fe f8b7 	bl	8004b98 <HAL_RCC_GetPCLK2Freq>
 8006a2a:	6778      	str	r0, [r7, #116]	; 0x74
 8006a2c:	e002      	b.n	8006a34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a2e:	f7fe f89f 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 8006a32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a3c:	f040 80b6 	bne.w	8006bac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a42:	461c      	mov	r4, r3
 8006a44:	f04f 0500 	mov.w	r5, #0
 8006a48:	4622      	mov	r2, r4
 8006a4a:	462b      	mov	r3, r5
 8006a4c:	1891      	adds	r1, r2, r2
 8006a4e:	6439      	str	r1, [r7, #64]	; 0x40
 8006a50:	415b      	adcs	r3, r3
 8006a52:	647b      	str	r3, [r7, #68]	; 0x44
 8006a54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a58:	1912      	adds	r2, r2, r4
 8006a5a:	eb45 0303 	adc.w	r3, r5, r3
 8006a5e:	f04f 0000 	mov.w	r0, #0
 8006a62:	f04f 0100 	mov.w	r1, #0
 8006a66:	00d9      	lsls	r1, r3, #3
 8006a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a6c:	00d0      	lsls	r0, r2, #3
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	1911      	adds	r1, r2, r4
 8006a74:	6639      	str	r1, [r7, #96]	; 0x60
 8006a76:	416b      	adcs	r3, r5
 8006a78:	667b      	str	r3, [r7, #100]	; 0x64
 8006a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	1891      	adds	r1, r2, r2
 8006a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a88:	415b      	adcs	r3, r3
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006a94:	f7fa f96a 	bl	8000d6c <__aeabi_uldivmod>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4ba5      	ldr	r3, [pc, #660]	; (8006d34 <UART_SetConfig+0x38c>)
 8006a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	011e      	lsls	r6, r3, #4
 8006aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aa8:	461c      	mov	r4, r3
 8006aaa:	f04f 0500 	mov.w	r5, #0
 8006aae:	4622      	mov	r2, r4
 8006ab0:	462b      	mov	r3, r5
 8006ab2:	1891      	adds	r1, r2, r2
 8006ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8006ab6:	415b      	adcs	r3, r3
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006abe:	1912      	adds	r2, r2, r4
 8006ac0:	eb45 0303 	adc.w	r3, r5, r3
 8006ac4:	f04f 0000 	mov.w	r0, #0
 8006ac8:	f04f 0100 	mov.w	r1, #0
 8006acc:	00d9      	lsls	r1, r3, #3
 8006ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ad2:	00d0      	lsls	r0, r2, #3
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	1911      	adds	r1, r2, r4
 8006ada:	65b9      	str	r1, [r7, #88]	; 0x58
 8006adc:	416b      	adcs	r3, r5
 8006ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	1891      	adds	r1, r2, r2
 8006aec:	62b9      	str	r1, [r7, #40]	; 0x28
 8006aee:	415b      	adcs	r3, r3
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006af6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006afa:	f7fa f937 	bl	8000d6c <__aeabi_uldivmod>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4b8c      	ldr	r3, [pc, #560]	; (8006d34 <UART_SetConfig+0x38c>)
 8006b04:	fba3 1302 	umull	r1, r3, r3, r2
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	2164      	movs	r1, #100	; 0x64
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	3332      	adds	r3, #50	; 0x32
 8006b16:	4a87      	ldr	r2, [pc, #540]	; (8006d34 <UART_SetConfig+0x38c>)
 8006b18:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1c:	095b      	lsrs	r3, r3, #5
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b24:	441e      	add	r6, r3
 8006b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f04f 0100 	mov.w	r1, #0
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	1894      	adds	r4, r2, r2
 8006b34:	623c      	str	r4, [r7, #32]
 8006b36:	415b      	adcs	r3, r3
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b3e:	1812      	adds	r2, r2, r0
 8006b40:	eb41 0303 	adc.w	r3, r1, r3
 8006b44:	f04f 0400 	mov.w	r4, #0
 8006b48:	f04f 0500 	mov.w	r5, #0
 8006b4c:	00dd      	lsls	r5, r3, #3
 8006b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b52:	00d4      	lsls	r4, r2, #3
 8006b54:	4622      	mov	r2, r4
 8006b56:	462b      	mov	r3, r5
 8006b58:	1814      	adds	r4, r2, r0
 8006b5a:	653c      	str	r4, [r7, #80]	; 0x50
 8006b5c:	414b      	adcs	r3, r1
 8006b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8006b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	461a      	mov	r2, r3
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	1891      	adds	r1, r2, r2
 8006b6c:	61b9      	str	r1, [r7, #24]
 8006b6e:	415b      	adcs	r3, r3
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006b7a:	f7fa f8f7 	bl	8000d6c <__aeabi_uldivmod>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4b6c      	ldr	r3, [pc, #432]	; (8006d34 <UART_SetConfig+0x38c>)
 8006b84:	fba3 1302 	umull	r1, r3, r3, r2
 8006b88:	095b      	lsrs	r3, r3, #5
 8006b8a:	2164      	movs	r1, #100	; 0x64
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	3332      	adds	r3, #50	; 0x32
 8006b96:	4a67      	ldr	r2, [pc, #412]	; (8006d34 <UART_SetConfig+0x38c>)
 8006b98:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	f003 0207 	and.w	r2, r3, #7
 8006ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4432      	add	r2, r6
 8006ba8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006baa:	e0b9      	b.n	8006d20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bae:	461c      	mov	r4, r3
 8006bb0:	f04f 0500 	mov.w	r5, #0
 8006bb4:	4622      	mov	r2, r4
 8006bb6:	462b      	mov	r3, r5
 8006bb8:	1891      	adds	r1, r2, r2
 8006bba:	6139      	str	r1, [r7, #16]
 8006bbc:	415b      	adcs	r3, r3
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006bc4:	1912      	adds	r2, r2, r4
 8006bc6:	eb45 0303 	adc.w	r3, r5, r3
 8006bca:	f04f 0000 	mov.w	r0, #0
 8006bce:	f04f 0100 	mov.w	r1, #0
 8006bd2:	00d9      	lsls	r1, r3, #3
 8006bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bd8:	00d0      	lsls	r0, r2, #3
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	eb12 0804 	adds.w	r8, r2, r4
 8006be2:	eb43 0905 	adc.w	r9, r3, r5
 8006be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f04f 0100 	mov.w	r1, #0
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	008b      	lsls	r3, r1, #2
 8006bfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bfe:	0082      	lsls	r2, r0, #2
 8006c00:	4640      	mov	r0, r8
 8006c02:	4649      	mov	r1, r9
 8006c04:	f7fa f8b2 	bl	8000d6c <__aeabi_uldivmod>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4b49      	ldr	r3, [pc, #292]	; (8006d34 <UART_SetConfig+0x38c>)
 8006c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	011e      	lsls	r6, r3, #4
 8006c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f04f 0100 	mov.w	r1, #0
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	1894      	adds	r4, r2, r2
 8006c24:	60bc      	str	r4, [r7, #8]
 8006c26:	415b      	adcs	r3, r3
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c2e:	1812      	adds	r2, r2, r0
 8006c30:	eb41 0303 	adc.w	r3, r1, r3
 8006c34:	f04f 0400 	mov.w	r4, #0
 8006c38:	f04f 0500 	mov.w	r5, #0
 8006c3c:	00dd      	lsls	r5, r3, #3
 8006c3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c42:	00d4      	lsls	r4, r2, #3
 8006c44:	4622      	mov	r2, r4
 8006c46:	462b      	mov	r3, r5
 8006c48:	1814      	adds	r4, r2, r0
 8006c4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006c4c:	414b      	adcs	r3, r1
 8006c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f04f 0100 	mov.w	r1, #0
 8006c5a:	f04f 0200 	mov.w	r2, #0
 8006c5e:	f04f 0300 	mov.w	r3, #0
 8006c62:	008b      	lsls	r3, r1, #2
 8006c64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c68:	0082      	lsls	r2, r0, #2
 8006c6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006c6e:	f7fa f87d 	bl	8000d6c <__aeabi_uldivmod>
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	4b2f      	ldr	r3, [pc, #188]	; (8006d34 <UART_SetConfig+0x38c>)
 8006c78:	fba3 1302 	umull	r1, r3, r3, r2
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	2164      	movs	r1, #100	; 0x64
 8006c80:	fb01 f303 	mul.w	r3, r1, r3
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	3332      	adds	r3, #50	; 0x32
 8006c8a:	4a2a      	ldr	r2, [pc, #168]	; (8006d34 <UART_SetConfig+0x38c>)
 8006c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c96:	441e      	add	r6, r3
 8006c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f04f 0100 	mov.w	r1, #0
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	1894      	adds	r4, r2, r2
 8006ca6:	603c      	str	r4, [r7, #0]
 8006ca8:	415b      	adcs	r3, r3
 8006caa:	607b      	str	r3, [r7, #4]
 8006cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb0:	1812      	adds	r2, r2, r0
 8006cb2:	eb41 0303 	adc.w	r3, r1, r3
 8006cb6:	f04f 0400 	mov.w	r4, #0
 8006cba:	f04f 0500 	mov.w	r5, #0
 8006cbe:	00dd      	lsls	r5, r3, #3
 8006cc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006cc4:	00d4      	lsls	r4, r2, #3
 8006cc6:	4622      	mov	r2, r4
 8006cc8:	462b      	mov	r3, r5
 8006cca:	eb12 0a00 	adds.w	sl, r2, r0
 8006cce:	eb43 0b01 	adc.w	fp, r3, r1
 8006cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f04f 0100 	mov.w	r1, #0
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	008b      	lsls	r3, r1, #2
 8006ce6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006cea:	0082      	lsls	r2, r0, #2
 8006cec:	4650      	mov	r0, sl
 8006cee:	4659      	mov	r1, fp
 8006cf0:	f7fa f83c 	bl	8000d6c <__aeabi_uldivmod>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4b0e      	ldr	r3, [pc, #56]	; (8006d34 <UART_SetConfig+0x38c>)
 8006cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8006cfe:	095b      	lsrs	r3, r3, #5
 8006d00:	2164      	movs	r1, #100	; 0x64
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	3332      	adds	r3, #50	; 0x32
 8006d0c:	4a09      	ldr	r2, [pc, #36]	; (8006d34 <UART_SetConfig+0x38c>)
 8006d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	f003 020f 	and.w	r2, r3, #15
 8006d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4432      	add	r2, r6
 8006d1e:	609a      	str	r2, [r3, #8]
}
 8006d20:	bf00      	nop
 8006d22:	377c      	adds	r7, #124	; 0x7c
 8006d24:	46bd      	mov	sp, r7
 8006d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d2a:	bf00      	nop
 8006d2c:	40011000 	.word	0x40011000
 8006d30:	40011400 	.word	0x40011400
 8006d34:	51eb851f 	.word	0x51eb851f

08006d38 <calloc>:
 8006d38:	4b02      	ldr	r3, [pc, #8]	; (8006d44 <calloc+0xc>)
 8006d3a:	460a      	mov	r2, r1
 8006d3c:	4601      	mov	r1, r0
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	f000 b834 	b.w	8006dac <_calloc_r>
 8006d44:	2000001c 	.word	0x2000001c

08006d48 <__errno>:
 8006d48:	4b01      	ldr	r3, [pc, #4]	; (8006d50 <__errno+0x8>)
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	2000001c 	.word	0x2000001c

08006d54 <__libc_init_array>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	4d0d      	ldr	r5, [pc, #52]	; (8006d8c <__libc_init_array+0x38>)
 8006d58:	4c0d      	ldr	r4, [pc, #52]	; (8006d90 <__libc_init_array+0x3c>)
 8006d5a:	1b64      	subs	r4, r4, r5
 8006d5c:	10a4      	asrs	r4, r4, #2
 8006d5e:	2600      	movs	r6, #0
 8006d60:	42a6      	cmp	r6, r4
 8006d62:	d109      	bne.n	8006d78 <__libc_init_array+0x24>
 8006d64:	4d0b      	ldr	r5, [pc, #44]	; (8006d94 <__libc_init_array+0x40>)
 8006d66:	4c0c      	ldr	r4, [pc, #48]	; (8006d98 <__libc_init_array+0x44>)
 8006d68:	f000 f990 	bl	800708c <_init>
 8006d6c:	1b64      	subs	r4, r4, r5
 8006d6e:	10a4      	asrs	r4, r4, #2
 8006d70:	2600      	movs	r6, #0
 8006d72:	42a6      	cmp	r6, r4
 8006d74:	d105      	bne.n	8006d82 <__libc_init_array+0x2e>
 8006d76:	bd70      	pop	{r4, r5, r6, pc}
 8006d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7c:	4798      	blx	r3
 8006d7e:	3601      	adds	r6, #1
 8006d80:	e7ee      	b.n	8006d60 <__libc_init_array+0xc>
 8006d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d86:	4798      	blx	r3
 8006d88:	3601      	adds	r6, #1
 8006d8a:	e7f2      	b.n	8006d72 <__libc_init_array+0x1e>
 8006d8c:	080070cc 	.word	0x080070cc
 8006d90:	080070cc 	.word	0x080070cc
 8006d94:	080070cc 	.word	0x080070cc
 8006d98:	080070d0 	.word	0x080070d0

08006d9c <memset>:
 8006d9c:	4402      	add	r2, r0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d100      	bne.n	8006da6 <memset+0xa>
 8006da4:	4770      	bx	lr
 8006da6:	f803 1b01 	strb.w	r1, [r3], #1
 8006daa:	e7f9      	b.n	8006da0 <memset+0x4>

08006dac <_calloc_r>:
 8006dac:	b513      	push	{r0, r1, r4, lr}
 8006dae:	434a      	muls	r2, r1
 8006db0:	4611      	mov	r1, r2
 8006db2:	9201      	str	r2, [sp, #4]
 8006db4:	f000 f80a 	bl	8006dcc <_malloc_r>
 8006db8:	4604      	mov	r4, r0
 8006dba:	b118      	cbz	r0, 8006dc4 <_calloc_r+0x18>
 8006dbc:	9a01      	ldr	r2, [sp, #4]
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	f7ff ffec 	bl	8006d9c <memset>
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	b002      	add	sp, #8
 8006dc8:	bd10      	pop	{r4, pc}
	...

08006dcc <_malloc_r>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	1ccd      	adds	r5, r1, #3
 8006dd0:	f025 0503 	bic.w	r5, r5, #3
 8006dd4:	3508      	adds	r5, #8
 8006dd6:	2d0c      	cmp	r5, #12
 8006dd8:	bf38      	it	cc
 8006dda:	250c      	movcc	r5, #12
 8006ddc:	2d00      	cmp	r5, #0
 8006dde:	4606      	mov	r6, r0
 8006de0:	db01      	blt.n	8006de6 <_malloc_r+0x1a>
 8006de2:	42a9      	cmp	r1, r5
 8006de4:	d903      	bls.n	8006dee <_malloc_r+0x22>
 8006de6:	230c      	movs	r3, #12
 8006de8:	6033      	str	r3, [r6, #0]
 8006dea:	2000      	movs	r0, #0
 8006dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dee:	f000 f857 	bl	8006ea0 <__malloc_lock>
 8006df2:	4921      	ldr	r1, [pc, #132]	; (8006e78 <_malloc_r+0xac>)
 8006df4:	680a      	ldr	r2, [r1, #0]
 8006df6:	4614      	mov	r4, r2
 8006df8:	b99c      	cbnz	r4, 8006e22 <_malloc_r+0x56>
 8006dfa:	4f20      	ldr	r7, [pc, #128]	; (8006e7c <_malloc_r+0xb0>)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	b923      	cbnz	r3, 8006e0a <_malloc_r+0x3e>
 8006e00:	4621      	mov	r1, r4
 8006e02:	4630      	mov	r0, r6
 8006e04:	f000 f83c 	bl	8006e80 <_sbrk_r>
 8006e08:	6038      	str	r0, [r7, #0]
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f000 f837 	bl	8006e80 <_sbrk_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	d123      	bne.n	8006e5e <_malloc_r+0x92>
 8006e16:	230c      	movs	r3, #12
 8006e18:	6033      	str	r3, [r6, #0]
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f000 f846 	bl	8006eac <__malloc_unlock>
 8006e20:	e7e3      	b.n	8006dea <_malloc_r+0x1e>
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	1b5b      	subs	r3, r3, r5
 8006e26:	d417      	bmi.n	8006e58 <_malloc_r+0x8c>
 8006e28:	2b0b      	cmp	r3, #11
 8006e2a:	d903      	bls.n	8006e34 <_malloc_r+0x68>
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	441c      	add	r4, r3
 8006e30:	6025      	str	r5, [r4, #0]
 8006e32:	e004      	b.n	8006e3e <_malloc_r+0x72>
 8006e34:	6863      	ldr	r3, [r4, #4]
 8006e36:	42a2      	cmp	r2, r4
 8006e38:	bf0c      	ite	eq
 8006e3a:	600b      	streq	r3, [r1, #0]
 8006e3c:	6053      	strne	r3, [r2, #4]
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f000 f834 	bl	8006eac <__malloc_unlock>
 8006e44:	f104 000b 	add.w	r0, r4, #11
 8006e48:	1d23      	adds	r3, r4, #4
 8006e4a:	f020 0007 	bic.w	r0, r0, #7
 8006e4e:	1ac2      	subs	r2, r0, r3
 8006e50:	d0cc      	beq.n	8006dec <_malloc_r+0x20>
 8006e52:	1a1b      	subs	r3, r3, r0
 8006e54:	50a3      	str	r3, [r4, r2]
 8006e56:	e7c9      	b.n	8006dec <_malloc_r+0x20>
 8006e58:	4622      	mov	r2, r4
 8006e5a:	6864      	ldr	r4, [r4, #4]
 8006e5c:	e7cc      	b.n	8006df8 <_malloc_r+0x2c>
 8006e5e:	1cc4      	adds	r4, r0, #3
 8006e60:	f024 0403 	bic.w	r4, r4, #3
 8006e64:	42a0      	cmp	r0, r4
 8006e66:	d0e3      	beq.n	8006e30 <_malloc_r+0x64>
 8006e68:	1a21      	subs	r1, r4, r0
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f000 f808 	bl	8006e80 <_sbrk_r>
 8006e70:	3001      	adds	r0, #1
 8006e72:	d1dd      	bne.n	8006e30 <_malloc_r+0x64>
 8006e74:	e7cf      	b.n	8006e16 <_malloc_r+0x4a>
 8006e76:	bf00      	nop
 8006e78:	20000130 	.word	0x20000130
 8006e7c:	20000134 	.word	0x20000134

08006e80 <_sbrk_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4d06      	ldr	r5, [pc, #24]	; (8006e9c <_sbrk_r+0x1c>)
 8006e84:	2300      	movs	r3, #0
 8006e86:	4604      	mov	r4, r0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	602b      	str	r3, [r5, #0]
 8006e8c:	f7fb fe06 	bl	8002a9c <_sbrk>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_sbrk_r+0x1a>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_sbrk_r+0x1a>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	200003e8 	.word	0x200003e8

08006ea0 <__malloc_lock>:
 8006ea0:	4801      	ldr	r0, [pc, #4]	; (8006ea8 <__malloc_lock+0x8>)
 8006ea2:	f000 b809 	b.w	8006eb8 <__retarget_lock_acquire_recursive>
 8006ea6:	bf00      	nop
 8006ea8:	200003f0 	.word	0x200003f0

08006eac <__malloc_unlock>:
 8006eac:	4801      	ldr	r0, [pc, #4]	; (8006eb4 <__malloc_unlock+0x8>)
 8006eae:	f000 b804 	b.w	8006eba <__retarget_lock_release_recursive>
 8006eb2:	bf00      	nop
 8006eb4:	200003f0 	.word	0x200003f0

08006eb8 <__retarget_lock_acquire_recursive>:
 8006eb8:	4770      	bx	lr

08006eba <__retarget_lock_release_recursive>:
 8006eba:	4770      	bx	lr

08006ebc <sqrt>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	ed2d 8b02 	vpush	{d8}
 8006ec2:	ec55 4b10 	vmov	r4, r5, d0
 8006ec6:	f000 f82d 	bl	8006f24 <__ieee754_sqrt>
 8006eca:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <sqrt+0x64>)
 8006ecc:	eeb0 8a40 	vmov.f32	s16, s0
 8006ed0:	eef0 8a60 	vmov.f32	s17, s1
 8006ed4:	f993 3000 	ldrsb.w	r3, [r3]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	d019      	beq.n	8006f10 <sqrt+0x54>
 8006edc:	4622      	mov	r2, r4
 8006ede:	462b      	mov	r3, r5
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	f7f9 fdce 	bl	8000a84 <__aeabi_dcmpun>
 8006ee8:	b990      	cbnz	r0, 8006f10 <sqrt+0x54>
 8006eea:	2200      	movs	r2, #0
 8006eec:	2300      	movs	r3, #0
 8006eee:	4620      	mov	r0, r4
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	f7f9 fd9f 	bl	8000a34 <__aeabi_dcmplt>
 8006ef6:	b158      	cbz	r0, 8006f10 <sqrt+0x54>
 8006ef8:	f7ff ff26 	bl	8006d48 <__errno>
 8006efc:	2321      	movs	r3, #33	; 0x21
 8006efe:	6003      	str	r3, [r0, #0]
 8006f00:	2200      	movs	r2, #0
 8006f02:	2300      	movs	r3, #0
 8006f04:	4610      	mov	r0, r2
 8006f06:	4619      	mov	r1, r3
 8006f08:	f7f9 fc4c 	bl	80007a4 <__aeabi_ddiv>
 8006f0c:	ec41 0b18 	vmov	d8, r0, r1
 8006f10:	eeb0 0a48 	vmov.f32	s0, s16
 8006f14:	eef0 0a68 	vmov.f32	s1, s17
 8006f18:	ecbd 8b02 	vpop	{d8}
 8006f1c:	bd38      	pop	{r3, r4, r5, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000080 	.word	0x20000080

08006f24 <__ieee754_sqrt>:
 8006f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f28:	ec55 4b10 	vmov	r4, r5, d0
 8006f2c:	4e56      	ldr	r6, [pc, #344]	; (8007088 <__ieee754_sqrt+0x164>)
 8006f2e:	43ae      	bics	r6, r5
 8006f30:	ee10 0a10 	vmov	r0, s0
 8006f34:	ee10 3a10 	vmov	r3, s0
 8006f38:	4629      	mov	r1, r5
 8006f3a:	462a      	mov	r2, r5
 8006f3c:	d110      	bne.n	8006f60 <__ieee754_sqrt+0x3c>
 8006f3e:	ee10 2a10 	vmov	r2, s0
 8006f42:	462b      	mov	r3, r5
 8006f44:	f7f9 fb04 	bl	8000550 <__aeabi_dmul>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 f948 	bl	80001e4 <__adddf3>
 8006f54:	4604      	mov	r4, r0
 8006f56:	460d      	mov	r5, r1
 8006f58:	ec45 4b10 	vmov	d0, r4, r5
 8006f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f60:	2d00      	cmp	r5, #0
 8006f62:	dc10      	bgt.n	8006f86 <__ieee754_sqrt+0x62>
 8006f64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006f68:	4330      	orrs	r0, r6
 8006f6a:	d0f5      	beq.n	8006f58 <__ieee754_sqrt+0x34>
 8006f6c:	b15d      	cbz	r5, 8006f86 <__ieee754_sqrt+0x62>
 8006f6e:	ee10 2a10 	vmov	r2, s0
 8006f72:	462b      	mov	r3, r5
 8006f74:	ee10 0a10 	vmov	r0, s0
 8006f78:	f7f9 f932 	bl	80001e0 <__aeabi_dsub>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	f7f9 fc10 	bl	80007a4 <__aeabi_ddiv>
 8006f84:	e7e6      	b.n	8006f54 <__ieee754_sqrt+0x30>
 8006f86:	1509      	asrs	r1, r1, #20
 8006f88:	d076      	beq.n	8007078 <__ieee754_sqrt+0x154>
 8006f8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006f8e:	07ce      	lsls	r6, r1, #31
 8006f90:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006f94:	bf5e      	ittt	pl
 8006f96:	0fda      	lsrpl	r2, r3, #31
 8006f98:	005b      	lslpl	r3, r3, #1
 8006f9a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006f9e:	0fda      	lsrs	r2, r3, #31
 8006fa0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006fa4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006fa8:	2000      	movs	r0, #0
 8006faa:	106d      	asrs	r5, r5, #1
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	f04f 0e16 	mov.w	lr, #22
 8006fb2:	4684      	mov	ip, r0
 8006fb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fb8:	eb0c 0401 	add.w	r4, ip, r1
 8006fbc:	4294      	cmp	r4, r2
 8006fbe:	bfde      	ittt	le
 8006fc0:	1b12      	suble	r2, r2, r4
 8006fc2:	eb04 0c01 	addle.w	ip, r4, r1
 8006fc6:	1840      	addle	r0, r0, r1
 8006fc8:	0052      	lsls	r2, r2, #1
 8006fca:	f1be 0e01 	subs.w	lr, lr, #1
 8006fce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006fd2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006fd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006fda:	d1ed      	bne.n	8006fb8 <__ieee754_sqrt+0x94>
 8006fdc:	4671      	mov	r1, lr
 8006fde:	2720      	movs	r7, #32
 8006fe0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006fe4:	4562      	cmp	r2, ip
 8006fe6:	eb04 060e 	add.w	r6, r4, lr
 8006fea:	dc02      	bgt.n	8006ff2 <__ieee754_sqrt+0xce>
 8006fec:	d113      	bne.n	8007016 <__ieee754_sqrt+0xf2>
 8006fee:	429e      	cmp	r6, r3
 8006ff0:	d811      	bhi.n	8007016 <__ieee754_sqrt+0xf2>
 8006ff2:	2e00      	cmp	r6, #0
 8006ff4:	eb06 0e04 	add.w	lr, r6, r4
 8006ff8:	da43      	bge.n	8007082 <__ieee754_sqrt+0x15e>
 8006ffa:	f1be 0f00 	cmp.w	lr, #0
 8006ffe:	db40      	blt.n	8007082 <__ieee754_sqrt+0x15e>
 8007000:	f10c 0801 	add.w	r8, ip, #1
 8007004:	eba2 020c 	sub.w	r2, r2, ip
 8007008:	429e      	cmp	r6, r3
 800700a:	bf88      	it	hi
 800700c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007010:	1b9b      	subs	r3, r3, r6
 8007012:	4421      	add	r1, r4
 8007014:	46c4      	mov	ip, r8
 8007016:	0052      	lsls	r2, r2, #1
 8007018:	3f01      	subs	r7, #1
 800701a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800701e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007022:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007026:	d1dd      	bne.n	8006fe4 <__ieee754_sqrt+0xc0>
 8007028:	4313      	orrs	r3, r2
 800702a:	d006      	beq.n	800703a <__ieee754_sqrt+0x116>
 800702c:	1c4c      	adds	r4, r1, #1
 800702e:	bf13      	iteet	ne
 8007030:	3101      	addne	r1, #1
 8007032:	3001      	addeq	r0, #1
 8007034:	4639      	moveq	r1, r7
 8007036:	f021 0101 	bicne.w	r1, r1, #1
 800703a:	1043      	asrs	r3, r0, #1
 800703c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007040:	0849      	lsrs	r1, r1, #1
 8007042:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007046:	07c2      	lsls	r2, r0, #31
 8007048:	bf48      	it	mi
 800704a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800704e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007052:	460c      	mov	r4, r1
 8007054:	463d      	mov	r5, r7
 8007056:	e77f      	b.n	8006f58 <__ieee754_sqrt+0x34>
 8007058:	0ada      	lsrs	r2, r3, #11
 800705a:	3815      	subs	r0, #21
 800705c:	055b      	lsls	r3, r3, #21
 800705e:	2a00      	cmp	r2, #0
 8007060:	d0fa      	beq.n	8007058 <__ieee754_sqrt+0x134>
 8007062:	02d7      	lsls	r7, r2, #11
 8007064:	d50a      	bpl.n	800707c <__ieee754_sqrt+0x158>
 8007066:	f1c1 0420 	rsb	r4, r1, #32
 800706a:	fa23 f404 	lsr.w	r4, r3, r4
 800706e:	1e4d      	subs	r5, r1, #1
 8007070:	408b      	lsls	r3, r1
 8007072:	4322      	orrs	r2, r4
 8007074:	1b41      	subs	r1, r0, r5
 8007076:	e788      	b.n	8006f8a <__ieee754_sqrt+0x66>
 8007078:	4608      	mov	r0, r1
 800707a:	e7f0      	b.n	800705e <__ieee754_sqrt+0x13a>
 800707c:	0052      	lsls	r2, r2, #1
 800707e:	3101      	adds	r1, #1
 8007080:	e7ef      	b.n	8007062 <__ieee754_sqrt+0x13e>
 8007082:	46e0      	mov	r8, ip
 8007084:	e7be      	b.n	8007004 <__ieee754_sqrt+0xe0>
 8007086:	bf00      	nop
 8007088:	7ff00000 	.word	0x7ff00000

0800708c <_init>:
 800708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708e:	bf00      	nop
 8007090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007092:	bc08      	pop	{r3}
 8007094:	469e      	mov	lr, r3
 8007096:	4770      	bx	lr

08007098 <_fini>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	bf00      	nop
 800709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709e:	bc08      	pop	{r3}
 80070a0:	469e      	mov	lr, r3
 80070a2:	4770      	bx	lr
